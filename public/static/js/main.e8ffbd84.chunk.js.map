{"version":3,"sources":["reducer/jungleSwapSlice.ts","app/config.ts","app/store.ts","app/hooks.ts","app/custom-hooks/useMessage.ts","app/custom-hooks/useIntervalCounter.ts","components/navigation/NavAuthentificationItems.tsx","components/navigation/NavUserItems.tsx","components/navigation/NavAdditionalItems.tsx","components/helpers/SelectLanguage.tsx","components/navigation/NavBar.tsx","components/Footer.tsx","lib/externalLinkPaths.ts","app/custom-hooks/usePlant.ts","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/home/HomeAbout.tsx","components/spinners/WaitSpinner.tsx","components/plants/PlantSearch.tsx","components/plants/PlantThumbnail.tsx","components/plants/PlantsCollection.tsx","components/plants/PlantsCockpit.tsx","components/home/HomeTitle.tsx","views/home/Home.tsx","app/custom-hooks/useAuthentification.ts","components/helpers/ErrorMessage.tsx","views/authentification/SignUp.tsx","views/authentification/SignIn.tsx","components/authentification/LogOut.tsx","app/custom-hooks/useRouting.ts","app/custom-hooks/usePlantImage.ts","components/helpers/GoBackButton.tsx","views/plants/PlantCreateForm.tsx","components/plants/PlantDetailsBuyerChoice.tsx","components/plants/PlantDetailsCreatorChoice.tsx","components/plants/PlantDetailsUserChoice.tsx","components/plants/PlantItem.tsx","components/plants/PlantItems.tsx","views/plants/PlantDetails.tsx","views/plants/PlantUpdateForm.tsx","app/custom-hooks/useNavigation.ts","components/apis/PaymentErrorMessage.tsx","components/apis/PaymentCheckoutForm.tsx","app/custom-hooks/usePayment.ts","views/apis/PaymentCheckoutView.tsx","components/requests/RequestTile.tsx","components/requests/RequestsCollection.tsx","views/requests/RequestsView.tsx","components/replies/ReplyTile.tsx","components/replies/RepliesCollection.tsx","views/replies/RepliesView.tsx","views/requests/RequestCreateForm.tsx","components/spinners/WaitSpinnerText.tsx","components/replies/Reply.tsx","views/requests/RequestDetails.tsx","views/replies/ReplyDetails.tsx","views/requests/RequestUpdateForm.tsx","views/authentification/Unauthorized.tsx","views/errors/NotFound.tsx","components/apis/KommunicateChat.tsx","app/custom-hooks/useChat.ts","components/plants/PlantsCreatedCollection.tsx","views/plants/PlantsCreatedView.tsx","components/modals/ModalBody.tsx","components/modals/ErrorModal.tsx","components/modals/OfflineModal.tsx","components/modals/Modals.tsx","app/custom-hooks/useOnlineStatus.ts","App.tsx","app/i18next.config.ts","index.tsx"],"names":["apiPath","process","rejectWithValue","data","Error","signUp","createAsyncThunk","newUser","a","axios","post","error","response","signIn","user","withCredentials","logOut","checkUserLoggedIn","get","createPlant","newPlant","fetchAllPlants","fetchQueryPlants","query","fetchPlant","plantId","updatePlant","updatedPlant","patch","deletePlant","delete","uploadPlantImage","uploadForm","deletePlantImage","destroyImageData","createPayment","price","createMessage","newMessage","fetchAllMessages","fetchMessage","messageId","updateMessage","updatedMessage","deleteMessage","jungleSwapSlice","createSlice","name","initialState","isUserChange","loggedInUser","isCreatingPlant","isFetchingPlants","isFetchingPlant","isUpdatingPlant","isDeletingPlant","plant","plants","filteredPlants","numberOfVisibleEntries","isUploadingPlantImage","isDeletingPlantImage","clientSecret","isCreatingMessage","isFetchingMessages","isFetchingMessage","isUpdatingMessage","isDeletingMessage","messages","message","isNewRequest","isNewReply","amountOfRequests","amountOfReplies","intervalId","delayCounter","titleSectionHeight","aboutSectionHeight","errorMessage","reducers","setIsUserChange","state","payload","setLoggedInUser","setIsCreatingPlant","setIsFetchingPlants","setIsFetchingPlant","setIsUpdatingPlant","setIsDeletingPlant","addPlant","push","setPlant","setPlants","setFilteredPlants","setPlantChanges","_id","description","size","imageUrl","imagePublicId","location","map","singlePlant","removePlant","filter","setNumberOfVisibleEntries","setIsUploadingPlantImage","setIsDeletingPlantImage","setDestroyImageData","setClientSecret","setIsCreatingMessage","setIsFetchingMessages","setIsFetchingMessage","setIsUpdatingMessage","setIsDeletingMessage","addMessage","setMessages","setMessage","setMessageChanges","buyer","seller","request","reply","messageState","singleMessage","removeMessage","setIsNewRequest","setIsNewReply","setStartAmountOfRequests","setStartAmountOfReplies","setAmountOfRequests","setAmountOfReplies","decreaseAmountOfRequests","decreaseAmountOfReplies","setIntervalId","setDelayCounter","increaseDelayCounter","setTitleSectionHeight","setAboutSectionHeight","scrollToAbout","scroll","scrollTo","scrollToPlants","setErrorMessage","extraReducers","builder","addCase","fulfilled","rejected","selectors","jungleSwap","actions","selectIsUserChange","selectLoggedInUser","selectIsCreatingPlant","selectIsFetchingPlants","selectIsFetchingPlant","selectIsUpdatingPlant","selectIsDeletingPlant","selectPlant","selectPlants","selectfFilteredPlants","selectNumberOfVisibleEntries","selectIsUploadingPlantImage","selectIsDeletingPlantImage","selectDestroyImageData","selectClientSecret","selectIsCreatingMessage","selectiIsFetchingMessages","selectIsFetchingMessage","selectIsUpdatingMessage","selectIsDeletingMessage","selectMessages","selectMessage","selectIsNewRequest","selectIsNewReply","selectAmountOfRequests","selectAmountOfReplies","selectIntervalId","selectDelayCounter","selectErrorMessage","store","configureStore","reducer","useAppDispatch","useDispatch","useAppSelector","useSelector","useMessage","dispatch","callbackFunction","unwrap","then","catch","rejectedValue","fetchMessages","fetchCheck","deleteRemainingMessages","forEach","checkNewRequests","currentAmountOfRequests","checkAmountOfRequests","length","calculateAmountOfRequests","checkNewReplies","currentAmountOfReplies","checkAmountOfReplies","calculateAmountOfReplies","useIntervalCounter","stopCounter","clearInterval","NavAuthentificationItems","t","useTranslation","to","className","NavUserItems","title","icon","faBell","username","NavAdditionalItems","SelectLanguage","i18n","faLanguage","onChange","value","target","changeLanguage","NavBar","scrollToTop","useEffect","setInterval","startInterval","Navbar","variant","expand","fixed","Brand","onClick","Toggle","aria-controls","Collapse","id","Nav","faSearch","Footer","year","Date","getFullYear","pathname","rel","usePlant","fetchPlants","searchPlant","HomeAbout","src","plantsImage","loading","alt","plantPotIcon","WaitSpinner","role","PlantSearch","useState","setQuery","selectedOptions","setSelectedOptions","fetchPlantQueryByName","selectedLocations","option","selectedLocation","filterPlantsByLocation","optionsChoice","label","localizationTexts","allItemsAreSelected","clearSearch","noOptions","search","selectAll","selectAllFiltered","selectSomeItems","create","type","placeholder","labelledBy","options","overrideStrings","disableSearch","PlantThumbnail","PlantsCollection","index","PlantsCockpit","HomeTitle","Home","elementRef","useRef","elementHeight","Math","round","getBoundingClientRect","height","current","ref","titleSection","aboutSection","useAuthentification","updateUserRequestsReplies","clonedUser","JSON","parse","stringify","ErrorMessage","outputFunction","includes","SignUp","useHistory","onSubmit","event","email","password","toLowerCase","preventDefault","htmlFor","formNoValidate","SignIn","LogOut","updatedUser","useRouting","protectRoute","usePlantImage","createImage","uploadImageData","deleteImage","GoBackButton","clickHandler","PlantCreateForm","goBack","buttonState","useMemo","image","plantImage","files","FormData","append","min","disabled","PlantDetailsBuyerItems","PlantDetailsCreatorChoice","PlantDetailsUserChoice","isCreator","PlantDetailsBuyerChoice","PlantItem","keyword","PlantItems","creator","PlantDetails","useParams","PlantUpdateForm","selectElementRef","setPlantLocation","handlePlantEntryChange","clonedPlant","Number","handlePlantImageChange","useNavigation","goToHome","goToRequests","goToReplies","PaymentErrorMessage","PaymentCheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","initializePayment","payment","usePayment","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","handleInputChanges","empty","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","PaymentCheckoutView","loadStripe","stripePromise","RequestTile","RequestsCollection","RequestsView","resetRequestVariableAndScrollToTop","handleGoBack","ReplyThumbnail","RepliesCollection","ReplyTile","RepliesView","resetReplyVariableAndScrollToTop","RequestCreateForm","handleCreateMessageForRequest","cols","rows","WaitSpinnerText","text","Reply","headline","RequestDetails","clonedMessage","setBuyerMessageInactive","handleChangeMessageState","ReplyDetails","handleDeleteMessage","RequestUpdateForm","handleCreateReply","Unauthorized","NotFound","KommunicateChat","createLauncherIcon","htmlDocument","method","scriptElement","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","document","PlantsCreatedCollection","PlantsCreatedView","ModalBody","subheadline","isClose","divElementRef","handleCloseModal","ErrorModal","convertErrorMessage","OfflineModal","isOnline","Modals","setIsOnline","handleOfflineEventCallback","handleOnlineEventCallback","addEventListener","removeEventListener","useOnlineStatus","withRouter","exact","path","component","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","ns","defaultNS","backend","loadPath","debug","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","querySelector"],"mappings":"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","file":"static/js/main.e8ffbd84.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../app/config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  User,\r\n  Plant,\r\n  PlantId,\r\n  Message,\r\n  MessageId,\r\n  DestroyImageData,\r\n  IntervalId,\r\n} from \"../app/typeDefinitions\";\r\nimport { RootState } from \"../app/store\";\r\n\r\ntype ErrorMessage = string | null;\r\n\r\ninterface InitialState {\r\n  // ----- User authentication -----\r\n  isUserChange: boolean;\r\n  loggedInUser: User | null;\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: boolean;\r\n  isFetchingPlants: boolean;\r\n  isFetchingPlant: boolean;\r\n  isUpdatingPlant: boolean;\r\n  isDeletingPlant: boolean;\r\n  plant: Plant | {};\r\n  plants: Plant[];\r\n  filteredPlants: Plant[];\r\n  numberOfVisibleEntries: number;\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: boolean;\r\n  isDeletingPlantImage: boolean;\r\n  destroyImageData: DestroyImageData | null;\r\n\r\n  // ----- Payment -----\r\n  clientSecret: string;\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: boolean;\r\n  isFetchingMessages: boolean;\r\n  isFetchingMessage: boolean;\r\n  isUpdatingMessage: boolean;\r\n  isDeletingMessage: boolean;\r\n  messages: Message[];\r\n  message: Message | {};\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: boolean;\r\n  isNewReply: boolean;\r\n  amountOfRequests: number;\r\n  amountOfReplies: number;\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: IntervalId;\r\n  delayCounter: number;\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: number;\r\n  aboutSectionHeight: number;\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: ErrorMessage;\r\n}\r\n\r\ninterface UpdatePlantParameters {\r\n  plantId: PlantId;\r\n  updatedPlant: Plant;\r\n}\r\n\r\ninterface UpdateMessageParameters {\r\n  messageId: MessageId;\r\n  updatedMessage: Message;\r\n}\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\nconst initialState: InitialState = {\r\n  // ----- User authentication -----\r\n  isUserChange: false,\r\n  loggedInUser: null,\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: false,\r\n  isFetchingPlants: false,\r\n  isFetchingPlant: false,\r\n  isUpdatingPlant: false,\r\n  isDeletingPlant: false,\r\n  plant: {},\r\n  plants: [],\r\n  filteredPlants: [],\r\n  numberOfVisibleEntries: 6,\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: false,\r\n  isDeletingPlantImage: false,\r\n  destroyImageData: null,\r\n\r\n  // ----- Payment -----\r\n  clientSecret: \"\",\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: false,\r\n  isFetchingMessages: false,\r\n  isFetchingMessage: false,\r\n  isUpdatingMessage: false,\r\n  isDeletingMessage: false,\r\n  messages: [],\r\n  message: {},\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: false,\r\n  isNewReply: false,\r\n  amountOfRequests: 0,\r\n  amountOfReplies: 0,\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: null,\r\n  delayCounter: 0,\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: 0,\r\n  aboutSectionHeight: 0,\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: null,\r\n};\r\n\r\nconst rejectWithValue = (data: any): void | PromiseLike<void> => {\r\n  throw new Error(data);\r\n};\r\n\r\n// ----- User authentification -----\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (newUser: User): Promise<User | any> => {\r\n    try {\r\n      const { data } = await axios.post(`${apiPath}/auth/sign-up`, newUser);\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async (user: User): Promise<User | any> => {\r\n    try {\r\n      const { data } = await axios.post(`${apiPath}/auth/sign-in`, user, {\r\n        withCredentials: true,\r\n      });\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (user: User): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/auth/log-out`, user, {\r\n        withCredentials: true,\r\n      });\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const checkUserLoggedIn = createAsyncThunk(\r\n  \"jungleSwap/checkUserLoggedIn\",\r\n  async (): Promise<User | any> => {\r\n    try {\r\n      const { data } = await axios.get(`${apiPath}/auth/check-user`, {\r\n        withCredentials: true,\r\n      });\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Plants -----\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async (newPlant: Plant): Promise<Plant | any> => {\r\n    try {\r\n      const { data } = await axios.post(`${apiPath}/plants/create`, newPlant, {\r\n        withCredentials: true,\r\n      });\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async (): Promise<Plant[] | any> => {\r\n    try {\r\n      const { data } = await axios.get(`${apiPath}/plants/fetch-all`);\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query: string): Promise<Plant[] | any> => {\r\n    try {\r\n      const { data } = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchPlant = createAsyncThunk(\r\n  \"jungleSwap/fetchPlant\",\r\n  async (plantId: PlantId): Promise<Plant | any> => {\r\n    try {\r\n      const { data } = await axios.get(`${apiPath}/plants/fetch/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async ({\r\n    plantId,\r\n    updatedPlant,\r\n  }: UpdatePlantParameters): Promise<Plant | any> => {\r\n    try {\r\n      const { data } = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (plantId: PlantId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Images -----\r\nexport const uploadPlantImage = createAsyncThunk(\r\n  \"jungleSwap/uploadPlantImage\",\r\n  async (uploadForm: FormData): Promise<any> => {\r\n    try {\r\n      const { data } = await axios.post(\r\n        `${apiPath}/cloudinary/upload`,\r\n        uploadForm\r\n      );\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlantImage = createAsyncThunk(\r\n  \"jungleSwap/deletePlantImage\",\r\n  async (destroyImageData: DestroyImageData): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/cloudinary/destroy`, destroyImageData);\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Payment -----\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async ({ price }: Plant): Promise<any> => {\r\n    try {\r\n      const { data } = await axios.post(\r\n        `${apiPath}/stripe/create-payment-intent`,\r\n        {\r\n          price,\r\n        }\r\n      );\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Messages -----\r\nexport const createMessage = createAsyncThunk(\r\n  \"jungleSwap/createMessage\",\r\n  async (newMessage: Message): Promise<Message | any> => {\r\n    try {\r\n      const { data } = await axios.post(\r\n        `${apiPath}/messages/create`,\r\n        newMessage,\r\n        { withCredentials: true }\r\n      );\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllMessages = createAsyncThunk(\r\n  \"jungleSwap/fetchAllMessages\",\r\n  async (): Promise<Message[] | any> => {\r\n    try {\r\n      const { data } = await axios.get(`${apiPath}/messages/fetch-all`);\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchMessage = createAsyncThunk(\r\n  \"jungleSwap/fetchMessage\",\r\n  async (messageId: MessageId): Promise<Message | any> => {\r\n    try {\r\n      const { data } = await axios.get(\r\n        `${apiPath}/messages/fetch/${messageId}`,\r\n        { withCredentials: true }\r\n      );\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updateMessage = createAsyncThunk(\r\n  \"jungleSwap/updateMessage\",\r\n  async ({\r\n    messageId,\r\n    updatedMessage,\r\n  }: UpdateMessageParameters): Promise<Message | any> => {\r\n    try {\r\n      const { data } = await axios.patch(\r\n        `${apiPath}/messages/update/${messageId}`,\r\n        updatedMessage\r\n      );\r\n      return data;\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteMessage = createAsyncThunk(\r\n  \"jungleSwap/deleteMessage\",\r\n  async (messageId: MessageId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\r\n    } catch ({\r\n      response: {\r\n        data: { error },\r\n      },\r\n    }: any) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    // ----- User authentication ------\r\n    setIsUserChange: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isUserChange = payload;\r\n    },\r\n    setLoggedInUser: (state, { payload }: PayloadAction<User | null>) => {\r\n      state.loggedInUser = payload;\r\n    },\r\n\r\n    // ----- Plants ------\r\n    setIsCreatingPlant: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isCreatingPlant = payload;\r\n    },\r\n    setIsFetchingPlants: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isFetchingPlants = payload;\r\n    },\r\n    setIsFetchingPlant: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isFetchingPlant = payload;\r\n    },\r\n    setIsUpdatingPlant: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isUpdatingPlant = payload;\r\n    },\r\n    setIsDeletingPlant: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isDeletingPlant = payload;\r\n    },\r\n    addPlant: (state, { payload }: PayloadAction<Plant>) => {\r\n      state.plants.push(payload);\r\n    },\r\n    setPlant: (state, { payload }: PayloadAction<Plant>) => {\r\n      state.plant = payload;\r\n    },\r\n    setPlants: (state, { payload }: PayloadAction<Plant[]>) => {\r\n      state.plants = payload;\r\n    },\r\n    setFilteredPlants: (state, { payload }: PayloadAction<Plant[]>) => {\r\n      state.filteredPlants = payload;\r\n    },\r\n    setPlantChanges: (\r\n      state,\r\n      {\r\n        payload: {\r\n          _id,\r\n          name,\r\n          description,\r\n          size,\r\n          imageUrl,\r\n          imagePublicId,\r\n          location,\r\n          price,\r\n        },\r\n      }: PayloadAction<Plant>\r\n    ) => {\r\n      state.plants = state.plants.map((singlePlant: Plant): Plant => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, { payload }: PayloadAction<PlantId>) => {\r\n      state.plants = state.plants.filter(\r\n        (plant: Plant): boolean => plant._id !== payload\r\n      );\r\n    },\r\n    setNumberOfVisibleEntries: (state, { payload }: PayloadAction<number>) => {\r\n      state.numberOfVisibleEntries = payload;\r\n    },\r\n\r\n    // ----- Images -----\r\n    setIsUploadingPlantImage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isUploadingPlantImage = payload;\r\n    },\r\n    setIsDeletingPlantImage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isDeletingPlantImage = payload;\r\n    },\r\n    setDestroyImageData: (\r\n      state,\r\n      { payload }: PayloadAction<DestroyImageData | null>\r\n    ) => {\r\n      state.destroyImageData = payload;\r\n    },\r\n\r\n    // ----- Payment -----\r\n    setClientSecret: (state, { payload }: PayloadAction<string>) => {\r\n      state.clientSecret = payload;\r\n    },\r\n\r\n    // ----- Messages -----\r\n    setIsCreatingMessage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isCreatingMessage = payload;\r\n    },\r\n    setIsFetchingMessages: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isFetchingMessages = payload;\r\n    },\r\n    setIsFetchingMessage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isFetchingMessage = payload;\r\n    },\r\n    setIsUpdatingMessage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isUpdatingMessage = payload;\r\n    },\r\n    setIsDeletingMessage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isDeletingMessage = payload;\r\n    },\r\n    addMessage: (state, { payload }: PayloadAction<Message>) => {\r\n      state.messages.push(payload);\r\n    },\r\n    setMessages: (state, { payload }: PayloadAction<Message[]>) => {\r\n      state.messages = payload;\r\n    },\r\n    setMessage: (state, { payload }: PayloadAction<Message>) => {\r\n      state.message = payload;\r\n    },\r\n    setMessageChanges: (\r\n      state,\r\n      {\r\n        payload: { _id, buyer, seller, plant, request, reply, messageState },\r\n      }: PayloadAction<Message>\r\n    ) => {\r\n      state.messages = state.messages.map((singleMessage) => {\r\n        if (singleMessage._id === _id) {\r\n          singleMessage.buyer = buyer;\r\n          singleMessage.seller = seller;\r\n          singleMessage.plant = plant;\r\n          singleMessage.request = request;\r\n          singleMessage.reply = reply;\r\n          singleMessage.messageState = messageState;\r\n        }\r\n        return singleMessage;\r\n      });\r\n    },\r\n    removeMessage: (state, { payload }: PayloadAction<MessageId>) => {\r\n      state.messages = state.messages.filter(\r\n        (message: Message): boolean => message._id !== payload\r\n      );\r\n    },\r\n\r\n    // ----- Requests/Replies check ------\r\n    setIsNewRequest: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isNewRequest = payload;\r\n    },\r\n    setIsNewReply: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isNewReply = payload;\r\n    },\r\n    setStartAmountOfRequests: (state) => {\r\n      state.amountOfRequests = (state.loggedInUser as any).amountOfRequests;\r\n    },\r\n    setStartAmountOfReplies: (state) => {\r\n      state.amountOfReplies = (state.loggedInUser as any).amountOfReplies;\r\n    },\r\n    setAmountOfRequests: (state, { payload }: PayloadAction<number>) => {\r\n      state.amountOfRequests = payload;\r\n    },\r\n    setAmountOfReplies: (state, { payload }: PayloadAction<number>) => {\r\n      state.amountOfReplies = payload;\r\n    },\r\n    decreaseAmountOfRequests: (state) => {\r\n      state.amountOfRequests -= 1;\r\n    },\r\n    decreaseAmountOfReplies: (state) => {\r\n      state.amountOfReplies -= 1;\r\n    },\r\n\r\n    // ----- Interval counter -----\r\n    setIntervalId: (state, { payload }: PayloadAction<IntervalId>) => {\r\n      state.intervalId = payload;\r\n    },\r\n    setDelayCounter: (state, { payload }: PayloadAction<number>) => {\r\n      state.delayCounter = payload;\r\n    },\r\n    increaseDelayCounter: (state) => {\r\n      state.delayCounter += 1;\r\n    },\r\n\r\n    // ----- Pages handling -----\r\n    setTitleSectionHeight: (state, { payload }: PayloadAction<number>) => {\r\n      state.titleSectionHeight = payload;\r\n    },\r\n    setAboutSectionHeight: (state, { payload }: PayloadAction<number>) => {\r\n      state.aboutSectionHeight = payload;\r\n    },\r\n    scrollToAbout: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight);\r\n    },\r\n    scrollToPlants: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight + state.aboutSectionHeight);\r\n    },\r\n\r\n    // ----- Error handling -----\r\n    setErrorMessage: (state, { payload }: PayloadAction<ErrorMessage>) => {\r\n      state.errorMessage = payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    // ----- Plants ------\r\n    builder.addCase(createPlant.fulfilled, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(createPlant.rejected, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchPlant.fulfilled, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(fetchPlant.rejected, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.fulfilled, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.rejected, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.fulfilled, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.rejected, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n\r\n    // ----- Images -----\r\n    builder.addCase(uploadPlantImage.fulfilled, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(uploadPlantImage.rejected, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.fulfilled, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.rejected, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n\r\n    // ----- Messages -----\r\n    builder.addCase(createMessage.fulfilled, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(createMessage.rejected, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.fulfilled, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.rejected, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchMessage.fulfilled, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(fetchMessage.rejected, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.fulfilled, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.rejected, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.fulfilled, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.rejected, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n  },\r\n});\r\n\r\nconst selectors = {\r\n  // ----- User authentication -----\r\n  selectIsUserChange: ({ jungleSwap: { isUserChange } }: RootState) =>\r\n    isUserChange,\r\n  selectLoggedInUser: ({ jungleSwap: { loggedInUser } }: RootState) =>\r\n    loggedInUser,\r\n\r\n  // ----- Plants -----\r\n  selectIsCreatingPlant: ({ jungleSwap: { isCreatingPlant } }: RootState) =>\r\n    isCreatingPlant,\r\n  selectIsFetchingPlants: ({ jungleSwap: { isFetchingPlants } }: RootState) =>\r\n    isFetchingPlants,\r\n  selectIsFetchingPlant: ({ jungleSwap: { isFetchingPlant } }: RootState) =>\r\n    isFetchingPlant,\r\n  selectIsUpdatingPlant: ({ jungleSwap: { isUpdatingPlant } }: RootState) =>\r\n    isUpdatingPlant,\r\n  selectIsDeletingPlant: ({ jungleSwap: { isDeletingPlant } }: RootState) =>\r\n    isDeletingPlant,\r\n  selectPlant: ({ jungleSwap: { plant } }: RootState) => plant,\r\n  selectPlants: ({ jungleSwap: { plants } }: RootState) => plants,\r\n  selectfFilteredPlants: ({ jungleSwap: { filteredPlants } }: RootState) =>\r\n    filteredPlants,\r\n  selectNumberOfVisibleEntries: ({\r\n    jungleSwap: { numberOfVisibleEntries },\r\n  }: RootState) => numberOfVisibleEntries,\r\n\r\n  // ----- Images -----\r\n  selectIsUploadingPlantImage: ({\r\n    jungleSwap: { isUploadingPlantImage },\r\n  }: RootState) => isUploadingPlantImage,\r\n  selectIsDeletingPlantImage: ({\r\n    jungleSwap: { isDeletingPlantImage },\r\n  }: RootState) => isDeletingPlantImage,\r\n  selectDestroyImageData: ({ jungleSwap: { destroyImageData } }: RootState) =>\r\n    destroyImageData,\r\n\r\n  // ----- Payment -----\r\n  selectClientSecret: ({ jungleSwap: { clientSecret } }: RootState) =>\r\n    clientSecret,\r\n\r\n  // ----- Messages -----\r\n  selectIsCreatingMessage: ({ jungleSwap: { isCreatingMessage } }: RootState) =>\r\n    isCreatingMessage,\r\n  selectiIsFetchingMessages: ({\r\n    jungleSwap: { isFetchingMessages },\r\n  }: RootState) => isFetchingMessages,\r\n  selectIsFetchingMessage: ({ jungleSwap: { isFetchingMessage } }: RootState) =>\r\n    isFetchingMessage,\r\n  selectIsUpdatingMessage: ({ jungleSwap: { isUpdatingMessage } }: RootState) =>\r\n    isUpdatingMessage,\r\n  selectIsDeletingMessage: ({ jungleSwap: { isDeletingMessage } }: RootState) =>\r\n    isDeletingMessage,\r\n  selectMessage: ({ jungleSwap: { message } }: RootState) => message,\r\n  selectMessages: ({ jungleSwap: { messages } }: RootState) => messages,\r\n\r\n  // ----- Requests/Replies check -----\r\n  selectIsNewRequest: ({ jungleSwap: { isNewRequest } }: RootState) =>\r\n    isNewRequest,\r\n  selectIsNewReply: ({ jungleSwap: { isNewReply } }: RootState) => isNewReply,\r\n  selectAmountOfRequests: ({ jungleSwap: { amountOfRequests } }: RootState) =>\r\n    amountOfRequests,\r\n  selectAmountOfReplies: ({ jungleSwap: { amountOfReplies } }: RootState) =>\r\n    amountOfReplies,\r\n\r\n  // ----- Interval counter -----\r\n  selectIntervalId: ({ jungleSwap: { intervalId } }: RootState) => intervalId,\r\n  selectDelayCounter: ({ jungleSwap: { delayCounter } }: RootState) =>\r\n    delayCounter,\r\n\r\n  // ----- Pages handling -----\r\n  selectTitleSectionHeight: ({\r\n    jungleSwap: { titleSectionHeight },\r\n  }: RootState) => titleSectionHeight,\r\n  selectAboutSectionHeight: ({\r\n    jungleSwap: { aboutSectionHeight },\r\n  }: RootState) => aboutSectionHeight,\r\n\r\n  // ----- Error handling -----\r\n  selectErrorMessage: ({ jungleSwap: { errorMessage } }: RootState) =>\r\n    errorMessage,\r\n};\r\n\r\n// ----- Slice actions -----\r\nexport const {\r\n  // ----- User authentification -----\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n\r\n  // ----- Plants -----\r\n  setIsCreatingPlant,\r\n  setIsFetchingPlants,\r\n  setIsFetchingPlant,\r\n  setIsUpdatingPlant,\r\n  setIsDeletingPlant,\r\n  addPlant,\r\n  setPlants,\r\n  setFilteredPlants,\r\n  setPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n  setNumberOfVisibleEntries,\r\n\r\n  // ----- Images -----\r\n  setIsUploadingPlantImage,\r\n  setIsDeletingPlantImage,\r\n  setDestroyImageData,\r\n\r\n  // ----- Payment -----\r\n  setClientSecret,\r\n\r\n  // ----- Messages -----\r\n  setIsCreatingMessage,\r\n  setIsFetchingMessages,\r\n  setIsFetchingMessage,\r\n  setIsUpdatingMessage,\r\n  setIsDeletingMessage,\r\n  addMessage,\r\n  setMessages,\r\n  setMessage,\r\n  setMessageChanges,\r\n  removeMessage,\r\n\r\n  // ----- Requests/Replies check -----\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  decreaseAmountOfRequests,\r\n  decreaseAmountOfReplies,\r\n\r\n  // ----- Interval counter -----\r\n  setIntervalId,\r\n  setDelayCounter,\r\n  increaseDelayCounter,\r\n\r\n  // ----- Pages handling -----\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n\r\n  // ----- Error handling -----\r\n  setErrorMessage,\r\n} = jungleSwapSlice.actions;\r\n\r\n// ----- Slice selectors -----\r\nexport const {\r\n  // ----- User authentication -----\r\n  selectIsUserChange,\r\n  selectLoggedInUser,\r\n\r\n  // ----- Plants -----\r\n  selectIsCreatingPlant,\r\n  selectIsFetchingPlants,\r\n  selectIsFetchingPlant,\r\n  selectIsUpdatingPlant,\r\n  selectIsDeletingPlant,\r\n  selectPlant,\r\n  selectPlants,\r\n  selectfFilteredPlants,\r\n  selectNumberOfVisibleEntries,\r\n\r\n  // ----- Images -----\r\n  selectIsUploadingPlantImage,\r\n  selectIsDeletingPlantImage,\r\n  selectDestroyImageData,\r\n\r\n  // ----- Payment -----\r\n  selectClientSecret,\r\n\r\n  // ----- Messages -----\r\n  selectIsCreatingMessage,\r\n  selectiIsFetchingMessages,\r\n  selectIsFetchingMessage,\r\n  selectIsUpdatingMessage,\r\n  selectIsDeletingMessage,\r\n  selectMessages,\r\n  selectMessage,\r\n\r\n  // ----- Requests/Replies check -----\r\n  selectIsNewRequest,\r\n  selectIsNewReply,\r\n  selectAmountOfRequests,\r\n  selectAmountOfReplies,\r\n\r\n  // ----- Interval counter -----\r\n  selectIntervalId,\r\n  selectDelayCounter,\r\n\r\n  // ----- Pages handling -----\r\n  selectTitleSectionHeight,\r\n  selectAboutSectionHeight,\r\n\r\n  // ----- Error handling -----\r\n  selectErrorMessage,\r\n} = selectors;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"../reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  addMessage,\r\n  createMessage,\r\n  deleteMessage,\r\n  fetchAllMessages,\r\n  fetchMessage,\r\n  removeMessage,\r\n  setAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setErrorMessage,\r\n  setIsCreatingMessage,\r\n  setIsDeletingMessage,\r\n  setIsFetchingMessage,\r\n  setIsFetchingMessages,\r\n  setIsNewReply,\r\n  setIsNewRequest,\r\n  setIsUpdatingMessage,\r\n  setMessage,\r\n  setMessageChanges,\r\n  setMessages,\r\n  updateMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Message, MessageId, Plant, PlantId, User } from \"../typeDefinitions\";\r\n\r\ninterface MessageMethods {\r\n  createMessage: Function;\r\n  fetchMessage: Function;\r\n  fetchMessages: Function;\r\n  fetchCheck: Function;\r\n  updateMessage: Function;\r\n  deleteMessage: Function;\r\n  deleteRemainingMessages: Function;\r\n  checkNewRequests: Function;\r\n  checkNewReplies: Function;\r\n}\r\n\r\nexport const useMessage = (): MessageMethods => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return {\r\n    createMessage: (newMessage: Message, callbackFunction: Function): void => {\r\n      dispatch(setIsCreatingMessage(true));\r\n      dispatch(createMessage(newMessage))\r\n        .unwrap()\r\n        .then((message: Message): void => {\r\n          dispatch(addMessage(message));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchMessage: (messageId: MessageId, callbackFunction: Function): void => {\r\n      dispatch(setIsFetchingMessage(true));\r\n      dispatch(fetchMessage(messageId))\r\n        .unwrap()\r\n        .then((message: Message): void => {\r\n          dispatch(setMessage(message));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchMessages: (callbackFunction: Function): void => {\r\n      dispatch(setIsFetchingMessages(true));\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages: Message[]): void => {\r\n          dispatch(setMessages(messages));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchCheck: (callbackFunction: Function): void => {\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages: Message[]): void => {\r\n          dispatch(setMessages(messages));\r\n          callbackFunction(messages);\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    updateMessage: (\r\n      updatedMessage: Message,\r\n      callbackFunction: Function\r\n    ): void => {\r\n      const { _id } = updatedMessage;\r\n      dispatch(setIsUpdatingMessage(true));\r\n      dispatch(updateMessage({ messageId: _id as MessageId, updatedMessage }))\r\n        .unwrap()\r\n        .then((message: Message): void => {\r\n          dispatch(setMessageChanges(message));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    deleteMessage: (messageId: MessageId, callbackFunction: Function): void => {\r\n      dispatch(setIsDeletingMessage(true));\r\n      dispatch(deleteMessage(messageId))\r\n        .unwrap()\r\n        .then((): void => {\r\n          dispatch(removeMessage(messageId));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    deleteRemainingMessages(messages: Message[], plantId: PlantId): void {\r\n      messages.forEach(({ _id, plant }: Message): void => {\r\n        if ((plant as Plant)._id === plantId) {\r\n          dispatch(setIsDeletingMessage(true));\r\n          dispatch(deleteMessage(_id as MessageId))\r\n            .unwrap()\r\n            .then((): void => {\r\n              dispatch(removeMessage(_id as MessageId));\r\n            })\r\n            .catch((rejectedValue: any): void => {\r\n              dispatch(setErrorMessage(rejectedValue.message));\r\n            });\r\n        }\r\n      });\r\n    },\r\n\r\n    checkNewRequests: (\r\n      { _id }: { _id: string },\r\n      messages: Message[],\r\n      amountOfRequests: number\r\n    ): void => {\r\n      const calculateAmountOfRequests = (messages: Message[]): number => {\r\n        const currentAmountOfRequests = messages.filter(\r\n          ({ seller, messageState }: Message): boolean =>\r\n            (seller as User)._id === _id && messageState === true\r\n        ).length;\r\n        return currentAmountOfRequests;\r\n      };\r\n\r\n      const checkAmountOfRequests = (\r\n        currentAmountOfRequests: number,\r\n        amountOfRequests: number\r\n      ): void => {\r\n        if (amountOfRequests < currentAmountOfRequests) {\r\n          dispatch(setIsNewRequest(true));\r\n        }\r\n        if (amountOfRequests !== currentAmountOfRequests) {\r\n          dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n        }\r\n      };\r\n\r\n      const currentAmountOfRequests = calculateAmountOfRequests(messages);\r\n      checkAmountOfRequests(currentAmountOfRequests, amountOfRequests);\r\n    },\r\n\r\n    checkNewReplies: (\r\n      { _id }: { _id: string },\r\n      messages: Message[],\r\n      amountOfReplies: number\r\n    ): void => {\r\n      const calculateAmountOfReplies = (messages: Message[]): number => {\r\n        const currentAmountOfReplies = messages.filter(\r\n          ({ buyer, reply }: Message): boolean =>\r\n            (buyer as User)._id === _id && reply !== \"\"\r\n        ).length;\r\n        return currentAmountOfReplies;\r\n      };\r\n\r\n      const checkAmountOfReplies = (\r\n        currentAmountOfReplies: number,\r\n        amountOfReplies: number\r\n      ): void => {\r\n        if (amountOfReplies < currentAmountOfReplies) {\r\n          dispatch(setIsNewReply(true));\r\n        }\r\n        if (amountOfReplies !== currentAmountOfReplies) {\r\n          dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n        }\r\n      };\r\n\r\n      const currentAmountOfReplies = calculateAmountOfReplies(messages);\r\n      checkAmountOfReplies(currentAmountOfReplies, amountOfReplies);\r\n    },\r\n  };\r\n};\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport { setDelayCounter, setIntervalId } from \"../../reducer/jungleSwapSlice\";\r\n\r\ninterface IntervalCounterMethods {\r\n  stopCounter: Function;\r\n}\r\n\r\nexport const useIntervalCounter = (): IntervalCounterMethods => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return {\r\n    stopCounter: (intervalId: NodeJS.Timeout): void => {\r\n      clearInterval(intervalId);\r\n      dispatch(setIntervalId(null));\r\n      dispatch(setDelayCounter(0));\r\n    },\r\n  };\r\n};\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst NavAuthentificationItems = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/auth/sign-in\" className=\"[ navigation-link ] [ p-2 ]\">\r\n        {t(\"link.signIn\")}\r\n      </Link>\r\n      <Link to=\"/auth/sign-up\" className=\"[ navigation-link ] [ p-2 ]\">\r\n        {t(\"link.signUp\")}\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavAuthentificationItems;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport {\r\n  selectIsNewReply,\r\n  selectIsNewRequest,\r\n  selectLoggedInUser,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NavUserItems = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isNewRequest = useAppSelector(selectIsNewRequest);\r\n  const isNewReply = useAppSelector(selectIsNewReply);\r\n  const { t } = useTranslation();\r\n\r\n  const tooltipItemRequests = (): string =>\r\n    isNewRequest ? t(\"link.tooltipps.newRequest\") : \"\";\r\n\r\n  const tooltipItemReplies = (): string =>\r\n    isNewReply ? t(\"link.tooltipps.newReply\") : \"\";\r\n\r\n  const tooltipItemLogOut = (): string | undefined =>\r\n    loggedInUser ? loggedInUser.username : \"\";\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/plants/my-own\" className=\"[ navigation-link ] [ p-2 ]\">\r\n        {t(\"link.myPlants\")}\r\n      </Link>\r\n      <Link to=\"/plants/create\" className=\"[ navigation-link ] [ p-2 ]\">\r\n        {t(\"link.createPlant\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/requests/fetch-all\"\r\n        title={tooltipItemRequests()}\r\n        className=\"[ navigation-link ] [ p-2 ]\"\r\n      >\r\n        {isNewRequest && <FontAwesomeIcon icon={faBell} />}\r\n        {t(\"link.requests\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/replies/fetch-all\"\r\n        title={tooltipItemReplies()}\r\n        className=\"[ navigation-link ] [ p-2 ]\"\r\n      >\r\n        {isNewReply && <FontAwesomeIcon icon={faBell} />}\r\n        {t(\"link.replies\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/auth/log-out\"\r\n        title={tooltipItemLogOut()}\r\n        className=\"[ navigation-link ] [ p-2 ]\"\r\n      >\r\n        {t(\"link.logOut\")}\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavUserItems;\r\n","import { User } from \"../../app/typeDefinitions\";\r\nimport NavAuthentificationItems from \"./NavAuthentificationItems\";\r\nimport NavUserItems from \"./NavUserItems\";\r\n\r\ninterface NavAdditionalItemsProps {\r\n  user: User | null;\r\n}\r\n\r\nconst NavAdditionalItems = ({ user }: NavAdditionalItemsProps): JSX.Element => {\r\n  if (user) {\r\n    return <NavUserItems />;\r\n  }\r\n  return <NavAuthentificationItems />;\r\n};\r\n\r\nexport default NavAdditionalItems;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faLanguage } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SelectLanguage = (): JSX.Element => {\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const handleSelectLanguage = ({ target: { value } }: any): void => {\r\n    i18n.changeLanguage(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"select-language\">\r\n      <FontAwesomeIcon icon={faLanguage} />\r\n      <select\r\n        className=\"[ select-language__select ] [ form-select ]\"\r\n        onChange={handleSelectLanguage}\r\n      >\r\n        <option value=\"\" className=\"select-language__select__option\">\r\n          {t(\"select.language.placeholder\")}\r\n        </option>\r\n        <option value=\"de\" className=\"select-language__select__option\">\r\n          {t(\"select.language.german\")}\r\n        </option>\r\n        <option value=\"en\" className=\"select-language__select__option\">\r\n          {t(\"select.language.english\")}\r\n        </option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectLanguage;\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\r\nimport { useIntervalCounter } from \"../../app/custom-hooks/useIntervalCounter\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  setIsUserChange,\r\n  setIntervalId,\r\n  increaseDelayCounter,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  scrollToPlants,\r\n  selectIsUserChange,\r\n  selectLoggedInUser,\r\n  selectIntervalId,\r\n  selectDelayCounter,\r\n  selectIsNewRequest,\r\n  selectIsNewReply,\r\n  selectAmountOfRequests,\r\n  selectAmountOfReplies,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell, faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Message } from \"../../app/typeDefinitions\";\r\nimport NavAdditionalItems from \"./NavAdditionalItems\";\r\nimport SelectLanguage from \"../helpers/SelectLanguage\";\r\n\r\nconst NavBar = (): JSX.Element => {\r\n  const isUserChange = useAppSelector(selectIsUserChange);\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const intervalId = useAppSelector(selectIntervalId);\r\n  const delayCounter = useAppSelector(selectDelayCounter);\r\n  const isNewRequest = useAppSelector(selectIsNewRequest);\r\n  const isNewReply = useAppSelector(selectIsNewReply);\r\n  const amountOfRequests = useAppSelector(selectAmountOfRequests);\r\n  const amountOfReplies = useAppSelector(selectAmountOfReplies);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n  const { fetchMessages, fetchCheck, checkNewRequests, checkNewReplies } =\r\n    useMessage();\r\n  const { stopCounter } = useIntervalCounter();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalId) {\r\n        stopCounter(intervalId);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const startRequestsRepliesCheck = (): void => {\r\n      const setInitialMessageVariables = (): void => {\r\n        dispatch(setStartAmountOfRequests());\r\n        dispatch(setStartAmountOfReplies());\r\n        dispatch(setIsUserChange(false));\r\n      };\r\n\r\n      const startInterval = (): void => {\r\n        const intervalId = setInterval(\r\n          (): void => {\r\n            dispatch(increaseDelayCounter());\r\n          },\r\n          1000 // every second\r\n        );\r\n        dispatch(setIntervalId(intervalId));\r\n        dispatch(increaseDelayCounter());\r\n      };\r\n\r\n      fetchMessages((): void => {\r\n        setInitialMessageVariables();\r\n        startInterval();\r\n      });\r\n    };\r\n\r\n    isUserChange && startRequestsRepliesCheck();\r\n  }, [isUserChange]);\r\n\r\n  useEffect(() => {\r\n    const checkNewRequestsReplies = (): void => {\r\n      fetchCheck((messages: Message[]): void => {\r\n        checkNewRequests(loggedInUser, messages, amountOfRequests);\r\n        checkNewReplies(loggedInUser, messages, amountOfReplies);\r\n      });\r\n    };\r\n\r\n    if (isUserChange) {\r\n      dispatch(setStartAmountOfRequests());\r\n      dispatch(setStartAmountOfReplies());\r\n    }\r\n    loggedInUser && checkNewRequestsReplies();\r\n  }, [delayCounter]);\r\n\r\n  const tooltipItemSearch = (): string => t(\"link.tooltipps.search\");\r\n\r\n  return (\r\n    <div>\r\n      <Navbar\r\n        variant=\"dark\"\r\n        expand=\"lg\"\r\n        fixed=\"top\"\r\n        className=\"[ navigation-bar ] [ px-5 ]\"\r\n      >\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" className=\"navigation-link\" onClick={scrollToTop}>\r\n            {t(\"link.jungleSwap\")}\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\r\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\r\n        </Navbar.Toggle>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Link\r\n              to=\"/\"\r\n              className=\"[ navigation-link ] [ p-2 ]\"\r\n              onClick={(): void => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              {t(\"link.allPlants\")}\r\n            </Link>\r\n            <NavAdditionalItems user={loggedInUser} />\r\n            <Link\r\n              to=\"/\"\r\n              title={tooltipItemSearch()}\r\n              className=\"[ navigation-link ] [ p-2 ]\"\r\n              onClick={(): void => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              <FontAwesomeIcon icon={faSearch} />\r\n            </Link>\r\n          </Nav>\r\n          <SelectLanguage />\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { linkedInPath1, linkedInPath2 } from \"../lib/externalLinkPaths\";\r\n\r\nconst Footer = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n  const currentTime = new Date();\r\n  const year = currentTime.getFullYear();\r\n\r\n  return (\r\n    <div className=\"footer-container\">\r\n      <footer className=\"[ footer ] [ text-center ]\">\r\n        {t(\"texts.footer.copyright\")} {year}{\" \"}\r\n        <Link\r\n          to={{ pathname: linkedInPath1 }}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n          className=\"navigation-link\"\r\n        >\r\n          {t(\"texts.footer.appAuthor1\")}\r\n        </Link>{\" \"}\r\n        &amp;{\" \"}\r\n        <Link\r\n          to={{ pathname: linkedInPath2 }}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n          className=\"navigation-link\"\r\n        >\r\n          {t(\"texts.footer.appAuthor2\")}\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","// LinkedIn\r\nexport const linkedInPath1: string =\r\n  \"https://www.linkedin.com/in/christian-gerbig/\";\r\nexport const linkedInPath2: string =\r\n  \"https://www.linkedin.com/in/lisa-montebaur/\";\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  addPlant,\r\n  createPlant,\r\n  deletePlant,\r\n  fetchAllPlants,\r\n  fetchPlant,\r\n  fetchQueryPlants,\r\n  removePlant,\r\n  setErrorMessage,\r\n  setIsCreatingPlant,\r\n  setIsDeletingPlant,\r\n  setIsFetchingPlant,\r\n  setIsFetchingPlants,\r\n  setIsUpdatingPlant,\r\n  setPlant,\r\n  setPlantChanges,\r\n  setPlants,\r\n  updatePlant,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, PlantId, UploadImageData } from \"../typeDefinitions\";\r\n\r\ninterface PlantMethods {\r\n  createPlant: Function;\r\n  fetchPlant: Function;\r\n  fetchPlants: Function;\r\n  updatePlant: Function;\r\n  deletePlant: Function;\r\n  searchPlant: Function;\r\n}\r\n\r\nexport const usePlant = (): PlantMethods => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return {\r\n    createPlant: (\r\n      { name, description, size, location, price }: any,\r\n      { imageUrl, imagePublicId }: UploadImageData,\r\n      callbackFunction: Function\r\n    ): void => {\r\n      const newPlant: Plant = {\r\n        name: name.value,\r\n        description: description.value,\r\n        size: size.value,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location: location.value,\r\n        price: price.value,\r\n      };\r\n      dispatch(setIsCreatingPlant(true));\r\n      dispatch(createPlant(newPlant))\r\n        .unwrap()\r\n        .then((plant: Plant): void => {\r\n          dispatch(addPlant(plant));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchPlant: (plantId: PlantId, callbackFunction: Function): void => {\r\n      dispatch(setIsFetchingPlant(true));\r\n      dispatch(fetchPlant(plantId))\r\n        .unwrap()\r\n        .then((plant: Plant): void => {\r\n          dispatch(setPlant(plant));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchPlants: (callbackFunction?: Function): void => {\r\n      dispatch(setIsFetchingPlants(true));\r\n      dispatch(fetchAllPlants())\r\n        .unwrap()\r\n        .then((plants: Plant[]): void => {\r\n          dispatch(setPlants(plants));\r\n          if (typeof callbackFunction !== \"undefined\") {\r\n            callbackFunction();\r\n          }\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    updatePlant: (\r\n      {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      }: Plant,\r\n      callbackFunction: Function\r\n    ): void => {\r\n      const updatedPlant: Plant = {\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      };\r\n      dispatch(setIsUpdatingPlant(true));\r\n      dispatch(updatePlant({ plantId: _id as PlantId, updatedPlant }))\r\n        .unwrap()\r\n        .then((updatedPlant): void => {\r\n          dispatch(setPlantChanges(updatedPlant));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    deletePlant: (plantId: PlantId, callbackFunction: Function): void => {\r\n      dispatch(setIsDeletingPlant(true));\r\n      dispatch(deletePlant(plantId))\r\n        .unwrap()\r\n        .then((): void => {\r\n          dispatch(removePlant(plantId));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    searchPlant: (query: string): void => {\r\n      dispatch(setIsFetchingPlants(true));\r\n      dispatch(fetchQueryPlants(query))\r\n        .unwrap()\r\n        .then((plants: Plant[]): void => {\r\n          dispatch(setPlants(plants));\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n  };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import { useTranslation } from \"react-i18next\";\r\nimport plantsImage from \"../../images/JungleSwap_Home.png\";\r\nimport plantPotIcon from \"../../images/JungleSwap_Icon.png\";\r\n\r\nconst HomeAbout = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"[ home-about ] [ container pt-5 ]\">\r\n      <div className=\"row\">\r\n        <div className=\"[ home-about__image ] [ col-sm-6 col-md-6 col-lg-6 ]\">\r\n          <img\r\n            src={plantsImage}\r\n            loading=\"eager\"\r\n            alt=\"plants\"\r\n            className=\"w-100 h-100\"\r\n          />\r\n        </div>\r\n        <br />\r\n        <div className=\"col-sm-6 col-md-6 col-lg-6 px-5\">\r\n          <article className=\"mt-4\">\r\n            <header>\r\n              <h4 className=\"home-about__headline\">\r\n                {t(\"texts.home.about.headline\")}\r\n              </h4>\r\n              <h5 className=\"home-about__subheadline\">\r\n                {t(\"texts.home.about.subheadline\")}\r\n              </h5>\r\n            </header>\r\n            <p className=\"home-about__paragraph\">\r\n              {t(\"texts.home.about.paragraph.line1\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line2\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line3\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line4\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line5\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line6\")}\r\n            </p>\r\n            <div className=\"home-about__icon\">\r\n              <img\r\n                src={plantPotIcon}\r\n                loading=\"lazy\"\r\n                alt=\"plant pot\"\r\n                className=\"w-100 h-100\"\r\n              />\r\n            </div>\r\n          </article>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeAbout;\r\n","const WaitSpinner = (): JSX.Element => {\r\n  return (\r\n    <div className=\"d-flex align-items-center justify-content-center\">\r\n      <div role=\"status\" className=\"[ wait-spinner ] [ spinner-border m-3 ]\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitSpinner;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\r\nimport { selectPlants, setFilteredPlants } from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../../app/typeDefinitions\";\r\nimport { MultiSelect } from \"react-multi-select-component\";\r\n\r\ninterface DropdownOption {\r\n  label: string;\r\n  value: string;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst PlantSearch = (): JSX.Element => {\r\n  const [query, setQuery] = useState<string>(\"\");\r\n  const [selectedOptions, setSelectedOptions] = useState<DropdownOption[]>([]);\r\n  const plants = useAppSelector(selectPlants);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n  const { searchPlant, fetchPlants } = usePlant();\r\n\r\n  useEffect(() => {\r\n    const fetchPlantQueryByName = (query: string): void => {\r\n      if (query) {\r\n        searchPlant(query);\r\n      } else {\r\n        fetchPlants();\r\n      }\r\n    };\r\n\r\n    fetchPlantQueryByName(query);\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    const filterPlantsByLocation = (\r\n      selectedOptions: DropdownOption[],\r\n      plants: Plant[]\r\n    ): void => {\r\n      const selectedLocations = selectedOptions.map(\r\n        (option: DropdownOption): string => option.value\r\n      );\r\n      const filteredPlants = plants.filter(({ location }: Plant): boolean => {\r\n        const matchedLocation = selectedLocations.filter(\r\n          (selectedLocation: string): boolean => selectedLocation === location\r\n        );\r\n        return matchedLocation.length !== 0 ? true : false;\r\n      });\r\n      dispatch(setFilteredPlants(filteredPlants));\r\n    };\r\n\r\n    filterPlantsByLocation(selectedOptions, plants);\r\n  }, [selectedOptions]);\r\n\r\n  const optionsChoice: DropdownOption[] = [\r\n    {\r\n      label: t(\"multiSelect.location.sun\"),\r\n      value: \"sun\",\r\n    },\r\n    {\r\n      label: t(\"multiSelect.location.shade\"),\r\n      value: \"shade\",\r\n    },\r\n    {\r\n      label: t(\"multiSelect.location.sunAndShade\"),\r\n      value: \"sun and shade\",\r\n    },\r\n  ];\r\n\r\n  const localizationTexts: any = {\r\n    allItemsAreSelected: `${t(\"multiSelect.localization.allItemsAreSelected\")}`,\r\n    clearSearch: t(\"multiSelect.localization.clearSearch\"),\r\n    noOptions: t(\"multiSelect.localization.noOptions\"),\r\n    search: t(\"multiSelect.localization.search\"),\r\n    selectAll: t(\"multiSelect.localization.selectAll\"),\r\n    selectAllFiltered: t(\"multiSelect.localization.selectAllFiltered\"),\r\n    selectSomeItems: t(\"multiSelect.localization.selectSomeItems\"),\r\n    create: t(\"multiSelect.localization.create\"),\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <hr className=\"[ horizontal-ruler ] [ pb-5 ]\" />\r\n      <h4 className=\"mb-4\">{t(\"texts.home.searchPlant.headline\")}</h4>\r\n      <div className=\"[ plant-search ] [ d-flex flex-row ]\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder={t(\"texts.home.searchPlant.namePlaceholder\")}\r\n          value={query}\r\n          className=\"plant-search__field form-control\"\r\n          onChange={({\r\n            target: { value },\r\n          }: React.ChangeEvent<HTMLInputElement>): void => {\r\n            setQuery(value);\r\n          }}\r\n        />\r\n        <MultiSelect\r\n          labelledBy=\"location-select\"\r\n          options={optionsChoice}\r\n          value={selectedOptions}\r\n          overrideStrings={localizationTexts}\r\n          onChange={(options: DropdownOption[]): void => {\r\n            setSelectedOptions(options);\r\n          }}\r\n          disableSearch={true}\r\n          className=\"[ location-filter location-filter--no-border ] [ form-control p-0 ml-4  ] \"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantSearch;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Plant } from \"../../app/typeDefinitions\";\r\n\r\ninterface PlantThumbnailProps {\r\n  plant: Plant;\r\n}\r\n\r\nconst PlantThumbnail = ({\r\n  plant: { _id, name, imageUrl, price },\r\n}: PlantThumbnailProps): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"col mb-5\">\r\n      <div className=\"card h-100 text-center mx-auto\">\r\n        <img\r\n          src={imageUrl}\r\n          loading=\"lazy\"\r\n          alt={name}\r\n          className=\"[ image image--size-large ] [ card-img-top ]\"\r\n        />\r\n        <div className=\"card-body mb-5\">\r\n          <h5>{name}</h5>\r\n          <p>\r\n            {price} {t(\"texts.plants.plantThumbnail.currency\")}\r\n          </p>\r\n          <Link to={`/plants/fetch/${_id}`} className=\"navigation-link\">\r\n            <button className=\"[ button--width-medium ] [ btn form-control px-3 ]\">\r\n              {t(\"link.details\")}\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantThumbnail;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport {\r\n  selectfFilteredPlants,\r\n  selectNumberOfVisibleEntries,\r\n  setNumberOfVisibleEntries,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../../app/typeDefinitions\";\r\nimport PlantThumbnail from \"./PlantThumbnail\";\r\n\r\nconst PlantsCollection = (): JSX.Element => {\r\n  const filteredPlants = useAppSelector(selectfFilteredPlants);\r\n  const numberOfVisibleEntries = useAppSelector(selectNumberOfVisibleEntries);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  const handleClickButton = (): void => {\r\n    dispatch(setNumberOfVisibleEntries(numberOfVisibleEntries + 6));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className={`\r\n          row\r\n          row-cols-1\r\n          row-cols-md-1\r\n          row-cols-lg-2\r\n          row-cols-xl-3\r\n          row-cols-xxl-3\r\n        `}\r\n      >\r\n        {filteredPlants.map(\r\n          (plant: Plant, index: number): JSX.Element | null => {\r\n            const { _id } = plant;\r\n            return index < numberOfVisibleEntries ? (\r\n              <PlantThumbnail plant={plant} key={_id} />\r\n            ) : null;\r\n          }\r\n        )}\r\n      </div>\r\n      {numberOfVisibleEntries < filteredPlants.length && (\r\n        <div className=\"text-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"[ button--width-medium ] [ btn btn-sm form-control px-4 ]\"\r\n            onClick={handleClickButton}\r\n          >\r\n            {t(\"button.more\")}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCollection;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { selectIsFetchingPlants } from \"../../reducer/jungleSwapSlice\";\r\nimport WaitSpinner from \"../spinners/WaitSpinner\";\r\nimport PlantSearch from \"./PlantSearch\";\r\nimport PlantsCollection from \"./PlantsCollection\";\r\n\r\nconst PlantsCockpit = (): JSX.Element => {\r\n  const isFetchingPlants = useAppSelector(selectIsFetchingPlants);\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div>\r\n        <h2>{t(\"texts.home.allPlants.headline\")}</h2>\r\n      </div>\r\n      <PlantSearch />\r\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsCollection />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCockpit;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppDispatch } from \"../../app/hooks\";\r\nimport { scrollToAbout } from \"../../reducer/jungleSwapSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst HomeTitle = (): JSX.Element => {\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"[ home-title ] [ row pt-5 my-5 ]\">\r\n      <div className=\"col-6 offset-3 pt-5 my-5\">\r\n        <h2 className=\"home-title__headline mb-2\">\r\n          {t(\"texts.home.title.headline\")}\r\n        </h2>\r\n        <h5 className=\"[ home-title__subheadline ] [ mt-3 mb-5 ]\">\r\n          {t(\"texts.home.title.subheadline\")}\r\n        </h5>\r\n        <div className=\"mb-5\">\r\n          <Link\r\n            to={\"/\"}\r\n            className=\"home-title__link\"\r\n            onClick={(): void => {\r\n              dispatch(scrollToAbout());\r\n            }}\r\n          >\r\n            {t(\"link.tryIt\")}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeTitle;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\r\nimport {\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  setFilteredPlants,\r\n  selectPlants,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport HomeAbout from \"../../components/home/HomeAbout\";\r\nimport PlantsCockpit from \"../../components/plants/PlantsCockpit\";\r\nimport HomeTitle from \"../../components/home/HomeTitle\";\r\n\r\nconst Home = (): JSX.Element => {\r\n  const plants = useAppSelector(selectPlants);\r\n  const dispatch = useAppDispatch();\r\n  const elementRef = useRef<HTMLElement[]>([]);\r\n  const { fetchPlants } = usePlant();\r\n\r\n  useEffect(() => {\r\n    const elementHeight = (elementRef: HTMLElement): number => {\r\n      return Math.round(elementRef.getBoundingClientRect().height);\r\n    };\r\n\r\n    fetchPlants((): void => {\r\n      const titleSectionHeight = elementHeight(elementRef.current[0]);\r\n      dispatch(setTitleSectionHeight(titleSectionHeight));\r\n      const aboutSectionHeight = elementHeight(elementRef.current[1]);\r\n      dispatch(setAboutSectionHeight(aboutSectionHeight));\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(setFilteredPlants(plants));\r\n  }, [plants]);\r\n\r\n  return (\r\n    <div>\r\n      <section\r\n        ref={(titleSection: HTMLElement): void => {\r\n          (elementRef.current[0] as HTMLElement | null) = titleSection;\r\n        }}\r\n        className=\"[ home ] [ text-center pt-5 pb-5 ]\"\r\n      >\r\n        <HomeTitle />\r\n      </section>\r\n\r\n      <section\r\n        ref={(aboutSection: HTMLElement): void => {\r\n          (elementRef.current[1] as HTMLElement | null) = aboutSection;\r\n        }}\r\n      >\r\n        <HomeAbout />\r\n      </section>\r\n\r\n      <section>\r\n        <PlantsCockpit />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  setErrorMessage,\r\n  setLoggedInUser,\r\n  signIn,\r\n  signUp,\r\n  logOut,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\n\r\ninterface AuthentificationMethods {\r\n  signIn: Function;\r\n  signUp: Function;\r\n  logOut: Function;\r\n  updateUserRequestsReplies: Function;\r\n}\r\n\r\nexport const useAuthentification = (): AuthentificationMethods => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return {\r\n    signIn: (user: User, callbackFunction: Function): void => {\r\n      dispatch(signIn(user))\r\n        .unwrap()\r\n        .then((user: User): void => {\r\n          dispatch(setLoggedInUser(user));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    signUp: (newUser: User, callbackFunction: Function): void => {\r\n      dispatch(signUp(newUser))\r\n        .unwrap()\r\n        .then((user: User): void => {\r\n          dispatch(setLoggedInUser(user));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    logOut: (loggedInUser: User, callbackFunction: Function): void => {\r\n      dispatch(logOut(loggedInUser))\r\n        .unwrap()\r\n        .then((): void => {\r\n          dispatch(setLoggedInUser(null));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    updateUserRequestsReplies: (\r\n      loggedInUser: User,\r\n      amountOfRequests: number,\r\n      amountOfReplies: number\r\n    ): User => {\r\n      const clonedUser: User = JSON.parse(JSON.stringify(loggedInUser));\r\n      clonedUser.amountOfRequests = amountOfRequests;\r\n      clonedUser.amountOfReplies = amountOfReplies;\r\n      dispatch(setLoggedInUser(clonedUser));\r\n      return clonedUser;\r\n    },\r\n  };\r\n};\r\n","interface ErrorMessageProps {\r\n  message: string | null;\r\n  outputFunction: Function;\r\n}\r\n\r\nconst ErrorMessage = ({\r\n  message,\r\n  outputFunction,\r\n}: ErrorMessageProps): JSX.Element | null => {\r\n  if (!message || !message.includes(\"Form\")) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <span className=\"d-block text-danger font-weight-bold\">\r\n        {outputFunction(message)}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\r\nimport {\r\n  setIsUserChange,\r\n  setErrorMessage,\r\n  selectErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../app/typeDefinitions\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst SignUp = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(selectErrorMessage);\r\n  const dispatch = useAppDispatch();\r\n  const { push } = useHistory();\r\n  const { t } = useTranslation();\r\n  const { signUp } = useAuthentification();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignUp = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    const {\r\n      target: { username, email, password },\r\n    } = event as any;\r\n    const newUser: User = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    event.preventDefault();\r\n    signUp(newUser, (): void => {\r\n      dispatch(setIsUserChange(true));\r\n      push(\"/\");\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Username missing\":\r\n        return t(\"errorTexts.authentification.signUp.form.usernameMissing\");\r\n      case \"Form: Email missing\":\r\n        return t(\"errorTexts.authentification.signUp.form.emailMissing\");\r\n      case \"Form: Password missing\":\r\n        return t(\"errorTexts.authentification.signUp.form.passwordMissing\");\r\n      case \"Form: Email format invalid\":\r\n        return t(\"errorTexts.authentification.signUp.form.emailFormatInvalid\");\r\n      case \"Form: Password invalid\":\r\n        return t(\"errorTexts.authentification.signUp.form.passwordInvalid\");\r\n      case \"Form: Username or email already exists\":\r\n        return t(\"errorTexts.authentification.signUp.form.userAlreadyExists\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\r\n        <h2 className=\"mb-5\">{t(\"texts.authentification.signUp.headline\")}</h2>\r\n        <form className=\"form-style\" onSubmit={handleSignUp}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\">\r\n              {t(\"texts.authentification.signUp.username\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n              placeholder={t(\"texts.authentification.signUp.enterPlaceholder\")}\r\n              className=\"form-control w-100\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\">\r\n              {t(\"texts.authentification.signUp.email\")}\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder={t(\"texts.authentification.signUp.enterPlaceholder\")}\r\n              className=\"form-control w-100\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\">\r\n              {t(\"texts.authentification.signUp.password\")}\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder={t(\"texts.authentification.signUp.enterPlaceholder\")}\r\n              className=\"form-control w-100\"\r\n            />\r\n          </div>\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className={`\r\n              [\r\n                button--width-medium\r\n              ]\r\n              [\r\n                btn\r\n                btn-sm\r\n                form-control\r\n                px-4\r\n                ml-0\r\n                mt-4\r\n              ]\r\n            `}\r\n          >\r\n            {t(\"button.signUp\")}\r\n          </button>\r\n          <p className=\"pt-1\">\r\n            {t(\"texts.authentification.signUp.alreadyAccountCreated\")}\r\n          </p>\r\n          <div className=\"text-right\">\r\n            <Link to={\"/auth/sign-in\"} className=\"navigation-link\">\r\n              <button\r\n                className={`\r\n                [\r\n                  button--width-medium\r\n                ]\r\n                [\r\n                  btn\r\n                  btn-sm\r\n                  form-control\r\n                  px-4\r\n                  mt-0\r\n                  mr-0\r\n                ]\r\n                `}\r\n              >\r\n                {t(\"button.signIn\")}\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\r\nimport {\r\n  setIsUserChange,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setErrorMessage,\r\n  selectErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../app/typeDefinitions\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst SignIn = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(selectErrorMessage);\r\n  const dispatch = useAppDispatch();\r\n  const { push } = useHistory();\r\n  const { t } = useTranslation();\r\n  const { signIn } = useAuthentification();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignIn = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    const {\r\n      target: { email, password },\r\n    } = event as any;\r\n    const user: User = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    event.preventDefault();\r\n    signIn(user, (): void => {\r\n      dispatch(setIsUserChange(true));\r\n      const { amountOfRequests, amountOfReplies } = user;\r\n      dispatch(setAmountOfRequests(amountOfRequests as number));\r\n      dispatch(setAmountOfReplies(amountOfReplies as number));\r\n      push(\"/\");\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Email missing\":\r\n        return t(\"errorTexts.authentification.signIn.form.emailMissing\");\r\n      case \"Form: Password missing\":\r\n        return t(\"errorTexts.authentification.signIn.form.passwordMissing\");\r\n      case \"Form: Email format invalid\":\r\n        return t(\"errorTexts.authentification.signIn.form.emailFormatInvalid\");\r\n      case \"Form: Passwords don't match\":\r\n        return t(\"errorTexts.authentification.signIn.form.noMatchPasswords\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\r\n        <h2 className=\"mb-5\">{t(\"texts.authentification.signIn.headline\")}</h2>\r\n        <form className=\"form-style\" onSubmit={handleSignIn}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\">\r\n              {t(\"texts.authentification.signIn.email\")}\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder={t(\"texts.authentification.signIn.enterPlaceholder\")}\r\n              className=\"form-control w-100\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\">\r\n              {t(\"texts.authentification.signIn.password\")}\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder={t(\"texts.authentification.signIn.enterPlaceholder\")}\r\n              className=\"form-control w-100\"\r\n            />\r\n          </div>\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className={`\r\n              [ \r\n                button--width-medium \r\n              ] \r\n              [ \r\n                btn \r\n                btn-sm \r\n                form-control \r\n                px-4 \r\n                mt-4 \r\n                ml-0 \r\n              ]\r\n            `}\r\n          >\r\n            {t(\"button.signIn\")}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\r\nimport { useIntervalCounter } from \"../../app/custom-hooks/useIntervalCounter\";\r\nimport {\r\n  setIsNewRequest,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  selectLoggedInUser,\r\n  selectIntervalId,\r\n  selectAmountOfRequests,\r\n  selectAmountOfReplies,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../app/typeDefinitions\";\r\n\r\nconst LogOut = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const intervalId = useAppSelector(selectIntervalId);\r\n  const amountOfRequests = useAppSelector(selectAmountOfRequests);\r\n  const amountOfReplies = useAppSelector(selectAmountOfReplies);\r\n  const dispatch = useAppDispatch();\r\n  const { push } = useHistory();\r\n  const { logOut, updateUserRequestsReplies } = useAuthentification();\r\n  const { stopCounter } = useIntervalCounter();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    const updatedUser = updateUserRequestsReplies(\r\n      loggedInUser as User,\r\n      amountOfRequests,\r\n      amountOfReplies\r\n    );\r\n    logOut(updatedUser, (): void => {\r\n      stopCounter(intervalId as NodeJS.Timeout);\r\n      dispatch(setIsNewRequest(false));\r\n      dispatch(setAmountOfRequests(0));\r\n      dispatch(setAmountOfReplies(0));\r\n      push(\"/\");\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  checkUserLoggedIn,\r\n  setErrorMessage,\r\n  setLoggedInUser,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../app/typeDefinitions\";\r\n\r\ninterface RoutingMethods {\r\n  protectRoute: Function;\r\n}\r\n\r\nexport const useRouting = (): RoutingMethods => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return {\r\n    protectRoute: (callbackFunction: Function): void => {\r\n      dispatch(checkUserLoggedIn())\r\n        .unwrap()\r\n        .then((user: User): void => {\r\n          dispatch(setLoggedInUser(user));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          if (rejectedValue.message !== \"Unauthorized user\") {\r\n            dispatch(setErrorMessage(rejectedValue.message));\r\n          }\r\n        });\r\n    },\r\n  };\r\n};\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  deletePlantImage,\r\n  setErrorMessage,\r\n  setIsDeletingPlantImage,\r\n  setIsUploadingPlantImage,\r\n  uploadPlantImage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { DestroyImageData, UploadImageData } from \"../typeDefinitions\";\r\n\r\ninterface PlantImageMethods {\r\n  createImage: Function;\r\n  deleteImage: Function;\r\n}\r\n\r\nexport const usePlantImage = (): PlantImageMethods => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return {\r\n    createImage: (uploadForm: any, callbackFunction: Function): void => {\r\n      dispatch(setIsUploadingPlantImage(true));\r\n      dispatch(uploadPlantImage(uploadForm))\r\n        .unwrap()\r\n        .then((uploadImageData: UploadImageData): void => {\r\n          callbackFunction(uploadImageData);\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    deleteImage: (destroyImageData: DestroyImageData): void => {\r\n      dispatch(setIsDeletingPlantImage(true));\r\n      dispatch(deletePlantImage(destroyImageData))\r\n        .unwrap()\r\n        .then((): void => {\r\n          return;\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n  };\r\n};\r\n","import { MouseEventHandler } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface GoBackButtonProps {\r\n  clickHandler: MouseEventHandler;\r\n}\r\n\r\nconst GoBackButton = ({ clickHandler }: GoBackButtonProps): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"text-right\">\r\n      <button\r\n        className=\"[ button--width-medium ] [ btn btn-sm form-control px-4 mt-4 ]\"\r\n        onClick={clickHandler}\r\n      >\r\n        {t(\"button.goBack\")}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoBackButton;\r\n","import { useEffect, useMemo } from \"react\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { usePlantImage } from \"../../app/custom-hooks/usePlantImage\";\r\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\r\nimport {\r\n  selectErrorMessage,\r\n  selectIsCreatingPlant,\r\n  selectIsUploadingPlantImage,\r\n  selectLoggedInUser,\r\n  setErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { UploadImageData } from \"../../app/typeDefinitions\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\r\n\r\nconst PlantCreateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isUploadingPlantImage = useAppSelector(selectIsUploadingPlantImage);\r\n  const isCreatingPlant = useAppSelector(selectIsCreatingPlant);\r\n  const errorMessage = useAppSelector(selectErrorMessage);\r\n  const dispatch = useAppDispatch();\r\n  const { push, goBack } = useHistory();\r\n  const { t } = useTranslation();\r\n  const { protectRoute } = useRouting();\r\n  const { createImage } = usePlantImage();\r\n  const { createPlant } = usePlant();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      dispatch(setErrorMessage(null));\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const buttonState = useMemo(\r\n    (): boolean => (isUploadingPlantImage || isCreatingPlant ? true : false),\r\n    [isUploadingPlantImage, isCreatingPlant]\r\n  );\r\n\r\n  const handleUploadPlantImage = (\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ): void => {\r\n    const { target } = event as any;\r\n    const { plantImage } = target as any;\r\n    const image = plantImage.files[0];\r\n    event.preventDefault();\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    createImage(\r\n      uploadForm,\r\n      ({ imageUrl, imagePublicId }: UploadImageData): void => {\r\n        createPlant(target, { imageUrl, imagePublicId }, (): void => {\r\n          push(\"/plants/my-own\");\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Name missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.nameMissing\");\r\n      case \"Form: Description missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.descriptionMissing\");\r\n      case \"Form: Size missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.sizeMissing\");\r\n      case \"Form: Location missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.locationMissing\");\r\n      case \"Form: Price missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.priceMissing\");\r\n      case \"Form: Image missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.imageMissing\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  const handleGoBack = (): void => {\r\n    goBack();\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"col-12 col-md-6 offset-md-4 mt-5\">\r\n        <h2 className=\"text-left mb-5\">\r\n          {t(\"texts.plants.createPlant.form.headline\")}\r\n        </h2>\r\n        <form className=\"form-style\" onSubmit={handleUploadPlantImage}>\r\n          <label htmlFor=\"enterName\">\r\n            {t(\"texts.plants.createPlant.form.name\")}\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterName\"\r\n            name=\"name\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            className=\"form-control w-100 mb-4\"\r\n          />\r\n          <label htmlFor=\"enterDescription\">\r\n            {t(\"texts.plants.createPlant.form.description\")}\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterDescription\"\r\n            name=\"description\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            className=\"form-control w-100 mb-4\"\r\n          />\r\n          <label htmlFor=\"enterSize\">\r\n            {t(\"texts.plants.createPlant.form.size\")}\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterSize\"\r\n            name=\"size\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            min=\"1\"\r\n            className=\"form-control w-100 mb-4\"\r\n          />\r\n          <label htmlFor=\"enterLocation\">\r\n            {t(\"texts.plants.createPlant.form.location\")}\r\n          </label>\r\n          <select\r\n            id=\"enterLocation\"\r\n            name=\"location\"\r\n            className=\"form-control p-2 mb-4\"\r\n          >\r\n            <option>{t(\"select.location.title\")}</option>\r\n            <option value=\"sun\">{t(\"select.location.sun\")}</option>\r\n            <option value=\"shade\">{t(\"select.location.shade\")}</option>\r\n            <option value=\"sun and shade\">\r\n              {t(\"select.location.sunAndShade\")}\r\n            </option>\r\n          </select>\r\n          <label htmlFor=\"enterPrice\">\r\n            {t(\"texts.plants.createPlant.form.price\")}\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterPrice\"\r\n            name=\"price\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            min=\"1\"\r\n            className=\"form-control w-100 mb-4\"\r\n          />\r\n          <label htmlFor=\"enterImage\">\r\n            {t(\"texts.plants.createPlant.form.image\")}\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"enterImage\"\r\n            name=\"plantImage\"\r\n            className=\"form-control w-100 mb-4\"\r\n          />\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <div className=\"col-12 text-right pr-0\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={buttonState}\r\n              className={`\r\n                [\r\n                  button--width-medium\r\n                ]\r\n                [\r\n                  btn\r\n                  btn-sm\r\n                  form-control\r\n                  px-4\r\n                  mr-0\r\n                  mb-2\r\n                ]\r\n              `}\r\n            >\r\n              {t(\"button.create\")}\r\n            </button>\r\n            <GoBackButton clickHandler={handleGoBack} />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantCreateForm;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst PlantDetailsBuyerItems = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/plants/checkout\" className=\"navigation-link\">\r\n        <button\r\n          className={`\r\n            [ \r\n              button--width-medium \r\n            ]\r\n            [ \r\n              btn\r\n              btn-sm\r\n              form-control\r\n              px-4\r\n              mx-2\r\n              mb-2 \r\n            ]          \r\n          `}\r\n        >\r\n          {t(\"button.buy\")}\r\n        </button>\r\n      </Link>\r\n      <Link to=\"/messages/create\" className=\"navigation-link\">\r\n        <button\r\n          className={`\r\n            [ \r\n              button--width-medium \r\n            ]\r\n            [ \r\n              btn\r\n              btn-sm\r\n              form-control\r\n              px-4\r\n              mr-0\r\n              mb-2 \r\n            ]   \r\n          `}\r\n        >\r\n          {t(\"button.swap\")}\r\n        </button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetailsBuyerItems;\r\n","import { useMemo } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\r\nimport { usePlantImage } from \"../../app/custom-hooks/usePlantImage\";\r\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\r\nimport {\r\n  selectIsDeletingMessage,\r\n  selectIsDeletingPlant,\r\n  selectIsDeletingPlantImage,\r\n  selectMessages,\r\n  selectPlant,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../../app/typeDefinitions\";\r\n\r\nconst PlantDetailsCreatorChoice = (): JSX.Element => {\r\n  const plant = useAppSelector(selectPlant);\r\n  const isDeletingPlant = useAppSelector(selectIsDeletingPlant);\r\n  const isDeletingPlantImage = useAppSelector(selectIsDeletingPlantImage);\r\n  const messages = useAppSelector(selectMessages);\r\n  const isDeletingMessage = useAppSelector(selectIsDeletingMessage);\r\n  const { goBack } = useHistory();\r\n  const { t } = useTranslation();\r\n  const { deleteRemainingMessages } = useMessage();\r\n  const { deleteImage } = usePlantImage();\r\n  const { deletePlant } = usePlant();\r\n  const { _id, imagePublicId } = plant as Plant;\r\n\r\n  const buttonState = useMemo(\r\n    (): boolean =>\r\n      isDeletingMessage || isDeletingPlantImage || isDeletingPlant\r\n        ? true\r\n        : false,\r\n    [isDeletingMessage, isDeletingPlantImage, isDeletingPlant]\r\n  );\r\n\r\n  const handleDeletePlant = (): void => {\r\n    deleteRemainingMessages(messages, _id);\r\n    deleteImage({ imagePublicId });\r\n    deletePlant(_id, (): void => {\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-0\">\r\n      <Link to={\"/plants/update\"} className=\"navigation-link\">\r\n        <button\r\n          className={`\r\n            [ \r\n              button--width-medium \r\n            ]\r\n            [ \r\n              btn\r\n              btn-sm\r\n              form-control\r\n              px-4\r\n              mx-2\r\n              mb-2 \r\n            ]   \r\n          `}\r\n        >\r\n          {t(\"button.update\")}\r\n        </button>\r\n      </Link>\r\n      <button\r\n        disabled={buttonState}\r\n        className={`\r\n          [ \r\n            button--width-medium \r\n          ]\r\n          [ \r\n            btn\r\n            btn-sm\r\n            form-control\r\n            px-4\r\n            mr-0\r\n            mb-2 \r\n          ]    \r\n        `}\r\n        onClick={handleDeletePlant}\r\n      >\r\n        {t(\"button.delete\")}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetailsCreatorChoice;\r\n","import PlantDetailsBuyerChoice from \"./PlantDetailsBuyerChoice\";\r\nimport PlantDetailsCreatorChoice from \"./PlantDetailsCreatorChoice\";\r\n\r\ninterface PlantDetailsUserChoiceProps {\r\n  isCreator: boolean;\r\n}\r\n\r\nconst PlantDetailsUserChoice = ({\r\n  isCreator,\r\n}: PlantDetailsUserChoiceProps): JSX.Element => {\r\n  if (isCreator) {\r\n    return <PlantDetailsCreatorChoice />;\r\n  }\r\n  return <PlantDetailsBuyerChoice />;\r\n};\r\n\r\nexport default PlantDetailsUserChoice;\r\n","interface PlantItemProps {\r\n  keyword: string;\r\n  description: string | undefined;\r\n}\r\n\r\nconst PlantItem = ({ keyword, description }: PlantItemProps): JSX.Element => {\r\n  return (\r\n    <div className=\"ml-2 mt-2\">\r\n      <span className=\"font-weight-bold\">{keyword}</span> {description}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantItem;\r\n","import { useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { selectLoggedInUser } from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, User } from \"../../app/typeDefinitions\";\r\nimport PlantDetailsUserChoice from \"./PlantDetailsUserChoice\";\r\nimport PlantItem from \"./PlantItem\";\r\nimport GoBackButton from \"../helpers/GoBackButton\";\r\n\r\ninterface PlantItemsProps {\r\n  plant: Plant;\r\n}\r\n\r\nconst PlantItems = ({\r\n  plant: { name, description, size, imageUrl, location, price, creator },\r\n}: PlantItemsProps): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const { t } = useTranslation();\r\n  const { goBack } = useHistory();\r\n  const { _id } = loggedInUser as User;\r\n\r\n  const handleGoBack = (): void => {\r\n    goBack();\r\n  };\r\n\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"[ thumbnail-card--width-large ] [ card ]\">\r\n        <img\r\n          src={imageUrl}\r\n          loading=\"lazy\"\r\n          alt={name}\r\n          className=\"[ thumbnail-card--width-large ] [ card-img-top ]\"\r\n        />\r\n        <PlantItem\r\n          keyword={t(\"texts.plants.plantDetails.name\")}\r\n          description={name}\r\n        />\r\n        <PlantItem\r\n          keyword={t(\"texts.plants.plantDetails.description\")}\r\n          description={description}\r\n        />\r\n        <PlantItem\r\n          keyword={t(\"texts.plants.plantDetails.size\")}\r\n          description={`${size} ${t(\"texts.plants.plantDetails.sizeUnit\")}`}\r\n        />\r\n        <PlantItem\r\n          keyword={t(\"texts.plants.plantDetails.likes\")}\r\n          description={location}\r\n        />\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"font-weight-bold\"></span>{\" \"}\r\n        </div>\r\n        <PlantItem\r\n          keyword={t(\"texts.plants.plantDetails.price\")}\r\n          description={`${price} ${t(\"texts.plants.plantDetails.currency\")}`}\r\n        />\r\n        <div className=\"col justify-content-center ml-2 mt-2\">\r\n          <div className=\"row-2 justify-content-center\">\r\n            <div className=\"card-body text-right pt-0\">\r\n              <PlantDetailsUserChoice\r\n                isCreator={(creator as User)._id === _id}\r\n              />\r\n              <GoBackButton clickHandler={handleGoBack} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantItems;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\r\nimport {\r\n  selectIsFetchingPlant,\r\n  selectLoggedInUser,\r\n  selectPlant,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, PlantId } from \"../../app/typeDefinitions\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport PlantItems from \"../../components/plants/PlantItems\";\r\n\r\nconst PlantDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const plant = useAppSelector(selectPlant);\r\n  const isFetchingPlant = useAppSelector(selectIsFetchingPlant);\r\n  const { plantId } = useParams<{ plantId: PlantId }>();\r\n  const { t } = useTranslation();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchPlant } = usePlant();\r\n  const { scrollToTop } = scroll;\r\n  const { creator } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      fetchPlant(plantId, (): void => {\r\n        scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/sign-up\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row row-md-10 offset-md-4 mt-5\">\r\n      <div className=\"container pt-4 mt-4 mb-3\">\r\n        <h2>{t(\"texts.plants.plantDetails.headline\")}</h2>\r\n      </div>\r\n      {isFetchingPlant || !creator ? (\r\n        <WaitSpinner />\r\n      ) : (\r\n        <PlantItems plant={plant} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import { useEffect, useMemo, useRef } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { usePlantImage } from \"../../app/custom-hooks/usePlantImage\";\r\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\r\nimport {\r\n  setPlant,\r\n  setDestroyImageData,\r\n  selectLoggedInUser,\r\n  selectIsUploadingPlantImage,\r\n  selectIsDeletingPlantImage,\r\n  selectDestroyImageData,\r\n  selectPlant,\r\n  selectIsUpdatingPlant,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, UploadImageData } from \"../../app/typeDefinitions\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\n\r\nconst PlantUpdateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isUploadingPlantImage = useAppSelector(selectIsUploadingPlantImage);\r\n  const isDeletingPlantImage = useAppSelector(selectIsDeletingPlantImage);\r\n  const destroyImageData = useAppSelector(selectDestroyImageData);\r\n  const plant = useAppSelector(selectPlant);\r\n  const isUpdatingPlant = useAppSelector(selectIsUpdatingPlant);\r\n  const dispatch = useAppDispatch();\r\n  const selectElementRef = useRef<HTMLSelectElement | null>(null);\r\n  const { t } = useTranslation();\r\n  const { goBack } = useHistory();\r\n  const { protectRoute } = useRouting();\r\n  const { createImage, deleteImage } = usePlantImage();\r\n  const { updatePlant } = usePlant();\r\n  const { scrollToTop } = scroll;\r\n  const { name, description, size, imageUrl, price } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    const setPlantLocation = ({ location }: Plant): void => {\r\n      if (location) {\r\n        (selectElementRef.current as HTMLSelectElement).value = location;\r\n      }\r\n    };\r\n\r\n    protectRoute((): void => {\r\n      setPlantLocation(plant);\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const buttonState = useMemo(\r\n    (): boolean =>\r\n      isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant\r\n        ? true\r\n        : false,\r\n    [isUploadingPlantImage, isDeletingPlantImage, isUpdatingPlant]\r\n  );\r\n\r\n  const handlePlantEntryChange = (\r\n    {\r\n      target: { name, value },\r\n    }: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\r\n    plant: Plant\r\n  ): void => {\r\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\r\n    switch (name) {\r\n      case \"name\":\r\n        clonedPlant.name = value;\r\n        break;\r\n      case \"description\":\r\n        clonedPlant.description = value;\r\n        break;\r\n      case \"size\":\r\n        clonedPlant.size = Number(value);\r\n        break;\r\n      case \"location\":\r\n        clonedPlant.location = value;\r\n        break;\r\n      case \"price\":\r\n        clonedPlant.price = Number(value);\r\n    }\r\n    dispatch(setPlant(clonedPlant));\r\n  };\r\n\r\n  const handlePlantImageChange = (\r\n    { target }: React.ChangeEvent<HTMLInputElement>,\r\n    { imagePublicId }: Plant\r\n  ): void => {\r\n    const image = (target.files as any)[0];\r\n    dispatch(setDestroyImageData({ imagePublicId }));\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    createImage(\r\n      uploadForm,\r\n      ({ imageUrl, imagePublicId }: UploadImageData): void => {\r\n        const clonedPlant = JSON.parse(JSON.stringify(plant));\r\n        clonedPlant.imagePublicId = imagePublicId;\r\n        clonedPlant.imageUrl = imageUrl;\r\n        dispatch(setPlant(clonedPlant));\r\n      }\r\n    );\r\n  };\r\n\r\n  const handleUpdatePlant = () => {\r\n    if (destroyImageData) {\r\n      deleteImage(destroyImageData);\r\n    }\r\n    updatePlant(plant, (): void => {\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"col-12 col-md-6 offset-md-6 mt-2\">\r\n        <h2 className=\"text-left mt-5 mb-4 \">\r\n          {t(\"texts.plants.updatePlant.form.headline\")}\r\n        </h2>\r\n        <div className=\"[ thumbnail-card--width-large ] [ card mb-5 ]\">\r\n          {isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant ? (\r\n            <WaitSpinner />\r\n          ) : (\r\n            <img\r\n              src={imageUrl}\r\n              loading=\"lazy\"\r\n              alt={name}\r\n              className=\"[ image image--size-medium ] [ mb-2 ]\"\r\n            />\r\n          )}\r\n          <div className=\"card-body\">\r\n            <label htmlFor=\"updateName\">\r\n              {t(\"texts.plants.updatePlant.form.name\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateName\"\r\n              name=\"name\"\r\n              value={name}\r\n              className=\"form-control mb-4\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateDescription\">\r\n              {t(\"texts.plants.updatePlant.form.description\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateDescription\"\r\n              name=\"description\"\r\n              value={description}\r\n              className=\"form-control mb-4\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateSize\">\r\n              {t(\"texts.plants.updatePlant.form.size\")}\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updateSize\"\r\n              name=\"size\"\r\n              value={size}\r\n              min=\"1\"\r\n              className=\"form-control mb-4\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateLocation\">\r\n              {t(\"texts.plants.updatePlant.form.location\")}\r\n            </label>\r\n            <select\r\n              ref={selectElementRef}\r\n              id=\"updateLocation\"\r\n              name=\"location\"\r\n              className=\"form-control px-2 mb-4\"\r\n              onChange={(event: React.ChangeEvent<HTMLSelectElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            >\r\n              <option value=\"sun\">{t(\"select.location.sun\")}</option>\r\n              <option value=\"shade\">{t(\"select.location.shade\")}</option>\r\n              <option value=\"sun and shade\">\r\n                {t(\"select.location.sunAndShade\")}\r\n              </option>\r\n            </select>\r\n            <label htmlFor=\"updatePrice\">\r\n              {t(\"texts.plants.updatePlant.form.price\")}\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updatePrice\"\r\n              name=\"price\"\r\n              value={price}\r\n              min=\"1\"\r\n              className=\"form-control mb-4\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateImage\">\r\n              {t(\"texts.plants.updatePlant.form.image\")}\r\n            </label>\r\n            <input\r\n              type=\"file\"\r\n              id=\"updateImage\"\r\n              name=\"plantImage\"\r\n              className=\"form-control mb-4\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantImageChange(event, plant);\r\n              }}\r\n            />\r\n            <div className=\"col-12 text-right pr-0\">\r\n              <button\r\n                disabled={buttonState}\r\n                className={`\r\n                  [\r\n                    button--width-medium\r\n                  ]\r\n                  [\r\n                    btn\r\n                    btn-sm\r\n                    form-control\r\n                    px-4\r\n                    mr-0\r\n                    mb-2\r\n                  ]\r\n                `}\r\n                onClick={handleUpdatePlant}\r\n              >\r\n                {t(\"button.save\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantUpdateForm;\r\n","import { useHistory } from \"react-router\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\n\r\ninterface NavigationMethods {\r\n  goToHome: Function;\r\n  goToRequests: Function;\r\n  goToReplies: Function;\r\n}\r\n\r\nexport const useNavigation = (): NavigationMethods => {\r\n  const { push } = useHistory();\r\n  const { scrollToTop } = scroll;\r\n\r\n  return {\r\n    goToHome: (): void => {\r\n      push(\"/\");\r\n      scrollToTop();\r\n    },\r\n\r\n    goToRequests: (): void => {\r\n      push(\"/requests/fetch-all\");\r\n      scrollToTop();\r\n    },\r\n\r\n    goToReplies: (): void => {\r\n      push(\"/replies/fetch-all\");\r\n      scrollToTop();\r\n    },\r\n  };\r\n};\r\n","interface PaymentErrorMessageProps {\r\n  errorMessage: string;\r\n}\r\n\r\nconst PaymentErrorMessage = ({\r\n  errorMessage,\r\n}: PaymentErrorMessageProps): JSX.Element | null => {\r\n  if (!errorMessage) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div role=\"alert\" className=\"card-error\">\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaymentErrorMessage;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { usePayment } from \"../../app/custom-hooks/usePayment\";\r\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport {\r\n  scrollToPlants,\r\n  selectClientSecret,\r\n  selectPlant,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../../app/typeDefinitions\";\r\nimport { Stripe } from \"@stripe/stripe-js\";\r\nimport PaymentErrorMessage from \"./PaymentErrorMessage\";\r\nimport GoBackButton from \"../helpers/GoBackButton\";\r\n\r\ninterface CardStyle {\r\n  style: {\r\n    base: {\r\n      color: string;\r\n      fontFamily: string;\r\n      fontSmoothing: string;\r\n      fontSize: string;\r\n      \"::placeholder\": { color: string };\r\n    };\r\n    invalid: {\r\n      color: string;\r\n      iconColor: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst PaymentCheckoutForm = (): JSX.Element => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(\"\");\r\n  const clientSecret = useAppSelector(selectClientSecret);\r\n  const plant = useAppSelector(selectPlant);\r\n  const dispatch = useAppDispatch();\r\n  const { push } = useHistory();\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const { initializePayment } = usePayment();\r\n  const { t } = useTranslation();\r\n  const { goToHome } = useNavigation();\r\n  const { _id, name, price } = plant as Plant;\r\n  const cardStyle: CardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    initializePayment(plant);\r\n\r\n    return (): void => {\r\n      push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    };\r\n  }, []);\r\n\r\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    // Stripe.js has not yet been loaded\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n    setIsProcessing(true);\r\n    const payload = await (stripe as Stripe).confirmCardPayment(clientSecret, {\r\n      payment_method: { card: elements.getElement(CardElement) } as any,\r\n    });\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    } else {\r\n      setPaymentError(\"\");\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n\r\n  const handleInputChanges = async ({ empty, error }: any): Promise<void> => {\r\n    setIsDisabled(empty);\r\n    setPaymentError(error ? error.message : \"\");\r\n  };\r\n\r\n  const processingState = (): JSX.Element | string =>\r\n    isProcessing ? (\r\n      <div id=\"spinner\" className=\"spinner font-weight-bold\" />\r\n    ) : (\r\n      t(\"texts.plants.checkout.form.payNow\")\r\n    );\r\n\r\n  const messageVisibility = (): string =>\r\n    isSucceeded ? \"result-message text-center\" : \"result-message--hidden\";\r\n\r\n  const handleGoBack = (): void => {\r\n    goToHome();\r\n  };\r\n\r\n  return (\r\n    <div className=\"container col-md-9 col-sm-12\">\r\n      <h2 className=\"[ payment-checkout-form__headline ] [ text-break mb-4 ]\">\r\n        {name}\r\n      </h2>\r\n      <h3 className=\"mb-4\">\r\n        {t(\"texts.plants.checkout.form.price\")} {price}{\" \"}\r\n        {t(\"texts.plants.checkout.form.currency\")}\r\n      </h3>\r\n      <form\r\n        id=\"payment-form\"\r\n        className=\"[ payment-checkout-form ] [ mt-5 ]\"\r\n        onSubmit={handleSubmitPayment}\r\n      >\r\n        <CardElement\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          className=\"p-2\"\r\n          onChange={handleInputChanges}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            type=\"submit\"\r\n            id=\"submit\"\r\n            disabled={isProcessing || isDisabled || isSucceeded}\r\n            className=\"btn btn-sm card-button mt-5 mb-4\"\r\n          >\r\n            <span id=\"button-text\">{processingState()}</span>\r\n          </button>\r\n        </div>\r\n        {/* Show any error that happens when processing the payment */}\r\n        <PaymentErrorMessage errorMessage={paymentError} />\r\n        {/* Show success message upon completion */}\r\n        <p className={messageVisibility()}>\r\n          {t(\"texts.plants.checkout.form.paymentSuccessful\")}\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        <GoBackButton clickHandler={handleGoBack} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaymentCheckoutForm;\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  createPayment,\r\n  setClientSecret,\r\n  setErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\ninterface PaymentMethods {\r\n  initializePayment: Function;\r\n}\r\n\r\nexport const usePayment = (): PaymentMethods => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return {\r\n    initializePayment: (plant: Plant): void => {\r\n      dispatch(createPayment(plant))\r\n        .unwrap()\r\n        .then((payment: any): void => {\r\n          dispatch(setClientSecret(payment.clientSecret));\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n  };\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { selectLoggedInUser } from \"../../reducer/jungleSwapSlice\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport PaymentCheckoutForm from \"../../components/apis/PaymentCheckoutForm\";\r\n\r\nconst PaymentCheckoutView = (): JSX.Element => {\r\n  const [stripePromise] = useState(() =>\r\n    loadStripe(\r\n      \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n    )\r\n  );\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const { protectRoute } = useRouting();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"col-11 col-md-6 offset-1 offset-md-5 mt-5\">\r\n        <Elements stripe={stripePromise}>\r\n          <PaymentCheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaymentCheckoutView;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { User, Message, Plant } from \"../../app/typeDefinitions\";\r\n\r\ninterface RequestThumbnailProps {\r\n  message: Message;\r\n}\r\n\r\nconst RequestTile = ({\r\n  message: { _id, buyer, plant },\r\n}: RequestThumbnailProps): JSX.Element => {\r\n  const { t } = useTranslation();\r\n  const { name } = (plant as Plant) || {};\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <div className=\"card p-3 mt-4\">\r\n      <h4>\r\n        {t(\"texts.requests.requestTile.headline\")} {name}\r\n      </h4>\r\n      <h5>\r\n        {t(\"texts.requests.requestTile.subheadline\")} {username}\r\n      </h5>\r\n      <div className=\"text-center\">\r\n        <Link to={`/requests/fetch/${_id}`} className=\"navigation-link\">\r\n          <button className=\"[ button--width-medium ] [ btn form-control ]\">\r\n            {t(\"link.details\")}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestTile;\r\n","import { useAppSelector } from \"../../app/hooks\";\r\nimport {\r\n  selectLoggedInUser,\r\n  selectMessages,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Message, User } from \"../../app/typeDefinitions\";\r\nimport RequestTile from \"./RequestTile\";\r\n\r\nconst RequestsCollection = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const messages = useAppSelector(selectMessages);\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((message: Message): JSX.Element | null => {\r\n        const { _id, seller, messageState } = message;\r\n        return (seller as User)._id === (loggedInUser as User)._id &&\r\n          messageState === true ? (\r\n          <RequestTile message={message} key={_id} />\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsCollection;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\r\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\r\nimport {\r\n  selectAmountOfRequests,\r\n  selectiIsFetchingMessages,\r\n  selectIsUserChange,\r\n  selectLoggedInUser,\r\n  setIsNewRequest,\r\n  setStartAmountOfRequests,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport RequestsCollection from \"../../components/requests/RequestsCollection\";\r\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\r\n\r\nconst RequestsView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isUserChange = useAppSelector(selectIsUserChange);\r\n  const isFetchingMessages = useAppSelector(selectiIsFetchingMessages);\r\n  const amountOfRequests = useAppSelector(selectAmountOfRequests);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchMessages } = useMessage();\r\n  const { goToHome } = useNavigation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    const resetRequestVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewRequest(false));\r\n      scrollToTop();\r\n    };\r\n\r\n    protectRoute((): void => {\r\n      fetchMessages((): void => {\r\n        isUserChange && dispatch(setStartAmountOfRequests());\r\n        resetRequestVariableAndScrollToTop();\r\n      });\r\n    });\r\n    return () => {\r\n      resetRequestVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  const handleGoBack = (): void => {\r\n    goToHome();\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\r\n        <h2>{t(\"texts.requests.overview.headline\")}</h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <GoBackButton clickHandler={handleGoBack} />\r\n        {isFetchingMessages ? <WaitSpinner /> : <RequestsCollection />}\r\n        {amountOfRequests !== 0 && <GoBackButton clickHandler={handleGoBack} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsView;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { User, Plant, Message } from \"../../app/typeDefinitions\";\r\n\r\ninterface ReplyThumbnailProps {\r\n  message: Message;\r\n}\r\n\r\nconst ReplyThumbnail = ({\r\n  message: { _id, seller, plant },\r\n}: ReplyThumbnailProps): JSX.Element => {\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"card p-3 mt-4 \">\r\n      <h4>\r\n        {t(\"texts.replies.replyTile.headline\")} \"{name}\"\r\n      </h4>\r\n      <h5>\r\n        {t(\"texts.replies.replyTile.subheadline\")} {username}\r\n      </h5>\r\n      <div className=\"text-center\">\r\n        <Link to={`/replies/fetch/${_id}`} className=\"navigation-link\">\r\n          <button className=\"[ button--width-medium ] [ btn form-control ]\">\r\n            {t(\"link.details\")}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyThumbnail;\r\n","import { useAppSelector } from \"../../app/hooks\";\r\nimport {\r\n  selectLoggedInUser,\r\n  selectMessages,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Message, User } from \"../../app/typeDefinitions\";\r\nimport ReplyTile from \"./ReplyTile\";\r\n\r\nconst RepliesCollection = (): JSX.Element | null => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const messages = useAppSelector(selectMessages);\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((message: Message): JSX.Element | null => {\r\n        const { _id, buyer, reply } = message;\r\n        return (buyer as User)._id === (loggedInUser as User)._id &&\r\n          reply !== \"\" ? (\r\n          <ReplyTile message={message} key={_id} />\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesCollection;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\r\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\r\nimport {\r\n  selectAmountOfReplies,\r\n  selectiIsFetchingMessages,\r\n  selectIsUserChange,\r\n  selectLoggedInUser,\r\n  setIsNewReply,\r\n  setStartAmountOfReplies,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport RepliesCollection from \"../../components/replies/RepliesCollection\";\r\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\r\n\r\nconst RepliesView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isUserChange = useAppSelector(selectIsUserChange);\r\n  const isFetchingMessages = useAppSelector(selectiIsFetchingMessages);\r\n  const amountOfReplies = useAppSelector(selectAmountOfReplies);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchMessages } = useMessage();\r\n  const { goToHome } = useNavigation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    const resetReplyVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewReply(false));\r\n      scrollToTop();\r\n    };\r\n\r\n    protectRoute((): void => {\r\n      fetchMessages((): void => {\r\n        isUserChange && dispatch(setStartAmountOfReplies());\r\n        resetReplyVariableAndScrollToTop();\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      resetReplyVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  const handleGoBack = (): void => {\r\n    goToHome();\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\r\n        <h2>{t(\"texts.replies.overview.headline\")}</h2>\r\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\r\n        <GoBackButton clickHandler={handleGoBack} />\r\n        {isFetchingMessages ? <WaitSpinner /> : <RepliesCollection />}\r\n        {amountOfReplies !== 0 && <GoBackButton clickHandler={handleGoBack} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesView;\r\n","import { useEffect, useMemo } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\r\nimport {\r\n  selectErrorMessage,\r\n  selectIsCreatingMessage,\r\n  selectLoggedInUser,\r\n  selectPlant,\r\n  setErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message } from \"../../app/typeDefinitions\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\r\n\r\nconst RequestCreateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const plant = useAppSelector(selectPlant);\r\n  const isCreatingMessage = useAppSelector(selectIsCreatingMessage);\r\n  const errorMessage = useAppSelector(selectErrorMessage);\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { t } = useTranslation();\r\n  const { protectRoute } = useRouting();\r\n  const { createMessage } = useMessage();\r\n  const { scrollToTop } = scroll;\r\n  const { name } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      dispatch(setErrorMessage(null));\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const buttonState = useMemo(\r\n    (): boolean => (isCreatingMessage ? true : false),\r\n    [isCreatingMessage]\r\n  );\r\n\r\n  const handleCreateMessageForRequest = (\r\n    event: React.FormEvent<HTMLFormElement>,\r\n    { _id, creator }: Plant\r\n  ): void => {\r\n    const {\r\n      target: {\r\n        request: { value },\r\n      },\r\n    } = event as any;\r\n    const newMessage: Message = {\r\n      seller: (creator as User)._id,\r\n      plant: _id,\r\n      request: value,\r\n    };\r\n    event.preventDefault();\r\n    createMessage(newMessage, (): void => {\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Request text missing\":\r\n        return t(\"errorTexts.messages.createRequest.form.requestTextMissing\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  const handleGoBack = (): void => {\r\n    goBack();\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\r\n        <h2 className=\"mb-4\">\r\n          {t(\"texts.requests.createRequest.form.headline\")}\r\n        </h2>\r\n        <h3 className=\"mb-4\">\r\n          {t(\"texts.requests.createRequest.form.subheadline\")} \"{name}\"\r\n        </h3>\r\n        <form\r\n          className=\"request-create-form pl-0\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleCreateMessageForRequest(event, plant);\r\n          }}\r\n        >\r\n          <div>\r\n            <textarea\r\n              name=\"request\"\r\n              cols={35}\r\n              rows={7}\r\n              className=\"form-control w-100 mb-4\"\r\n            />\r\n          </div>\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <div className=\"text-right\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={buttonState}\r\n              className={`\r\n                [ \r\n                  button--width-medium \r\n                ] \r\n                [ \r\n                  btn \r\n                  btn-sm \r\n                  form-control \r\n                  px-4 \r\n                  mr-0 \r\n                  mb-4 \r\n                ]\r\n              `}\r\n            >\r\n              {t(\"button.send\")}\r\n            </button>\r\n            <GoBackButton clickHandler={handleGoBack} />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestCreateForm;\r\n","import WaitSpinner from \"./WaitSpinner\";\r\n\r\ninterface WaitSpinnerTextProps {\r\n  text: string;\r\n}\r\n\r\nconst WaitSpinnerText = ({ text }: WaitSpinnerTextProps): JSX.Element => {\r\n  return (\r\n    <div className=\"container d-flex align-items-center justify-content-center mt-5\">\r\n      <WaitSpinner />\r\n      <span className=\"font-weight-bold\">{text}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitSpinnerText;\r\n","interface ReplyProps {\r\n  headline: string;\r\n  text: string | undefined;\r\n}\r\n\r\nconst Reply = ({ headline, text }: ReplyProps): JSX.Element | null => {\r\n  if (!text) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h5>{headline}</h5>\r\n      <p className=\"text-field p-3 mb-4\">{text}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reply;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\r\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\r\nimport {\r\n  setMessage,\r\n  decreaseAmountOfRequests,\r\n  selectLoggedInUser,\r\n  selectIsFetchingMessage,\r\n  selectMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../../app/typeDefinitions\";\r\nimport WaitSpinnerText from \"../../components/spinners/WaitSpinnerText\";\r\nimport Reply from \"../../components/replies/Reply\";\r\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\r\n\r\nconst RequestDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isFetchingMessage = useAppSelector(selectIsFetchingMessage);\r\n  const message = useAppSelector(selectMessage);\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { t } = useTranslation();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchMessage, updateMessage } = useMessage();\r\n  const { goToRequests } = useNavigation();\r\n  const { scrollToTop } = scroll;\r\n  const { _id, buyer, plant, request, reply } = message as Message;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      fetchMessage(messageId, (): void => {\r\n        scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const handleChangeMessageState = (message: Message): void => {\r\n    const setBuyerMessageInactive = (message: Message): Message => {\r\n      const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n      clonedMessage.messageState = false;\r\n      dispatch(setMessage(clonedMessage));\r\n      return clonedMessage;\r\n    };\r\n\r\n    const updateBuyerMessage = (updatedMessage: Message) => {\r\n      updateMessage(updatedMessage, (): void => {\r\n        dispatch(decreaseAmountOfRequests());\r\n        goBack();\r\n      });\r\n    };\r\n\r\n    const updatedMessage = setBuyerMessageInactive(message);\r\n    updateBuyerMessage(updatedMessage);\r\n  };\r\n\r\n  const handleGoBack = (): void => {\r\n    goToRequests();\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  if (isFetchingMessage || !buyer || !plant) {\r\n    return <WaitSpinnerText text={\"Loading request\"} />;\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\r\n        <h2 className=\"mb-5\">\r\n          {t(\"texts.requests.requestDetails.headline\")} {name}\r\n        </h2>\r\n        <h5>\r\n          {t(\"texts.requests.requestDetails.subheadline\")} {username}\r\n        </h5>\r\n        <p className=\"[ text-field ] [ p-3 mb-4 ]\">{request}</p>\r\n        <Reply\r\n          headline={t(\"texts.requests.requestDetails.yourReply\")}\r\n          text={reply}\r\n        />\r\n        <div className=\"text-right px-3\">\r\n          {!reply && (\r\n            <Link to={`/messages/update/${_id}`} className=\"navigation-link\">\r\n              <button\r\n                className={`\r\n                  [ \r\n                    button--width-medium \r\n                  ] \r\n                  [ \r\n                    btn \r\n                    btn-sm \r\n                    form-control \r\n                    px-4 \r\n                    mx-2 \r\n                    mb-1 \r\n                  ]\r\n                `}\r\n              >\r\n                {t(\"button.reply\")}\r\n              </button>\r\n            </Link>\r\n          )}\r\n          <button\r\n            className={`\r\n              [ \r\n                button--width-medium \r\n              ] \r\n              [ \r\n                btn \r\n                btn-sm \r\n                form-control \r\n                px-4\r\n                ml-2 \r\n                mr-0 \r\n                mb-1 \r\n              ]\r\n            `}\r\n            onClick={(): void => {\r\n              handleChangeMessageState(message);\r\n            }}\r\n          >\r\n            {t(\"button.done\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <GoBackButton clickHandler={handleGoBack} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import { useEffect, useMemo } from \"react\";\r\nimport { useParams, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\r\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\r\nimport {\r\n  decreaseAmountOfReplies,\r\n  selectIsDeletingMessage,\r\n  selectIsFetchingMessage,\r\n  selectLoggedInUser,\r\n  selectMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../../app/typeDefinitions\";\r\nimport WaitSpinnerText from \"../../components/spinners/WaitSpinnerText\";\r\nimport Reply from \"../../components/replies/Reply\";\r\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\r\n\r\nconst ReplyDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const message = useAppSelector(selectMessage);\r\n  const isFetchingMessage = useAppSelector(selectIsFetchingMessage);\r\n  const isDeletingMessage = useAppSelector(selectIsDeletingMessage);\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { t } = useTranslation();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchMessage, deleteMessage } = useMessage();\r\n  const { goToReplies } = useNavigation();\r\n  const { scrollToTop } = scroll;\r\n  const { _id, seller, plant, request, reply } = message as Message;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      fetchMessage(messageId, (): void => {\r\n        scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const buttonState = useMemo(\r\n    (): boolean => (isDeletingMessage ? true : false),\r\n    [isDeletingMessage]\r\n  );\r\n\r\n  const handleDeleteMessage = (messageId: MessageId): void => {\r\n    deleteMessage(messageId, (): void => {\r\n      dispatch(decreaseAmountOfReplies());\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  const handleGoBack = (): void => {\r\n    goToReplies();\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  if (isFetchingMessage || !seller || !plant) {\r\n    return <WaitSpinnerText text={\"Loading reply\"} />;\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\r\n        <h2 className=\"mb-5\">\r\n          {t(\"texts.replies.replyDetails.headline\")} {name}\r\n        </h2>\r\n        <p className=\"[ text-field ] [ p-3 mb-4 ]\">{request}</p>\r\n        <Reply\r\n          headline={`${t(\"texts.replies.replyDetails.replyBy\")} ${username}`}\r\n          text={reply}\r\n        />\r\n        <div className=\"text-right px-3\">\r\n          <button\r\n            disabled={buttonState}\r\n            className={`\r\n              [\r\n                button--width-medium\r\n              ]\r\n              [\r\n                btn\r\n                btn-sm\r\n                form-control\r\n                px-4\r\n                mr-0\r\n                mb-1\r\n              ]\r\n            `}\r\n            onClick={(): void => {\r\n              handleDeleteMessage(_id as MessageId);\r\n            }}\r\n          >\r\n            {t(\"button.delete\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <GoBackButton clickHandler={handleGoBack} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyDetails;\r\n","import { useEffect, useMemo } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\r\nimport {\r\n  selectErrorMessage,\r\n  selectIsUpdatingMessage,\r\n  selectLoggedInUser,\r\n  selectMessage,\r\n  setMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Message } from \"../../app/typeDefinitions\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\r\n\r\nconst RequestUpdateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const message = useAppSelector(selectMessage);\r\n  const isUpdatingMessage = useAppSelector(selectIsUpdatingMessage);\r\n  const errorMessage = useAppSelector(selectErrorMessage);\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { t } = useTranslation();\r\n  const { protectRoute } = useRouting();\r\n  const { updateMessage } = useMessage();\r\n  const { scrollToTop } = scroll;\r\n  const { request } = message as Message;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const buttonState = useMemo(\r\n    (): boolean => (isUpdatingMessage ? true : false),\r\n    [isUpdatingMessage]\r\n  );\r\n\r\n  const handleCreateReply = (\r\n    { target: { value } }: React.ChangeEvent<HTMLTextAreaElement>,\r\n    message: Message\r\n  ): void => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.reply = value;\r\n    dispatch(setMessage(clonedMessage));\r\n  };\r\n\r\n  const handleUpdateMessage = (updatedMessage: Message): void => {\r\n    updateMessage(updatedMessage, (): void => {\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    goBack();\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Reply text missing\":\r\n        return t(\"errorTexts.messages.updateRequest.form.replyTextMissing\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-2\">\r\n        <h2 className=\"mt-5 mb-4\">\r\n          {t(\"texts.requests.updateRequest.form.headline\")}\r\n        </h2>\r\n        <div className=\"thumbnail-card--width-medium card mb-5\">\r\n          <div className=\"card-body\">\r\n            <p>{request}</p>\r\n            <textarea\r\n              name=\"reply\"\r\n              placeholder={t(\r\n                \"texts.requests.updateRequest.form.replyPlaceholder\"\r\n              )}\r\n              cols={31}\r\n              rows={6}\r\n              className=\"form-control w-100 mb-4\"\r\n              onChange={(\r\n                event: React.ChangeEvent<HTMLTextAreaElement>\r\n              ): void => {\r\n                handleCreateReply(event, message);\r\n              }}\r\n            />\r\n            <ErrorMessage\r\n              message={errorMessage}\r\n              outputFunction={convertErrorMessage}\r\n            />\r\n            <div className=\"text-right px-3\">\r\n              <button\r\n                disabled={buttonState}\r\n                className={`\r\n                  [\r\n                    button--width-medium\r\n                  ]\r\n                  [\r\n                    btn \r\n                    btn-sm \r\n                    form-control \r\n                    px-4\r\n                    mr-0\r\n                    mb-2\r\n                  ]                \r\n                `}\r\n                onClick={(): void => {\r\n                  handleUpdateMessage(message);\r\n                }}\r\n              >\r\n                {t(\"button.submit\")}\r\n              </button>\r\n              <GoBackButton clickHandler={handleGoBack} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestUpdateForm;\r\n","import { useTranslation } from \"react-i18next\";\r\n\r\nconst Unauthorized = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div\r\n      className={`\r\n        [\r\n          unauthorized-container \r\n        ]\r\n        [\r\n          position-absolute \r\n          d-flex \r\n          justify-content-center \r\n          align-items-center \r\n          w-100  \r\n          overflow-hidden\r\n          text-center\r\n        ]\r\n      `}\r\n    >\r\n      <div>\r\n        <h1 className=\"unauthorized-container__headline\">\r\n          {t(\"texts.unauthorized.headline\")}\r\n        </h1>\r\n        <h2 className=\"[ unauthorized-container__subheadline1 ] [ mb-4 ]\">\r\n          {t(\"texts.unauthorized.subheadline1\")}\r\n        </h2>\r\n        <h3 className=\"[ unauthorized-container__subheadline2 ] [ text-uppercase ]\">\r\n          {t(\"texts.unauthorized.subheadline2\")}\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Unauthorized;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div\r\n      className={`\r\n        [\r\n          not-found-container \r\n        ]\r\n        [\r\n          position-absolute \r\n          d-flex \r\n          justify-content-center \r\n          align-items-center \r\n          w-100  \r\n          overflow-hidden\r\n          text-center\r\n        ]\r\n      `}\r\n    >\r\n      <div>\r\n        <h1 className=\"not-found-container__headline\">\r\n          {t(\"texts.notFound.headline\")}\r\n        </h1>\r\n        <h2 className=\"[ not-found-container__subheadline1 ] [ mb-4 }\">\r\n          {t(\"texts.notFound.subheadline1\")}\r\n        </h2>\r\n        <h3 className=\"[ not-found-container__subheadline2 ] [ text-uppercase mb-4 ]\">\r\n          {t(\"texts.notFound.subheadline2\")}\r\n        </h3>\r\n        <Link to={\"/\"} className=\"navigation-link\">\r\n          <button className=\"[ button--width-medium ] [ btn btn-sm form-control px-3 ]\">\r\n            {t(\"button.takeMeHome\")}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useEffect } from \"react\";\r\nimport { useChat } from \"../../app/custom-hooks/useChat\";\r\n\r\nconst KommunicateChat = (): JSX.Element => {\r\n  const { createLauncherIcon } = useChat();\r\n\r\n  useEffect(() => {\r\n    createLauncherIcon(document, (window as any).kommunicate ?? {});\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default KommunicateChat;\r\n","interface ChatMethods {\r\n  createLauncherIcon: Function;\r\n}\r\n\r\ninterface KommunicateSettings {\r\n  appId: string;\r\n  popupWidget: boolean;\r\n  automaticChatOpenOnNavigation: boolean;\r\n}\r\n\r\nexport const useChat = (): ChatMethods => {\r\n  return {\r\n    createLauncherIcon: (htmlDocument: Document, method: any): void => {\r\n      const kommunicateSettings: KommunicateSettings = {\r\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      const scriptElement = htmlDocument.createElement(\"script\");\r\n      scriptElement.type = \"text/javascript\";\r\n      scriptElement.async = true;\r\n      scriptElement.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      const headElement = htmlDocument.getElementsByTagName(\"head\")[0];\r\n      headElement.appendChild(scriptElement);\r\n      (window as any).kommunicate = method;\r\n      method._globals = kommunicateSettings;\r\n    },\r\n  };\r\n};\r\n","import { useAppSelector } from \"../../app/hooks\";\r\nimport {\r\n  selectLoggedInUser,\r\n  selectPlants,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, User } from \"../../app/typeDefinitions\";\r\nimport PlantThumbnail from \"./PlantThumbnail\";\r\n\r\nconst PlantsCreatedCollection = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const plants = useAppSelector(selectPlants);\r\n\r\n  return (\r\n    <div\r\n      className={`\r\n        row\r\n        row-cols-1\r\n        row-cols-md-2\r\n        row-cols-lg-2\r\n        row-cols-xl-3\r\n        row-cols-xxl-3\r\n      `}\r\n    >\r\n      {plants.map((plant: Plant): JSX.Element | null => {\r\n        const { _id, creator } = plant;\r\n        return (creator as User)._id === (loggedInUser as User)._id ? (\r\n          <PlantThumbnail plant={plant} key={_id} />\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCreatedCollection;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\r\nimport {\r\n  selectIsFetchingPlants,\r\n  selectLoggedInUser,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport PlantsCreatedCollection from \"../../components/plants/PlantsCreatedCollection\";\r\n\r\nconst PlantsCreatedView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isFetchingPlants = useAppSelector(selectIsFetchingPlants);\r\n  const { t } = useTranslation();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchPlants } = usePlant();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      fetchPlants((): void => {\r\n        scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-5\">\r\n        <h2 className=\"plants-created-view__headline\">\r\n          {t(\"texts.plants.myPlants.headline\")}\r\n        </h2>\r\n      </div>\r\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsCreatedCollection />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCreatedView;\r\n","import { useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch } from \"../../app/hooks\";\r\nimport { setErrorMessage } from \"../../reducer/jungleSwapSlice\";\r\n\r\ninterface ModalBodyProps {\r\n  headline: string;\r\n  subheadline: string;\r\n  text: string;\r\n  isClose: boolean;\r\n}\r\n\r\nconst ModalBody = ({\r\n  headline,\r\n  subheadline,\r\n  text,\r\n  isClose,\r\n}: ModalBodyProps): JSX.Element => {\r\n  const divElementRef = useRef<HTMLDivElement | null>(null);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  const handleCloseModal = (): void => {\r\n    dispatch(setErrorMessage(null));\r\n  };\r\n\r\n  const handleClickOutside = ({ target }: any): void => {\r\n    if (divElementRef.current === target && isClose) {\r\n      handleCloseModal();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={divElementRef}\r\n      className={`\r\n        modal-body\r\n        fixed-top\r\n        w-100\r\n        h-100\r\n        d-flex\r\n        justify-content-center\r\n        align-items-center\r\n        flex-col\r\n      `}\r\n      onClick={handleClickOutside}\r\n    >\r\n      <div className=\"[ modal-body__box ] [ text-center ]\">\r\n        <h1 className=\"[ modal-body__box__headline ] [ mt-3 mb-4 ]\">\r\n          {headline}\r\n        </h1>\r\n        <h2 className=\"[ modal-body__box__subheadline ] [ mb-5 ]\">\r\n          {subheadline}\r\n        </h2>\r\n        <h3 className=\"[ modal-body__box__text ] [ text-uppercase mb-5 ]\">\r\n          {text}\r\n        </h3>\r\n        {isClose && (\r\n          <button\r\n            className=\"[ button--width-small ] [ btn form-control mt-4 mb-3 ]\"\r\n            onClick={handleCloseModal}\r\n          >\r\n            {t(\"button.proceed\")}\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalBody;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport ModalBody from \"./ModalBody\";\r\n\r\ninterface ErrorModalProps {\r\n  message: string | null;\r\n}\r\n\r\nconst ErrorModal = ({ message }: ErrorModalProps): JSX.Element | null => {\r\n  const { t } = useTranslation();\r\n\r\n  const convertErrorMessage = (message: string): string => {\r\n    switch (message) {\r\n      // Authentification\r\n      case \"Error while creating user\":\r\n        return t(\"errorTexts.authentification.signUp.errorWhileCreatingUser\");\r\n      case \"User does not exist\":\r\n        return t(\"errorTexts.authentification.signIn.userUnknown\");\r\n      case \"Could not update user\":\r\n        return t(\"errorTexts.authentification.logOut.noUserUpdate\");\r\n      // Plants\r\n      case \"Create plant failed\":\r\n        return t(\"errorTexts.plants.createPlantFailed\");\r\n      case \"Fetch plant failed\":\r\n        return t(\"errorTexts.plants.fetchPlantFailed\");\r\n      case \"Fetch all plants failed\":\r\n        return t(\"errorTexts.plants.techAllPlantsFailed\");\r\n      case \"Search plant failed\":\r\n        return t(\"errorTexts.plants.searchPlantFailed\");\r\n      case \"Update plant failed\":\r\n        return t(\"errorTexts.plants.updatePlantFailed\");\r\n      case \"Delete plant failed\":\r\n        return t(\"errorTexts.plants.deletePlantFailed\");\r\n      // Messages\r\n      case \"Create message failed\":\r\n        return t(\"errorTexts.messages.createMessageFailed\");\r\n      case \"Fetch message failed\":\r\n        return t(\"errorTexts.messages.fetchMessageFailed\");\r\n      case \"Fetch all messages failed\":\r\n        return t(\"errorTexts.messages.fetchAllMessagesFailed\");\r\n      case \"Update message failed\":\r\n        return t(\"errorTexts.updateMessageFailed\");\r\n      case \"Delete message failed\":\r\n        return t(\"errorTexts.deleteMessageFailed\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  if (!message || message.includes(\"Form\")) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ModalBody\r\n      headline={t(\"texts.errorModal.headline\")}\r\n      subheadline={t(\"texts.errorModal.subheadline\")}\r\n      text={convertErrorMessage(message)}\r\n      isClose={true}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorModal;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport ModalBody from \"./ModalBody\";\r\n\r\ninterface OfflineModalProps {\r\n  isOnline: boolean;\r\n}\r\n\r\nconst OfflineModal = ({ isOnline }: OfflineModalProps): JSX.Element | null => {\r\n  const { t } = useTranslation();\r\n\r\n  if (isOnline) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ModalBody\r\n      headline={t(\"texts.offlineModal.headline\")}\r\n      subheadline={t(\"texts.offlineModal.subheadline\")}\r\n      text={t(\"errorTexts.offline\")}\r\n      isClose={false}\r\n    />\r\n  );\r\n};\r\n\r\nexport default OfflineModal;\r\n","import { useAppSelector } from \"../../app/hooks\";\r\nimport { useOnlineStatus } from \"../../app/custom-hooks/useOnlineStatus\";\r\nimport ErrorModal from \"./ErrorModal\";\r\nimport OfflineModal from \"./OfflineModal\";\r\nimport { selectErrorMessage } from \"../../reducer/jungleSwapSlice\";\r\n\r\nconst Modals = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(selectErrorMessage);\r\n  const isOnline = useOnlineStatus();\r\n\r\n  if (isOnline) {\r\n    return <ErrorModal message={errorMessage} />;\r\n  }\r\n  return <OfflineModal isOnline={isOnline} />;\r\n};\r\n\r\nexport default Modals;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useOnlineStatus = (): boolean => {\r\n  const [isOnline, setIsOnline] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    const handleOfflineEventCallback = (): void => {\r\n      setIsOnline(false);\r\n    };\r\n\r\n    const handleOnlineEventCallback = (): void => {\r\n      setIsOnline(true);\r\n    };\r\n\r\n    window.addEventListener(\"offline\", handleOfflineEventCallback);\r\n    window.addEventListener(\"online\", handleOnlineEventCallback);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"offline\", handleOfflineEventCallback);\r\n      window.removeEventListener(\"online\", handleOnlineEventCallback);\r\n    };\r\n  }, []);\r\n\r\n  return isOnline;\r\n};\r\n","import { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport NavBar from \"./components/navigation/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./views/home/Home\";\r\nimport SignUp from \"./views/authentification/SignUp\";\r\nimport SignIn from \"./views/authentification/SignIn\";\r\nimport LogOut from \"./components/authentification/LogOut\";\r\nimport PlantCreateForm from \"./views/plants/PlantCreateForm\";\r\nimport PlantDetails from \"./views/plants/PlantDetails\";\r\nimport PlantUpdateForm from \"./views/plants/PlantUpdateForm\";\r\nimport PaymentCheckoutView from \"./views/apis/PaymentCheckoutView\";\r\nimport RequestsView from \"./views/requests/RequestsView\";\r\nimport RepliesView from \"./views/replies/RepliesView\";\r\nimport RequestCreateForm from \"./views/requests/RequestCreateForm\";\r\nimport RequestDetails from \"./views/requests/RequestDetails\";\r\nimport ReplyDetails from \"./views/replies/ReplyDetails\";\r\nimport RequestUpdateForm from \"./views/requests/RequestUpdateForm\";\r\nimport Unauthorized from \"./views/authentification/Unauthorized\";\r\nimport NotFound from \"./views/errors/NotFound\";\r\nimport KommunicateChat from \"./components/apis/KommunicateChat\";\r\nimport PlantsCreatedView from \"./views/plants/PlantsCreatedView\";\r\nimport Modals from \"./components/modals/Modals\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n\r\n        {/* Authentification */}\r\n        <Route path=\"/auth/sign-up\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/auth/sign-in\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/auth/log-out\">\r\n          <LogOut />\r\n        </Route>\r\n        <Route path=\"/auth/unauthorized\">\r\n          <Unauthorized />\r\n        </Route>\r\n\r\n        {/* Plants */}\r\n        <Route path=\"/plants/create\">\r\n          <PlantCreateForm />\r\n        </Route>\r\n        <Route path=\"/plants/fetch/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <PlantUpdateForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <PaymentCheckoutView />\r\n        </Route>\r\n        <Route path=\"/plants/my-own\">\r\n          <PlantsCreatedView />\r\n        </Route>\r\n\r\n        {/* Messages */}\r\n        <Route path=\"/messages/create\">\r\n          <RequestCreateForm />\r\n        </Route>\r\n        <Route path=\"/messages/update\">\r\n          <RequestUpdateForm />\r\n        </Route>\r\n\r\n        {/* Requests */}\r\n        <Route path=\"/requests/fetch-all\">\r\n          <RequestsView />\r\n        </Route>\r\n        <Route path=\"/requests/fetch/:messageId\">\r\n          <RequestDetails />\r\n        </Route>\r\n\r\n        {/* Replies */}\r\n        <Route path=\"/replies/fetch-all\">\r\n          <RepliesView />\r\n        </Route>\r\n        <Route path=\"/replies/fetch/:messageId\">\r\n          <ReplyDetails />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Modals />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport Backend from \"i18next-http-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\n\r\ni18n\r\n  .use(Backend)\r\n  .use(LanguageDetector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    fallbackLng: \"en\",\r\n    ns: [\"translation\"],\r\n    defaultNS: \"translation\",\r\n    backend: {\r\n      loadPath: \"/locales/{{lng}}/{{ns}}.json\",\r\n    },\r\n    debug: false,\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./app/store\";\r\nimport App from \"./App\";\r\nimport \"./app/i18next.config\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Suspense fallback=\"loading\">\r\n          <App />\r\n        </Suspense>\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}