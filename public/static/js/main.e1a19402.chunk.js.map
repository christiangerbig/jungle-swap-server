{"version":3,"sources":["reducer/jungleSwapSlice.ts","app/config.ts","app/store.ts","app/hooks.ts","app/custom-hooks/useMessage.ts","app/custom-hooks/useIntervalCounter.ts","components/navigation/NavAuthItems.tsx","components/navigation/NavUserItems.tsx","components/navigation/NavAdditionalItems.tsx","components/helpers/SelectLanguage.tsx","components/navigation/NavBar.tsx","components/Footer.tsx","lib/externalLinkPaths.ts","app/custom-hooks/usePlant.ts","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/home/HomeAbout.tsx","components/spinners/WaitSpinner.tsx","components/plants/PlantSearch.tsx","components/plants/PlantThumbnail.tsx","components/plants/PlantsCollection.tsx","components/plants/PlantsCockpit.tsx","components/home/HomeTitle.tsx","views/home/Home.tsx","app/custom-hooks/useAuthentification.ts","components/helpers/ErrorMessage.tsx","views/auth/SignUp.tsx","views/auth/SignIn.tsx","components/auth/LogOut.tsx","app/custom-hooks/useRouting.ts","app/custom-hooks/usePlantImage.ts","components/helpers/GoBackButton.tsx","views/plants/PlantCreateForm.tsx","components/plants/PlantDetailsBuyerChoice.tsx","components/plants/PlantDetailsCreatorChoice.tsx","components/plants/PlantDetailsUserChoice.tsx","components/plants/PlantItem.tsx","components/plants/PlantItems.tsx","views/plants/PlantDetails.tsx","views/plants/PlantUpdateForm.tsx","app/custom-hooks/useNavigation.ts","components/apis/PaymentErrorMessage.tsx","components/apis/PaymentCheckoutForm.tsx","app/custom-hooks/usePayment.ts","views/apis/PaymentCheckoutView.tsx","components/requests/RequestTile.tsx","components/requests/RequestsCollection.tsx","views/requests/RequestsView.tsx","components/replies/ReplyTile.tsx","components/replies/RepliesCollection.tsx","views/replies/RepliesView.tsx","views/requests/RequestCreateForm.tsx","components/spinners/WaitSpinnerText.tsx","components/replies/Reply.tsx","views/requests/RequestDetails.tsx","views/replies/ReplyDetails.tsx","views/requests/RequestUpdateForm.tsx","views/auth/Unauthorized.tsx","views/errors/NotFound.tsx","components/apis/KommunicateChat.tsx","app/custom-hooks/useChat.ts","components/plants/PlantsCreatedCollection.tsx","views/plants/PlantsCreatedView.tsx","components/modals/ModalBody.tsx","components/modals/ErrorModal.tsx","components/modals/OfflineModal.tsx","components/modals/Modals.tsx","app/custom-hooks/useOnlineStatus.ts","components/faq/AccordionItem.tsx","components/faq/Accordion.tsx","views/faq/FaqView.jsx","app/custom-hooks/useFaqData.ts","App.tsx","app/i18next.config.ts","index.tsx"],"names":["apiPath","concat","process","rejectWithValue","data","Error","signUp","createAsyncThunk","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newUser","_yield$axios$post","error","wrap","_context","prev","next","axios","post","sent","abrupt","t0","response","stop","_x","apply","arguments","signIn","_ref3","_callee2","user","_yield$axios$post2","_context2","withCredentials","_x2","logOut","_ref5","_callee3","_context3","_x3","checkUserLoggedIn","_callee4","_yield$axios$get","_context4","get","createPlant","_ref9","_callee5","newPlant","_yield$axios$post3","_context5","_x4","fetchAllPlants","_callee6","_yield$axios$get2","_context6","fetchQueryPlants","_ref13","_callee7","query","_yield$axios$get3","_context7","_x5","fetchPlant","_ref15","_callee8","plantId","_yield$axios$get4","_context8","_x6","updatePlant","_ref18","_callee9","_ref17","updatedPlant","_yield$axios$patch","_context9","patch","_x7","deletePlant","_ref20","_callee10","_context10","delete","_x8","uploadPlantImage","_ref22","_callee11","uploadForm","_yield$axios$post4","_context11","_x9","deletePlantImage","_ref24","_callee12","destroyImageData","_context12","_x10","createPayment","_ref27","_callee13","_ref26","price","_yield$axios$post5","_context13","_x11","createMessage","_ref29","_callee14","newMessage","_yield$axios$post6","_context14","_x12","fetchAllMessages","_callee15","_yield$axios$get5","_context15","fetchMessage","_ref33","_callee16","messageId","_yield$axios$get6","_context16","_x13","updateMessage","_ref36","_callee17","_ref35","updatedMessage","_yield$axios$patch2","_context17","_x14","deleteMessage","_ref38","_callee18","_context18","_x15","jungleSwapSlice","createSlice","name","initialState","isUserChange","loggedInUser","isCreatingPlant","isFetchingPlants","isFetchingPlant","isUpdatingPlant","isDeletingPlant","plant","plants","filteredPlants","numberOfVisibleEntries","isUploadingPlantImage","isDeletingPlantImage","clientSecret","isCreatingMessage","isFetchingMessages","isFetchingMessage","isUpdatingMessage","isDeletingMessage","messages","message","isNewRequest","isNewReply","amountOfRequests","amountOfReplies","intervalId","delayCounter","titleSectionHeight","aboutSectionHeight","isLanguageChange","errorMessage","reducers","setIsUserChange","state","_ref40","payload","setLoggedInUser","_ref41","setIsCreatingPlant","_ref42","setIsFetchingPlants","_ref43","setIsFetchingPlant","_ref44","setIsUpdatingPlant","_ref45","setIsDeletingPlant","_ref46","addPlant","_ref47","push","setPlant","_ref48","setPlants","_ref49","setFilteredPlants","_ref50","setPlantChanges","_ref51","_ref51$payload","_id","description","size","imageUrl","imagePublicId","location","map","singlePlant","removePlant","_ref52","filter","setNumberOfVisibleEntries","_ref53","setIsUploadingPlantImage","_ref54","setIsDeletingPlantImage","_ref55","setDestroyImageData","_ref56","setClientSecret","_ref57","setIsCreatingMessage","_ref58","setIsFetchingMessages","_ref59","setIsFetchingMessage","_ref60","setIsUpdatingMessage","_ref61","setIsDeletingMessage","_ref62","addMessage","_ref63","setMessages","_ref64","setMessage","_ref65","setMessageChanges","_ref66","_ref66$payload","buyer","seller","request","reply","messageState","singleMessage","removeMessage","_ref67","setIsNewRequest","_ref68","setIsNewReply","_ref69","setStartAmountOfRequests","setStartAmountOfReplies","setAmountOfRequests","_ref70","setAmountOfReplies","_ref71","decreaseAmountOfRequests","decreaseAmountOfReplies","setIntervalId","_ref72","setDelayCounter","_ref73","increaseDelayCounter","setTitleSectionHeight","_ref74","setAboutSectionHeight","_ref75","scrollToAbout","scroll","scrollTo","scrollToPlants","setIsLanguageChange","_ref76","setErrorMessage","_ref77","extraReducers","builder","addCase","fulfilled","rejected","selectors","_ref78","jungleSwap","_ref79","_ref80","_ref81","_ref82","_ref83","_ref84","_ref85","_ref86","_ref87","_ref88","_ref89","_ref90","_ref91","_ref92","_ref93","_ref94","_ref95","_ref96","_ref97","_ref98","_ref99","_ref100","_ref101","_ref102","_ref103","_ref104","_ref105","_ref108","_ref109","_jungleSwapSlice$acti","actions","selectIsUserChange","selectLoggedInUser","selectIsCreatingPlant","selectIsFetchingPlants","selectIsFetchingPlant","selectIsUpdatingPlant","selectIsDeletingPlant","selectPlant","selectPlants","selectfFilteredPlants","selectNumberOfVisibleEntries","selectIsUploadingPlantImage","selectIsDeletingPlantImage","selectDestroyImageData","selectClientSecret","selectIsCreatingMessage","selectiIsFetchingMessages","selectIsFetchingMessage","selectIsUpdatingMessage","selectIsDeletingMessage","selectMessages","selectMessage","selectIsNewRequest","selectIsNewReply","selectAmountOfRequests","selectAmountOfReplies","selectIntervalId","selectDelayCounter","selectIsLanguageChange","selectErrorMessage","store","configureStore","reducer","useAppDispatch","useDispatch","useAppSelector","useSelector","useMessage","dispatch","callback","unwrap","then","catch","rejectedValue","fetchMessages","fetchCheck","deleteRemainingMessages","forEach","checkNewRequests","_ref2","currentAmountOfRequests","length","calculateAmountOfRequests","checkAmountOfRequests","checkNewReplies","_ref4","currentAmountOfReplies","calculateAmountOfReplies","checkAmountOfReplies","useIntervalCounter","stopCounter","clearInterval","NavAuthItems","t","useTranslation","_jsxs","_Fragment","children","_jsx","Link","to","className","NavUserItems","title","FontAwesomeIcon","icon","faBell","username","NavAdditionalItems","SelectLanguage","_useTranslation","i18n","faLanguage","onChange","value","target","changeLanguage","NavBar","_useMessage","scrollToTop","useEffect","setInterval","startInterval","Navbar","variant","expand","fixed","Brand","onClick","Toggle","Collapse","id","Nav","faSearch","Footer","year","Date","getFullYear","pathname","rel","usePlant","fetchPlants","searchPlant","HomeAbout","src","plantsImage","loading","alt","plantPotIcon","WaitSpinner","role","PlantSearch","_useState","useState","_useState2","_slicedToArray","setQuery","_useState3","_useState4","selectedOptions","setSelectedOptions","_usePlant","fetchPlantQueryByName","selectedLocations","option","selectedLocation","filterPlantsByLocation","optionsChoice","label","localizationTexts","allItemsAreSelected","clearSearch","noOptions","search","selectAll","selectAllFiltered","selectSomeItems","create","type","placeholder","MultiSelect","labelledBy","options","overrideStrings","disableSearch","PlantThumbnail","_ref$plant","PlantsCollection","index","PlantsCockpit","HomeTitle","Home","elementRef","useRef","elementHeight","Math","round","getBoundingClientRect","height","current","ref","titleSection","aboutSection","useAuthentification","updateUserRequestsReplies","clonedUser","JSON","parse","stringify","ErrorMessage","outputFunction","includes","SignUp","useHistory","onSubmit","event","_ref$target","email","password","toLowerCase","preventDefault","htmlFor","formNoValidate","SignIn","LogOut","_useAuthentification","updatedUser","useRouting","protectRoute","usePlantImage","createImage","uploadImageData","deleteImage","GoBackButton","clickHandler","PlantCreateForm","_useHistory","goBack","buttonState","useMemo","image","plantImage","files","FormData","append","min","disabled","Redirect","PlantDetailsBuyerItems","PlantDetailsCreatorChoice","PlantDetailsUserChoice","isCreator","PlantDetailsBuyerChoice","PlantItem","keyword","PlantItems","creator","PlantDetails","useParams","PlantUpdateForm","selectElementRef","_usePlantImage","setPlantLocation","handlePlantEntryChange","_ref3$target","clonedPlant","Number","_ref6","handlePlantImageChange","useNavigation","goToHome","goToRequests","goToReplies","PaymentErrorMessage","PaymentCheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","_useState5","_useState6","isDisabled","setIsDisabled","_useState7","_useState8","paymentError","setPaymentError","stripe","useStripe","elements","useElements","_usePayment","initializePayment","payment","usePayment","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","handleInputChanges","empty","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","PaymentCheckoutView","loadStripe","stripePromise","Elements","RequestTile","_ref$message","RequestsCollection","RequestsView","resetRequestVariableAndScrollToTop","handleGoBack","ReplyThumbnail","RepliesCollection","ReplyTile","RepliesView","resetReplyVariableAndScrollToTop","RequestCreateForm","handleCreateMessageForRequest","cols","rows","WaitSpinnerText","text","Reply","headline","RequestDetails","clonedMessage","setBuyerMessageInactive","updateBuyerMessage","handleChangeMessageState","ReplyDetails","handleDeleteMessage","RequestUpdateForm","handleCreateReply","Unauthorized","NotFound","KommunicateChat","createLauncherIcon","htmlDocument","method","scriptElement","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","_kommunicate","document","PlantsCreatedCollection","PlantsCreatedView","ModalBody","subheadline","isClose","divElementRef","handleCloseModal","ErrorModal","convertErrorMessage","OfflineModal","isOnline","Modals","setIsOnline","handleOfflineEventCallback","handleOnlineEventCallback","addEventListener","removeEventListener","useOnlineStatus","AccordionItem","header","body","isBodyVisible","setIsBodyVisible","divBodyRef","accordionItemBody","scrollHeight","headerState","imageState","xmlns","viewBox","d","Accordion","headerText","bodyText","FaqView","faqData","useFaqData","withRouter","Switch","Route","exact","path","component","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","ns","defaultNS","backend","loadPath","debug","interpolation","escapeValue","ReactDOM","render","React","StrictMode","Provider","Router","Suspense","fallback","App","querySelector"],"mappings":"+PAiFMA,EAAO,GAAAC,OCjFaC,mCDiFO,QAwD3BC,EAAkB,SAACC,GACvB,MAAM,IAAIC,MAAMD,EAClB,EAGaE,EAASC,YACpB,oBAAmB,eAAAC,EAAAC,YAAAC,cAAAC,MACnB,SAAAC,EAAOC,GAAa,IAAAC,EAAAV,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEOC,IAAMC,KAAK,GAADpB,OAAID,EAAO,iBAAiBa,GAAS,KAAD,EAAzD,OAAyDC,EAAAG,EAAAK,KAA7DlB,EAAIU,EAAJV,KAAIa,EAAAM,OAAA,SACLnB,GAAI,OAGI,OAHJa,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAGDF,EAAKE,EAAAO,GADfC,SACErB,KAAQW,MAAKE,EAAAM,OAAA,SAGRpB,EAAgBY,IAAM,yBAAAE,EAAAS,OAAA,GAAAd,EAAA,kBAEhC,gBAAAe,GAAA,OAAAnB,EAAAoB,MAAA,KAAAC,UAAA,EAZkB,IAeRC,EAASvB,YACpB,oBAAmB,eAAAwB,EAAAtB,YAAAC,cAAAC,MACnB,SAAAqB,EAAOC,GAAU,IAAAC,EAAA9B,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,cAAAgB,EAAAjB,KAAA,EAAAiB,EAAAhB,KAAA,EAEUC,IAAMC,KAAK,GAADpB,OAAID,EAAO,iBAAiBiC,EAAM,CACjEG,iBAAiB,IAChB,KAAD,EAFU,OAEVF,EAAAC,EAAAb,KAFMlB,EAAI8B,EAAJ9B,KAAI+B,EAAAZ,OAAA,SAGLnB,GAAI,OAGI,OAHJ+B,EAAAjB,KAAA,EAAAiB,EAAAX,GAAAW,EAAA,SAGDpB,EAAKoB,EAAAX,GADfC,SACErB,KAAQW,MAAKoB,EAAAZ,OAAA,SAGRpB,EAAgBY,IAAM,yBAAAoB,EAAAT,OAAA,GAAAM,EAAA,kBAEhC,gBAAAK,GAAA,OAAAN,EAAAH,MAAA,KAAAC,UAAA,EAdkB,IAiBRS,EAAS/B,YACpB,oBAAmB,eAAAgC,EAAA9B,YAAAC,cAAAC,MACnB,SAAA6B,EAAOP,GAAU,IAAAlB,EAAA,OAAAL,cAAAM,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,cAAAsB,EAAAvB,KAAA,EAAAuB,EAAAtB,KAAA,EAEPC,IAAMC,KAAK,GAADpB,OAAID,EAAO,iBAAiBiC,EAAM,CAChDG,iBAAiB,IAChB,KAAD,EAAAK,EAAAtB,KAAA,eAGa,OAHbsB,EAAAvB,KAAA,EAAAuB,EAAAjB,GAAAiB,EAAA,SAGQ1B,EAAK0B,EAAAjB,GADfC,SACErB,KAAQW,MAAK0B,EAAAlB,OAAA,SAGRpB,EAAgBY,IAAM,wBAAA0B,EAAAf,OAAA,GAAAc,EAAA,kBAEhC,gBAAAE,GAAA,OAAAH,EAAAX,MAAA,KAAAC,UAAA,EAbkB,IAgBRc,EAAoBpC,YAC/B,+BAA8BE,YAAAC,cAAAC,MAC9B,SAAAiC,IAAA,IAAAC,EAAAzC,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAAA2B,EAAA5B,KAAA,EAAA4B,EAAA3B,KAAA,EAE2BC,IAAM2B,IAAI,GAAD9C,OAAID,EAAO,oBAAoB,CAC7DoC,iBAAiB,IAChB,KAAD,EAFU,OAEVS,EAAAC,EAAAxB,KAFMlB,EAAIyC,EAAJzC,KAAI0C,EAAAvB,OAAA,SAGLnB,GAAI,OAGI,OAHJ0C,EAAA5B,KAAA,EAAA4B,EAAAtB,GAAAsB,EAAA,SAGD/B,EAAK+B,EAAAtB,GADfC,SACErB,KAAQW,MAAK+B,EAAAvB,OAAA,SAGRpB,EAAgBY,IAAM,yBAAA+B,EAAApB,OAAA,GAAAkB,EAAA,mBAMtBI,EAAczC,YACzB,yBAAwB,eAAA0C,EAAAxC,YAAAC,cAAAC,MACxB,SAAAuC,EAAOC,GAAe,IAAAC,EAAAhD,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,cAAAkC,EAAAnC,KAAA,EAAAmC,EAAAlC,KAAA,EAEKC,IAAMC,KAAK,GAADpB,OAAID,EAAO,kBAAkBmD,EAAU,CACtEf,iBAAiB,IAChB,KAAD,EAFU,OAEVgB,EAAAC,EAAA/B,KAFMlB,EAAIgD,EAAJhD,KAAIiD,EAAA9B,OAAA,SAGLnB,GAAI,OAGI,OAHJiD,EAAAnC,KAAA,EAAAmC,EAAA7B,GAAA6B,EAAA,SAGDtC,EAAKsC,EAAA7B,GADfC,SACErB,KAAQW,MAAKsC,EAAA9B,OAAA,SAGRpB,EAAgBY,IAAM,yBAAAsC,EAAA3B,OAAA,GAAAwB,EAAA,kBAEhC,gBAAAI,GAAA,OAAAL,EAAArB,MAAA,KAAAC,UAAA,EAduB,IAiBb0B,EAAiBhD,YAC5B,4BAA2BE,YAAAC,cAAAC,MAC3B,SAAA6C,IAAA,IAAAC,EAAArD,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,cAAAuC,EAAAxC,KAAA,EAAAwC,EAAAvC,KAAA,EAE2BC,IAAM2B,IAAI,GAAD9C,OAAID,EAAO,sBAAqB,KAAD,EAAnD,OAAmDyD,EAAAC,EAAApC,KAAvDlB,EAAIqD,EAAJrD,KAAIsD,EAAAnC,OAAA,SACLnB,GAAI,OAGI,OAHJsD,EAAAxC,KAAA,EAAAwC,EAAAlC,GAAAkC,EAAA,SAGD3C,EAAK2C,EAAAlC,GADfC,SACErB,KAAQW,MAAK2C,EAAAnC,OAAA,SAGRpB,EAAgBY,IAAM,yBAAA2C,EAAAhC,OAAA,GAAA8B,EAAA,mBAKtBG,EAAmBpD,YAC9B,8BAA6B,eAAAqD,EAAAnD,YAAAC,cAAAC,MAC7B,SAAAkD,EAAOC,GAAa,IAAAC,EAAA3D,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAAgD,GAAA,cAAAA,EAAA9C,KAAA8C,EAAA7C,MAAA,cAAA6C,EAAA9C,KAAA,EAAA8C,EAAA7C,KAAA,EAEOC,IAAM2B,IAAI,GAAD9C,OAAID,EAAO,qBAAAC,OAAoB6D,IAAS,KAAD,EAA3D,OAA2DC,EAAAC,EAAA1C,KAA/DlB,EAAI2D,EAAJ3D,KAAI4D,EAAAzC,OAAA,SACLnB,GAAI,OAGI,OAHJ4D,EAAA9C,KAAA,EAAA8C,EAAAxC,GAAAwC,EAAA,SAGDjD,EAAKiD,EAAAxC,GADfC,SACErB,KAAQW,MAAKiD,EAAAzC,OAAA,SAGRpB,EAAgBY,IAAM,yBAAAiD,EAAAtC,OAAA,GAAAmC,EAAA,kBAEhC,gBAAAI,GAAA,OAAAL,EAAAhC,MAAA,KAAAC,UAAA,EAZ4B,IAelBqC,EAAa3D,YACxB,wBAAuB,eAAA4D,EAAA1D,YAAAC,cAAAC,MACvB,SAAAyD,EAAOC,GAAgB,IAAAC,EAAAlE,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAAuD,GAAA,cAAAA,EAAArD,KAAAqD,EAAApD,MAAA,cAAAoD,EAAArD,KAAA,EAAAqD,EAAApD,KAAA,EAEIC,IAAM2B,IAAI,GAAD9C,OAAID,EAAO,kBAAAC,OAAiBoE,GAAW,CACrEjC,iBAAiB,IAChB,KAAD,EAFU,OAEVkC,EAAAC,EAAAjD,KAFMlB,EAAIkE,EAAJlE,KAAImE,EAAAhD,OAAA,SAGLnB,GAAI,OAGI,OAHJmE,EAAArD,KAAA,EAAAqD,EAAA/C,GAAA+C,EAAA,SAGDxD,EAAKwD,EAAA/C,GADfC,SACErB,KAAQW,MAAKwD,EAAAhD,OAAA,SAGRpB,EAAgBY,IAAM,yBAAAwD,EAAA7C,OAAA,GAAA0C,EAAA,kBAEhC,gBAAAI,GAAA,OAAAL,EAAAvC,MAAA,KAAAC,UAAA,EAdsB,IAiBZ4C,EAAclE,YACzB,yBAAwB,eAAAmE,EAAAjE,YAAAC,cAAAC,MACxB,SAAAgE,EAAAC,GAAA,IAAAP,EAAAQ,EAAAC,EAAA1E,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAA+D,GAAA,cAAAA,EAAA7D,KAAA6D,EAAA5D,MAAA,OAEc,OADZkD,EAAOO,EAAPP,QACAQ,EAAYD,EAAZC,aAAYE,EAAA7D,KAAA,EAAA6D,EAAA5D,KAAA,EAGaC,IAAM4D,MAAM,GAAD/E,OAC7BD,EAAO,mBAAAC,OAAkBoE,GAC5BQ,GACA,KAAD,EAHW,OAGXC,EAAAC,EAAAzD,KAHOlB,EAAI0E,EAAJ1E,KAAI2E,EAAAxD,OAAA,SAILnB,GAAI,OAGI,OAHJ2E,EAAA7D,KAAA,EAAA6D,EAAAvD,GAAAuD,EAAA,SAGDhE,EAAKgE,EAAAvD,GADfC,SACErB,KAAQW,MAAKgE,EAAAxD,OAAA,SAGRpB,EAAgBY,IAAM,yBAAAgE,EAAArD,OAAA,GAAAiD,EAAA,kBAEhC,gBAAAM,GAAA,OAAAP,EAAA9C,MAAA,KAAAC,UAAA,EAlBuB,IAqBbqD,EAAc3E,YACzB,yBAAwB,eAAA4E,EAAA1E,YAAAC,cAAAC,MACxB,SAAAyE,EAAOf,GAAgB,IAAAtD,EAAA,OAAAL,cAAAM,MAAA,SAAAqE,GAAA,cAAAA,EAAAnE,KAAAmE,EAAAlE,MAAA,cAAAkE,EAAAnE,KAAA,EAAAmE,EAAAlE,KAAA,EAEbC,IAAMkE,OAAO,GAADrF,OAAID,EAAO,mBAAAC,OAAkBoE,IAAW,KAAD,EAAAgB,EAAAlE,KAAA,eAG1C,OAH0CkE,EAAAnE,KAAA,EAAAmE,EAAA7D,GAAA6D,EAAA,SAG/CtE,EAAKsE,EAAA7D,GADfC,SACErB,KAAQW,MAAKsE,EAAA9D,OAAA,SAGRpB,EAAgBY,IAAM,wBAAAsE,EAAA3D,OAAA,GAAA0D,EAAA,kBAEhC,gBAAAG,GAAA,OAAAJ,EAAAvD,MAAA,KAAAC,UAAA,EAXuB,IAeb2D,EAAmBjF,YAC9B,8BAA6B,eAAAkF,EAAAhF,YAAAC,cAAAC,MAC7B,SAAA+E,EAAOC,GAAoB,IAAAC,EAAAxF,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAA6E,GAAA,cAAAA,EAAA3E,KAAA2E,EAAA1E,MAAA,cAAA0E,EAAA3E,KAAA,EAAA2E,EAAA1E,KAAA,EAEAC,IAAMC,KAAK,GAADpB,OAC5BD,EAAO,sBACV2F,GACA,KAAD,EAHW,OAGXC,EAAAC,EAAAvE,KAHOlB,EAAIwF,EAAJxF,KAAIyF,EAAAtE,OAAA,SAILnB,GAAI,OAGI,OAHJyF,EAAA3E,KAAA,EAAA2E,EAAArE,GAAAqE,EAAA,SAGD9E,EAAK8E,EAAArE,GADfC,SACErB,KAAQW,MAAK8E,EAAAtE,OAAA,SAGRpB,EAAgBY,IAAM,yBAAA8E,EAAAnE,OAAA,GAAAgE,EAAA,kBAEhC,gBAAAI,GAAA,OAAAL,EAAA7D,MAAA,KAAAC,UAAA,EAf4B,IAkBlBkE,EAAmBxF,YAC9B,8BAA6B,eAAAyF,EAAAvF,YAAAC,cAAAC,MAC7B,SAAAsF,EAAOC,GAAkC,IAAAnF,EAAA,OAAAL,cAAAM,MAAA,SAAAmF,GAAA,cAAAA,EAAAjF,KAAAiF,EAAAhF,MAAA,cAAAgF,EAAAjF,KAAA,EAAAiF,EAAAhF,KAAA,EAE/BC,IAAMC,KAAK,GAADpB,OAAID,EAAO,uBAAuBkG,GAAkB,KAAD,EAAAC,EAAAhF,KAAA,eAGpD,OAHoDgF,EAAAjF,KAAA,EAAAiF,EAAA3E,GAAA2E,EAAA,SAGzDpF,EAAKoF,EAAA3E,GADfC,SACErB,KAAQW,MAAKoF,EAAA5E,OAAA,SAGRpB,EAAgBY,IAAM,wBAAAoF,EAAAzE,OAAA,GAAAuE,EAAA,kBAEhC,gBAAAG,GAAA,OAAAJ,EAAApE,MAAA,KAAAC,UAAA,EAX4B,IAelBwE,EAAgB9F,YAC3B,2BAA0B,eAAA+F,EAAA7F,YAAAC,cAAAC,MAC1B,SAAA4F,EAAAC,GAAA,IAAAC,EAAAC,EAAAtG,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAA2F,GAAA,cAAAA,EAAAzF,KAAAyF,EAAAxF,MAAA,OAAc,OAALsF,EAAKD,EAALC,MAAKE,EAAAzF,KAAA,EAAAyF,EAAAxF,KAAA,EAEaC,IAAMC,KAAK,GAADpB,OAC5BD,EAAO,iCACV,CACEyG,UAEF,KAAD,EALW,OAKXC,EAAAC,EAAArF,KALOlB,EAAIsG,EAAJtG,KAAIuG,EAAApF,OAAA,SAMLnB,GAAI,OAGI,OAHJuG,EAAAzF,KAAA,EAAAyF,EAAAnF,GAAAmF,EAAA,SAGD5F,EAAK4F,EAAAnF,GADfC,SACErB,KAAQW,MAAK4F,EAAApF,OAAA,SAGRpB,EAAgBY,IAAM,yBAAA4F,EAAAjF,OAAA,GAAA6E,EAAA,kBAEhC,gBAAAK,GAAA,OAAAN,EAAA1E,MAAA,KAAAC,UAAA,EAjByB,IAqBfgF,EAAgBtG,YAC3B,2BAA0B,eAAAuG,EAAArG,YAAAC,cAAAC,MAC1B,SAAAoG,EAAOC,GAAmB,IAAAC,EAAA7G,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAAkG,GAAA,cAAAA,EAAAhG,KAAAgG,EAAA/F,MAAA,cAAA+F,EAAAhG,KAAA,EAAAgG,EAAA/F,KAAA,EAECC,IAAMC,KAAK,GAADpB,OAC5BD,EAAO,oBACVgH,EACA,CAAE5E,iBAAiB,IACnB,KAAD,EAJW,OAIX6E,EAAAC,EAAA5F,KAJOlB,EAAI6G,EAAJ7G,KAAI8G,EAAA3F,OAAA,SAKLnB,GAAI,OAGI,OAHJ8G,EAAAhG,KAAA,EAAAgG,EAAA1F,GAAA0F,EAAA,SAGDnG,EAAKmG,EAAA1F,GADfC,SACErB,KAAQW,MAAKmG,EAAA3F,OAAA,SAGRpB,EAAgBY,IAAM,yBAAAmG,EAAAxF,OAAA,GAAAqF,EAAA,kBAEhC,gBAAAI,GAAA,OAAAL,EAAAlF,MAAA,KAAAC,UAAA,EAhByB,IAmBfuF,EAAmB7G,YAC9B,8BAA6BE,YAAAC,cAAAC,MAC7B,SAAA0G,IAAA,IAAAC,EAAAlH,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAAuG,GAAA,cAAAA,EAAArG,KAAAqG,EAAApG,MAAA,cAAAoG,EAAArG,KAAA,EAAAqG,EAAApG,KAAA,EAE2BC,IAAM2B,IAAI,GAAD9C,OAAID,EAAO,wBAAuB,KAAD,EAArD,OAAqDsH,EAAAC,EAAAjG,KAAzDlB,EAAIkH,EAAJlH,KAAImH,EAAAhG,OAAA,SACLnB,GAAI,OAGI,OAHJmH,EAAArG,KAAA,EAAAqG,EAAA/F,GAAA+F,EAAA,SAGDxG,EAAKwG,EAAA/F,GADfC,SACErB,KAAQW,MAAKwG,EAAAhG,OAAA,SAGRpB,EAAgBY,IAAM,yBAAAwG,EAAA7F,OAAA,GAAA2F,EAAA,mBAKtBG,EAAejH,YAC1B,0BAAyB,eAAAkH,EAAAhH,YAAAC,cAAAC,MACzB,SAAA+G,EAAOC,GAAoB,IAAAC,EAAAxH,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAA6G,GAAA,cAAAA,EAAA3G,KAAA2G,EAAA1G,MAAA,cAAA0G,EAAA3G,KAAA,EAAA2G,EAAA1G,KAAA,EAEAC,IAAM2B,IAAI,GAAD9C,OAC3BD,EAAO,oBAAAC,OAAmB0H,GAC7B,CAAEvF,iBAAiB,IACnB,KAAD,EAHW,OAGXwF,EAAAC,EAAAvG,KAHOlB,EAAIwH,EAAJxH,KAAIyH,EAAAtG,OAAA,SAILnB,GAAI,OAGI,OAHJyH,EAAA3G,KAAA,EAAA2G,EAAArG,GAAAqG,EAAA,SAGD9G,EAAK8G,EAAArG,GADfC,SACErB,KAAQW,MAAK8G,EAAAtG,OAAA,SAGRpB,EAAgBY,IAAM,yBAAA8G,EAAAnG,OAAA,GAAAgG,EAAA,kBAEhC,gBAAAI,GAAA,OAAAL,EAAA7F,MAAA,KAAAC,UAAA,EAfwB,IAkBdkG,EAAgBxH,YAC3B,2BAA0B,eAAAyH,EAAAvH,YAAAC,cAAAC,MAC1B,SAAAsH,EAAAC,GAAA,IAAAP,EAAAQ,EAAAC,EAAAhI,EAAAW,EAAA,OAAAL,cAAAM,MAAA,SAAAqH,GAAA,cAAAA,EAAAnH,KAAAmH,EAAAlH,MAAA,OAEgB,OADdwG,EAASO,EAATP,UACAQ,EAAcD,EAAdC,eAAcE,EAAAnH,KAAA,EAAAmH,EAAAlH,KAAA,EAGWC,IAAM4D,MAAM,GAAD/E,OAC7BD,EAAO,qBAAAC,OAAoB0H,GAC9BQ,GACA,KAAD,EAHW,OAGXC,EAAAC,EAAA/G,KAHOlB,EAAIgI,EAAJhI,KAAIiI,EAAA9G,OAAA,SAILnB,GAAI,OAGI,OAHJiI,EAAAnH,KAAA,EAAAmH,EAAA7G,GAAA6G,EAAA,SAGDtH,EAAKsH,EAAA7G,GADfC,SACErB,KAAQW,MAAKsH,EAAA9G,OAAA,SAGRpB,EAAgBY,IAAM,yBAAAsH,EAAA3G,OAAA,GAAAuG,EAAA,kBAEhC,gBAAAK,GAAA,OAAAN,EAAApG,MAAA,KAAAC,UAAA,EAlByB,IAqBf0G,EAAgBhI,YAC3B,2BAA0B,eAAAiI,EAAA/H,YAAAC,cAAAC,MAC1B,SAAA8H,EAAOd,GAAoB,IAAA5G,EAAA,OAAAL,cAAAM,MAAA,SAAA0H,GAAA,cAAAA,EAAAxH,KAAAwH,EAAAvH,MAAA,cAAAuH,EAAAxH,KAAA,EAAAwH,EAAAvH,KAAA,EAEjBC,IAAMkE,OAAO,GAADrF,OAAID,EAAO,qBAAAC,OAAoB0H,IAAa,KAAD,EAAAe,EAAAvH,KAAA,eAG9C,OAH8CuH,EAAAxH,KAAA,EAAAwH,EAAAlH,GAAAkH,EAAA,SAGnD3H,EAAK2H,EAAAlH,GADfC,SACErB,KAAQW,MAAK2H,EAAAnH,OAAA,SAGRpB,EAAgBY,IAAM,wBAAA2H,EAAAhH,OAAA,GAAA+G,EAAA,kBAEhC,gBAAAE,GAAA,OAAAH,EAAA5G,MAAA,KAAAC,UAAA,EAXyB,IAcf+G,EAAkBC,YAAY,CACzCC,KAAM,aACNC,aAlYiC,CAEjCC,cAAc,EACdC,aAAc,KAGdC,iBAAiB,EACjBC,kBAAkB,EAClBC,iBAAiB,EACjBC,iBAAiB,EACjBC,iBAAiB,EACjBC,MAAO,CAAC,EACRC,OAAQ,GACRC,eAAgB,GAChBC,uBAAwB,EAGxBC,uBAAuB,EACvBC,sBAAsB,EACtB1D,iBAAkB,KAGlB2D,aAAc,GAGdC,mBAAmB,EACnBC,oBAAoB,EACpBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,SAAU,GACVC,QAAS,CAAC,EAGVC,cAAc,EACdC,YAAY,EACZC,iBAAkB,EAClBC,gBAAiB,EAGjBC,WAAY,KACZC,aAAc,EAGdC,mBAAoB,EACpBC,mBAAoB,EAGpBC,kBAAkB,EAGlBC,aAAc,MAiVdC,SAAU,CAERC,gBAAiB,SAACC,EAAKC,GAA2C,IAAvCC,EAAOD,EAAPC,QACzBF,EAAMjC,aAAemC,CACvB,EACAC,gBAAiB,SAACH,EAAKI,GAA+C,IAA3CF,EAAOE,EAAPF,QACzBF,EAAMhC,aAAekC,CACvB,EAGAG,mBAAoB,SAACL,EAAKM,GAA2C,IAAvCJ,EAAOI,EAAPJ,QAC5BF,EAAM/B,gBAAkBiC,CAC1B,EACAK,oBAAqB,SAACP,EAAKQ,GAA2C,IAAvCN,EAAOM,EAAPN,QAC7BF,EAAM9B,iBAAmBgC,CAC3B,EACAO,mBAAoB,SAACT,EAAKU,GAA2C,IAAvCR,EAAOQ,EAAPR,QAC5BF,EAAM7B,gBAAkB+B,CAC1B,EACAS,mBAAoB,SAACX,EAAKY,GAA2C,IAAvCV,EAAOU,EAAPV,QAC5BF,EAAM5B,gBAAkB8B,CAC1B,EACAW,mBAAoB,SAACb,EAAKc,GAA2C,IAAvCZ,EAAOY,EAAPZ,QAC5BF,EAAM3B,gBAAkB6B,CAC1B,EACAa,SAAU,SAACf,EAAKgB,GAAyC,IAArCd,EAAOc,EAAPd,QAClBF,EAAMzB,OAAO0C,KAAKf,EACpB,EACAgB,SAAU,SAAClB,EAAKmB,GAAyC,IAArCjB,EAAOiB,EAAPjB,QAClBF,EAAM1B,MAAQ4B,CAChB,EACAkB,UAAW,SAACpB,EAAKqB,GAA2C,IAAvCnB,EAAOmB,EAAPnB,QACnBF,EAAMzB,OAAS2B,CACjB,EACAoB,kBAAmB,SAACtB,EAAKuB,GAA2C,IAAvCrB,EAAOqB,EAAPrB,QAC3BF,EAAMxB,eAAiB0B,CACzB,EACAsB,gBAAiB,SACfxB,EAAKyB,GAaD,IAADC,EAAAD,EAXDvB,QACEyB,EAAGD,EAAHC,IACA9D,EAAI6D,EAAJ7D,KACA+D,EAAWF,EAAXE,YACAC,EAAIH,EAAJG,KACAC,EAAQJ,EAARI,SACAC,EAAaL,EAAbK,cACAC,EAAQN,EAARM,SACAxG,EAAKkG,EAALlG,MAIJwE,EAAMzB,OAASyB,EAAMzB,OAAO0D,KAAI,SAACC,GAU/B,OATIA,EAAYP,MAAQA,IACtBO,EAAYrE,KAAOA,EACnBqE,EAAYN,YAAcA,EAC1BM,EAAYL,KAAOA,EACnBK,EAAYJ,SAAWA,EACvBI,EAAYH,cAAgBA,EAC5BG,EAAYF,SAAWA,EACvBE,EAAY1G,MAAQA,GAEf0G,CACT,GACF,EACAC,YAAa,SAACnC,EAAKoC,GAA2C,IAAvClC,EAAOkC,EAAPlC,QACrBF,EAAMzB,OAASyB,EAAMzB,OAAO8D,QAC1B,SAAC/D,GAAY,OAAcA,EAAMqD,MAAQzB,CAAO,GAEpD,EACAoC,0BAA2B,SAACtC,EAAKuC,GAA0C,IAAtCrC,EAAOqC,EAAPrC,QACnCF,EAAMvB,uBAAyByB,CACjC,EAGAsC,yBAA0B,SAACxC,EAAKyC,GAA2C,IAAvCvC,EAAOuC,EAAPvC,QAClCF,EAAMtB,sBAAwBwB,CAChC,EACAwC,wBAAyB,SAAC1C,EAAK2C,GAA2C,IAAvCzC,EAAOyC,EAAPzC,QACjCF,EAAMrB,qBAAuBuB,CAC/B,EACA0C,oBAAqB,SACnB5C,EAAK6C,GAED,IADF3C,EAAO2C,EAAP3C,QAEFF,EAAM/E,iBAAmBiF,CAC3B,EAGA4C,gBAAiB,SAAC9C,EAAK+C,GAA0C,IAAtC7C,EAAO6C,EAAP7C,QACzBF,EAAMpB,aAAesB,CACvB,EAGA8C,qBAAsB,SAAChD,EAAKiD,GAA2C,IAAvC/C,EAAO+C,EAAP/C,QAC9BF,EAAMnB,kBAAoBqB,CAC5B,EACAgD,sBAAuB,SAAClD,EAAKmD,GAA2C,IAAvCjD,EAAOiD,EAAPjD,QAC/BF,EAAMlB,mBAAqBoB,CAC7B,EACAkD,qBAAsB,SAACpD,EAAKqD,GAA2C,IAAvCnD,EAAOmD,EAAPnD,QAC9BF,EAAMjB,kBAAoBmB,CAC5B,EACAoD,qBAAsB,SAACtD,EAAKuD,GAA2C,IAAvCrD,EAAOqD,EAAPrD,QAC9BF,EAAMhB,kBAAoBkB,CAC5B,EACAsD,qBAAsB,SAACxD,EAAKyD,GAA2C,IAAvCvD,EAAOuD,EAAPvD,QAC9BF,EAAMf,kBAAoBiB,CAC5B,EACAwD,WAAY,SAAC1D,EAAK2D,GAA2C,IAAvCzD,EAAOyD,EAAPzD,QACpBF,EAAMd,SAAS+B,KAAKf,EACtB,EACA0D,YAAa,SAAC5D,EAAK6D,GAA6C,IAAzC3D,EAAO2D,EAAP3D,QACrBF,EAAMd,SAAWgB,CACnB,EACA4D,WAAY,SAAC9D,EAAK+D,GAA2C,IAAvC7D,EAAO6D,EAAP7D,QACpBF,EAAMb,QAAUe,CAClB,EACA8D,kBAAmB,SACjBhE,EAAKiE,GAID,IAADC,EAAAD,EAFD/D,QAAWyB,EAAGuC,EAAHvC,IAAKwC,EAAKD,EAALC,MAAOC,EAAMF,EAANE,OAAQ9F,EAAK4F,EAAL5F,MAAO+F,EAAOH,EAAPG,QAASC,EAAKJ,EAALI,MAAOC,EAAYL,EAAZK,aAGxDvE,EAAMd,SAAWc,EAAMd,SAAS+C,KAAI,SAACuC,GASnC,OARIA,EAAc7C,MAAQA,IACxB6C,EAAcL,MAAQA,EACtBK,EAAcJ,OAASA,EACvBI,EAAclG,MAAQA,EACtBkG,EAAcH,QAAUA,EACxBG,EAAcF,MAAQA,EACtBE,EAAcD,aAAeA,GAExBC,CACT,GACF,EACAC,cAAe,SAACzE,EAAK0E,GAA6C,IAAzCxE,EAAOwE,EAAPxE,QACvBF,EAAMd,SAAWc,EAAMd,SAASmD,QAC9B,SAAClD,GAAgB,OAAcA,EAAQwC,MAAQzB,CAAO,GAE1D,EAGAyE,gBAAiB,SAAC3E,EAAK4E,GAA2C,IAAvC1E,EAAO0E,EAAP1E,QACzBF,EAAMZ,aAAec,CACvB,EACA2E,cAAe,SAAC7E,EAAK8E,GAA2C,IAAvC5E,EAAO4E,EAAP5E,QACvBF,EAAMX,WAAaa,CACrB,EACA6E,yBAA0B,SAAC/E,GACzBA,EAAMV,iBAAoBU,EAAMhC,aAAqBsB,gBACvD,EACA0F,wBAAyB,SAAChF,GACxBA,EAAMT,gBAAmBS,EAAMhC,aAAqBuB,eACtD,EACA0F,oBAAqB,SAACjF,EAAKkF,GAA0C,IAAtChF,EAAOgF,EAAPhF,QAC7BF,EAAMV,iBAAmBY,CAC3B,EACAiF,mBAAoB,SAACnF,EAAKoF,GAA0C,IAAtClF,EAAOkF,EAAPlF,QAC5BF,EAAMT,gBAAkBW,CAC1B,EACAmF,yBAA0B,SAACrF,GACzBA,EAAMV,kBAAoB,CAC5B,EACAgG,wBAAyB,SAACtF,GACxBA,EAAMT,iBAAmB,CAC3B,EAGAgG,cAAe,SAACvF,EAAKwF,GAA8C,IAA1CtF,EAAOsF,EAAPtF,QACvBF,EAAMR,WAAaU,CACrB,EACAuF,gBAAiB,SAACzF,EAAK0F,GAA0C,IAAtCxF,EAAOwF,EAAPxF,QACzBF,EAAMP,aAAeS,CACvB,EACAyF,qBAAsB,SAAC3F,GACrBA,EAAMP,cAAgB,CACxB,EAGAmG,sBAAuB,SAAC5F,EAAK6F,GAA0C,IAAtC3F,EAAO2F,EAAP3F,QAC/BF,EAAMN,mBAAqBQ,CAC7B,EACA4F,sBAAuB,SAAC9F,EAAK+F,GAA0C,IAAtC7F,EAAO6F,EAAP7F,QAC/BF,EAAML,mBAAqBO,CAC7B,EACA8F,cAAe,SAAChG,GACdiG,gBAAOC,SAASlG,EAAMN,mBACxB,EACAyG,eAAgB,SAACnG,GACfiG,gBAAOC,SAASlG,EAAMN,mBAAqBM,EAAML,mBACnD,EAGAyG,oBAAqB,SAACpG,EAAKqG,GAA2C,IAAvCnG,EAAOmG,EAAPnG,QAC7BF,EAAMJ,iBAAmBM,CAC3B,EAGAoG,gBAAiB,SAACtG,EAAKuG,GAAgD,IAA5CrG,EAAOqG,EAAPrG,QACzBF,EAAMH,aAAeK,CACvB,GAGFsG,cAAe,SAACC,GAEdA,EAAQC,QAAQ3O,EAAY4O,WAAW,SAAC3G,GACtCA,EAAM/B,iBAAkB,CAC1B,IACAwI,EAAQC,QAAQ3O,EAAY6O,UAAU,SAAC5G,GACrCA,EAAM/B,iBAAkB,CAC1B,IACAwI,EAAQC,QAAQpO,EAAeqO,WAAW,SAAC3G,GACzCA,EAAM9B,kBAAmB,CAC3B,IACAuI,EAAQC,QAAQpO,EAAesO,UAAU,SAAC5G,GACxCA,EAAM9B,kBAAmB,CAC3B,IACAuI,EAAQC,QAAQhO,EAAiBiO,WAAW,SAAC3G,GAC3CA,EAAM9B,kBAAmB,CAC3B,IACAuI,EAAQC,QAAQhO,EAAiBkO,UAAU,SAAC5G,GAC1CA,EAAM9B,kBAAmB,CAC3B,IACAuI,EAAQC,QAAQzN,EAAW0N,WAAW,SAAC3G,GACrCA,EAAM7B,iBAAkB,CAC1B,IACAsI,EAAQC,QAAQzN,EAAW2N,UAAU,SAAC5G,GACpCA,EAAM7B,iBAAkB,CAC1B,IACAsI,EAAQC,QAAQlN,EAAYmN,WAAW,SAAC3G,GACtCA,EAAM5B,iBAAkB,CAC1B,IACAqI,EAAQC,QAAQlN,EAAYoN,UAAU,SAAC5G,GACrCA,EAAM5B,iBAAkB,CAC1B,IACAqI,EAAQC,QAAQzM,EAAY0M,WAAW,SAAC3G,GACtCA,EAAM3B,iBAAkB,CAC1B,IACAoI,EAAQC,QAAQzM,EAAY2M,UAAU,SAAC5G,GACrCA,EAAM3B,iBAAkB,CAC1B,IAGAoI,EAAQC,QAAQnM,EAAiBoM,WAAW,SAAC3G,GAC3CA,EAAMtB,uBAAwB,CAChC,IACA+H,EAAQC,QAAQnM,EAAiBqM,UAAU,SAAC5G,GAC1CA,EAAMtB,uBAAwB,CAChC,IACA+H,EAAQC,QAAQ5L,EAAiB6L,WAAW,SAAC3G,GAC3CA,EAAMrB,sBAAuB,CAC/B,IACA8H,EAAQC,QAAQ5L,EAAiB8L,UAAU,SAAC5G,GAC1CA,EAAMrB,sBAAuB,CAC/B,IAGA8H,EAAQC,QAAQ9K,EAAc+K,WAAW,SAAC3G,GACxCA,EAAMnB,mBAAoB,CAC5B,IACA4H,EAAQC,QAAQ9K,EAAcgL,UAAU,SAAC5G,GACvCA,EAAMnB,mBAAoB,CAC5B,IACA4H,EAAQC,QAAQvK,EAAiBwK,WAAW,SAAC3G,GAC3CA,EAAMlB,oBAAqB,CAC7B,IACA2H,EAAQC,QAAQvK,EAAiByK,UAAU,SAAC5G,GAC1CA,EAAMlB,oBAAqB,CAC7B,IACA2H,EAAQC,QAAQnK,EAAaoK,WAAW,SAAC3G,GACvCA,EAAMjB,mBAAoB,CAC5B,IACA0H,EAAQC,QAAQnK,EAAaqK,UAAU,SAAC5G,GACtCA,EAAMjB,mBAAoB,CAC5B,IACA0H,EAAQC,QAAQ5J,EAAc6J,WAAW,SAAC3G,GACxCA,EAAMhB,mBAAoB,CAC5B,IACAyH,EAAQC,QAAQ5J,EAAc8J,UAAU,SAAC5G,GACvCA,EAAMhB,mBAAoB,CAC5B,IACAyH,EAAQC,QAAQpJ,EAAcqJ,WAAW,SAAC3G,GACxCA,EAAMf,mBAAoB,CAC5B,IACAwH,EAAQC,QAAQpJ,EAAcsJ,UAAU,SAAC5G,GACvCA,EAAMf,mBAAoB,CAC5B,GACF,IAGI4H,EAEgB,SAAAC,GAA6B,OAAAA,EAA1BC,WAAchJ,YACvB,EAHV8I,EAIgB,SAAAG,GAA6B,OAAAA,EAA1BD,WAAc/I,YACvB,EALV6I,EAQmB,SAAAI,GAAgC,OAAAA,EAA7BF,WAAc9I,eACvB,EATb4I,EAUoB,SAAAK,GAAiC,OAAAA,EAA9BH,WAAc7I,gBACvB,EAXd2I,EAYmB,SAAAM,GAAgC,OAAAA,EAA7BJ,WAAc5I,eACvB,EAbb0I,EAcmB,SAAAO,GAAgC,OAAAA,EAA7BL,WAAc3I,eACvB,EAfbyI,EAgBmB,SAAAQ,GAAgC,OAAAA,EAA7BN,WAAc1I,eACvB,EAjBbwI,EAkBS,SAAAS,GAAsB,OAAAA,EAAnBP,WAAczI,KAA8B,EAlBxDuI,EAmBU,SAAAU,GAAuB,OAAAA,EAApBR,WAAcxI,MAAgC,EAnB3DsI,EAoBmB,SAAAW,GAA+B,OAAAA,EAA5BT,WAAcvI,cACxB,EArBZqI,EAsB0B,SAAAY,GACQ,OAAAA,EAApCV,WAActI,sBACuB,EAxBnCoI,EA2ByB,SAAAa,GACQ,OAAAA,EAAnCX,WAAcrI,qBACsB,EA7BlCmI,EA8BwB,SAAAc,GACQ,OAAAA,EAAlCZ,WAAcpI,oBACqB,EAhCjCkI,EAiCoB,SAAAe,GAAiC,OAAAA,EAA9Bb,WAAc9L,gBACvB,EAlCd4L,EAqCgB,SAAAgB,GAA6B,OAAAA,EAA1Bd,WAAcnI,YACvB,EAtCViI,EAyCqB,SAAAiB,GAAkC,OAAAA,EAA/Bf,WAAclI,iBACvB,EA1CfgI,EA2CuB,SAAAkB,GACO,OAAAA,EAAhChB,WAAcjI,kBACmB,EA7C/B+H,EA8CqB,SAAAmB,GAAkC,OAAAA,EAA/BjB,WAAchI,iBACvB,EA/Cf8H,GAgDqB,SAAAoB,GAAkC,OAAAA,EAA/BlB,WAAc/H,iBACvB,EAjDf6H,GAkDqB,SAAAqB,GAAkC,OAAAA,EAA/BnB,WAAc9H,iBACvB,EAnDf4H,GAoDW,SAAAsB,GAAwB,OAAAA,EAArBpB,WAAc5H,OAAkC,EApD9D0H,GAqDY,SAAAuB,GAAyB,OAAAA,EAAtBrB,WAAc7H,QAAoC,EArDjE2H,GAwDgB,SAAAwB,GAA6B,OAAAA,EAA1BtB,WAAc3H,YACvB,EAzDVyH,GA0Dc,SAAAyB,GAA2B,OAAAA,EAAxBvB,WAAc1H,UAAwC,EA1DvEwH,GA2DoB,SAAA0B,GAAiC,OAAAA,EAA9BxB,WAAczH,gBACvB,EA5DduH,GA6DmB,SAAA2B,GAAgC,OAAAA,EAA7BzB,WAAcxH,eACvB,EA9DbsH,GAiEc,SAAA4B,GAA2B,OAAAA,EAAxB1B,WAAcvH,UAAwC,EAjEvEqH,GAkEgB,SAAA6B,GAA6B,OAAAA,EAA1B3B,WAActH,YACvB,EAnEVoH,GA8EoB,SAAA8B,GAAiC,OAAAA,EAA9B5B,WAAcnH,gBACvB,EA/EdiH,GAkFgB,SAAA+B,GAA6B,OAAAA,EAA1B7B,WAAclH,YACvB,EAITgJ,GAiEHlL,EAAgBmL,QA/DlB/I,GAAe8I,GAAf9I,gBACAI,GAAe0I,GAAf1I,gBAGAE,GAAkBwI,GAAlBxI,mBACAE,GAAmBsI,GAAnBtI,oBACAE,GAAkBoI,GAAlBpI,mBACAE,GAAkBkI,GAAlBlI,mBACAE,GAAkBgI,GAAlBhI,mBACAE,GAAQ8H,GAAR9H,SACAK,GAASyH,GAATzH,UACAE,GAAiBuH,GAAjBvH,kBACAJ,GAAQ2H,GAAR3H,SACAM,GAAeqH,GAAfrH,gBACAW,GAAW0G,GAAX1G,YACAG,GAAyBuG,GAAzBvG,0BAGAE,GAAwBqG,GAAxBrG,yBACAE,GAAuBmG,GAAvBnG,wBACAE,GAAmBiG,GAAnBjG,oBAGAE,GAAe+F,GAAf/F,gBAGAE,GAAoB6F,GAApB7F,qBACAE,GAAqB2F,GAArB3F,sBACAE,GAAoByF,GAApBzF,qBACAE,GAAoBuF,GAApBvF,qBACAE,GAAoBqF,GAApBrF,qBACAE,GAAUmF,GAAVnF,WACAE,GAAWiF,GAAXjF,YACAE,GAAU+E,GAAV/E,WACAE,GAAiB6E,GAAjB7E,kBACAS,GAAaoE,GAAbpE,cAGAE,GAAekE,GAAflE,gBACAE,GAAagE,GAAbhE,cACAE,GAAwB8D,GAAxB9D,yBACAC,GAAuB6D,GAAvB7D,wBACAC,GAAmB4D,GAAnB5D,oBACAE,GAAkB0D,GAAlB1D,mBACAE,GAAwBwD,GAAxBxD,yBACAC,GAAuBuD,GAAvBvD,wBAGAC,GAAasD,GAAbtD,cACAE,GAAeoD,GAAfpD,gBACAE,GAAoBkD,GAApBlD,qBAGAC,GAAqBiD,GAArBjD,sBACAE,GAAqB+C,GAArB/C,sBACAE,GAAa6C,GAAb7C,cACAG,GAAc0C,GAAd1C,eAGAC,GAAmByC,GAAnBzC,oBAGAE,GAAeuC,GAAfvC,gBAMAyC,GAkDElC,EAjDFmC,GAiDEnC,EA9CFoC,GA8CEpC,EA7CFqC,GA6CErC,EA5CFsC,GA4CEtC,EA3CFuC,GA2CEvC,EA1CFwC,GA0CExC,EAzCFyC,GAyCEzC,EAxCF0C,GAwCE1C,EAvCF2C,GAuCE3C,EAtCF4C,GAsCE5C,EAnCF6C,GAmCE7C,EAlCF8C,GAkCE9C,EAjCF+C,GAiCE/C,EA9BFgD,GA8BEhD,EA3BFiD,GA2BEjD,EA1BFkD,GA0BElD,EAzBFmD,GAyBEnD,EAxBFoD,GAwBEpD,GAvBFqD,GAuBErD,GAtBFsD,GAsBEtD,GArBFuD,GAqBEvD,GAlBFwD,GAkBExD,GAjBFyD,GAiBEzD,GAhBF0D,GAgBE1D,GAfF2D,GAeE3D,GAZF4D,GAYE5D,GAXF6D,GAWE7D,GAJF8D,GAIE9D,GADF+D,GACE/D,GAEWlJ,KAAuB,QEx8BzBkN,GAAQC,YAAe,CAClCC,QAAS,CAAEhE,WAAYpJ,M,4BCDZqN,GAAiB,WAAH,OAASC,aAA2B,EAClDC,GAAkDC,ICyClDC,GAAa,WACxB,IAAMC,EAAWL,KAEjB,MAAO,CACLpP,cAAe,SAACG,EAAqBuP,GACnCD,EAASrI,IAAqB,IAC9BqI,EAASzP,EAAcG,IACpBwP,SACAC,MAAK,SAACrM,GACLkM,EAAS3H,GAAWvE,IACpBmM,GACF,IACCG,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEA5C,aAAc,SAACG,EAAsB4O,GACnCD,EAASjI,IAAqB,IAC9BiI,EAAS9O,EAAaG,IACnB6O,SACAC,MAAK,SAACrM,GACLkM,EAASvH,GAAW3E,IACpBmM,GACF,IACCG,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEAwM,cAAe,SAACL,GACdD,EAASnI,IAAsB,IAC/BmI,EAASlP,KACNoP,SACAC,MAAK,SAACtM,GACLmM,EAASzH,GAAY1E,IACrBoM,GACF,IACCG,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEAyM,WAAY,SAACN,GACXD,EAASlP,KACNoP,SACAC,MAAK,SAACtM,GACLmM,EAASzH,GAAY1E,IACrBoM,EAASpM,EACX,IACCuM,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEArC,cAAe,SAACI,EAAyBoO,GACvC,IAAQ3J,EAAQzE,EAARyE,IACR0J,EAAS/H,IAAqB,IAC9B+H,EAASvO,EAAc,CAAEJ,UAAWiF,EAAkBzE,oBACnDqO,SACAC,MAAK,SAACrM,GACLkM,EAASrH,GAAkB7E,IAC3BmM,GACF,IACCG,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEA7B,cAAe,SAACZ,EAAsB4O,GACpCD,EAAS7H,IAAqB,IAC9B6H,EAAS/N,EAAcZ,IACpB6O,SACAC,MAAK,WACJH,EAAS5G,GAAc/H,IACvB4O,GACF,IACCG,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEA0M,wBAAuB,SAAC3M,EAAqB9F,GAC3C8F,EAAS4M,SAAQ,SAAAvW,GAAoC,IAAjCoM,EAAGpM,EAAHoM,IAAUpM,EAAL+I,MACFqD,MAAQvI,IAC3BiS,EAAS7H,IAAqB,IAC9B6H,EAAS/N,EAAcqE,IACpB4J,SACAC,MAAK,WACJH,EAAS5G,GAAc9C,GACzB,IACC8J,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,IAEN,GACF,EAEA4M,iBAAkB,SAAAC,EAEhB9M,EACAI,GACU,IAHRqC,EAAGqK,EAAHrK,IAwBIsK,EApB4B,SAAC/M,GAKjC,OAJgCA,EAASmD,QACvC,SAAAvL,GAAA,IAAGsN,EAAMtN,EAANsN,OAAQG,EAAYzN,EAAZyN,aAAY,OACpBH,EAAgBzC,MAAQA,IAAwB,IAAjB4C,CAAqB,IACvD2H,MAEJ,CAcgCC,CAA0BjN,IAZ5B,SAC5B+M,EACA3M,GAEIA,EAAmB2M,GACrBZ,EAAS1G,IAAgB,IAEvBrF,IAAqB2M,GACvBZ,EAASpG,GAAoBgH,GAEjC,CAGAG,CAAsBH,EAAyB3M,EACjD,EAEA+M,gBAAiB,SAAAC,EAEfpN,EACAK,GACU,IAHRoC,EAAG2K,EAAH3K,IAwBI4K,EApB2B,SAACrN,GAKhC,OAJ+BA,EAASmD,QACtC,SAAA/K,GAAA,IAAG6M,EAAK7M,EAAL6M,MAAOG,EAAKhN,EAALgN,MAAK,OACZH,EAAexC,MAAQA,GAAiB,KAAV2C,CAAY,IAC7C4H,MAEJ,CAc+BM,CAAyBtN,IAZ3B,SAC3BqN,EACAhN,GAEIA,EAAkBgN,GACpBlB,EAASxG,IAAc,IAErBtF,IAAoBgN,GACtBlB,EAASlG,GAAmBoH,GAEhC,CAGAE,CAAqBF,EAAwBhN,EAC/C,EAEJ,EClMamN,GAAqB,WAChC,IAAMrB,EAAWL,KAEjB,MAAO,CACL2B,YAAa,SAACnN,GACZoN,cAAcpN,GACd6L,EAAS9F,GAAc,OACvB8F,EAAS5F,GAAgB,GAC3B,EAEJ,E,8CCCeoH,GAfM,WACnB,IAAQC,EAAMC,eAAND,EAER,OACEE,gBAAAC,YAAA,CAAAC,SAAA,CACEC,eAACC,IAAI,CAACC,GAAG,gBAAgBC,UAAU,uCAAsCJ,SACtEJ,EAAE,iBAELK,eAACC,IAAI,CAACC,GAAG,gBAAgBC,UAAU,uCAAsCJ,SACtEJ,EAAE,mBAIX,ECmDeS,GAxDM,WACnB,IAAMvP,EAAekN,GAAelC,IAC9B5J,EAAe8L,GAAeb,IAC9BhL,EAAa6L,GAAeZ,IAC1BwC,EAAMC,eAAND,EAWR,OACEE,gBAAAC,YAAA,CAAAC,SAAA,CACEC,eAACC,IAAI,CACHC,GAAG,iBACHC,UAAU,uCAAsCJ,SAE/CJ,EAAE,mBAELK,eAACC,IAAI,CACHC,GAAG,iBACHC,UAAU,uCAAsCJ,SAE/CJ,EAAE,sBAELE,gBAACI,IAAI,CACHC,GAAG,sBACHG,MAxBJpO,EAAe0N,EAAE,6BAA+B,GAyB5CQ,UAAU,uCAAsCJ,SAAA,CAE/C9N,GAAgB+N,eAACM,KAAe,CAACC,KAAMC,OACvCb,EAAE,oBAELE,gBAACI,IAAI,CACHC,GAAG,qBACHG,MA7BJnO,EAAayN,EAAE,2BAA6B,GA8BxCQ,UAAU,uCAAsCJ,SAAA,CAE/C7N,GAAc8N,eAACM,KAAe,CAACC,KAAMC,OACrCb,EAAE,mBAELK,eAACC,IAAI,CACHC,GAAG,gBACHG,MAlCJxP,EAAeA,EAAa4P,SAAW,GAmCnCN,UAAU,uCAAsCJ,SAE/CJ,EAAE,mBAIX,EClDee,GAPY,SAAHtY,GACtB,OADgCA,EAAJyB,KAEnBmW,eAACI,GAAY,IAEfJ,eAACN,GAAY,GACtB,EC2BeiB,GA/BQ,WACrB,IAAMlO,EAAmBsL,GAAeP,IAClCU,EAAWL,KACjB+C,EAAoBhB,eAAZD,EAACiB,EAADjB,EAAGkB,EAAID,EAAJC,KAOX,OACEhB,gBAAA,OAAKM,UAAU,kBAAiBJ,SAAA,CAC9BC,eAACM,KAAe,CAACC,KAAMO,OACvBjB,gBAAA,UACEM,UAAU,8CACVY,SAVuB,SAAH3Y,GAA0C,IAA1B4Y,EAAK5Y,EAAf6Y,OAAUD,MACxCH,EAAKK,eAAeF,GACpB9C,EAASjF,IAAqBxG,GAChC,EAOqCsN,SAAA,CAE/BC,eAAA,UAAQgB,MAAM,GAAGb,UAAU,kCAAiCJ,SACzDJ,EAAE,iCAELK,eAAA,UAAQgB,MAAM,KAAKb,UAAU,kCAAiCJ,SAC3DJ,EAAE,4BAELK,eAAA,UAAQgB,MAAM,KAAKb,UAAU,kCAAiCJ,SAC3DJ,EAAE,kCAKb,EC8GewB,GAtHA,WACb,IAAMvQ,EAAemN,GAAenC,IAC9B/K,EAAekN,GAAelC,IAC9BxJ,EAAa0L,GAAeT,IAC5BhL,EAAeyL,GAAeR,IAC9BtL,EAAe8L,GAAeb,IAC9BhL,EAAa6L,GAAeZ,IAC5BhL,EAAmB4L,GAAeX,IAClChL,EAAkB2L,GAAeV,IACjCa,EAAWL,KACT8B,EAAMC,eAAND,EACRyB,EACEnD,KADMO,EAAa4C,EAAb5C,cAAeC,EAAU2C,EAAV3C,WAAYG,EAAgBwC,EAAhBxC,iBAAkBM,EAAekC,EAAflC,gBAE7CM,EAAgBD,KAAhBC,YACA6B,EAAgBvI,gBAAhBuI,YAERC,qBAAU,WACR,OAAO,WACDjP,GACFmN,EAAYnN,EAEhB,CACF,GAAG,IAEHiP,qBAAU,WAyBR1Q,GANE4N,GAAc,WAhBZN,EAAStG,MACTsG,EAASrG,MACTqG,EAAStL,IAAgB,IAGL,WACpB,IAAMP,EAAakP,aACjB,WACErD,EAAS1F,KACX,GACA,KAEF0F,EAAS9F,GAAc/F,IACvB6L,EAAS1F,KACX,CAIEgJ,EACF,GAIJ,GAAG,CAAC5Q,IAEJ0Q,qBAAU,WAQJ1Q,IACFsN,EAAStG,MACTsG,EAASrG,OAEXhH,GAVE4N,GAAW,SAAC1M,GACV6M,EAAiB/N,EAAsBkB,EAAUI,GACjD+M,EAAgBrO,EAAsBkB,EAAUK,EAClD,GAQJ,GAAG,CAACE,IAIJ,OACE0N,eAAA,OAAAD,SACEF,gBAAC4B,KAAM,CACLC,QAAQ,OACRC,OAAO,KACPC,MAAM,MACNzB,UAAU,uBAAsBJ,SAAA,CAEhCC,eAACyB,KAAOI,MAAK,CAAA9B,SACXC,eAACC,IAAI,CAACC,GAAG,IAAIC,UAAU,oBAAoB2B,QAAST,EAAYtB,SAC7DJ,EAAE,uBAGPK,eAACyB,KAAOM,OAAM,CAAC,gBAAc,mBAAkBhC,UAC3C9N,GAAgBC,IAAe8N,eAACM,KAAe,CAACC,KAAMC,SAE1DX,gBAAC4B,KAAOO,SAAQ,CAACC,GAAG,mBAAkBlC,SAAA,CACpCF,gBAACqC,KAAG,CAAC/B,UAAU,UAASJ,SAAA,CACtBC,eAACC,IAAI,CACHC,GAAG,IACHC,UAAU,gCACV2B,QAAS,WACP5D,EAASlF,KACX,EAAE+G,SAEDJ,EAAE,oBAELK,eAACU,GAAkB,CAAC7W,KAAMgH,IAC1BmP,eAACC,IAAI,CAACC,GAAG,OAAOC,UAAU,gCAA+BJ,SACtDJ,EAAE,cAELK,eAACC,IAAI,CACHC,GAAG,IACHG,MAnC4BV,EAAE,yBAoC9BQ,UAAU,gCACV2B,QAAS,WACP5D,EAASlF,KACX,EAAE+G,SAEFC,eAACM,KAAe,CAACC,KAAM4B,YAG3BnC,eAACW,GAAc,WAKzB,EC/GeyB,GA/BA,WACb,IAAQzC,EAAMC,eAAND,EAEF0C,GADc,IAAIC,MACCC,cAEzB,OACEvC,eAAA,UAAQG,UAAU,SAAQJ,SACxBF,gBAAA,OAAKM,UAAU,yCAAwCJ,SAAA,CACpDJ,EAAE,0BAA0B,IAAE0C,EAAM,IACrCrC,eAACC,IAAI,CACHC,GAAI,CAAEsC,SCZd,iDDaQvB,OAAO,SACPwB,IAAI,sBACJtC,UAAU,+BAA8BJ,SAEvCJ,EAAE,6BACG,IAAI,IACN,IACNK,eAACC,IAAI,CACHC,GAAI,CAAEsC,SCnBd,+CDoBQvB,OAAO,SACPwB,IAAI,sBACJtC,UAAU,+BAA8BJ,SAEvCJ,EAAE,iCAKb,EEEa+C,GAAW,WACtB,IAAMxE,EAAWL,KAEjB,MAAO,CACLjT,YAAa,SAAAxC,EAAAyW,EAGXV,GACU,IAHRzN,EAAItI,EAAJsI,KAAM+D,EAAWrM,EAAXqM,YAAaC,EAAItM,EAAJsM,KAAMG,EAAQzM,EAARyM,SAAUxG,EAAKjG,EAALiG,MACnCsG,EAAQkK,EAARlK,SAAUC,EAAaiK,EAAbjK,cAGN7J,EAAkB,CACtB2F,KAAMA,EAAKsQ,MACXvM,YAAaA,EAAYuM,MACzBtM,KAAMA,EAAKsM,MACXrM,WACAC,gBACAC,SAAUA,EAASmM,MACnB3S,MAAOA,EAAM2S,OAEf9C,EAAShL,IAAmB,IAC5BgL,EAAStT,EAAYG,IAClBqT,SACAC,MAAK,SAAClN,GACL+M,EAAStK,GAASzC,IAClBgN,GACF,IACCG,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEAlG,WAAY,SAACG,EAAkBkS,GAC7BD,EAAS5K,IAAmB,IAC5B4K,EAASpS,EAAWG,IACjBmS,SACAC,MAAK,SAAClN,GACL+M,EAASnK,GAAS5C,IAClBgN,GACF,IACCG,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEA2Q,YAAa,SAACxE,GACZD,EAAS9K,IAAoB,IAC7B8K,EAAS/S,KACNiT,SACAC,MAAK,SAACjN,GACL8M,EAASjK,GAAU7C,IACK,qBAAb+M,GACTA,GAEJ,IACCG,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEA3F,YAAa,SAAA1C,EAWXwU,GACU,IAVR3J,EAAG7K,EAAH6K,IAWI/H,EAAsB,CAC1BiE,KAXI/G,EAAJ+G,KAYA+D,YAXW9K,EAAX8K,YAYAC,KAXI/K,EAAJ+K,KAYAC,SAXQhL,EAARgL,SAYAC,cAXajL,EAAbiL,cAYAC,SAXQlL,EAARkL,SAYAxG,MAXK1E,EAAL0E,OAaF6P,EAAS1K,IAAmB,IAC5B0K,EAAS7R,EAAY,CAAEJ,QAASuI,EAAgB/H,kBAC7C2R,SACAC,MAAK,SAAC5R,GACLyR,EAAS7J,GAAgB5H,IACzB0R,GACF,IACCG,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEAlF,YAAa,SAACb,EAAkBkS,GAC9BD,EAASxK,IAAmB,IAC5BwK,EAASpR,EAAYb,IAClBmS,SACAC,MAAK,WACJH,EAASlJ,GAAY/I,IACrBkS,GACF,IACCG,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEA4Q,YAAa,SAAClX,GACZwS,EAAS9K,IAAoB,IAC7B8K,EAAS3S,EAAiBG,IACvB0S,SACAC,MAAK,SAACjN,GACL8M,EAASjK,GAAU7C,GACrB,IACCkN,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEJ,ECxJe,OAA0B,4CCA1B,OAA0B,4CCyD1B6Q,GArDG,WAChB,IAAQlD,EAAMC,eAAND,EAER,OACEK,eAAA,OAAKG,UAAU,oCAAmCJ,SAChDF,gBAAA,OAAKM,UAAU,MAAKJ,SAAA,CAClBC,eAAA,OAAKG,UAAU,uDAAsDJ,SACnEC,eAAA,OACE8C,IAAKC,GACLC,QAAQ,QACRC,IAAI,SACJ9C,UAAU,kBAGdH,eAAA,SACAA,eAAA,OAAKG,UAAU,kCAAiCJ,SAC9CF,gBAAA,WAASM,UAAU,OAAMJ,SAAA,CACvBF,gBAAA,UAAAE,SAAA,CACEC,eAAA,MAAIG,UAAU,uBAAsBJ,SACjCJ,EAAE,+BAELK,eAAA,MAAIG,UAAU,0BAAyBJ,SACpCJ,EAAE,qCAGPE,gBAAA,KAAGM,UAAU,wBAAuBJ,SAAA,CACjCJ,EAAE,oCACHK,eAAA,SACCL,EAAE,oCACHK,eAAA,SACCL,EAAE,oCACHK,eAAA,SACCL,EAAE,oCACHK,eAAA,SACCL,EAAE,oCACHK,eAAA,SACCL,EAAE,uCAELK,eAAA,OAAKG,UAAU,mBAAkBJ,SAC/BC,eAAA,OACE8C,IAAKI,GACLF,QAAQ,OACRC,IAAI,YACJ9C,UAAU,2BAQ1B,EC/CegD,GARK,WAClB,OACEnD,eAAA,OAAKG,UAAU,mDAAkDJ,SAC/DC,eAAA,OAAKoD,KAAK,SAASjD,UAAU,6CAGnC,E,kBC0GekD,GAlGK,WAClB,IAAAC,EAA0BC,mBAAiB,IAAGC,EAAAC,aAAAH,EAAA,GAAvC5X,EAAK8X,EAAA,GAAEE,EAAQF,EAAA,GACtBG,EAA8CJ,mBAA2B,IAAGK,EAAAH,aAAAE,EAAA,GAArEE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GACpCxS,EAAS2M,GAAe3B,IACxB8B,EAAWL,KACT8B,EAAMC,eAAND,EACRoE,EAAqCrB,KAA7BE,EAAWmB,EAAXnB,YAAaD,EAAWoB,EAAXpB,YAErBrB,qBAAU,YACsB,SAAC5V,GACzBA,EACFkX,EAAYlX,GAEZiX,GAEJ,CAEAqB,CAAsBtY,EACxB,GAAG,CAACA,IAEJ4V,qBAAU,YACuB,SAC7BuC,EACAzS,GAEA,IAAM6S,EAAoBJ,EAAgB/O,KACxC,SAACoP,GAAsB,OAAaA,EAAOlD,KAAK,IAE5C3P,EAAiBD,EAAO8D,QAAO,SAAA9M,GAAmC,IAAhCyM,EAAQzM,EAARyM,SAItC,OAAkC,IAHVoP,EAAkB/O,QACxC,SAACiP,GAAwB,OAAcA,IAAqBtP,CAAQ,IAE/CkK,MACzB,IACAb,EAAS/J,GAAkB9C,GAC7B,CAEA+S,CAAuBP,EAAiBzS,EAC1C,GAAG,CAACyS,IAEJ,IAAMQ,EAAkC,CACtC,CACEC,MAAO3E,EAAE,4BACTqB,MAAO,OAET,CACEsD,MAAO3E,EAAE,8BACTqB,MAAO,SAET,CACEsD,MAAO3E,EAAE,oCACTqB,MAAO,kBAILuD,EAAyB,CAC7BC,oBAAoB,GAAD3c,OAAK8X,EAAE,iDAC1B8E,YAAa9E,EAAE,wCACf+E,UAAW/E,EAAE,sCACbgF,OAAQhF,EAAE,mCACViF,UAAWjF,EAAE,sCACbkF,kBAAmBlF,EAAE,8CACrBmF,gBAAiBnF,EAAE,4CACnBoF,OAAQpF,EAAE,oCAGZ,OACEE,gBAAA,OAAKM,UAAU,OAAMJ,SAAA,CACnBC,eAAA,MAAIG,UAAU,kCACdH,eAAA,MAAIG,UAAU,OAAMJ,SAAEJ,EAAE,qCACxBE,gBAAA,OAAKM,UAAU,uCAAsCJ,SAAA,CACnDC,eAAA,SACEgF,KAAK,OACLC,YAAatF,EAAE,0CACfqB,MAAOtV,EACPyU,UAAU,2CACVY,SAAU,SAAAlC,GAEwC,IADtCmC,EAAKnC,EAAfoC,OAAUD,MAEV0C,EAAS1C,EACX,IAEFhB,eAACkF,KAAW,CACVC,WAAW,kBACXC,QAASf,EACTrD,MAAO6C,EACPwB,gBAAiBd,EACjBxD,SAAU,SAACqE,GACTtB,EAAmBsB,EACrB,EACAE,eAAe,EACfnF,UAAU,gHAKpB,ECxEeoF,GA9BQ,SAAHnd,GAEqB,IAADod,EAAApd,EADtC+I,MAASqD,EAAGgR,EAAHhR,IAAK9D,EAAI8U,EAAJ9U,KAAMiE,EAAQ6Q,EAAR7Q,SAAUtG,EAAKmX,EAALnX,MAEtBsR,EAAMC,eAAND,EAER,OACEK,eAAA,OAAKG,UAAU,WAAUJ,SACvBF,gBAAA,OAAKM,UAAU,iCAAgCJ,SAAA,CAC7CC,eAAA,OACE8C,IAAKnO,EACLqO,QAAQ,OACRC,IAAKvS,EACLyP,UAAU,iDAEZN,gBAAA,OAAKM,UAAU,iBAAgBJ,SAAA,CAC7BC,eAAA,MAAIG,UAAU,iCAAgCJ,SAAErP,IAChDmP,gBAAA,KAAAE,SAAA,CACG1R,EAAM,IAAEsR,EAAE,2CAEbK,eAACC,IAAI,CAACC,GAAE,iBAAArY,OAAmB2M,GAAO2L,UAAU,kBAAiBJ,SAC3DC,eAAA,UAAQG,UAAU,oDAAmDJ,SAClEJ,EAAE,2BAOjB,EC+Be8F,GAzDU,WACvB,IAAMpU,EAAiB0M,GAAe1B,IAChC/K,EAAyByM,GAAezB,IACxC4B,EAAWL,KACT8B,EAAMC,eAAND,EAMR,OACEE,gBAAA,OAAAE,SAAA,CACEC,eAAA,OACEG,UAAS,uJAOPJ,SAED1O,EAAeyD,KACd,SAAC3D,EAAcuU,GACb,IAAQlR,EAAQrD,EAARqD,IACR,OAAOkR,EAAQpU,EACb0O,eAACuF,GAAc,CAACpU,MAAOA,GAAYqD,GACjC,IACN,MAGHlD,EAAyBD,EAAe0N,QACvCiB,eAAA,OAAKG,UAAU,cAAaJ,SAC1BC,eAAA,UACEgF,KAAK,SACL7E,UAAS,4PAYT2B,QAzCgB,WACxB5D,EAAS/I,GAA0B7D,EAAyB,GAC9D,EAuCqCyO,SAE1BJ,EAAE,qBAMf,EC3CegG,GAfO,WACpB,IAAM5U,EAAmBgN,GAAehC,IAChC4D,EAAMC,eAAND,EAER,OACEE,gBAAA,OAAKM,UAAU,iBAAgBJ,SAAA,CAC7BC,eAAA,OAAAD,SACEC,eAAA,MAAAD,SAAKJ,EAAE,qCAETK,eAACqD,GAAW,IACXtS,EAAmBiP,eAACmD,GAAW,IAAMnD,eAACyF,GAAgB,MAG7D,ECceG,GA7BG,WAChB,IAAM1H,EAAWL,KACT8B,EAAMC,eAAND,EAER,OACEK,eAAA,OAAKG,UAAU,mCAAkCJ,SAC/CF,gBAAA,OAAKM,UAAU,2BAA0BJ,SAAA,CACvCC,eAAA,MAAIG,UAAU,4BAA2BJ,SACtCJ,EAAE,+BAELK,eAAA,MAAIG,UAAU,4CAA2CJ,SACtDJ,EAAE,kCAELK,eAAA,OAAKG,UAAU,OAAMJ,SACnBC,eAACC,IAAI,CACHC,GAAI,IACJC,UAAU,mBACV2B,QAAS,WACP5D,EAASrF,KACX,EAAEkH,SAEDJ,EAAE,sBAMf,EC8BekG,GAjDF,WACX,IAAMzU,EAAS2M,GAAe3B,IACxB8B,EAAWL,KACXiI,EAAaC,iBAAsB,IACjCpD,EAAgBD,KAAhBC,YAmBR,OAjBArB,qBAAU,WACR,IAAM0E,EAAgB,SAACF,GACrB,OAAOG,KAAKC,MAAMJ,EAAWK,wBAAwBC,OACvD,EAEAzD,GAAY,WACV,IAAMpQ,EAAqByT,EAAcF,EAAWO,QAAQ,IAC5DnI,EAASzF,GAAsBlG,IAC/B,IAAMC,EAAqBwT,EAAcF,EAAWO,QAAQ,IAC5DnI,EAASvF,GAAsBnG,GACjC,GACF,GAAG,IAEH8O,qBAAU,WACRpD,EAAS/J,GAAkB/C,GAC7B,GAAG,CAACA,IAGFyO,gBAAA,OAAAE,SAAA,CACEC,eAAA,WACEsG,IAAK,SAACC,GACHT,EAAWO,QAAQ,GAA4BE,CAClD,EACApG,UAAU,qCAAoCJ,SAE9CC,eAAC4F,GAAS,MAGZ5F,eAAA,WACEsG,IAAK,SAACE,GACHV,EAAWO,QAAQ,GAA4BG,CAClD,EAAEzG,SAEFC,eAAC6C,GAAS,MAGZ7C,eAAA,WAAAD,SACEC,eAAC2F,GAAa,QAItB,ECvCac,GAAsB,WACjC,IAAMvI,EAAWL,KAEjB,MAAO,CACLnU,OAAQ,SAACG,EAAYsU,GACnBD,EAASxU,EAAOG,IACbuU,SACAC,MAAK,SAACxU,GACLqU,EAASlL,GAAgBnJ,IACzBsU,GACF,IACCG,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEA9J,OAAQ,SAACO,EAAe0V,GACtBD,EAAShW,EAAOO,IACb2V,SACAC,MAAK,SAACxU,GACLqU,EAASlL,GAAgBnJ,IACzBsU,GACF,IACCG,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEA9H,OAAQ,SAAC2G,EAAoBsN,GAC3BD,EAAShU,EAAO2G,IACbuN,SACAC,MAAK,WACJH,EAASlL,GAAgB,OACzBmL,GACF,IACCG,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEA0U,0BAA2B,SACzB7V,EACAsB,EACAC,GAEA,IAAMuU,EAAmBC,KAAKC,MAAMD,KAAKE,UAAUjW,IAInD,OAHA8V,EAAWxU,iBAAmBA,EAC9BwU,EAAWvU,gBAAkBA,EAC7B8L,EAASlL,GAAgB2T,IAClBA,CACT,EAEJ,ECnDeI,GAjBM,SAAH3e,GAG4B,IAF5C4J,EAAO5J,EAAP4J,QACAgV,EAAc5e,EAAd4e,eAEA,OAAKhV,GAAYA,EAAQiV,SAAS,QAKhCjH,eAAAF,YAAA,CAAAC,SACEC,eAAA,QAAMG,UAAU,uCAAsCJ,SACnDiH,EAAehV,OANb,IAUX,ECsIekV,GA5IA,WACb,IAAMxU,EAAeqL,GAAeN,IAC9BS,EAAWL,KACT/J,EAASqT,eAATrT,KACA6L,EAAMC,eAAND,EACAzX,EAAWue,KAAXve,OACAmZ,EAAgBvI,gBAAhBuI,YAERC,qBAAU,WACRpD,EAAS/E,GAAgB,OACzBkI,GACF,GAAG,IAqCH,OACErB,eAAA,OAAKG,UAAU,qBAAoBJ,SACjCF,gBAAA,OAAKM,UAAU,4CAA2CJ,SAAA,CACxDC,eAAA,MAAIG,UAAU,OAAMJ,SAAEJ,EAAE,gCACxBE,gBAAA,QAAMM,UAAU,aAAaiH,SAvCd,SAACC,GACpB,IAESC,EAALD,EADFpG,OAAUR,EAAQ6G,EAAR7G,SAAU8G,EAAKD,EAALC,MAAOC,EAAQF,EAARE,SAEvB/e,EAAgB,CACpBgY,SAAUA,EAASO,MACnBuG,MAAOA,EAAMvG,MAAMyG,cACnBD,SAAUA,EAASxG,OAErBqG,EAAMK,iBACNxf,EAAOO,GAAS,WACdyV,EAAStL,IAAgB,IACzBkB,EAAK,IACP,GACF,EAyB0DiM,SAAA,CAClDF,gBAAA,OAAKM,UAAU,aAAYJ,SAAA,CACzBC,eAAA,SAAO2H,QAAQ,gBAAe5H,SAC3BJ,EAAE,gCAELK,eAAA,SACEgF,KAAK,OACL/C,GAAG,gBACHvR,KAAK,WACLuU,YAAatF,EAAE,sCACfQ,UAAU,0BAGdN,gBAAA,OAAKM,UAAU,aAAYJ,SAAA,CACzBC,eAAA,SAAO2H,QAAQ,aAAY5H,SAAEJ,EAAE,6BAC/BK,eAAA,SACEgF,KAAK,QACL/C,GAAG,aACHvR,KAAK,QACLuU,YAAatF,EAAE,sCACfQ,UAAU,0BAGdN,gBAAA,OAAKM,UAAU,aAAYJ,SAAA,CACzBC,eAAA,SAAO2H,QAAQ,gBAAe5H,SAC3BJ,EAAE,gCAELK,eAAA,SACEgF,KAAK,WACL/C,GAAG,gBACHvR,KAAK,WACLuU,YAAatF,EAAE,sCACfQ,UAAU,0BAGdH,eAAC+G,GAAY,CACX/U,QAASU,EACTsU,eA5DkB,SAACtU,GAC3B,OAAQA,GACN,IAAK,yBACH,OAAOiN,EAAE,+CACX,IAAK,sBACH,OAAOA,EAAE,4CACX,IAAK,yBACH,OAAOA,EAAE,+CACX,IAAK,6BACH,OAAOA,EAAE,kDACX,IAAK,yBACH,OAAOA,EAAE,+CACX,IAAK,yCACH,OAAOA,EAAE,iDACX,QACE,OAAOA,EAAE,sBAEf,IA6CQK,eAAA,UACEgF,KAAK,SACL4C,gBAAc,EACdzH,UAAS,+RAaPJ,SAEDJ,EAAE,mBAELK,eAAA,KAAGG,UAAU,OAAMJ,SAAEJ,EAAE,6CACvBK,eAAA,OAAKG,UAAU,aAAYJ,SACzBC,eAACC,IAAI,CAACC,GAAI,gBAAiBC,UAAU,kBAAiBJ,SACpDC,eAAA,UACEG,UAAS,2TAaPJ,SAEDJ,EAAE,8BAQnB,EClCekI,GAtGA,WACb,IAAMnV,EAAeqL,GAAeN,IAC9BS,EAAWL,KACT/J,EAASqT,eAATrT,KACA6L,EAAMC,eAAND,EACAjW,EAAW+c,KAAX/c,OACA2X,EAAgBvI,gBAAhBuI,YAERC,qBAAU,WACRpD,EAAS/E,GAAgB,OACzBkI,GACF,GAAG,IAmCH,OACErB,eAAA,OAAKG,UAAU,qBAAoBJ,SACjCF,gBAAA,OAAKM,UAAU,4CAA2CJ,SAAA,CACxDC,eAAA,MAAIG,UAAU,OAAMJ,SAAEJ,EAAE,gCACxBE,gBAAA,QAAMM,UAAU,aAAaiH,SArCd,SAACC,GACpB,IAESC,EAALD,EADFpG,OAAUsG,EAAKD,EAALC,MAAOC,EAAQF,EAARE,SAEb3d,EAAa,CACjB0d,MAAOA,EAAMvG,MACbwG,SAAUA,EAASxG,OAErBqG,EAAMK,iBACNhe,EAAOG,GAAM,WACXqU,EAAStL,IAAgB,IACzB,IAA0BR,EAAoBvI,EAApBuI,gBAC1B8L,EAASpG,GADqCjO,EAAtCsI,mBAER+L,EAASlG,GAAmB5F,IAC5B0B,EAAK,IACP,GACF,EAqB0DiM,SAAA,CAClDF,gBAAA,OAAKM,UAAU,aAAYJ,SAAA,CACzBC,eAAA,SAAO2H,QAAQ,aAAY5H,SAAEJ,EAAE,6BAC/BK,eAAA,SACEgF,KAAK,QACL/C,GAAG,aACHvR,KAAK,QACLuU,YAAatF,EAAE,sCACfQ,UAAU,0BAGdN,gBAAA,OAAKM,UAAU,aAAYJ,SAAA,CACzBC,eAAA,SAAO2H,QAAQ,gBAAe5H,SAC3BJ,EAAE,gCAELK,eAAA,SACEgF,KAAK,WACL/C,GAAG,gBACHvR,KAAK,WACLuU,YAAatF,EAAE,sCACfQ,UAAU,0BAGdH,eAAC+G,GAAY,CACX/U,QAASU,EACTsU,eA5CkB,SAACtU,GAC3B,OAAQA,GACN,IAAK,sBACH,OAAOiN,EAAE,4CACX,IAAK,yBACH,OAAOA,EAAE,+CACX,IAAK,6BACH,OAAOA,EAAE,kDACX,IAAK,8BACH,OAAOA,EAAE,gDACX,QACE,OAAOA,EAAE,sBAEf,IAiCQK,eAAA,UACEgF,KAAK,SACL4C,gBAAc,EACdzH,UAAS,iRAYPJ,SAEDJ,EAAE,0BAMf,ECrEemI,GA9BA,WACb,IAAMjX,EAAekN,GAAelC,IAC9BxJ,EAAa0L,GAAeT,IAC5BnL,EAAmB4L,GAAeX,IAClChL,EAAkB2L,GAAeV,IACjCa,EAAWL,KACT/J,EAASqT,eAATrT,KACRiU,EAA8CtB,KAAtCvc,EAAM6d,EAAN7d,OAAQwc,EAAyBqB,EAAzBrB,0BACRlH,EAAgBD,KAAhBC,YACA6B,EAAgBvI,gBAAhBuI,YAkBR,OAhBAC,qBAAU,WACR,IAAM0G,EAActB,EAClB7V,EACAsB,EACAC,GAEFlI,EAAO8d,GAAa,WAClBxI,EAAYnN,GACZ6L,EAAS1G,IAAgB,IACzB0G,EAASpG,GAAoB,IAC7BoG,EAASlG,GAAmB,IAC5BlE,EAAK,KACLuN,GACF,GACF,GAAG,IAEIrB,eAAA,SACT,ECjCaiI,GAAa,WACxB,IAAM/J,EAAWL,KAEjB,MAAO,CACLqK,aAAc,SAAC/J,GACbD,EAAS3T,KACN6T,SACAC,MAAK,SAACxU,GACLqU,EAASlL,GAAgBnJ,IACzBsU,GACF,IACCG,OAAM,SAACC,GACwB,sBAA1BA,EAAcvM,SAChBkM,EAAS/E,GAAgBoF,EAAcvM,SAE3C,GACJ,EAEJ,ECZamW,GAAgB,WAC3B,IAAMjK,EAAWL,KAEjB,MAAO,CACLuK,YAAa,SACX7a,EACA4Q,GAEAD,EAAS7I,IAAyB,IAClC6I,EAAS9Q,EAAiBG,IACvB6Q,SACAC,MAAK,SAACgK,GACLlK,EAASkK,EACX,IACC/J,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEAsW,YAAa,SAACxa,GACZoQ,EAAS3I,IAAwB,IACjC2I,EAASvQ,EAAiBG,IACvBsQ,SACAC,MAAK,WAEN,IACCC,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEJ,EChBeuW,GA1BM,SAAHngB,GAA0D,IAApDogB,EAAYpgB,EAAZogB,aACd7I,EAAMC,eAAND,EAER,OACEK,eAAA,OAAKG,UAAU,aAAYJ,SACzBC,eAAA,UACEG,UAAS,qNAYT2B,QAAS0G,EAAazI,SAErBJ,EAAE,oBAIX,ECqKe8I,GAjLS,WACtB,IAAM5X,EAAekN,GAAelC,IAC9BtK,EAAwBwM,GAAexB,IACvCzL,EAAkBiN,GAAejC,IACjCpJ,EAAeqL,GAAeN,IAC9BS,EAAWL,KACjB6K,EAAyBvB,eAAjBrT,EAAI4U,EAAJ5U,KAAM6U,EAAMD,EAANC,OACNhJ,EAAMC,eAAND,EACAuI,EAAiBD,KAAjBC,aACAE,EAAgBD,KAAhBC,YACAxd,EAAgB8X,KAAhB9X,YACAyW,EAAgBvI,gBAAhBuI,YAERC,qBAAU,WACR4G,GAAa,WACXhK,EAAS/E,GAAgB,OACzBkI,GACF,GACF,GAAG,IAEH,IAAMuH,EAAcC,mBAClB,oBAAgBtX,IAAyBT,EAA8B,GACvE,CAACS,EAAuBT,IA6C1B,OAAKD,EAKHmP,eAAA,OAAKG,UAAU,qBAAoBJ,SACjCF,gBAAA,OAAKM,UAAU,mCAAkCJ,SAAA,CAC/CC,eAAA,MAAIG,UAAU,iBAAgBJ,SAC3BJ,EAAE,4CAELE,gBAAA,QAAMM,UAAU,aAAaiH,SApDJ,SAC7BC,GAEA,IAAQpG,EAAWoG,EAAXpG,OAEF6H,EADiB7H,EAAf8H,WACiBC,MAAM,GAC/B3B,EAAMK,iBACN,IAAMna,EAAa,IAAI0b,SACvB1b,EAAW2b,OAAO,QAASJ,GAC3BV,EACE7a,GACA,SAAA5D,GAAyD,IAAtDgL,EAAQhL,EAARgL,SAAUC,EAAajL,EAAbiL,cACXhK,EAAYqW,EAAQ,CAAEtM,WAAUC,kBAAiB,WAC/Cd,EAAK,iBACP,GACF,GAEJ,EAmCoEiM,SAAA,CAC5DC,eAAA,SAAO2H,QAAQ,YAAW5H,SACvBJ,EAAE,wCAELK,eAAA,SACEgF,KAAK,OACL/C,GAAG,YACHvR,KAAK,OACLuU,YAAatF,EAAE,kDACfQ,UAAU,4BAEZH,eAAA,SAAO2H,QAAQ,mBAAkB5H,SAC9BJ,EAAE,+CAELK,eAAA,SACEgF,KAAK,OACL/C,GAAG,mBACHvR,KAAK,cACLuU,YAAatF,EAAE,kDACfQ,UAAU,4BAEZH,eAAA,SAAO2H,QAAQ,YAAW5H,SACvBJ,EAAE,wCAELK,eAAA,SACEgF,KAAK,SACL/C,GAAG,YACHvR,KAAK,OACLuU,YAAatF,EAAE,kDACfwJ,IAAI,IACJhJ,UAAU,4BAEZH,eAAA,SAAO2H,QAAQ,gBAAe5H,SAC3BJ,EAAE,4CAELE,gBAAA,UACEoC,GAAG,gBACHvR,KAAK,WACLyP,UAAU,wBAAuBJ,SAAA,CAEjCC,eAAA,UAAAD,SAASJ,EAAE,2BACXK,eAAA,UAAQgB,MAAM,MAAKjB,SAAEJ,EAAE,yBACvBK,eAAA,UAAQgB,MAAM,QAAOjB,SAAEJ,EAAE,2BACzBK,eAAA,UAAQgB,MAAM,gBAAejB,SAC1BJ,EAAE,oCAGPK,eAAA,SAAO2H,QAAQ,aAAY5H,SACxBJ,EAAE,yCAELK,eAAA,SACEgF,KAAK,SACL/C,GAAG,aACHvR,KAAK,QACLuU,YAAatF,EAAE,kDACfwJ,IAAI,IACJhJ,UAAU,4BAEZH,eAAA,SAAO2H,QAAQ,aAAY5H,SACxBJ,EAAE,yCAELK,eAAA,SACEgF,KAAK,OACL/C,GAAG,aACHvR,KAAK,aACLyP,UAAU,4BAEZH,eAAC+G,GAAY,CACX/U,QAASU,EACTsU,eAtGkB,SAACtU,GAC3B,OAAQA,GACN,IAAK,qBACH,OAAOiN,EAAE,kDACX,IAAK,4BACH,OAAOA,EAAE,yDACX,IAAK,qBACH,OAAOA,EAAE,kDACX,IAAK,yBACH,OAAOA,EAAE,sDACX,IAAK,sBACH,OAAOA,EAAE,mDACX,IAAK,sBACH,OAAOA,EAAE,mDACX,QACE,OAAOA,EAAE,sBAEf,IAuFQE,gBAAA,OAAKM,UAAU,yBAAwBJ,SAAA,CACrCC,eAAA,UACEgF,KAAK,SACLoE,SAAUR,EACVzI,UAAS,yTAaPJ,SAEDJ,EAAE,mBAELK,eAACuI,GAAY,CAACC,aA1GH,WACnBG,GACF,eAGS3I,eAACqJ,KAAQ,CAACnJ,GAAI,sBA2GzB,EC9IeoJ,GAjDgB,WAC7B,IAAQ3J,EAAMC,eAAND,EAER,OACEE,gBAAA,OAAAE,SAAA,CACEC,eAACC,IAAI,CAACC,GAAG,mBAAmBC,UAAU,kBAAiBJ,SACrDC,eAAA,UACEG,UAAS,oRAaPJ,SAEDJ,EAAE,kBAGPK,eAACC,IAAI,CAACC,GAAG,mBAAmBC,UAAU,kBAAiBJ,SACrDC,eAAA,UACEG,UAAS,6QAaPJ,SAEDJ,EAAE,qBAKb,ECyCe4J,GA3EmB,WAChC,IAAMpY,EAAQ4M,GAAe5B,IACvBjL,EAAkB6M,GAAe7B,IACjC1K,EAAuBuM,GAAevB,IACtCzK,EAAWgM,GAAef,IAC1BlL,EAAoBiM,GAAehB,IACjC4L,EAAWxB,eAAXwB,OACAhJ,EAAMC,eAAND,EACAjB,EAA4BT,KAA5BS,wBACA4J,EAAgBH,KAAhBG,YACAxb,EAAgB4V,KAAhB5V,YACR1E,EAA+B+I,EAAvBqD,EAAGpM,EAAHoM,IAAKI,EAAaxM,EAAbwM,cAEPgU,EAAcC,mBAClB,oBACE/W,GAAqBN,GAAwBN,EAEpC,GACX,CAACY,EAAmBN,EAAsBN,IAW5C,OACE2O,gBAAA,OAAKM,UAAU,MAAKJ,SAAA,CAClBC,eAACC,IAAI,CAACC,GAAI,iBAAkBC,UAAU,kBAAiBJ,SACrDC,eAAA,UACEG,UAAS,6QAaPJ,SAEDJ,EAAE,qBAGPK,eAAA,UACEoJ,SAAUR,EACVzI,UAAS,oPAcT2B,QA9CoB,WACxBpD,EAAwB3M,EAAUyC,GAClC8T,EAAY,CAAE1T,kBACd9H,EAAY0H,GAAgB,WAC1BmU,GACF,GACF,EAwCiC5I,SAE1BJ,EAAE,qBAIX,ECzEe6J,GATgB,SAAHphB,GAG1B,OAFSA,EAATqhB,UAGSzJ,eAACuJ,GAAyB,IAE5BvJ,eAAC0J,GAAuB,GACjC,ECDeC,GARG,SAAHvhB,GAA+D,IAAzDwhB,EAAOxhB,EAAPwhB,QAASnV,EAAWrM,EAAXqM,YAC5B,OACEoL,gBAAA,OAAKM,UAAU,YAAWJ,SAAA,CACxBC,eAAA,QAAMG,UAAU,mBAAkBJ,SAAE6J,IAAe,IAAEnV,IAG3D,EC6DeoV,GA3DI,SAAHzhB,GAEqB,IAADod,EAAApd,EADlC+I,MAAST,EAAI8U,EAAJ9U,KAAM+D,EAAW+Q,EAAX/Q,YAAaC,EAAI8Q,EAAJ9Q,KAAMC,EAAQ6Q,EAAR7Q,SAAUE,EAAQ2Q,EAAR3Q,SAAUxG,EAAKmX,EAALnX,MAAOyb,EAAOtE,EAAPsE,QAEvDjZ,EAAekN,GAAelC,IAC5B8D,EAAMC,eAAND,EACAgJ,EAAWxB,eAAXwB,OACAnU,EAAQ3D,EAAR2D,IAMR,OACEwL,eAAA,OAAKG,UAAU,MAAKJ,SAClBF,gBAAA,OAAKM,UAAU,0DAAyDJ,SAAA,CACtEC,eAAA,OACE8C,IAAKnO,EACLqO,QAAQ,OACRC,IAAKvS,EACLyP,UAAU,oEAEZH,eAAC2J,GAAS,CACRC,QAASjK,EAAE,kCACXlL,YAAa/D,IAEfsP,eAAC2J,GAAS,CACRC,QAASjK,EAAE,yCACXlL,YAAaA,IAEfuL,eAAC2J,GAAS,CACRC,QAASjK,EAAE,kCACXlL,YAAW,GAAA5M,OAAK6M,EAAI,KAAA7M,OAAI8X,EAAE,yCAE5BK,eAAC2J,GAAS,CACRC,QAASjK,EAAE,mCACXlL,YAAaI,IAEfgL,gBAAA,OAAKM,UAAU,YAAWJ,SAAA,CACxBC,eAAA,QAAMG,UAAU,qBAA2B,OAE7CH,eAAC2J,GAAS,CACRC,QAASjK,EAAE,mCACXlL,YAAW,GAAA5M,OAAKwG,EAAK,KAAAxG,OAAI8X,EAAE,yCAE7BK,eAAA,OAAKG,UAAU,uCAAsCJ,SACnDC,eAAA,OAAKG,UAAU,+BAA8BJ,SAC3CF,gBAAA,OAAKM,UAAU,4BAA2BJ,SAAA,CACxCC,eAACwJ,GAAsB,CACrBC,UAAYK,EAAiBtV,MAAQA,IAEvCwL,eAACuI,GAAY,CAACC,aA1CL,WACnBG,GACF,eA+CF,ECjBeoB,GArCM,WACnB,IAAMlZ,EAAekN,GAAelC,IAC9B1K,EAAQ4M,GAAe5B,IACvBnL,EAAkB+M,GAAe/B,IAC/B/P,EAAY+d,eAAZ/d,QACA0T,EAAMC,eAAND,EACAuI,EAAiBD,KAAjBC,aACApc,EAAe4W,KAAf5W,WACAuV,EAAgBvI,gBAAhBuI,YACAyI,EAAY3Y,EAAZ2Y,QAUR,OARAxI,qBAAU,WACR4G,GAAa,WACXpc,EAAWG,GAAS,WAClBoV,GACF,GACF,GACF,GAAG,IAEExQ,EAKHgP,gBAAA,OAAKM,UAAU,2CAA0CJ,SAAA,CACvDC,eAAA,OAAKG,UAAU,2BAA0BJ,SACvCC,eAAA,MAAAD,SAAKJ,EAAE,0CAER3O,IAAoB8Y,EACnB9J,eAACmD,GAAW,IAEZnD,eAAC6J,GAAU,CAAC1Y,MAAOA,OAXhB6O,eAACqJ,KAAQ,CAACnJ,GAAI,iBAezB,ECsMe+J,GAnOS,WACtB,IAAMpZ,EAAekN,GAAelC,IAC9BtK,EAAwBwM,GAAexB,IACvC/K,EAAuBuM,GAAevB,IACtC1O,EAAmBiQ,GAAetB,IAClCtL,EAAQ4M,GAAe5B,IACvBlL,EAAkB8M,GAAe9B,IACjCiC,EAAWL,KACXqM,EAAmBnE,iBAAiC,MAClDpG,EAAMC,eAAND,EACAgJ,EAAWxB,eAAXwB,OACAT,EAAiBD,KAAjBC,aACRiC,EAAqChC,KAA7BC,EAAW+B,EAAX/B,YAAaE,EAAW6B,EAAX7B,YACbjc,EAAgBqW,KAAhBrW,YACAgV,EAAgBvI,gBAAhBuI,YACRjZ,EAAqD+I,EAA7CT,EAAItI,EAAJsI,KAAM+D,EAAWrM,EAAXqM,YAAaC,EAAItM,EAAJsM,KAAMC,EAAQvM,EAARuM,SAAUtG,EAAKjG,EAALiG,MAE3CiT,qBAAU,WAOR4G,GAAa,YANY,SAAHrJ,GAAmC,IAA7BhK,EAAQgK,EAARhK,SACtBA,IACDqV,EAAiB7D,QAA8BrF,MAAQnM,EAE5D,CAGEuV,CAAiBjZ,GACjBkQ,GACF,GACF,GAAG,IAEH,IAAMuH,EAAcC,mBAClB,oBACEtX,GAAyBC,GAAwBP,EAExC,GACX,CAACM,EAAuBC,EAAsBP,IAG1CoZ,EAAyB,SAAH1gB,EAI1BwH,GACU,IAADmZ,EAAA3gB,EAHPsX,OAAUvQ,EAAI4Z,EAAJ5Z,KAAMsQ,EAAKsJ,EAALtJ,MAIZuJ,EAAqB3D,KAAKC,MAAMD,KAAKE,UAAU3V,IACrD,OAAQT,GACN,IAAK,OACH6Z,EAAY7Z,KAAOsQ,EACnB,MACF,IAAK,cACHuJ,EAAY9V,YAAcuM,EAC1B,MACF,IAAK,OACHuJ,EAAY7V,KAAO8V,OAAOxJ,GAC1B,MACF,IAAK,WACHuJ,EAAY1V,SAAWmM,EACvB,MACF,IAAK,QACHuJ,EAAYlc,MAAQmc,OAAOxJ,GAE/B9C,EAASnK,GAASwW,GACpB,EA8BA,OAAK1Z,EAKHmP,eAAA,OAAKG,UAAU,sBAAqBJ,SAClCF,gBAAA,OAAKM,UAAU,mCAAkCJ,SAAA,CAC/CC,eAAA,MAAIG,UAAU,uBAAsBJ,SACjCJ,EAAE,4CAELE,gBAAA,OAAKM,UAAU,+DAA8DJ,SAAA,CAC1ExO,GAAyBC,GAAwBP,EAChD+O,eAACmD,GAAW,IAEZnD,eAAA,OACE8C,IAAKnO,EACLqO,QAAQ,OACRC,IAAKvS,EACLyP,UAAU,0CAGdN,gBAAA,OAAKM,UAAU,YAAWJ,SAAA,CACxBC,eAAA,SAAO2H,QAAQ,aAAY5H,SACxBJ,EAAE,wCAELK,eAAA,SACEgF,KAAK,OACL/C,GAAG,aACHvR,KAAK,OACLsQ,MAAOtQ,EACPyP,UAAU,oBACVY,SAAU,SAACsG,GACTgD,EAAuBhD,EAAOlW,EAChC,IAEF6O,eAAA,SAAO2H,QAAQ,oBAAmB5H,SAC/BJ,EAAE,+CAELK,eAAA,SACEgF,KAAK,OACL/C,GAAG,oBACHvR,KAAK,cACLsQ,MAAOvM,EACP0L,UAAU,oBACVY,SAAU,SAACsG,GACTgD,EAAuBhD,EAAOlW,EAChC,IAEF6O,eAAA,SAAO2H,QAAQ,aAAY5H,SACxBJ,EAAE,wCAELK,eAAA,SACEgF,KAAK,SACL/C,GAAG,aACHvR,KAAK,OACLsQ,MAAOtM,EACPyU,IAAI,IACJhJ,UAAU,oBACVY,SAAU,SAACsG,GACTgD,EAAuBhD,EAAOlW,EAChC,IAEF6O,eAAA,SAAO2H,QAAQ,iBAAgB5H,SAC5BJ,EAAE,4CAELE,gBAAA,UACEyG,IAAK4D,EACLjI,GAAG,iBACHvR,KAAK,WACLyP,UAAU,yBACVY,SAAU,SAACsG,GACTgD,EAAuBhD,EAAOlW,EAChC,EAAE4O,SAAA,CAEFC,eAAA,UAAQgB,MAAM,MAAKjB,SAAEJ,EAAE,yBACvBK,eAAA,UAAQgB,MAAM,QAAOjB,SAAEJ,EAAE,2BACzBK,eAAA,UAAQgB,MAAM,gBAAejB,SAC1BJ,EAAE,oCAGPK,eAAA,SAAO2H,QAAQ,cAAa5H,SACzBJ,EAAE,yCAELK,eAAA,SACEgF,KAAK,SACL/C,GAAG,cACHvR,KAAK,QACLsQ,MAAO3S,EACP8a,IAAI,IACJhJ,UAAU,oBACVY,SAAU,SAACsG,GACTgD,EAAuBhD,EAAOlW,EAChC,IAEF6O,eAAA,SAAO2H,QAAQ,cAAa5H,SACzBJ,EAAE,yCAELK,eAAA,SACEgF,KAAK,OACL/C,GAAG,cACHvR,KAAK,aACLyP,UAAU,oBACVY,SAAU,SAACsG,IAlIQ,SAAHlI,EAAAhV,GAGhB,IAFR8W,EAAM9B,EAAN8B,OACArM,EAAazK,EAAbyK,cAEIkU,EAAS7H,EAAO+H,MAAc,GACpC9K,EAASzI,GAAoB,CAAEb,mBAC/B,IAAMrH,EAAa,IAAI0b,SACvB1b,EAAW2b,OAAO,QAASJ,GAC3BV,EACE7a,GACA,SAAAkd,GAAyD,IAAtD9V,EAAQ8V,EAAR9V,SAAUC,EAAa6V,EAAb7V,cACL2V,EAAc3D,KAAKC,MAAMD,KAAKE,UAAU3V,IAC9CoZ,EAAY3V,cAAgBA,EAC5B2V,EAAY5V,SAAWA,EACvBuJ,EAASnK,GAASwW,GACpB,GAEJ,CAkHcG,CAAuBrD,EAAOlW,EAChC,IAEF6O,eAAA,OAAKG,UAAU,yBAAwBJ,SACrCC,eAAA,UACEoJ,SAAUR,EACVzI,UAAS,oVAcT2B,QApIY,WACpBhU,GACFwa,EAAYxa,GAEdzB,EAAY8E,GAAO,WACjBwX,GACF,GACF,EA6HyC5I,SAE1BJ,EAAE,8BA5HRK,eAACqJ,KAAQ,CAACnJ,GAAI,sBAoIzB,E,kBC9OayK,GAAgB,WAC3B,IAAQ7W,EAASqT,eAATrT,KACAuN,EAAgBvI,gBAAhBuI,YAER,MAAO,CACLuJ,SAAU,WACR9W,EAAK,KACLuN,GACF,EAEAwJ,aAAc,WACZ/W,EAAK,uBACLuN,GACF,EAEAyJ,YAAa,WACXhX,EAAK,sBACLuN,GACF,EAEJ,ECXe0J,GAda,SAAH3iB,GAE4B,IADnDsK,EAAYtK,EAAZsK,aAEA,OAAKA,EAKHsN,eAAA,OAAKoD,KAAK,QAAQjD,UAAU,aAAYJ,SACrCrN,IALI,IAQX,EC4IesY,GA3Ha,WAC1B,IAAA1H,EAAsCC,oBAAS,GAAMC,EAAAC,aAAAH,EAAA,GAA9C2H,EAAWzH,EAAA,GAAE0H,EAAc1H,EAAA,GAClCG,EAAwCJ,oBAAS,GAAMK,EAAAH,aAAAE,EAAA,GAAhDwH,EAAYvH,EAAA,GAAEwH,EAAexH,EAAA,GACpCyH,EAAoC9H,oBAAS,GAAK+H,EAAA7H,aAAA4H,EAAA,GAA3CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAAwClI,mBAAS,IAAGmI,EAAAjI,aAAAgI,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAC9Bja,EAAesM,GAAerB,IAC9BvL,EAAQ4M,GAAe5B,IACvB+B,EAAWL,KACT/J,EAASqT,eAATrT,KACF+X,EAASC,uBACTC,EAAWC,yBACjBC,EChCwB,WACxB,IAAM/N,EAAWL,KAEjB,MAAO,CACLqO,kBAAmB,SAAC/a,GAClB+M,EAASjQ,EAAckD,IACpBiN,SACAC,MAAK,SAAC8N,GACLjO,EAASvI,GAAgBwW,EAAQ1a,cACnC,IACC6M,OAAM,SAACC,GACNL,EAAS/E,GAAgBoF,EAAcvM,SACzC,GACJ,EAEJ,CDiBgCoa,GAAtBF,EAAiBD,EAAjBC,kBACAvM,EAAMC,eAAND,EACAiL,EAAaD,KAAbC,SACRxiB,EAAwB+I,EAAhBT,EAAItI,EAAJsI,KAAMrC,EAAKjG,EAALiG,MAiBdiT,qBAAU,WAGR,OAFA4K,EAAkB/a,GAEX,WACL2C,EAAK,KACLoK,EAASlF,KACX,CACF,GAAG,IAEH,IAAMqT,EAAmB,eAAAxN,EAAAxW,YAAAC,cAAAC,MAAG,SAAAC,EAAO6e,GAAqC,IAAAtU,EAAA,OAAAzK,cAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEtE,GADAse,EAAMK,iBAEDmE,GAAWE,EAAQ,CAAAljB,EAAAE,KAAA,eAAAF,EAAAM,OAAA,iBAGF,OAAtBiiB,GAAgB,GAAMviB,EAAAE,KAAA,EACC8iB,EAAkBS,mBAAmB7a,EAAc,CACxE8a,eAAgB,CAAEC,KAAMT,EAASU,WAAWC,mBAC3C,KAAD,GAFI3Z,EAAOlK,EAAAK,MAGDP,OACVijB,EAAgB,kBAAD/jB,OAAmBkL,EAAQpK,MAAMqJ,UAChDoZ,GAAgB,KAEhBQ,EAAgB,IAChBR,GAAgB,GAChBF,GAAe,IAChB,wBAAAriB,EAAAS,OAAA,GAAAd,EAAA,KACF,gBAlBwBe,GAAA,OAAAsV,EAAArV,MAAA,KAAAC,UAAA,KAoBnBkjB,EAAkB,eAAAxN,EAAA9W,YAAAC,cAAAC,MAAG,SAAAqB,EAAAD,GAAA,IAAAijB,EAAAjkB,EAAA,OAAAL,cAAAM,MAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,OAAS6jB,EAAKjjB,EAALijB,MAAOjkB,EAAKgB,EAALhB,MACzC6iB,EAAcoB,GACdhB,EAAgBjjB,EAAQA,EAAMqJ,QAAU,IAAI,wBAAAjI,EAAAT,OAAA,GAAAM,EAAA,KAC7C,gBAHuBK,GAAA,OAAAkV,EAAA3V,MAAA,KAAAC,UAAA,KAmBxB,OACEoW,gBAAA,OAAKM,UAAU,+BAA8BJ,SAAA,CAC3CC,eAAA,MAAIG,UAAU,0DAAyDJ,SACpErP,IAEHmP,gBAAA,MAAIM,UAAU,OAAMJ,SAAA,CACjBJ,EAAE,oCAAoC,IAAEtR,EAAO,IAC/CsR,EAAE,0CAELE,gBAAA,QACEoC,GAAG,eACH9B,UAAU,qCACViH,SAAUiF,EAAoBtM,SAAA,CAE9BC,eAAC0M,eAAW,CACVzK,GAAG,eACHmD,QAhFqB,CAC3ByH,MAAO,CACLC,KAAM,CACJC,MAAO,UACPC,WAAY,oBACZC,cAAe,cACfC,SAAU,OACV,gBAAiB,CAAEH,MAAO,YAE5BI,QAAS,CACPJ,MAAO,UACPK,UAAW,aAsETjN,UAAU,MACVY,SAAU4L,IAEZ3M,eAAA,OAAKG,UAAU,6BAA4BJ,SACzCC,eAAA,UACEgF,KAAK,SACL/C,GAAG,SACHmH,SAAU+B,GAAgBI,GAAcN,EACxC9K,UAAU,mCAAkCJ,SAE5CC,eAAA,QAAMiC,GAAG,cAAalC,SAxC9BoL,EACEnL,eAAA,OAAKiC,GAAG,UAAU9B,UAAU,6BAE5BR,EAAE,2CAyCAK,eAAC+K,GAAmB,CAACrY,aAAciZ,IAEnC3L,eAAA,KAAGG,UAvCP8K,EAAc,6BAA+B,yBAuCPlL,SAC/BJ,EAAE,qDAGPK,eAAA,OAAKG,UAAU,6BAA4BJ,SACzCC,eAACuI,GAAY,CAACC,aA1CC,WACnBoC,GACF,QA4CF,EEjHeyC,GA/Ba,WAC1B,IAAA/J,EAAwBC,oBAAS,kBAC/B+J,aACE,8GACD,IAHIC,EAIN9J,aAAAH,EAAA,GAJmB,GAKdzS,EAAekN,GAAelC,IAC5BqM,EAAiBD,KAAjBC,aACA7G,EAAgBvI,gBAAhBuI,YAQR,OANAC,qBAAU,WACR4G,GAAa,WACX7G,GACF,GACF,GAAG,IAEExQ,EAKHmP,eAAA,OAAKG,UAAU,qBAAoBJ,SACjCC,eAAA,OAAKG,UAAU,4CAA2CJ,SACxDC,eAACwN,YAAQ,CAAC3B,OAAQ0B,EAAcxN,SAC9BC,eAACgL,GAAmB,UAPnBhL,eAACqJ,KAAQ,CAACnJ,GAAI,sBAYzB,ECLeuN,GA1BK,SAAHrlB,GAE0B,IAADslB,EAAAtlB,EADxC4J,QAAWwC,EAAGkZ,EAAHlZ,IAAKwC,EAAK0W,EAAL1W,MAAO7F,EAAKuc,EAALvc,MAEfwO,EAAMC,eAAND,EACAjP,GAAUS,GAAmB,CAAC,GAA9BT,KACA+P,EAAazJ,EAAbyJ,SAER,OACEZ,gBAAA,OAAKM,UAAU,gBAAeJ,SAAA,CAC5BF,gBAAA,MAAAE,SAAA,CACGJ,EAAE,uCAAuC,IAAEjP,KAE9CmP,gBAAA,MAAAE,SAAA,CACGJ,EAAE,0CAA0C,IAAEc,KAEjDT,eAAA,OAAKG,UAAU,cAAaJ,SAC1BC,eAACC,IAAI,CAACC,GAAE,mBAAArY,OAAqB2M,GAAO2L,UAAU,kBAAiBJ,SAC7DC,eAAA,UAAQG,UAAU,sDAAqDJ,SACpEJ,EAAE,wBAMf,ECPegO,GAjBY,WACzB,IAAM9c,EAAekN,GAAelC,IAC9B9J,EAAWgM,GAAef,IAEhC,OACEgD,eAAA,OAAAD,SACGhO,EAAS+C,KAAI,SAAC9C,GACb,IAAQwC,EAA8BxC,EAA9BwC,IAAKyC,EAAyBjF,EAAzBiF,OAAQG,EAAiBpF,EAAjBoF,aACrB,OAAQH,EAAgBzC,MAAS3D,EAAsB2D,MACpC,IAAjB4C,EACA4I,eAACyN,GAAW,CAACzb,QAASA,GAAcwC,GAClC,IACN,KAGN,EC+CeoZ,GAlDM,WACnB,IAAM/c,EAAekN,GAAelC,IAC9BjL,EAAemN,GAAenC,IAC9BjK,EAAqBoM,GAAenB,IACpCzK,EAAmB4L,GAAeX,IAClCc,EAAWL,KACT8B,EAAMC,eAAND,EACAuI,EAAiBD,KAAjBC,aACA1J,EAAkBP,KAAlBO,cACAoM,EAAaD,KAAbC,SACAvJ,EAAgBvI,gBAAhBuI,YAERC,qBAAU,WACR,IAAMuM,EAAqC,WACzC3P,EAAS1G,IAAgB,IACzB6J,GACF,EAQA,OANA6G,GAAa,WACX1J,GAAc,WACZ5N,GAAgBsN,EAAStG,MACzBiW,GACF,GACF,IACO,WACLA,GACF,CACF,GAAG,IAEH,IAAMC,EAAe,WACnBlD,GACF,EAEA,OAAK/Z,EAKHmP,eAAA,OAAKG,UAAU,qBAAoBJ,SACjCF,gBAAA,OAAKM,UAAU,4CAA2CJ,SAAA,CACxDC,eAAA,MAAAD,SAAKJ,EAAE,sCACPE,gBAAA,MAAIM,UAAU,OAAMJ,SAAA,CAAC,KAAG5N,EAAiB,QACzC6N,eAACuI,GAAY,CAACC,aAAcsF,IAC3Bnc,EAAqBqO,eAACmD,GAAW,IAAMnD,eAAC2N,GAAkB,IACrC,IAArBxb,GAA0B6N,eAACuI,GAAY,CAACC,aAAcsF,SAVpD9N,eAACqJ,KAAQ,CAACnJ,GAAI,sBAczB,EClCe6N,GA1BQ,SAAH3lB,GAEqB,IAADslB,EAAAtlB,EADtC4J,QAAWwC,EAAGkZ,EAAHlZ,IAAKyC,EAAMyW,EAANzW,OAERvG,EAFqBgd,EAALvc,MAEhBT,KACA+P,EAAaxJ,EAAbwJ,SACAd,EAAMC,eAAND,EAER,OACEE,gBAAA,OAAKM,UAAU,iBAAgBJ,SAAA,CAC7BF,gBAAA,MAAAE,SAAA,CACGJ,EAAE,oCAAoC,KAAGjP,EAAK,OAEjDmP,gBAAA,MAAAE,SAAA,CACGJ,EAAE,uCAAuC,IAAEc,KAE9CT,eAAA,OAAKG,UAAU,cAAaJ,SAC1BC,eAACC,IAAI,CAACC,GAAE,kBAAArY,OAAoB2M,GAAO2L,UAAU,kBAAiBJ,SAC5DC,eAAA,UAAQG,UAAU,sDAAqDJ,SACpEJ,EAAE,wBAMf,ECPeqO,GAjBW,WACxB,IAAMnd,EAAekN,GAAelC,IAC9B9J,EAAWgM,GAAef,IAEhC,OACEgD,eAAA,OAAAD,SACGhO,EAAS+C,KAAI,SAAC9C,GACb,IAAQwC,EAAsBxC,EAAtBwC,IAAKwC,EAAiBhF,EAAjBgF,MAAOG,EAAUnF,EAAVmF,MACpB,OAAQH,EAAexC,MAAS3D,EAAsB2D,KAC1C,KAAV2C,EACA6I,eAACiO,GAAS,CAACjc,QAASA,GAAcwC,GAChC,IACN,KAGN,ECgDe0Z,GAnDK,WAClB,IAAMrd,EAAekN,GAAelC,IAC9BjL,EAAemN,GAAenC,IAC9BjK,EAAqBoM,GAAenB,IACpCxK,EAAkB2L,GAAeV,IACjCa,EAAWL,KACT8B,EAAMC,eAAND,EACAuI,EAAiBD,KAAjBC,aACA1J,EAAkBP,KAAlBO,cACAoM,EAAaD,KAAbC,SACAvJ,EAAgBvI,gBAAhBuI,YAERC,qBAAU,WACR,IAAM6M,EAAmC,WACvCjQ,EAASxG,IAAc,IACvB2J,GACF,EASA,OAPA6G,GAAa,WACX1J,GAAc,WACZ5N,GAAgBsN,EAASrG,MACzBsW,GACF,GACF,IAEO,WACLA,GACF,CACF,GAAG,IAEH,IAAML,EAAe,WACnBlD,GACF,EAEA,OAAK/Z,EAKHmP,eAAA,OAAKG,UAAU,qBAAoBJ,SACjCF,gBAAA,OAAKM,UAAU,4CAA2CJ,SAAA,CACxDC,eAAA,MAAAD,SAAKJ,EAAE,qCACPE,gBAAA,MAAIM,UAAU,OAAMJ,SAAA,CAAC,KAAG3N,EAAgB,QACxC4N,eAACuI,GAAY,CAACC,aAAcsF,IAC3Bnc,EAAqBqO,eAACmD,GAAW,IAAMnD,eAACgO,GAAiB,IACrC,IAApB5b,GAAyB4N,eAACuI,GAAY,CAACC,aAAcsF,SAVnD9N,eAACqJ,KAAQ,CAACnJ,GAAI,sBAczB,ECmEekO,GAtHW,WACxB,IAAMvd,EAAekN,GAAelC,IAC9B1K,EAAQ4M,GAAe5B,IACvBzK,EAAoBqM,GAAepB,IACnCjK,EAAeqL,GAAeN,IAC9BS,EAAWL,KACT8K,EAAWxB,eAAXwB,OACAhJ,EAAMC,eAAND,EACAuI,EAAiBD,KAAjBC,aACAzZ,EAAkBwP,KAAlBxP,cACA4S,EAAgBvI,gBAAhBuI,YACA3Q,EAASS,EAATT,KAER4Q,qBAAU,WACR4G,GAAa,WACXhK,EAAS/E,GAAgB,OACzBkI,GACF,GACF,GAAG,IAEH,IAAMuH,EAAcC,mBAClB,mBAAgBnX,CAAgC,GAChD,CAACA,IAoCH,OAAKb,EAKHmP,eAAA,OAAKG,UAAU,qBAAoBJ,SACjCF,gBAAA,OAAKM,UAAU,4CAA2CJ,SAAA,CACxDC,eAAA,MAAIG,UAAU,OAAMJ,SACjBJ,EAAE,gDAELE,gBAAA,MAAIM,UAAU,OAAMJ,SAAA,CACjBJ,EAAE,iDAAiD,KAAGjP,EAAK,OAE9DmP,gBAAA,QACEM,UAAU,2BACViH,SAAU,SAACC,IAhDmB,SACpCA,EAAuCxI,GAE7B,IADRrK,EAAGqK,EAAHrK,IAAKsV,EAAOjL,EAAPiL,QAIQ9I,EAEXqG,EAHFpG,OACE/J,QAAW8J,MAGTpS,EAAsB,CAC1BqI,OAAS6S,EAAiBtV,IAC1BrD,MAAOqD,EACP0C,QAAS8J,GAEXqG,EAAMK,iBACNjZ,EAAcG,GAAY,WACxB+Z,GACF,GACF,CA+BU0F,CAA8BhH,EAAOlW,EACvC,EAAE4O,SAAA,CAEFC,eAAA,OAAAD,SACEC,eAAA,YACEtP,KAAK,UACL4d,KAAM,GACNC,KAAM,EACNpO,UAAU,8BAGdH,eAAC+G,GAAY,CACX/U,QAASU,EACTsU,eA1CkB,SAACtU,GAC3B,OAEWiN,EADJ,+BADCjN,EAEK,4DAEA,qBAEf,IAqCQmN,gBAAA,OAAKM,UAAU,aAAYJ,SAAA,CACzBC,eAAA,UACEgF,KAAK,SACLoE,SAAUR,EACVzI,UAAS,mUAaPJ,SAEDJ,EAAE,iBAELK,eAACuI,GAAY,CAACC,aAxDH,WACnBG,GACF,eAGS3I,eAACqJ,KAAQ,CAACnJ,GAAI,sBAyDzB,ECvHesO,GATS,SAAHpmB,GAAqD,IAA/CqmB,EAAIrmB,EAAJqmB,KACzB,OACE5O,gBAAA,OAAKM,UAAU,kEAAiEJ,SAAA,CAC9EC,eAACmD,GAAW,IACZnD,eAAA,QAAMG,UAAU,mBAAkBJ,SAAE0O,MAG1C,ECKeC,GAbD,SAAHtmB,GAA4D,IAAtDumB,EAAQvmB,EAARumB,SAAUF,EAAIrmB,EAAJqmB,KACzB,OAAKA,EAKH5O,gBAAA,OAAAE,SAAA,CACEC,eAAA,MAAAD,SAAK4O,IACL3O,eAAA,KAAGG,UAAU,sBAAqBJ,SAAE0O,OAN/B,IASX,EC+HeG,GA3HQ,WACrB,IAAM/d,EAAekN,GAAelC,IAC9BjK,EAAoBmM,GAAelB,IACnC7K,EAAU+L,GAAed,IACvB1N,EAAcya,eAAdza,UACF2O,EAAWL,KACT8K,EAAWxB,eAAXwB,OACAhJ,EAAMC,eAAND,EACAuI,EAAiBD,KAAjBC,aACR9G,EAAwCnD,KAAhC7O,EAAYgS,EAAZhS,aAAcO,EAAayR,EAAbzR,cACdkb,EAAiBF,KAAjBE,aACAxJ,EAAgBvI,gBAAhBuI,YACRjZ,EAA8C4J,EAAtCwC,EAAGpM,EAAHoM,IAAKwC,EAAK5O,EAAL4O,MAAO7F,EAAK/I,EAAL+I,MAAO+F,EAAO9O,EAAP8O,QAASC,EAAK/O,EAAL+O,MAEpCmK,qBAAU,WACR4G,GAAa,WACX9Y,EAAaG,GAAW,WACtB8R,GACF,GACF,GACF,GAAG,IAyBH,IAAKxQ,EACH,OAAOmP,eAACqJ,KAAQ,CAACnJ,GAAI,uBAGvB,GAAItO,IAAsBoF,IAAU7F,EAClC,OAAO6O,eAACwO,GAAe,CAACC,KAAM,oBAEhC,IAAQ/d,EAASS,EAATT,KACA+P,EAAazJ,EAAbyJ,SAER,OACET,eAAA,OAAKG,UAAU,sBAAqBJ,SAClCF,gBAAA,OAAKM,UAAU,4CAA2CJ,SAAA,CACxDF,gBAAA,MAAIM,UAAU,OAAMJ,SAAA,CACjBJ,EAAE,0CAA0C,IAAEjP,KAEjDmP,gBAAA,MAAAE,SAAA,CACGJ,EAAE,6CAA6C,IAAEc,KAEpDT,eAAA,KAAGG,UAAU,8BAA6BJ,SAAE7I,IAC5C8I,eAAC0O,GAAK,CACJC,SAAUhP,EAAE,2CACZ8O,KAAMtX,IAER0I,gBAAA,OAAKM,UAAU,kBAAiBJ,SAAA,EAC5B5I,GACA6I,eAACC,IAAI,CAACC,GAAE,oBAAArY,OAAsB2M,GAAO2L,UAAU,kBAAiBJ,SAC9DC,eAAA,UACEG,UAAS,6VAaPJ,SAEDJ,EAAE,oBAITK,eAAA,UACEG,UAAS,+TAeT2B,QAAS,YAtFc,SAAC9P,GAChC,IAcMjC,EAd0B,SAACiC,GAC/B,IAAM6c,EAAyBjI,KAAKC,MAAMD,KAAKE,UAAU9U,IAGzD,OAFA6c,EAAczX,cAAe,EAC7B8G,EAASvH,GAAWkY,IACbA,CACT,CASuBC,CAAwB9c,IAPpB,SAACjC,GAC1BJ,EAAcI,GAAgB,WAC5BmO,EAAShG,MACTyQ,GACF,GACF,CAGAoG,CAAmBhf,EACrB,CAsEYif,CAAyBhd,EAC3B,EAAE+N,SAEDJ,EAAE,oBAGPK,eAAA,OAAKG,UAAU,kBAAiBJ,SAC9BC,eAACuI,GAAY,CAACC,aA3ED,WACnBqC,GACF,UA8EF,EC7BeoE,GA5FM,WACnB,IAAMpe,EAAekN,GAAelC,IAC9B7J,EAAU+L,GAAed,IACzBrL,EAAoBmM,GAAelB,IACnC/K,EAAoBiM,GAAehB,IACjCxN,EAAcya,eAAdza,UACF2O,EAAWL,KACT8K,EAAWxB,eAAXwB,OACAhJ,EAAMC,eAAND,EACAuI,EAAiBD,KAAjBC,aACR9G,EAAwCnD,KAAhC7O,EAAYgS,EAAZhS,aAAce,EAAaiR,EAAbjR,cACd2a,EAAgBH,KAAhBG,YACAzJ,EAAgBvI,gBAAhBuI,YACRjZ,EAA+C4J,EAAvCwC,EAAGpM,EAAHoM,IAAKyC,EAAM7O,EAAN6O,OAAQ9F,EAAK/I,EAAL+I,MAAO+F,EAAO9O,EAAP8O,QAASC,EAAK/O,EAAL+O,MAErCmK,qBAAU,WACR4G,GAAa,WACX9Y,EAAaG,GAAW,WACtB8R,GACF,GACF,GACF,GAAG,IAEH,IAAMuH,EAAcC,mBAClB,mBAAgB/W,CAAgC,GAChD,CAACA,IAcH,IAAKjB,EACH,OAAOmP,eAACqJ,KAAQ,CAACnJ,GAAI,uBAGvB,GAAItO,IAAsBqF,IAAW9F,EACnC,OAAO6O,eAACwO,GAAe,CAACC,KAAM,kBAEhC,IAAQ/d,EAASS,EAATT,KACA+P,EAAaxJ,EAAbwJ,SAER,OACET,eAAA,OAAKG,UAAU,sBAAqBJ,SAClCF,gBAAA,OAAKM,UAAU,4CAA2CJ,SAAA,CACxDF,gBAAA,MAAIM,UAAU,OAAMJ,SAAA,CACjBJ,EAAE,uCAAuC,IAAEjP,KAE9CsP,eAAA,KAAGG,UAAU,8BAA6BJ,SAAE7I,IAC5C8I,eAAC0O,GAAK,CACJC,SAAQ,GAAA9mB,OAAK8X,EAAE,sCAAqC,KAAA9X,OAAI4Y,GACxDgO,KAAMtX,IAER6I,eAAA,OAAKG,UAAU,kBAAiBJ,SAC9BC,eAAA,UACEoJ,SAAUR,EACVzI,UAAS,gSAcT2B,QAAS,YAjDS,SAACvS,GAC3BY,EAAcZ,GAAW,WACvB2O,EAAS/F,MACTwQ,GACF,GACF,CA6CYuG,CAAoB1a,EACtB,EAAEuL,SAEDJ,EAAE,qBAGPK,eAAA,OAAKG,UAAU,kBAAiBJ,SAC9BC,eAACuI,GAAY,CAACC,aAlDD,WACnBsC,GACF,UAqDF,ECuBeqE,GAnHW,WACxB,IAAMte,EAAekN,GAAelC,IAC9B7J,EAAU+L,GAAed,IACzBpL,EAAoBkM,GAAejB,IACnCpK,EAAeqL,GAAeN,IAC9BS,EAAWL,KACT8K,EAAWxB,eAAXwB,OACAhJ,EAAMC,eAAND,EACAuI,EAAiBD,KAAjBC,aACAvY,EAAkBsO,KAAlBtO,cACA0R,EAAgBvI,gBAAhBuI,YACAnK,EAAYlF,EAAZkF,QAERoK,qBAAU,WACR4G,GAAa,WACX7G,GACF,GACF,GAAG,IAEH,IAAMuH,EAAcC,mBAClB,mBAAgBhX,CAAgC,GAChD,CAACA,IA+BH,OAAKhB,EAKHmP,eAAA,OAAKG,UAAU,sBAAqBJ,SAClCF,gBAAA,OAAKM,UAAU,4CAA2CJ,SAAA,CACxDC,eAAA,MAAIG,UAAU,YAAWJ,SACtBJ,EAAE,gDAELK,eAAA,OAAKG,UAAU,+DAA8DJ,SAC3EF,gBAAA,OAAKM,UAAU,YAAWJ,SAAA,CACxBC,eAAA,KAAAD,SAAI7I,IACJ8I,eAAA,YACEtP,KAAK,QACLuU,YAAatF,EACX,sDAEF2O,KAAM,GACNC,KAAM,EACNpO,UAAU,0BACVY,SAAU,SACRsG,IAlDY,SAAHxI,EAErB7M,GACU,IAFEgP,EAAKnC,EAAfoC,OAAUD,MAGN6N,EAAyBjI,KAAKC,MAAMD,KAAKE,UAAU9U,IACzD6c,EAAc1X,MAAQ6J,EACtB9C,EAASvH,GAAWkY,GACtB,CA6CcO,CAAkB/H,EAAOrV,EAC3B,IAEFgO,eAAC+G,GAAY,CACX/U,QAASU,EACTsU,eAtCgB,SAACtU,GAC3B,OAEWiN,EADJ,6BADCjN,EAEK,0DAEA,qBAEf,IAiCUmN,gBAAA,OAAKM,UAAU,kBAAiBJ,SAAA,CAC9BC,eAAA,UACEoJ,SAAUR,EACVzI,UAAS,sWAcT2B,QAAS,WAlErBnS,EAmEkCqC,GAnEJ,WAC5B2W,GACF,GAkEY,EAAE5I,SAEDJ,EAAE,mBAELK,eAACuI,GAAY,CAACC,aAnEL,WACnBG,GACF,iBAYS3I,eAACqJ,KAAQ,CAACnJ,GAAI,sBA4DzB,EC9FemP,GAnCM,WACnB,IAAQ1P,EAAMC,eAAND,EAER,OACEK,eAAA,OACEG,UAAS,uQAaPJ,SAEFF,gBAAA,OAAAE,SAAA,CACEC,eAAA,MAAIG,UAAU,yBAAwBJ,SACnCJ,EAAE,iCAELK,eAAA,MAAIG,UAAU,0CAAyCJ,SACpDJ,EAAE,qCAELK,eAAA,MAAIG,UAAU,oDAAmDJ,SAC9DJ,EAAE,yCAKb,ECmBe2P,GAnDE,WACf,IAAQ3P,EAAMC,eAAND,EAER,OACEK,eAAA,OACEG,UAAS,qQAaPJ,SAEFF,gBAAA,OAAAE,SAAA,CACEC,eAAA,MAAIG,UAAU,sBAAqBJ,SAAEJ,EAAE,6BACvCK,eAAA,MAAIG,UAAU,uCAAsCJ,SACjDJ,EAAE,iCAELK,eAAA,MAAIG,UAAU,sDAAqDJ,SAChEJ,EAAE,iCAELK,eAACC,IAAI,CAACC,GAAI,IAAKC,UAAU,kBAAiBJ,SACxCC,eAAA,UACEG,UAAS,4PAWPJ,SAEDJ,EAAE,6BAMf,ECvCe4P,GAVS,WACtB,IAAQC,ECOD,CACLA,mBAAoB,SAACC,EAAwBC,GAC3C,IAKMC,EAAgBF,EAAaG,cAAc,UACjDD,EAAc3K,KAAO,kBACrB2K,EAAcE,OAAQ,EACtBF,EAAc7M,IAAM,mDACA2M,EAAaK,qBAAqB,QAAQ,GAClDC,YAAYJ,GACvBK,OAAeC,YAAcP,EAC9BA,EAAOQ,SAZ0C,CAC/CC,MAAO,kCACPC,aAAa,EACbC,+BAA+B,EAUnC,GDtBMb,mBAMR,OAJAlO,qBAAU,WAAO,IAADgP,EACdd,EAAmBe,SAAqC,QAA7BD,EAAGN,OAAeC,mBAAW,IAAAK,IAAI,CAAC,EAC/D,GAAG,IAEItQ,eAAA,SACT,EEsBewQ,GAzBiB,WAC9B,IAAM3f,EAAekN,GAAelC,IAC9BzK,EAAS2M,GAAe3B,IAE9B,OACE4D,eAAA,OACEG,UAAS,yIAOPJ,SAED3O,EAAO0D,KAAI,SAAC3D,GACX,IAAQqD,EAAiBrD,EAAjBqD,IACR,OADyBrD,EAAZ2Y,QACYtV,MAAS3D,EAAsB2D,IACtDwL,eAACuF,GAAc,CAACpU,MAAOA,GAAYqD,GACjC,IACN,KAGN,ECeeic,GAhCW,WACxB,IAAM5f,EAAekN,GAAelC,IAC9B9K,EAAmBgN,GAAehC,IAChC4D,EAAMC,eAAND,EACAuI,EAAiBD,KAAjBC,aACAvF,EAAgBD,KAAhBC,YACAtB,EAAgBvI,gBAAhBuI,YAUR,OARAC,qBAAU,WACR4G,GAAa,WACXvF,GAAY,WACVtB,GACF,GACF,GACF,GAAG,IAEExQ,EAKHgP,gBAAA,OAAKM,UAAU,iBAAgBJ,SAAA,CAC7BC,eAAA,OAAKG,UAAU,YAAWJ,SACxBC,eAAA,MAAIG,UAAU,gCAA+BJ,SAC1CJ,EAAE,sCAGN5O,EAAmBiP,eAACmD,GAAW,IAAMnD,eAACwQ,GAAuB,OAVzDxQ,eAACqJ,KAAQ,CAACnJ,GAAI,sBAazB,ECuCewQ,GAvEG,SAAHtoB,GAKqB,IAJlCumB,EAAQvmB,EAARumB,SACAgC,EAAWvoB,EAAXuoB,YACAlC,EAAIrmB,EAAJqmB,KACAmC,EAAOxoB,EAAPwoB,QAEMC,EAAgB9K,iBAA8B,MAC9C7H,EAAWL,KACT8B,EAAMC,eAAND,EAEFmR,EAAmB,WACvB5S,EAAS/E,GAAgB,MAC3B,EAQA,OACE6G,eAAA,OACEsG,IAAKuK,EACL1Q,UAAS,uNAYT2B,QArBuB,SAAHjD,GAA+B,IAAzBoC,EAAMpC,EAANoC,OACxB4P,EAAcxK,UAAYpF,GAAU2P,GACtCE,GAEJ,EAiBgC/Q,SAE5BF,gBAAA,OAAKM,UAAU,sCAAqCJ,SAAA,CAClDC,eAAA,MAAIG,UAAU,8CAA6CJ,SACxD4O,IAEH3O,eAAA,MAAIG,UAAU,4CAA2CJ,SACtD4Q,IAEH3Q,eAAA,MAAIG,UAAU,oDAAmDJ,SAC9D0O,IAEFmC,GACC5Q,eAAA,UACEG,UAAS,0PAYT2B,QAASgP,EAAiB/Q,SAEzBJ,EAAE,wBAMf,ECnBeoR,GAvDI,SAAH3oB,GAA0D,IAApD4J,EAAO5J,EAAP4J,QACZ2N,EAAMC,eAAND,EAwCR,OAAK3N,GAAWA,EAAQiV,SAAS,QACxB,KAIPjH,eAAC0Q,GAAS,CACR/B,SAAUhP,EAAE,6BACZgR,YAAahR,EAAE,gCACf8O,KA9CwB,SAACzc,GAC3B,OAAQA,GAEN,IAAK,4BACH,OAAO2N,EAAE,iDACX,IAAK,sBACH,OAAOA,EAAE,sCACX,IAAK,wBACH,OAAOA,EAAE,uCAEX,IAAK,sBACH,OAAOA,EAAE,uCACX,IAAK,qBACH,OAAOA,EAAE,sCACX,IAAK,0BACH,OAAOA,EAAE,yCACX,IAAK,sBACH,OAAOA,EAAE,uCACX,IAAK,sBACH,OAAOA,EAAE,uCACX,IAAK,sBACH,OAAOA,EAAE,uCAEX,IAAK,wBACH,OAAOA,EAAE,2CACX,IAAK,uBACH,OAAOA,EAAE,0CACX,IAAK,4BACH,OAAOA,EAAE,8CACX,IAAK,wBACH,OAAOA,EAAE,kCACX,IAAK,wBACH,OAAOA,EAAE,kCACX,QACE,OAAOA,EAAE,sBAEf,CAUUqR,CAAoBhf,GAC1B4e,SAAS,GAGf,ECpCeK,GAjBM,SAAH7oB,GAA6D,IAAvD8oB,EAAQ9oB,EAAR8oB,SACdvR,EAAMC,eAAND,EAER,OAAIuR,EACK,KAIPlR,eAAC0Q,GAAS,CACR/B,SAAUhP,EAAE,+BACZgR,YAAahR,EAAE,kCACf8O,KAAM9O,EAAE,sBACRiR,SAAS,GAGf,ECNeO,GAVA,WACb,IAAMze,EAAeqL,GAAeN,IAC9ByT,ECNuB,WAC7B,IAAA5N,EAAgCC,oBAAkB,GAAKC,EAAAC,aAAAH,EAAA,GAAhD4N,EAAQ1N,EAAA,GAAE4N,EAAW5N,EAAA,GAoB5B,OAlBAlC,qBAAU,WACR,IAAM+P,EAA6B,WACjCD,GAAY,EACd,EAEME,EAA4B,WAChCF,GAAY,EACd,EAKA,OAHApB,OAAOuB,iBAAiB,UAAWF,GACnCrB,OAAOuB,iBAAiB,SAAUD,GAE3B,WACLtB,OAAOwB,oBAAoB,UAAWH,GACtCrB,OAAOwB,oBAAoB,SAAUF,EACvC,CACF,GAAG,IAEIJ,CACT,CDhBmBO,GAEjB,OAAIP,EACKlR,eAAC+Q,GAAU,CAAC/e,QAASU,IAEvBsN,eAACiR,GAAY,CAACC,SAAUA,GACjC,EEiGeQ,GAtGO,SAAHtpB,GAA2D,IAArDupB,EAAMvpB,EAANupB,OAAQC,EAAIxpB,EAAJwpB,KACzBnf,EAAmBsL,GAAeP,IACxC8F,EAA0CC,oBAAkB,GAAMC,EAAAC,aAAAH,EAAA,GAA3DuO,EAAarO,EAAA,GAAEsO,EAAgBtO,EAAA,GAChCuO,EAAahM,iBAAuB,MAE1CzE,qBAAU,WACR,IAAM0Q,EAAoBD,EAAW1L,QAEjC2L,IAEAA,EAAkBnF,MAAMzG,OADtByL,EAC4B,GAAAhqB,OAAMmqB,EAAkBC,aAAY,MAEjC,IAGvC,GAAG,CAACJ,IAEJvQ,qBAAU,WACR,IAAM0Q,EAAoBD,EAAW1L,QAEjCwL,GAAiBG,IACnBA,EAAkBnF,MAAMzG,OAAS,OACjC4L,EAAkBnF,MAAMzG,OAAM,GAAAve,OAAMmqB,EAAkBC,aAAY,MAEtE,GAAG,CAACxf,IAEJ,IAAMyf,EAAcrJ,mBAClB,kBAAegJ,EAAgB,oCAAsC,EAAE,GACvE,CAACA,IAGGM,EAAatJ,mBACjB,kBACEgJ,EAAgB,qDAAuD,EAAE,GAC3E,CAACA,IAOH,OACEhS,gBAAA,OAAKM,UAAU,iBAAgBJ,SAAA,CAC7BC,eAAA,OAAKG,UAAS,0BAAAtY,OAA4BqqB,GAAcnS,SACtDF,gBAAA,UACEmF,KAAK,SACL7E,UAAS,oVAeT2B,QAxBkB,WACxBgQ,GAAkBD,EACpB,EAsBmC9R,SAAA,CAE3BC,eAAA,MAAIG,UAAU,sDAAqDJ,SAChE4R,IAEH3R,eAAA,OAAKG,UAAU,qDAAoDJ,SACjEC,eAAA,OACEoS,MAAM,6BACNC,QAAQ,cACRlS,UAAS,6CAAAtY,OAA+CsqB,EAAU,uBAAsBpS,SAExFC,eAAA,QAAMsS,EAAE,sLAKhBtS,eAAA,OACEsG,IAAKyL,EACL5R,UAAS,8LAUPJ,SAEFC,eAAA,OAAKG,UAAU,OAAMJ,SACnBC,eAAA,OAAKG,UAAU,YAAWJ,SACxBC,eAAA,KAAAD,SAAI6R,UAIV5R,eAAA,MAAIG,UAAU,gBAGpB,EC5FeoS,GAVG,SAAHnqB,GAA+C,IAAzCJ,EAAII,EAAJJ,KACnB,OACEgY,eAAA,OAAKG,UAAU,OAAMJ,SAClB/X,EAAK8M,KAAI,SAAA+J,GAAA,IAAG2T,EAAU3T,EAAV2T,WAAYC,EAAQ5T,EAAR4T,SAAQ,OAC/BzS,eAAC0R,GAAa,CAACC,OAAQa,EAAYZ,KAAMa,GAAY,KAI7D,ECKeC,GAhBC,WACd,IAAQ/S,EAAMC,eAAND,EACFgT,ECHkB,WACxB,IAAQhT,EAAMC,eAAND,EAER,MAAO,CACL,CACE6S,WAAY7S,EAAE,0BACd8S,SAAU9S,EAAE,yBAEd,CACE6S,WAAY7S,EAAE,0BACd8S,SAAU9S,EAAE,yBAEd,CACE6S,WAAY7S,EAAE,0BACd8S,SAAU9S,EAAE,yBAEd,CACE6S,WAAY7S,EAAE,0BACd8S,SAAU9S,EAAE,yBAGlB,CDlBkBiT,GAEhB,OACE/S,gBAAA,OAAKM,UAAU,qBAAoBJ,SAAA,CACjCC,eAAA,OAAKG,UAAU,mCAAkCJ,SAC/CC,eAAA,MAAIG,UAAU,iBAAgBJ,SAAEJ,EAAE,mCAEpCK,eAAA,OAAKG,UAAU,8BAA6BJ,SAC1CC,eAACuS,GAAS,CAACvqB,KAAM2qB,QAIzB,EEwFeE,iBAjFH,WACV,OACEhT,gBAAA,OAAAE,SAAA,CACEC,eAACmB,GAAM,IACPtB,gBAACiT,KAAM,CAAA/S,SAAA,CACLC,eAAC+S,KAAK,CAACC,OAAK,EAACC,KAAK,IAAGlT,SACnBC,eAAC6F,GAAI,MAIP7F,eAAC+S,KAAK,CAACE,KAAK,gBAAelT,SACzBC,eAACkH,GAAM,MAETlH,eAAC+S,KAAK,CAACE,KAAK,gBAAelT,SACzBC,eAAC6H,GAAM,MAET7H,eAAC+S,KAAK,CAACE,KAAK,gBAAelT,SACzBC,eAAC8H,GAAM,MAET9H,eAAC+S,KAAK,CAACE,KAAK,qBAAoBlT,SAC9BC,eAACqP,GAAY,MAIfrP,eAAC+S,KAAK,CAACE,KAAK,iBAAgBlT,SAC1BC,eAACyI,GAAe,MAElBzI,eAAC+S,KAAK,CAACE,KAAK,yBAAwBlT,SAClCC,eAAC+J,GAAY,MAEf/J,eAAC+S,KAAK,CAACE,KAAK,iBAAgBlT,SAC1BC,eAACiK,GAAe,MAElBjK,eAAC+S,KAAK,CAACE,KAAK,mBAAkBlT,SAC5BC,eAACqN,GAAmB,MAEtBrN,eAAC+S,KAAK,CAACE,KAAK,iBAAgBlT,SAC1BC,eAACyQ,GAAiB,MAIpBzQ,eAAC+S,KAAK,CAACE,KAAK,mBAAkBlT,SAC5BC,eAACoO,GAAiB,MAEpBpO,eAAC+S,KAAK,CAACE,KAAK,mBAAkBlT,SAC5BC,eAACmP,GAAiB,MAIpBnP,eAAC+S,KAAK,CAACE,KAAK,sBAAqBlT,SAC/BC,eAAC4N,GAAY,MAEf5N,eAAC+S,KAAK,CAACE,KAAK,6BAA4BlT,SACtCC,eAAC4O,GAAc,MAIjB5O,eAAC+S,KAAK,CAACE,KAAK,qBAAoBlT,SAC9BC,eAACkO,GAAW,MAEdlO,eAAC+S,KAAK,CAACE,KAAK,4BAA2BlT,SACrCC,eAACiP,GAAY,MAIfjP,eAAC+S,KAAK,CAACE,KAAK,OAAMlT,SAChBC,eAAC0S,GAAO,MAEV1S,eAAC+S,KAAK,CAACE,KAAK,4BAA2BlT,SACrCC,eAACiP,GAAY,MAGfjP,eAAC+S,KAAK,CAACG,UAAW5D,QAEpBtP,eAACuP,GAAe,IAChBvP,eAACmR,GAAM,IACPnR,eAACoC,GAAM,MAGb,I,oCCnGAvB,KACGsS,IAAIC,MACJD,IAAIE,MACJF,IAAIG,MACJC,KAAK,CACJC,YAAa,KACbC,GAAI,CAAC,eACLC,UAAW,cACXC,QAAS,CACPC,SAAU,gCAEZC,OAAO,EACPC,cAAe,CACbC,aAAa,KAIJlT,GAAI,E,OCbnBmT,IAASC,OACPjU,eAACkU,IAAMC,WAAU,CAAApU,SACfC,eAACoU,IAAQ,CAAC1W,MAAOA,GAAMqC,SACrBC,eAACqU,IAAM,CAAAtU,SACLC,eAACsU,WAAQ,CAACC,SAAS,UAASxU,SAC1BC,eAACwU,GAAG,YAKZjE,SAASkE,cAAc,S","file":"static/js/main.e1a19402.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport config from \"../app/config\";\nimport axios from \"axios\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport {\n  User,\n  Plant,\n  PlantId,\n  Message,\n  MessageId,\n  DestroyImageData,\n  IntervalId,\n} from \"../app/typeDefinitions\";\nimport { RootState } from \"../app/store\";\n\ntype ErrorMessage = string | null;\n\ninterface InitialState {\n  // ----- User authentication -----\n  isUserChange: boolean;\n  loggedInUser: User | null;\n\n  // ----- Plants -----\n  isCreatingPlant: boolean;\n  isFetchingPlants: boolean;\n  isFetchingPlant: boolean;\n  isUpdatingPlant: boolean;\n  isDeletingPlant: boolean;\n  plant: Plant | {};\n  plants: Plant[];\n  filteredPlants: Plant[];\n  numberOfVisibleEntries: number;\n\n  // ----- Images -----\n  isUploadingPlantImage: boolean;\n  isDeletingPlantImage: boolean;\n  destroyImageData: DestroyImageData | null;\n\n  // ----- Payment -----\n  clientSecret: string;\n\n  // ----- Messages -----\n  isCreatingMessage: boolean;\n  isFetchingMessages: boolean;\n  isFetchingMessage: boolean;\n  isUpdatingMessage: boolean;\n  isDeletingMessage: boolean;\n  messages: Message[];\n  message: Message | {};\n\n  // ----- Requests/Replies check -----\n  isNewRequest: boolean;\n  isNewReply: boolean;\n  amountOfRequests: number;\n  amountOfReplies: number;\n\n  // ----- Interval counter -----\n  intervalId: IntervalId;\n  delayCounter: number;\n\n  // ----- Pages handling -----\n  titleSectionHeight: number;\n  aboutSectionHeight: number;\n\n  // ----- Language handling -----\n  isLanguageChange: boolean;\n\n  // ----- Error handling -----\n  errorMessage: ErrorMessage;\n}\n\ninterface UpdatePlantParameters {\n  plantId: PlantId;\n  updatedPlant: Plant;\n}\n\ninterface UpdateMessageParameters {\n  messageId: MessageId;\n  updatedMessage: Message;\n}\n\nconst apiPath = `${config.API_URL}/api`;\n\nconst initialState: InitialState = {\n  // ----- User authentication -----\n  isUserChange: false,\n  loggedInUser: null,\n\n  // ----- Plants -----\n  isCreatingPlant: false,\n  isFetchingPlants: false,\n  isFetchingPlant: false,\n  isUpdatingPlant: false,\n  isDeletingPlant: false,\n  plant: {},\n  plants: [],\n  filteredPlants: [],\n  numberOfVisibleEntries: 6,\n\n  // ----- Images -----\n  isUploadingPlantImage: false,\n  isDeletingPlantImage: false,\n  destroyImageData: null,\n\n  // ----- Payment -----\n  clientSecret: \"\",\n\n  // ----- Messages -----\n  isCreatingMessage: false,\n  isFetchingMessages: false,\n  isFetchingMessage: false,\n  isUpdatingMessage: false,\n  isDeletingMessage: false,\n  messages: [],\n  message: {},\n\n  // ----- Requests/Replies check -----\n  isNewRequest: false,\n  isNewReply: false,\n  amountOfRequests: 0,\n  amountOfReplies: 0,\n\n  // ----- Interval counter -----\n  intervalId: null,\n  delayCounter: 0,\n\n  // ----- Pages handling -----\n  titleSectionHeight: 0,\n  aboutSectionHeight: 0,\n\n  // ----- Language handling -----\n  isLanguageChange: false,\n\n  // ----- Error handling -----\n  errorMessage: null,\n};\n\nconst rejectWithValue = (data: any): void | PromiseLike<void> => {\n  throw new Error(data);\n};\n\n// ----- User authentification -----\nexport const signUp = createAsyncThunk(\n  \"jungleSwap/signUp\",\n  async (newUser: User): Promise<User | any> => {\n    try {\n      const { data } = await axios.post(`${apiPath}/auth/sign-up`, newUser);\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const signIn = createAsyncThunk(\n  \"jungleSwap/signIn\",\n  async (user: User): Promise<User | any> => {\n    try {\n      const { data } = await axios.post(`${apiPath}/auth/sign-in`, user, {\n        withCredentials: true,\n      });\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const logOut = createAsyncThunk(\n  \"jungleSwap/logOut\",\n  async (user: User): Promise<void | any> => {\n    try {\n      await axios.post(`${apiPath}/auth/log-out`, user, {\n        withCredentials: true,\n      });\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const checkUserLoggedIn = createAsyncThunk(\n  \"jungleSwap/checkUserLoggedIn\",\n  async (): Promise<User | any> => {\n    try {\n      const { data } = await axios.get(`${apiPath}/auth/check-user`, {\n        withCredentials: true,\n      });\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\n// ----- Plants -----\nexport const createPlant = createAsyncThunk(\n  \"jungleSwap/createPlant\",\n  async (newPlant: Plant): Promise<Plant | any> => {\n    try {\n      const { data } = await axios.post(`${apiPath}/plants/create`, newPlant, {\n        withCredentials: true,\n      });\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const fetchAllPlants = createAsyncThunk(\n  \"jungleSwap/fetchAllPlants\",\n  async (): Promise<Plant[] | any> => {\n    try {\n      const { data } = await axios.get(`${apiPath}/plants/fetch-all`);\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const fetchQueryPlants = createAsyncThunk(\n  \"jungleSwap/fetchQueryPlants\",\n  async (query: string): Promise<Plant[] | any> => {\n    try {\n      const { data } = await axios.get(`${apiPath}/plants/search?q=${query}`);\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const fetchPlant = createAsyncThunk(\n  \"jungleSwap/fetchPlant\",\n  async (plantId: PlantId): Promise<Plant | any> => {\n    try {\n      const { data } = await axios.get(`${apiPath}/plants/fetch/${plantId}`, {\n        withCredentials: true,\n      });\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const updatePlant = createAsyncThunk(\n  \"jungleSwap/updatePlant\",\n  async ({\n    plantId,\n    updatedPlant,\n  }: UpdatePlantParameters): Promise<Plant | any> => {\n    try {\n      const { data } = await axios.patch(\n        `${apiPath}/plants/update/${plantId}`,\n        updatedPlant\n      );\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const deletePlant = createAsyncThunk(\n  \"jungleSwap/deletePlant\",\n  async (plantId: PlantId): Promise<void | any> => {\n    try {\n      await axios.delete(`${apiPath}/plants/delete/${plantId}`);\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\n// ----- Images -----\nexport const uploadPlantImage = createAsyncThunk(\n  \"jungleSwap/uploadPlantImage\",\n  async (uploadForm: FormData): Promise<any> => {\n    try {\n      const { data } = await axios.post(\n        `${apiPath}/cloudinary/upload`,\n        uploadForm\n      );\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const deletePlantImage = createAsyncThunk(\n  \"jungleSwap/deletePlantImage\",\n  async (destroyImageData: DestroyImageData): Promise<void | any> => {\n    try {\n      await axios.post(`${apiPath}/cloudinary/destroy`, destroyImageData);\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\n// ----- Payment -----\nexport const createPayment = createAsyncThunk(\n  \"jungleSwap/createPayment\",\n  async ({ price }: Plant): Promise<any> => {\n    try {\n      const { data } = await axios.post(\n        `${apiPath}/stripe/create-payment-intent`,\n        {\n          price,\n        }\n      );\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\n// ----- Messages -----\nexport const createMessage = createAsyncThunk(\n  \"jungleSwap/createMessage\",\n  async (newMessage: Message): Promise<Message | any> => {\n    try {\n      const { data } = await axios.post(\n        `${apiPath}/messages/create`,\n        newMessage,\n        { withCredentials: true }\n      );\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const fetchAllMessages = createAsyncThunk(\n  \"jungleSwap/fetchAllMessages\",\n  async (): Promise<Message[] | any> => {\n    try {\n      const { data } = await axios.get(`${apiPath}/messages/fetch-all`);\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const fetchMessage = createAsyncThunk(\n  \"jungleSwap/fetchMessage\",\n  async (messageId: MessageId): Promise<Message | any> => {\n    try {\n      const { data } = await axios.get(\n        `${apiPath}/messages/fetch/${messageId}`,\n        { withCredentials: true }\n      );\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const updateMessage = createAsyncThunk(\n  \"jungleSwap/updateMessage\",\n  async ({\n    messageId,\n    updatedMessage,\n  }: UpdateMessageParameters): Promise<Message | any> => {\n    try {\n      const { data } = await axios.patch(\n        `${apiPath}/messages/update/${messageId}`,\n        updatedMessage\n      );\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const deleteMessage = createAsyncThunk(\n  \"jungleSwap/deleteMessage\",\n  async (messageId: MessageId): Promise<void | any> => {\n    try {\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const jungleSwapSlice = createSlice({\n  name: \"jungleSwap\",\n  initialState,\n\n  reducers: {\n    // ----- User authentication ------\n    setIsUserChange: (state, { payload }: PayloadAction<boolean>) => {\n      state.isUserChange = payload;\n    },\n    setLoggedInUser: (state, { payload }: PayloadAction<User | null>) => {\n      state.loggedInUser = payload;\n    },\n\n    // ----- Plants ------\n    setIsCreatingPlant: (state, { payload }: PayloadAction<boolean>) => {\n      state.isCreatingPlant = payload;\n    },\n    setIsFetchingPlants: (state, { payload }: PayloadAction<boolean>) => {\n      state.isFetchingPlants = payload;\n    },\n    setIsFetchingPlant: (state, { payload }: PayloadAction<boolean>) => {\n      state.isFetchingPlant = payload;\n    },\n    setIsUpdatingPlant: (state, { payload }: PayloadAction<boolean>) => {\n      state.isUpdatingPlant = payload;\n    },\n    setIsDeletingPlant: (state, { payload }: PayloadAction<boolean>) => {\n      state.isDeletingPlant = payload;\n    },\n    addPlant: (state, { payload }: PayloadAction<Plant>) => {\n      state.plants.push(payload);\n    },\n    setPlant: (state, { payload }: PayloadAction<Plant>) => {\n      state.plant = payload;\n    },\n    setPlants: (state, { payload }: PayloadAction<Plant[]>) => {\n      state.plants = payload;\n    },\n    setFilteredPlants: (state, { payload }: PayloadAction<Plant[]>) => {\n      state.filteredPlants = payload;\n    },\n    setPlantChanges: (\n      state,\n      {\n        payload: {\n          _id,\n          name,\n          description,\n          size,\n          imageUrl,\n          imagePublicId,\n          location,\n          price,\n        },\n      }: PayloadAction<Plant>\n    ) => {\n      state.plants = state.plants.map((singlePlant: Plant): Plant => {\n        if (singlePlant._id === _id) {\n          singlePlant.name = name;\n          singlePlant.description = description;\n          singlePlant.size = size;\n          singlePlant.imageUrl = imageUrl;\n          singlePlant.imagePublicId = imagePublicId;\n          singlePlant.location = location;\n          singlePlant.price = price;\n        }\n        return singlePlant;\n      });\n    },\n    removePlant: (state, { payload }: PayloadAction<PlantId>) => {\n      state.plants = state.plants.filter(\n        (plant: Plant): boolean => plant._id !== payload\n      );\n    },\n    setNumberOfVisibleEntries: (state, { payload }: PayloadAction<number>) => {\n      state.numberOfVisibleEntries = payload;\n    },\n\n    // ----- Images -----\n    setIsUploadingPlantImage: (state, { payload }: PayloadAction<boolean>) => {\n      state.isUploadingPlantImage = payload;\n    },\n    setIsDeletingPlantImage: (state, { payload }: PayloadAction<boolean>) => {\n      state.isDeletingPlantImage = payload;\n    },\n    setDestroyImageData: (\n      state,\n      { payload }: PayloadAction<DestroyImageData | null>\n    ) => {\n      state.destroyImageData = payload;\n    },\n\n    // ----- Payment -----\n    setClientSecret: (state, { payload }: PayloadAction<string>) => {\n      state.clientSecret = payload;\n    },\n\n    // ----- Messages -----\n    setIsCreatingMessage: (state, { payload }: PayloadAction<boolean>) => {\n      state.isCreatingMessage = payload;\n    },\n    setIsFetchingMessages: (state, { payload }: PayloadAction<boolean>) => {\n      state.isFetchingMessages = payload;\n    },\n    setIsFetchingMessage: (state, { payload }: PayloadAction<boolean>) => {\n      state.isFetchingMessage = payload;\n    },\n    setIsUpdatingMessage: (state, { payload }: PayloadAction<boolean>) => {\n      state.isUpdatingMessage = payload;\n    },\n    setIsDeletingMessage: (state, { payload }: PayloadAction<boolean>) => {\n      state.isDeletingMessage = payload;\n    },\n    addMessage: (state, { payload }: PayloadAction<Message>) => {\n      state.messages.push(payload);\n    },\n    setMessages: (state, { payload }: PayloadAction<Message[]>) => {\n      state.messages = payload;\n    },\n    setMessage: (state, { payload }: PayloadAction<Message>) => {\n      state.message = payload;\n    },\n    setMessageChanges: (\n      state,\n      {\n        payload: { _id, buyer, seller, plant, request, reply, messageState },\n      }: PayloadAction<Message>\n    ) => {\n      state.messages = state.messages.map((singleMessage) => {\n        if (singleMessage._id === _id) {\n          singleMessage.buyer = buyer;\n          singleMessage.seller = seller;\n          singleMessage.plant = plant;\n          singleMessage.request = request;\n          singleMessage.reply = reply;\n          singleMessage.messageState = messageState;\n        }\n        return singleMessage;\n      });\n    },\n    removeMessage: (state, { payload }: PayloadAction<MessageId>) => {\n      state.messages = state.messages.filter(\n        (message: Message): boolean => message._id !== payload\n      );\n    },\n\n    // ----- Requests/Replies check ------\n    setIsNewRequest: (state, { payload }: PayloadAction<boolean>) => {\n      state.isNewRequest = payload;\n    },\n    setIsNewReply: (state, { payload }: PayloadAction<boolean>) => {\n      state.isNewReply = payload;\n    },\n    setStartAmountOfRequests: (state) => {\n      state.amountOfRequests = (state.loggedInUser as any).amountOfRequests;\n    },\n    setStartAmountOfReplies: (state) => {\n      state.amountOfReplies = (state.loggedInUser as any).amountOfReplies;\n    },\n    setAmountOfRequests: (state, { payload }: PayloadAction<number>) => {\n      state.amountOfRequests = payload;\n    },\n    setAmountOfReplies: (state, { payload }: PayloadAction<number>) => {\n      state.amountOfReplies = payload;\n    },\n    decreaseAmountOfRequests: (state) => {\n      state.amountOfRequests -= 1;\n    },\n    decreaseAmountOfReplies: (state) => {\n      state.amountOfReplies -= 1;\n    },\n\n    // ----- Interval counter -----\n    setIntervalId: (state, { payload }: PayloadAction<IntervalId>) => {\n      state.intervalId = payload;\n    },\n    setDelayCounter: (state, { payload }: PayloadAction<number>) => {\n      state.delayCounter = payload;\n    },\n    increaseDelayCounter: (state) => {\n      state.delayCounter += 1;\n    },\n\n    // ----- Pages handling -----\n    setTitleSectionHeight: (state, { payload }: PayloadAction<number>) => {\n      state.titleSectionHeight = payload;\n    },\n    setAboutSectionHeight: (state, { payload }: PayloadAction<number>) => {\n      state.aboutSectionHeight = payload;\n    },\n    scrollToAbout: (state) => {\n      scroll.scrollTo(state.titleSectionHeight);\n    },\n    scrollToPlants: (state) => {\n      scroll.scrollTo(state.titleSectionHeight + state.aboutSectionHeight);\n    },\n\n    // ----- Language handling -----\n    setIsLanguageChange: (state, { payload }: PayloadAction<boolean>) => {\n      state.isLanguageChange = payload;\n    },\n\n    // ----- Error handling -----\n    setErrorMessage: (state, { payload }: PayloadAction<ErrorMessage>) => {\n      state.errorMessage = payload;\n    },\n  },\n\n  extraReducers: (builder) => {\n    // ----- Plants ------\n    builder.addCase(createPlant.fulfilled, (state) => {\n      state.isCreatingPlant = false;\n    });\n    builder.addCase(createPlant.rejected, (state) => {\n      state.isCreatingPlant = false;\n    });\n    builder.addCase(fetchAllPlants.fulfilled, (state) => {\n      state.isFetchingPlants = false;\n    });\n    builder.addCase(fetchAllPlants.rejected, (state) => {\n      state.isFetchingPlants = false;\n    });\n    builder.addCase(fetchQueryPlants.fulfilled, (state) => {\n      state.isFetchingPlants = false;\n    });\n    builder.addCase(fetchQueryPlants.rejected, (state) => {\n      state.isFetchingPlants = false;\n    });\n    builder.addCase(fetchPlant.fulfilled, (state) => {\n      state.isFetchingPlant = false;\n    });\n    builder.addCase(fetchPlant.rejected, (state) => {\n      state.isFetchingPlant = false;\n    });\n    builder.addCase(updatePlant.fulfilled, (state) => {\n      state.isUpdatingPlant = false;\n    });\n    builder.addCase(updatePlant.rejected, (state) => {\n      state.isUpdatingPlant = false;\n    });\n    builder.addCase(deletePlant.fulfilled, (state) => {\n      state.isDeletingPlant = false;\n    });\n    builder.addCase(deletePlant.rejected, (state) => {\n      state.isDeletingPlant = false;\n    });\n\n    // ----- Images -----\n    builder.addCase(uploadPlantImage.fulfilled, (state) => {\n      state.isUploadingPlantImage = false;\n    });\n    builder.addCase(uploadPlantImage.rejected, (state) => {\n      state.isUploadingPlantImage = false;\n    });\n    builder.addCase(deletePlantImage.fulfilled, (state) => {\n      state.isDeletingPlantImage = false;\n    });\n    builder.addCase(deletePlantImage.rejected, (state) => {\n      state.isDeletingPlantImage = false;\n    });\n\n    // ----- Messages -----\n    builder.addCase(createMessage.fulfilled, (state) => {\n      state.isCreatingMessage = false;\n    });\n    builder.addCase(createMessage.rejected, (state) => {\n      state.isCreatingMessage = false;\n    });\n    builder.addCase(fetchAllMessages.fulfilled, (state) => {\n      state.isFetchingMessages = false;\n    });\n    builder.addCase(fetchAllMessages.rejected, (state) => {\n      state.isFetchingMessages = false;\n    });\n    builder.addCase(fetchMessage.fulfilled, (state) => {\n      state.isFetchingMessage = false;\n    });\n    builder.addCase(fetchMessage.rejected, (state) => {\n      state.isFetchingMessage = false;\n    });\n    builder.addCase(updateMessage.fulfilled, (state) => {\n      state.isUpdatingMessage = false;\n    });\n    builder.addCase(updateMessage.rejected, (state) => {\n      state.isUpdatingMessage = false;\n    });\n    builder.addCase(deleteMessage.fulfilled, (state) => {\n      state.isDeletingMessage = false;\n    });\n    builder.addCase(deleteMessage.rejected, (state) => {\n      state.isDeletingMessage = false;\n    });\n  },\n});\n\nconst selectors = {\n  // ----- User authentication -----\n  selectIsUserChange: ({ jungleSwap: { isUserChange } }: RootState) =>\n    isUserChange,\n  selectLoggedInUser: ({ jungleSwap: { loggedInUser } }: RootState) =>\n    loggedInUser,\n\n  // ----- Plants -----\n  selectIsCreatingPlant: ({ jungleSwap: { isCreatingPlant } }: RootState) =>\n    isCreatingPlant,\n  selectIsFetchingPlants: ({ jungleSwap: { isFetchingPlants } }: RootState) =>\n    isFetchingPlants,\n  selectIsFetchingPlant: ({ jungleSwap: { isFetchingPlant } }: RootState) =>\n    isFetchingPlant,\n  selectIsUpdatingPlant: ({ jungleSwap: { isUpdatingPlant } }: RootState) =>\n    isUpdatingPlant,\n  selectIsDeletingPlant: ({ jungleSwap: { isDeletingPlant } }: RootState) =>\n    isDeletingPlant,\n  selectPlant: ({ jungleSwap: { plant } }: RootState) => plant,\n  selectPlants: ({ jungleSwap: { plants } }: RootState) => plants,\n  selectfFilteredPlants: ({ jungleSwap: { filteredPlants } }: RootState) =>\n    filteredPlants,\n  selectNumberOfVisibleEntries: ({\n    jungleSwap: { numberOfVisibleEntries },\n  }: RootState) => numberOfVisibleEntries,\n\n  // ----- Images -----\n  selectIsUploadingPlantImage: ({\n    jungleSwap: { isUploadingPlantImage },\n  }: RootState) => isUploadingPlantImage,\n  selectIsDeletingPlantImage: ({\n    jungleSwap: { isDeletingPlantImage },\n  }: RootState) => isDeletingPlantImage,\n  selectDestroyImageData: ({ jungleSwap: { destroyImageData } }: RootState) =>\n    destroyImageData,\n\n  // ----- Payment -----\n  selectClientSecret: ({ jungleSwap: { clientSecret } }: RootState) =>\n    clientSecret,\n\n  // ----- Messages -----\n  selectIsCreatingMessage: ({ jungleSwap: { isCreatingMessage } }: RootState) =>\n    isCreatingMessage,\n  selectiIsFetchingMessages: ({\n    jungleSwap: { isFetchingMessages },\n  }: RootState) => isFetchingMessages,\n  selectIsFetchingMessage: ({ jungleSwap: { isFetchingMessage } }: RootState) =>\n    isFetchingMessage,\n  selectIsUpdatingMessage: ({ jungleSwap: { isUpdatingMessage } }: RootState) =>\n    isUpdatingMessage,\n  selectIsDeletingMessage: ({ jungleSwap: { isDeletingMessage } }: RootState) =>\n    isDeletingMessage,\n  selectMessage: ({ jungleSwap: { message } }: RootState) => message,\n  selectMessages: ({ jungleSwap: { messages } }: RootState) => messages,\n\n  // ----- Requests/Replies check -----\n  selectIsNewRequest: ({ jungleSwap: { isNewRequest } }: RootState) =>\n    isNewRequest,\n  selectIsNewReply: ({ jungleSwap: { isNewReply } }: RootState) => isNewReply,\n  selectAmountOfRequests: ({ jungleSwap: { amountOfRequests } }: RootState) =>\n    amountOfRequests,\n  selectAmountOfReplies: ({ jungleSwap: { amountOfReplies } }: RootState) =>\n    amountOfReplies,\n\n  // ----- Interval counter -----\n  selectIntervalId: ({ jungleSwap: { intervalId } }: RootState) => intervalId,\n  selectDelayCounter: ({ jungleSwap: { delayCounter } }: RootState) =>\n    delayCounter,\n\n  // ----- Pages handling -----\n  selectTitleSectionHeight: ({\n    jungleSwap: { titleSectionHeight },\n  }: RootState) => titleSectionHeight,\n  selectAboutSectionHeight: ({\n    jungleSwap: { aboutSectionHeight },\n  }: RootState) => aboutSectionHeight,\n\n  // ----- Language handling -----\n  selectIsLanguageChange: ({ jungleSwap: { isLanguageChange } }: RootState) =>\n    isLanguageChange,\n\n  // ----- Error handling -----\n  selectErrorMessage: ({ jungleSwap: { errorMessage } }: RootState) =>\n    errorMessage,\n};\n\n// ----- Slice actions -----\nexport const {\n  // ----- User authentification -----\n  setIsUserChange,\n  setLoggedInUser,\n\n  // ----- Plants -----\n  setIsCreatingPlant,\n  setIsFetchingPlants,\n  setIsFetchingPlant,\n  setIsUpdatingPlant,\n  setIsDeletingPlant,\n  addPlant,\n  setPlants,\n  setFilteredPlants,\n  setPlant,\n  setPlantChanges,\n  removePlant,\n  setNumberOfVisibleEntries,\n\n  // ----- Images -----\n  setIsUploadingPlantImage,\n  setIsDeletingPlantImage,\n  setDestroyImageData,\n\n  // ----- Payment -----\n  setClientSecret,\n\n  // ----- Messages -----\n  setIsCreatingMessage,\n  setIsFetchingMessages,\n  setIsFetchingMessage,\n  setIsUpdatingMessage,\n  setIsDeletingMessage,\n  addMessage,\n  setMessages,\n  setMessage,\n  setMessageChanges,\n  removeMessage,\n\n  // ----- Requests/Replies check -----\n  setIsNewRequest,\n  setIsNewReply,\n  setStartAmountOfRequests,\n  setStartAmountOfReplies,\n  setAmountOfRequests,\n  setAmountOfReplies,\n  decreaseAmountOfRequests,\n  decreaseAmountOfReplies,\n\n  // ----- Interval counter -----\n  setIntervalId,\n  setDelayCounter,\n  increaseDelayCounter,\n\n  // ----- Pages handling -----\n  setTitleSectionHeight,\n  setAboutSectionHeight,\n  scrollToAbout,\n  scrollToPlants,\n\n  // ----- Language handling -----\n  setIsLanguageChange,\n\n  // ----- Error handling -----\n  setErrorMessage,\n} = jungleSwapSlice.actions;\n\n// ----- Slice selectors -----\nexport const {\n  // ----- User authentication -----\n  selectIsUserChange,\n  selectLoggedInUser,\n\n  // ----- Plants -----\n  selectIsCreatingPlant,\n  selectIsFetchingPlants,\n  selectIsFetchingPlant,\n  selectIsUpdatingPlant,\n  selectIsDeletingPlant,\n  selectPlant,\n  selectPlants,\n  selectfFilteredPlants,\n  selectNumberOfVisibleEntries,\n\n  // ----- Images -----\n  selectIsUploadingPlantImage,\n  selectIsDeletingPlantImage,\n  selectDestroyImageData,\n\n  // ----- Payment -----\n  selectClientSecret,\n\n  // ----- Messages -----\n  selectIsCreatingMessage,\n  selectiIsFetchingMessages,\n  selectIsFetchingMessage,\n  selectIsUpdatingMessage,\n  selectIsDeletingMessage,\n  selectMessages,\n  selectMessage,\n\n  // ----- Requests/Replies check -----\n  selectIsNewRequest,\n  selectIsNewReply,\n  selectAmountOfRequests,\n  selectAmountOfReplies,\n\n  // ----- Interval counter -----\n  selectIntervalId,\n  selectDelayCounter,\n\n  // ----- Pages handling -----\n  selectTitleSectionHeight,\n  selectAboutSectionHeight,\n\n  // ----- Language handling -----\n  selectIsLanguageChange,\n\n  // ----- Error handling -----\n  selectErrorMessage,\n} = selectors;\n\nexport default jungleSwapSlice.reducer;\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport jungleSwapSlice from \"../reducer/jungleSwapSlice\";\n\nexport const store = configureStore({\n  reducer: { jungleSwap: jungleSwapSlice },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useAppDispatch } from \"../hooks\";\nimport {\n  addMessage,\n  createMessage,\n  deleteMessage,\n  fetchAllMessages,\n  fetchMessage,\n  removeMessage,\n  setAmountOfReplies,\n  setAmountOfRequests,\n  setErrorMessage,\n  setIsCreatingMessage,\n  setIsDeletingMessage,\n  setIsFetchingMessage,\n  setIsFetchingMessages,\n  setIsNewReply,\n  setIsNewRequest,\n  setIsUpdatingMessage,\n  setMessage,\n  setMessageChanges,\n  setMessages,\n  updateMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Message, MessageId, Plant, PlantId, User } from \"../typeDefinitions\";\n\ninterface MessageMethods {\n  createMessage: (newMessage: Message, callback: () => void) => void;\n  fetchMessage: (messageId: MessageId, callback: () => void) => void;\n  fetchMessages: (callback: () => void) => void;\n  fetchCheck: (callback: (messages: Message[]) => void) => void;\n  updateMessage: (updatedMessage: Message, callback: () => void) => void;\n  deleteMessage: (messageId: MessageId, callback: () => void) => void;\n  deleteRemainingMessages: (messages: Message[], plantId: PlantId) => void;\n  checkNewRequests: (\n    user: User,\n    messages: Message[],\n    amountOfRequests: number\n  ) => void;\n  checkNewReplies: (\n    user: User,\n    messages: Message[],\n    amountOfReplies: number\n  ) => void;\n}\n\nexport const useMessage = (): MessageMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    createMessage: (newMessage: Message, callback: () => void): void => {\n      dispatch(setIsCreatingMessage(true));\n      dispatch(createMessage(newMessage))\n        .unwrap()\n        .then((message: Message): void => {\n          dispatch(addMessage(message));\n          callback();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    fetchMessage: (messageId: MessageId, callback: () => void): void => {\n      dispatch(setIsFetchingMessage(true));\n      dispatch(fetchMessage(messageId))\n        .unwrap()\n        .then((message: Message): void => {\n          dispatch(setMessage(message));\n          callback();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    fetchMessages: (callback: () => void): void => {\n      dispatch(setIsFetchingMessages(true));\n      dispatch(fetchAllMessages())\n        .unwrap()\n        .then((messages: Message[]): void => {\n          dispatch(setMessages(messages));\n          callback();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    fetchCheck: (callback: (messages: Message[]) => void): void => {\n      dispatch(fetchAllMessages())\n        .unwrap()\n        .then((messages: Message[]): void => {\n          dispatch(setMessages(messages));\n          callback(messages);\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    updateMessage: (updatedMessage: Message, callback: () => void): void => {\n      const { _id } = updatedMessage;\n      dispatch(setIsUpdatingMessage(true));\n      dispatch(updateMessage({ messageId: _id as MessageId, updatedMessage }))\n        .unwrap()\n        .then((message: Message): void => {\n          dispatch(setMessageChanges(message));\n          callback();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    deleteMessage: (messageId: MessageId, callback: () => void): void => {\n      dispatch(setIsDeletingMessage(true));\n      dispatch(deleteMessage(messageId))\n        .unwrap()\n        .then((): void => {\n          dispatch(removeMessage(messageId));\n          callback();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    deleteRemainingMessages(messages: Message[], plantId: PlantId): void {\n      messages.forEach(({ _id, plant }: Message): void => {\n        if ((plant as Plant)._id === plantId) {\n          dispatch(setIsDeletingMessage(true));\n          dispatch(deleteMessage(_id as MessageId))\n            .unwrap()\n            .then((): void => {\n              dispatch(removeMessage(_id as MessageId));\n            })\n            .catch((rejectedValue: any): void => {\n              dispatch(setErrorMessage(rejectedValue.message));\n            });\n        }\n      });\n    },\n\n    checkNewRequests: (\n      { _id }: User,\n      messages: Message[],\n      amountOfRequests: number\n    ): void => {\n      const calculateAmountOfRequests = (messages: Message[]): number => {\n        const currentAmountOfRequests = messages.filter(\n          ({ seller, messageState }: Message): boolean =>\n            (seller as User)._id === _id && messageState === true\n        ).length;\n        return currentAmountOfRequests;\n      };\n\n      const checkAmountOfRequests = (\n        currentAmountOfRequests: number,\n        amountOfRequests: number\n      ): void => {\n        if (amountOfRequests < currentAmountOfRequests) {\n          dispatch(setIsNewRequest(true));\n        }\n        if (amountOfRequests !== currentAmountOfRequests) {\n          dispatch(setAmountOfRequests(currentAmountOfRequests));\n        }\n      };\n\n      const currentAmountOfRequests = calculateAmountOfRequests(messages);\n      checkAmountOfRequests(currentAmountOfRequests, amountOfRequests);\n    },\n\n    checkNewReplies: (\n      { _id }: User,\n      messages: Message[],\n      amountOfReplies: number\n    ): void => {\n      const calculateAmountOfReplies = (messages: Message[]): number => {\n        const currentAmountOfReplies = messages.filter(\n          ({ buyer, reply }: Message): boolean =>\n            (buyer as User)._id === _id && reply !== \"\"\n        ).length;\n        return currentAmountOfReplies;\n      };\n\n      const checkAmountOfReplies = (\n        currentAmountOfReplies: number,\n        amountOfReplies: number\n      ): void => {\n        if (amountOfReplies < currentAmountOfReplies) {\n          dispatch(setIsNewReply(true));\n        }\n        if (amountOfReplies !== currentAmountOfReplies) {\n          dispatch(setAmountOfReplies(currentAmountOfReplies));\n        }\n      };\n\n      const currentAmountOfReplies = calculateAmountOfReplies(messages);\n      checkAmountOfReplies(currentAmountOfReplies, amountOfReplies);\n    },\n  };\n};\n","import { useAppDispatch } from \"../hooks\";\nimport { setDelayCounter, setIntervalId } from \"../../reducer/jungleSwapSlice\";\n\ninterface IntervalCounterMethods {\n  stopCounter: (intervalId: NodeJS.Timeout) => void;\n}\n\nexport const useIntervalCounter = (): IntervalCounterMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    stopCounter: (intervalId: NodeJS.Timeout): void => {\n      clearInterval(intervalId);\n      dispatch(setIntervalId(null));\n      dispatch(setDelayCounter(0));\n    },\n  };\n};\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nconst NavAuthItems = (): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <Link to=\"/auth/sign-in\" className=\"[ nav-auth-items__nav-link ] [ p-2 ]\">\n        {t(\"link.signIn\")}\n      </Link>\n      <Link to=\"/auth/sign-up\" className=\"[ nav-auth-items__nav-link ] [ p-2 ]\">\n        {t(\"link.signUp\")}\n      </Link>\n    </>\n  );\n};\n\nexport default NavAuthItems;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport {\n  selectIsNewReply,\n  selectIsNewRequest,\n  selectLoggedInUser,\n} from \"../../reducer/jungleSwapSlice\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\n\nconst NavUserItems = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isNewRequest = useAppSelector(selectIsNewRequest);\n  const isNewReply = useAppSelector(selectIsNewReply);\n  const { t } = useTranslation();\n\n  const tooltipItemRequests = (): string =>\n    isNewRequest ? t(\"link.tooltipps.newRequest\") : \"\";\n\n  const tooltipItemReplies = (): string =>\n    isNewReply ? t(\"link.tooltipps.newReply\") : \"\";\n\n  const tooltipItemLogOut = (): string | undefined =>\n    loggedInUser ? loggedInUser.username : \"\";\n\n  return (\n    <>\n      <Link\n        to=\"/plants/my-own\"\n        className=\"[ nav-user-items__nav-link ] [ p-2 ]\"\n      >\n        {t(\"link.myPlants\")}\n      </Link>\n      <Link\n        to=\"/plants/create\"\n        className=\"[ nav-user-items__nav-link ] [ p-2 ]\"\n      >\n        {t(\"link.createPlant\")}\n      </Link>\n      <Link\n        to=\"/requests/fetch-all\"\n        title={tooltipItemRequests()}\n        className=\"[ nav-user-items__nav-link ] [ p-2 ]\"\n      >\n        {isNewRequest && <FontAwesomeIcon icon={faBell} />}\n        {t(\"link.requests\")}\n      </Link>\n      <Link\n        to=\"/replies/fetch-all\"\n        title={tooltipItemReplies()}\n        className=\"[ nav-user-items__nav-link ] [ p-2 ]\"\n      >\n        {isNewReply && <FontAwesomeIcon icon={faBell} />}\n        {t(\"link.replies\")}\n      </Link>\n      <Link\n        to=\"/auth/log-out\"\n        title={tooltipItemLogOut()}\n        className=\"[ nav-user-items__nav-link ] [ p-2 ]\"\n      >\n        {t(\"link.logOut\")}\n      </Link>\n    </>\n  );\n};\n\nexport default NavUserItems;\n","import { User } from \"../../app/typeDefinitions\";\nimport NavAuthItems from \"./NavAuthItems\";\nimport NavUserItems from \"./NavUserItems\";\n\ninterface NavAdditionalItemsProps {\n  user: User | null;\n}\n\nconst NavAdditionalItems = ({ user }: NavAdditionalItemsProps): JSX.Element => {\n  if (user) {\n    return <NavUserItems />;\n  }\n  return <NavAuthItems />;\n};\n\nexport default NavAdditionalItems;\n","import { useTranslation } from \"react-i18next\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLanguage } from \"@fortawesome/free-solid-svg-icons\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport {\n  selectIsLanguageChange,\n  setIsLanguageChange,\n} from \"../../reducer/jungleSwapSlice\";\n\nconst SelectLanguage = (): JSX.Element => {\n  const isLanguageChange = useAppSelector(selectIsLanguageChange);\n  const dispatch = useAppDispatch();\n  const { t, i18n } = useTranslation();\n\n  const handleSelectLanguage = ({ target: { value } }: any): void => {\n    i18n.changeLanguage(value);\n    dispatch(setIsLanguageChange(!isLanguageChange));\n  };\n\n  return (\n    <div className=\"select-language\">\n      <FontAwesomeIcon icon={faLanguage} />\n      <select\n        className=\"[ select-language__select ] [ form-select ]\"\n        onChange={handleSelectLanguage}\n      >\n        <option value=\"\" className=\"select-language__select__option\">\n          {t(\"select.language.placeholder\")}\n        </option>\n        <option value=\"de\" className=\"select-language__select__option\">\n          {t(\"select.language.german\")}\n        </option>\n        <option value=\"en\" className=\"select-language__select__option\">\n          {t(\"select.language.english\")}\n        </option>\n      </select>\n    </div>\n  );\n};\n\nexport default SelectLanguage;\n","import { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport { useIntervalCounter } from \"../../app/custom-hooks/useIntervalCounter\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport {\n  setIsUserChange,\n  setIntervalId,\n  increaseDelayCounter,\n  setStartAmountOfRequests,\n  setStartAmountOfReplies,\n  scrollToPlants,\n  selectIsUserChange,\n  selectLoggedInUser,\n  selectIntervalId,\n  selectDelayCounter,\n  selectIsNewRequest,\n  selectIsNewReply,\n  selectAmountOfRequests,\n  selectAmountOfReplies,\n} from \"../../reducer/jungleSwapSlice\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBell, faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { Message, User } from \"../../app/typeDefinitions\";\nimport NavAdditionalItems from \"./NavAdditionalItems\";\nimport SelectLanguage from \"../helpers/SelectLanguage\";\n\nconst NavBar = (): JSX.Element => {\n  const isUserChange = useAppSelector(selectIsUserChange);\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const intervalId = useAppSelector(selectIntervalId);\n  const delayCounter = useAppSelector(selectDelayCounter);\n  const isNewRequest = useAppSelector(selectIsNewRequest);\n  const isNewReply = useAppSelector(selectIsNewReply);\n  const amountOfRequests = useAppSelector(selectAmountOfRequests);\n  const amountOfReplies = useAppSelector(selectAmountOfReplies);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n  const { fetchMessages, fetchCheck, checkNewRequests, checkNewReplies } =\n    useMessage();\n  const { stopCounter } = useIntervalCounter();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    return () => {\n      if (intervalId) {\n        stopCounter(intervalId);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const startRequestsRepliesCheck = (): void => {\n      const setInitialMessageVariables = (): void => {\n        dispatch(setStartAmountOfRequests());\n        dispatch(setStartAmountOfReplies());\n        dispatch(setIsUserChange(false));\n      };\n\n      const startInterval = (): void => {\n        const intervalId = setInterval(\n          (): void => {\n            dispatch(increaseDelayCounter());\n          },\n          1000 // every second\n        );\n        dispatch(setIntervalId(intervalId));\n        dispatch(increaseDelayCounter());\n      };\n\n      fetchMessages((): void => {\n        setInitialMessageVariables();\n        startInterval();\n      });\n    };\n\n    isUserChange && startRequestsRepliesCheck();\n  }, [isUserChange]);\n\n  useEffect(() => {\n    const checkNewRequestsReplies = (): void => {\n      fetchCheck((messages: Message[]): void => {\n        checkNewRequests(loggedInUser as User, messages, amountOfRequests);\n        checkNewReplies(loggedInUser as User, messages, amountOfReplies);\n      });\n    };\n\n    if (isUserChange) {\n      dispatch(setStartAmountOfRequests());\n      dispatch(setStartAmountOfReplies());\n    }\n    loggedInUser && checkNewRequestsReplies();\n  }, [delayCounter]);\n\n  const tooltipItemSearch = (): string => t(\"link.tooltipps.search\");\n\n  return (\n    <div>\n      <Navbar\n        variant=\"dark\"\n        expand=\"lg\"\n        fixed=\"top\"\n        className=\"[ nav-bar ] [ px-5 ]\"\n      >\n        <Navbar.Brand>\n          <Link to=\"/\" className=\"nav-bar__nav-link\" onClick={scrollToTop}>\n            {t(\"link.jungleSwap\")}\n          </Link>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\n        </Navbar.Toggle>\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Link\n              to=\"/\"\n              className=\"[ nav-bar__nav-link ] [ p-2 ]\"\n              onClick={(): void => {\n                dispatch(scrollToPlants());\n              }}\n            >\n              {t(\"link.allPlants\")}\n            </Link>\n            <NavAdditionalItems user={loggedInUser} />\n            <Link to=\"/faq\" className=\"[ nav-bar__nav-link ] [ p-2 ]\">\n              {t(\"link.faq\")}\n            </Link>\n            <Link\n              to=\"/\"\n              title={tooltipItemSearch()}\n              className=\"[ nav-bar__nav-link ] [ p-2 ]\"\n              onClick={(): void => {\n                dispatch(scrollToPlants());\n              }}\n            >\n              <FontAwesomeIcon icon={faSearch} />\n            </Link>\n          </Nav>\n          <SelectLanguage />\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { linkedInPath1, linkedInPath2 } from \"../lib/externalLinkPaths\";\n\nconst Footer = (): JSX.Element => {\n  const { t } = useTranslation();\n  const currentTime = new Date();\n  const year = currentTime.getFullYear();\n\n  return (\n    <footer className=\"footer\">\n      <div className=\"[ footer__navigation ] [ text-center ]\">\n        {t(\"texts.footer.copyright\")} {year}{\" \"}\n        <Link\n          to={{ pathname: linkedInPath1 }}\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n          className=\"footer__navigation__nav-link\"\n        >\n          {t(\"texts.footer.appAuthor1\")}\n        </Link>{\" \"}\n        &amp;{\" \"}\n        <Link\n          to={{ pathname: linkedInPath2 }}\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n          className=\"footer__navigation__nav-link\"\n        >\n          {t(\"texts.footer.appAuthor2\")}\n        </Link>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","// LinkedIn\nexport const linkedInPath1: string =\n  \"https://www.linkedin.com/in/christian-gerbig/\";\nexport const linkedInPath2: string =\n  \"https://www.linkedin.com/in/lisa-montebaur/\";\n","import { useAppDispatch } from \"../hooks\";\nimport {\n  addPlant,\n  createPlant,\n  deletePlant,\n  fetchAllPlants,\n  fetchPlant,\n  fetchQueryPlants,\n  removePlant,\n  setErrorMessage,\n  setIsCreatingPlant,\n  setIsDeletingPlant,\n  setIsFetchingPlant,\n  setIsFetchingPlants,\n  setIsUpdatingPlant,\n  setPlant,\n  setPlantChanges,\n  setPlants,\n  updatePlant,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant, PlantId, UploadImageData } from \"../typeDefinitions\";\n\ninterface PlantMethods {\n  createPlant: (\n    plant: any,\n    uploadImageData: UploadImageData,\n    callback: () => void\n  ) => void;\n  fetchPlant: (plantId: PlantId, callback: () => void) => void;\n  fetchPlants: (callback?: () => void) => void;\n  updatePlant: (plant: Plant, callback: () => void) => void;\n  deletePlant: (plantId: PlantId, callback: () => void) => void;\n  searchPlant: (query: string) => void;\n}\n\nexport const usePlant = (): PlantMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    createPlant: (\n      { name, description, size, location, price }: any,\n      { imageUrl, imagePublicId }: UploadImageData,\n      callback: () => void\n    ): void => {\n      const newPlant: Plant = {\n        name: name.value,\n        description: description.value,\n        size: size.value,\n        imageUrl,\n        imagePublicId,\n        location: location.value,\n        price: price.value,\n      };\n      dispatch(setIsCreatingPlant(true));\n      dispatch(createPlant(newPlant))\n        .unwrap()\n        .then((plant: Plant): void => {\n          dispatch(addPlant(plant));\n          callback();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    fetchPlant: (plantId: PlantId, callback: () => void): void => {\n      dispatch(setIsFetchingPlant(true));\n      dispatch(fetchPlant(plantId))\n        .unwrap()\n        .then((plant: Plant): void => {\n          dispatch(setPlant(plant));\n          callback();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    fetchPlants: (callback?: () => void): void => {\n      dispatch(setIsFetchingPlants(true));\n      dispatch(fetchAllPlants())\n        .unwrap()\n        .then((plants: Plant[]): void => {\n          dispatch(setPlants(plants));\n          if (typeof callback !== \"undefined\") {\n            callback();\n          }\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    updatePlant: (\n      {\n        _id,\n        name,\n        description,\n        size,\n        imageUrl,\n        imagePublicId,\n        location,\n        price,\n      }: Plant,\n      callback: () => void\n    ): void => {\n      const updatedPlant: Plant = {\n        name,\n        description,\n        size,\n        imageUrl,\n        imagePublicId,\n        location,\n        price,\n      };\n      dispatch(setIsUpdatingPlant(true));\n      dispatch(updatePlant({ plantId: _id as PlantId, updatedPlant }))\n        .unwrap()\n        .then((updatedPlant): void => {\n          dispatch(setPlantChanges(updatedPlant));\n          callback();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    deletePlant: (plantId: PlantId, callback: () => void): void => {\n      dispatch(setIsDeletingPlant(true));\n      dispatch(deletePlant(plantId))\n        .unwrap()\n        .then((): void => {\n          dispatch(removePlant(plantId));\n          callback();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    searchPlant: (query: string): void => {\n      dispatch(setIsFetchingPlants(true));\n      dispatch(fetchQueryPlants(query))\n        .unwrap()\n        .then((plants: Plant[]): void => {\n          dispatch(setPlants(plants));\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n  };\n};\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.7a3741e3.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.32eebbb1.png\";","import { useTranslation } from \"react-i18next\";\nimport plantsImage from \"../../images/JungleSwap_Home.png\";\nimport plantPotIcon from \"../../images/JungleSwap_Icon.png\";\n\nconst HomeAbout = (): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"[ home-about ] [ container pt-5 ]\">\n      <div className=\"row\">\n        <div className=\"[ home-about__image ] [ col-sm-6 col-md-6 col-lg-6 ]\">\n          <img\n            src={plantsImage}\n            loading=\"eager\"\n            alt=\"plants\"\n            className=\"w-100 h-100\"\n          />\n        </div>\n        <br />\n        <div className=\"col-sm-6 col-md-6 col-lg-6 px-5\">\n          <article className=\"mt-4\">\n            <header>\n              <h4 className=\"home-about__headline\">\n                {t(\"texts.home.about.headline\")}\n              </h4>\n              <h5 className=\"home-about__subheadline\">\n                {t(\"texts.home.about.subheadline\")}\n              </h5>\n            </header>\n            <p className=\"home-about__paragraph\">\n              {t(\"texts.home.about.paragraph.line1\")}\n              <br />\n              {t(\"texts.home.about.paragraph.line2\")}\n              <br />\n              {t(\"texts.home.about.paragraph.line3\")}\n              <br />\n              {t(\"texts.home.about.paragraph.line4\")}\n              <br />\n              {t(\"texts.home.about.paragraph.line5\")}\n              <br />\n              {t(\"texts.home.about.paragraph.line6\")}\n            </p>\n            <div className=\"home-about__icon\">\n              <img\n                src={plantPotIcon}\n                loading=\"lazy\"\n                alt=\"plant pot\"\n                className=\"w-100 h-100\"\n              />\n            </div>\n          </article>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HomeAbout;\n","const WaitSpinner = (): JSX.Element => {\n  return (\n    <div className=\"d-flex align-items-center justify-content-center\">\n      <div role=\"status\" className=\"[ wait-spinner ] [ spinner-border m-3 ]\" />\n    </div>\n  );\n};\n\nexport default WaitSpinner;\n","import { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport { selectPlants, setFilteredPlants } from \"../../reducer/jungleSwapSlice\";\nimport { Plant } from \"../../app/typeDefinitions\";\nimport { MultiSelect } from \"react-multi-select-component\";\n\ninterface DropdownOption {\n  label: string;\n  value: string;\n  disabled?: boolean;\n}\n\nconst PlantSearch = (): JSX.Element => {\n  const [query, setQuery] = useState<string>(\"\");\n  const [selectedOptions, setSelectedOptions] = useState<DropdownOption[]>([]);\n  const plants = useAppSelector(selectPlants);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n  const { searchPlant, fetchPlants } = usePlant();\n\n  useEffect(() => {\n    const fetchPlantQueryByName = (query: string): void => {\n      if (query) {\n        searchPlant(query);\n      } else {\n        fetchPlants();\n      }\n    };\n\n    fetchPlantQueryByName(query);\n  }, [query]);\n\n  useEffect(() => {\n    const filterPlantsByLocation = (\n      selectedOptions: DropdownOption[],\n      plants: Plant[]\n    ): void => {\n      const selectedLocations = selectedOptions.map(\n        (option: DropdownOption): string => option.value\n      );\n      const filteredPlants = plants.filter(({ location }: Plant): boolean => {\n        const matchedLocation = selectedLocations.filter(\n          (selectedLocation: string): boolean => selectedLocation === location\n        );\n        return matchedLocation.length !== 0 ? true : false;\n      });\n      dispatch(setFilteredPlants(filteredPlants));\n    };\n\n    filterPlantsByLocation(selectedOptions, plants);\n  }, [selectedOptions]);\n\n  const optionsChoice: DropdownOption[] = [\n    {\n      label: t(\"multiSelect.location.sun\"),\n      value: \"sun\",\n    },\n    {\n      label: t(\"multiSelect.location.shade\"),\n      value: \"shade\",\n    },\n    {\n      label: t(\"multiSelect.location.sunAndShade\"),\n      value: \"sun and shade\",\n    },\n  ];\n\n  const localizationTexts: any = {\n    allItemsAreSelected: `${t(\"multiSelect.localization.allItemsAreSelected\")}`,\n    clearSearch: t(\"multiSelect.localization.clearSearch\"),\n    noOptions: t(\"multiSelect.localization.noOptions\"),\n    search: t(\"multiSelect.localization.search\"),\n    selectAll: t(\"multiSelect.localization.selectAll\"),\n    selectAllFiltered: t(\"multiSelect.localization.selectAllFiltered\"),\n    selectSomeItems: t(\"multiSelect.localization.selectSomeItems\"),\n    create: t(\"multiSelect.localization.create\"),\n  };\n\n  return (\n    <div className=\"mb-4\">\n      <hr className=\"[ horizontal-ruler ] [ pb-5 ]\" />\n      <h4 className=\"mb-4\">{t(\"texts.home.searchPlant.headline\")}</h4>\n      <div className=\"[ plant-search ] [ d-flex flex-row ]\">\n        <input\n          type=\"text\"\n          placeholder={t(\"texts.home.searchPlant.namePlaceholder\")}\n          value={query}\n          className=\"[ plant-search__field ] [ form-control ]\"\n          onChange={({\n            target: { value },\n          }: React.ChangeEvent<HTMLInputElement>): void => {\n            setQuery(value);\n          }}\n        />\n        <MultiSelect\n          labelledBy=\"location-select\"\n          options={optionsChoice}\n          value={selectedOptions}\n          overrideStrings={localizationTexts}\n          onChange={(options: DropdownOption[]): void => {\n            setSelectedOptions(options);\n          }}\n          disableSearch={true}\n          className=\"[ plant-search__location-filter plant-search__location-filter--no-border ] [ form-control p-0 ml-4  ] \"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default PlantSearch;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { Plant } from \"../../app/typeDefinitions\";\n\ninterface PlantThumbnailProps {\n  plant: Plant;\n}\n\nconst PlantThumbnail = ({\n  plant: { _id, name, imageUrl, price },\n}: PlantThumbnailProps): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"col mb-5\">\n      <div className=\"card h-100 text-center mx-auto\">\n        <img\n          src={imageUrl}\n          loading=\"lazy\"\n          alt={name}\n          className=\"[ image image--size-large ] [ card-img-top ]\"\n        />\n        <div className=\"card-body mb-5\">\n          <h5 className=\"plant-thumbnail__body-headline\">{name}</h5>\n          <p>\n            {price} {t(\"texts.plants.plantThumbnail.currency\")}\n          </p>\n          <Link to={`/plants/fetch/${_id}`} className=\"navigation-link\">\n            <button className=\"[ button--width-small ] [ btn form-control px-3 ]\">\n              {t(\"link.details\")}\n            </button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlantThumbnail;\n","import { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport {\n  selectfFilteredPlants,\n  selectNumberOfVisibleEntries,\n  setNumberOfVisibleEntries,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant } from \"../../app/typeDefinitions\";\nimport PlantThumbnail from \"./PlantThumbnail\";\n\nconst PlantsCollection = (): JSX.Element => {\n  const filteredPlants = useAppSelector(selectfFilteredPlants);\n  const numberOfVisibleEntries = useAppSelector(selectNumberOfVisibleEntries);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n\n  const handleClickButton = (): void => {\n    dispatch(setNumberOfVisibleEntries(numberOfVisibleEntries + 6));\n  };\n\n  return (\n    <div>\n      <div\n        className={`\n          row\n          row-cols-1\n          row-cols-md-1\n          row-cols-lg-2\n          row-cols-xl-3\n          row-cols-xxl-3\n        `}\n      >\n        {filteredPlants.map(\n          (plant: Plant, index: number): JSX.Element | null => {\n            const { _id } = plant;\n            return index < numberOfVisibleEntries ? (\n              <PlantThumbnail plant={plant} key={_id} />\n            ) : null;\n          }\n        )}\n      </div>\n      {numberOfVisibleEntries < filteredPlants.length && (\n        <div className=\"text-center\">\n          <button\n            type=\"button\"\n            className={`\n              [ \n                button \n                button--width-small \n              ] \n              [ \n                btn \n                btn-sm \n                form-control \n                px-4 \n              ]\n            `}\n            onClick={handleClickButton}\n          >\n            {t(\"button.more\")}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PlantsCollection;\n","import { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { selectIsFetchingPlants } from \"../../reducer/jungleSwapSlice\";\nimport WaitSpinner from \"../spinners/WaitSpinner\";\nimport PlantSearch from \"./PlantSearch\";\nimport PlantsCollection from \"./PlantsCollection\";\n\nconst PlantsCockpit = (): JSX.Element => {\n  const isFetchingPlants = useAppSelector(selectIsFetchingPlants);\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"container mt-5\">\n      <div>\n        <h2>{t(\"texts.home.allPlants.headline\")}</h2>\n      </div>\n      <PlantSearch />\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsCollection />}\n    </div>\n  );\n};\n\nexport default PlantsCockpit;\n","import { Link } from \"react-router-dom\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { scrollToAbout } from \"../../reducer/jungleSwapSlice\";\nimport { useTranslation } from \"react-i18next\";\n\nconst HomeTitle = (): JSX.Element => {\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"[ home-title ] [ row pt-5 my-5 ]\">\n      <div className=\"col-6 offset-3 pt-5 my-5\">\n        <h2 className=\"home-title__headline mb-2\">\n          {t(\"texts.home.title.headline\")}\n        </h2>\n        <h5 className=\"[ home-title__subheadline ] [ mt-3 mb-5 ]\">\n          {t(\"texts.home.title.subheadline\")}\n        </h5>\n        <div className=\"mb-5\">\n          <Link\n            to={\"/\"}\n            className=\"home-title__link\"\n            onClick={(): void => {\n              dispatch(scrollToAbout());\n            }}\n          >\n            {t(\"link.tryIt\")}\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HomeTitle;\n","import { useEffect, useRef } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport {\n  setTitleSectionHeight,\n  setAboutSectionHeight,\n  setFilteredPlants,\n  selectPlants,\n} from \"../../reducer/jungleSwapSlice\";\nimport HomeAbout from \"../../components/home/HomeAbout\";\nimport PlantsCockpit from \"../../components/plants/PlantsCockpit\";\nimport HomeTitle from \"../../components/home/HomeTitle\";\n\nconst Home = (): JSX.Element => {\n  const plants = useAppSelector(selectPlants);\n  const dispatch = useAppDispatch();\n  const elementRef = useRef<HTMLElement[]>([]);\n  const { fetchPlants } = usePlant();\n\n  useEffect(() => {\n    const elementHeight = (elementRef: HTMLElement): number => {\n      return Math.round(elementRef.getBoundingClientRect().height);\n    };\n\n    fetchPlants((): void => {\n      const titleSectionHeight = elementHeight(elementRef.current[0]);\n      dispatch(setTitleSectionHeight(titleSectionHeight));\n      const aboutSectionHeight = elementHeight(elementRef.current[1]);\n      dispatch(setAboutSectionHeight(aboutSectionHeight));\n    });\n  }, []);\n\n  useEffect(() => {\n    dispatch(setFilteredPlants(plants));\n  }, [plants]);\n\n  return (\n    <div>\n      <section\n        ref={(titleSection: HTMLElement): void => {\n          (elementRef.current[0] as HTMLElement | null) = titleSection;\n        }}\n        className=\"[ home ] [ text-center pt-5 pb-5 ]\"\n      >\n        <HomeTitle />\n      </section>\n\n      <section\n        ref={(aboutSection: HTMLElement): void => {\n          (elementRef.current[1] as HTMLElement | null) = aboutSection;\n        }}\n      >\n        <HomeAbout />\n      </section>\n\n      <section>\n        <PlantsCockpit />\n      </section>\n    </div>\n  );\n};\n\nexport default Home;\n","import { useAppDispatch } from \"../hooks\";\nimport {\n  setErrorMessage,\n  setLoggedInUser,\n  signIn,\n  signUp,\n  logOut,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User } from \"../typeDefinitions\";\n\ninterface AuthMethods {\n  signIn: (user: User, callback: () => void) => void;\n  signUp: (newUser: User, callback: () => void) => void;\n  logOut: (loggedInUser: User, callback: () => void) => void;\n  updateUserRequestsReplies: (\n    loggedInUser: User,\n    amountOfRequests: number,\n    amountOfReplies: number\n  ) => User;\n}\n\nexport const useAuthentification = (): AuthMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    signIn: (user: User, callback: () => void): void => {\n      dispatch(signIn(user))\n        .unwrap()\n        .then((user: User): void => {\n          dispatch(setLoggedInUser(user));\n          callback();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    signUp: (newUser: User, callback: () => void): void => {\n      dispatch(signUp(newUser))\n        .unwrap()\n        .then((user: User): void => {\n          dispatch(setLoggedInUser(user));\n          callback();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    logOut: (loggedInUser: User, callback: () => void): void => {\n      dispatch(logOut(loggedInUser))\n        .unwrap()\n        .then((): void => {\n          dispatch(setLoggedInUser(null));\n          callback();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    updateUserRequestsReplies: (\n      loggedInUser: User,\n      amountOfRequests: number,\n      amountOfReplies: number\n    ): User => {\n      const clonedUser: User = JSON.parse(JSON.stringify(loggedInUser));\n      clonedUser.amountOfRequests = amountOfRequests;\n      clonedUser.amountOfReplies = amountOfReplies;\n      dispatch(setLoggedInUser(clonedUser));\n      return clonedUser;\n    },\n  };\n};\n","interface ErrorMessageProps {\n  message: string | null;\n  outputFunction: (message: string) => string;\n}\n\nconst ErrorMessage = ({\n  message,\n  outputFunction,\n}: ErrorMessageProps): JSX.Element | null => {\n  if (!message || !message.includes(\"Form\")) {\n    return null;\n  }\n\n  return (\n    <>\n      <span className=\"d-block text-danger font-weight-bold\">\n        {outputFunction(message)}\n      </span>\n    </>\n  );\n};\n\nexport default ErrorMessage;\n","import { useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\nimport {\n  setIsUserChange,\n  setErrorMessage,\n  selectErrorMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User } from \"../../app/typeDefinitions\";\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\n\nconst SignUp = (): JSX.Element => {\n  const errorMessage = useAppSelector(selectErrorMessage);\n  const dispatch = useAppDispatch();\n  const { push } = useHistory();\n  const { t } = useTranslation();\n  const { signUp } = useAuthentification();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    dispatch(setErrorMessage(null));\n    scrollToTop();\n  }, []);\n\n  const handleSignUp = (event: React.FormEvent<HTMLFormElement>): void => {\n    const {\n      target: { username, email, password },\n    } = event as any;\n    const newUser: User = {\n      username: username.value,\n      email: email.value.toLowerCase(),\n      password: password.value,\n    };\n    event.preventDefault();\n    signUp(newUser, (): void => {\n      dispatch(setIsUserChange(true));\n      push(\"/\");\n    });\n  };\n\n  const convertErrorMessage = (errorMessage: string): string => {\n    switch (errorMessage) {\n      case \"Form: Username missing\":\n        return t(\"errorTexts.auth.signUp.form.usernameMissing\");\n      case \"Form: Email missing\":\n        return t(\"errorTexts.auth.signUp.form.emailMissing\");\n      case \"Form: Password missing\":\n        return t(\"errorTexts.auth.signUp.form.passwordMissing\");\n      case \"Form: Email format invalid\":\n        return t(\"errorTexts.auth.signUp.form.emailFormatInvalid\");\n      case \"Form: Password invalid\":\n        return t(\"errorTexts.auth.signUp.form.passwordInvalid\");\n      case \"Form: Username or email already exists\":\n        return t(\"errorTexts.auth.signUp.form.userAlreadyExists\");\n      default:\n        return t(\"errorTexts.general\");\n    }\n  };\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2 className=\"mb-5\">{t(\"texts.auth.signUp.headline\")}</h2>\n        <form className=\"form-style\" onSubmit={handleSignUp}>\n          <div className=\"form-group\">\n            <label htmlFor=\"InputUsername\">\n              {t(\"texts.auth.signUp.username\")}\n            </label>\n            <input\n              type=\"text\"\n              id=\"InputUsername\"\n              name=\"username\"\n              placeholder={t(\"texts.auth.signUp.enterPlaceholder\")}\n              className=\"form-control w-100\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"InputEmail\">{t(\"texts.auth.signUp.email\")}</label>\n            <input\n              type=\"email\"\n              id=\"InputEmail\"\n              name=\"email\"\n              placeholder={t(\"texts.auth.signUp.enterPlaceholder\")}\n              className=\"form-control w-100\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"InputPassword\">\n              {t(\"texts.auth.signUp.password\")}\n            </label>\n            <input\n              type=\"password\"\n              id=\"InputPassword\"\n              name=\"password\"\n              placeholder={t(\"texts.auth.signUp.enterPlaceholder\")}\n              className=\"form-control w-100\"\n            />\n          </div>\n          <ErrorMessage\n            message={errorMessage}\n            outputFunction={convertErrorMessage}\n          />\n          <button\n            type=\"submit\"\n            formNoValidate\n            className={`\n              [\n                button\n                button--width-small\n              ]\n              [\n                btn\n                btn-sm\n                form-control\n                px-4\n                ml-0\n                mt-4\n              ]\n            `}\n          >\n            {t(\"button.signUp\")}\n          </button>\n          <p className=\"pt-1\">{t(\"texts.auth.signUp.alreadyAccountCreated\")}</p>\n          <div className=\"text-right\">\n            <Link to={\"/auth/sign-in\"} className=\"navigation-link\">\n              <button\n                className={`\n                [\n                  button\n                  button--width-small\n                ]\n                [\n                  btn\n                  btn-sm\n                  form-control\n                  px-4\n                  mt-0\n                  mr-0\n                ]\n                `}\n              >\n                {t(\"button.signIn\")}\n              </button>\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUp;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\nimport {\n  setIsUserChange,\n  setAmountOfRequests,\n  setAmountOfReplies,\n  setErrorMessage,\n  selectErrorMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User } from \"../../app/typeDefinitions\";\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\n\nconst SignIn = (): JSX.Element => {\n  const errorMessage = useAppSelector(selectErrorMessage);\n  const dispatch = useAppDispatch();\n  const { push } = useHistory();\n  const { t } = useTranslation();\n  const { signIn } = useAuthentification();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    dispatch(setErrorMessage(null));\n    scrollToTop();\n  }, []);\n\n  const handleSignIn = (event: React.FormEvent<HTMLFormElement>): void => {\n    const {\n      target: { email, password },\n    } = event as any;\n    const user: User = {\n      email: email.value,\n      password: password.value,\n    };\n    event.preventDefault();\n    signIn(user, (): void => {\n      dispatch(setIsUserChange(true));\n      const { amountOfRequests, amountOfReplies } = user;\n      dispatch(setAmountOfRequests(amountOfRequests as number));\n      dispatch(setAmountOfReplies(amountOfReplies as number));\n      push(\"/\");\n    });\n  };\n\n  const convertErrorMessage = (errorMessage: string): string => {\n    switch (errorMessage) {\n      case \"Form: Email missing\":\n        return t(\"errorTexts.auth.signIn.form.emailMissing\");\n      case \"Form: Password missing\":\n        return t(\"errorTexts.auth.signIn.form.passwordMissing\");\n      case \"Form: Email format invalid\":\n        return t(\"errorTexts.auth.signIn.form.emailFormatInvalid\");\n      case \"Form: Passwords don't match\":\n        return t(\"errorTexts.auth.signIn.form.noMatchPasswords\");\n      default:\n        return t(\"errorTexts.general\");\n    }\n  };\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2 className=\"mb-5\">{t(\"texts.auth.signIn.headline\")}</h2>\n        <form className=\"form-style\" onSubmit={handleSignIn}>\n          <div className=\"form-group\">\n            <label htmlFor=\"InputEmail\">{t(\"texts.auth.signIn.email\")}</label>\n            <input\n              type=\"email\"\n              id=\"InputEmail\"\n              name=\"email\"\n              placeholder={t(\"texts.auth.signIn.enterPlaceholder\")}\n              className=\"form-control w-100\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"InputPassword\">\n              {t(\"texts.auth.signIn.password\")}\n            </label>\n            <input\n              type=\"password\"\n              id=\"InputPassword\"\n              name=\"password\"\n              placeholder={t(\"texts.auth.signIn.enterPlaceholder\")}\n              className=\"form-control w-100\"\n            />\n          </div>\n          <ErrorMessage\n            message={errorMessage}\n            outputFunction={convertErrorMessage}\n          />\n          <button\n            type=\"submit\"\n            formNoValidate\n            className={`\n              [ \n                button--width-small \n              ] \n              [ \n                btn \n                btn-sm \n                form-control \n                px-4 \n                mt-4 \n                ml-0 \n              ]\n            `}\n          >\n            {t(\"button.signIn\")}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\nimport { useIntervalCounter } from \"../../app/custom-hooks/useIntervalCounter\";\nimport {\n  setIsNewRequest,\n  setAmountOfRequests,\n  setAmountOfReplies,\n  selectLoggedInUser,\n  selectIntervalId,\n  selectAmountOfRequests,\n  selectAmountOfReplies,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User } from \"../../app/typeDefinitions\";\n\nconst LogOut = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const intervalId = useAppSelector(selectIntervalId);\n  const amountOfRequests = useAppSelector(selectAmountOfRequests);\n  const amountOfReplies = useAppSelector(selectAmountOfReplies);\n  const dispatch = useAppDispatch();\n  const { push } = useHistory();\n  const { logOut, updateUserRequestsReplies } = useAuthentification();\n  const { stopCounter } = useIntervalCounter();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    const updatedUser = updateUserRequestsReplies(\n      loggedInUser as User,\n      amountOfRequests,\n      amountOfReplies\n    );\n    logOut(updatedUser, (): void => {\n      stopCounter(intervalId as NodeJS.Timeout);\n      dispatch(setIsNewRequest(false));\n      dispatch(setAmountOfRequests(0));\n      dispatch(setAmountOfReplies(0));\n      push(\"/\");\n      scrollToTop();\n    });\n  }, []);\n\n  return <div />;\n};\n\nexport default LogOut;\n","import { useAppDispatch } from \"../hooks\";\nimport {\n  checkUserLoggedIn,\n  setErrorMessage,\n  setLoggedInUser,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User } from \"../../app/typeDefinitions\";\n\ninterface RoutingMethods {\n  protectRoute: (callback: () => void) => void;\n}\n\nexport const useRouting = (): RoutingMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    protectRoute: (callback: () => void): void => {\n      dispatch(checkUserLoggedIn())\n        .unwrap()\n        .then((user: User): void => {\n          dispatch(setLoggedInUser(user));\n          callback();\n        })\n        .catch((rejectedValue: any): void => {\n          if (rejectedValue.message !== \"Unauthorized user\") {\n            dispatch(setErrorMessage(rejectedValue.message));\n          }\n        });\n    },\n  };\n};\n","import { useAppDispatch } from \"../hooks\";\nimport {\n  deletePlantImage,\n  setErrorMessage,\n  setIsDeletingPlantImage,\n  setIsUploadingPlantImage,\n  uploadPlantImage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { DestroyImageData, UploadImageData } from \"../typeDefinitions\";\n\ninterface PlantImageMethods {\n  createImage: (\n    uploadForm: any,\n    callback: (uploadImageData: UploadImageData) => void\n  ) => void;\n  deleteImage: (destroyImageData: DestroyImageData) => void;\n}\n\nexport const usePlantImage = (): PlantImageMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    createImage: (\n      uploadForm: any,\n      callback: (uploadImageData: UploadImageData) => void\n    ): void => {\n      dispatch(setIsUploadingPlantImage(true));\n      dispatch(uploadPlantImage(uploadForm))\n        .unwrap()\n        .then((uploadImageData: UploadImageData): void => {\n          callback(uploadImageData);\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    deleteImage: (destroyImageData: DestroyImageData): void => {\n      dispatch(setIsDeletingPlantImage(true));\n      dispatch(deletePlantImage(destroyImageData))\n        .unwrap()\n        .then((): void => {\n          return;\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n  };\n};\n","import { MouseEventHandler } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface GoBackButtonProps {\n  clickHandler: MouseEventHandler;\n}\n\nconst GoBackButton = ({ clickHandler }: GoBackButtonProps): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"text-right\">\n      <button\n        className={`\n          [ \n            button \n            button--width-small \n          ] \n          [ \n            btn \n            btn-sm \n            form-control \n            px-4 mt-4 \n          ]\n        `}\n        onClick={clickHandler}\n      >\n        {t(\"button.goBack\")}\n      </button>\n    </div>\n  );\n};\n\nexport default GoBackButton;\n","import { useEffect, useMemo } from \"react\";\nimport { Redirect, useHistory } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { usePlantImage } from \"../../app/custom-hooks/usePlantImage\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport {\n  selectErrorMessage,\n  selectIsCreatingPlant,\n  selectIsUploadingPlantImage,\n  selectLoggedInUser,\n  setErrorMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { UploadImageData } from \"../../app/typeDefinitions\";\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst PlantCreateForm = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isUploadingPlantImage = useAppSelector(selectIsUploadingPlantImage);\n  const isCreatingPlant = useAppSelector(selectIsCreatingPlant);\n  const errorMessage = useAppSelector(selectErrorMessage);\n  const dispatch = useAppDispatch();\n  const { push, goBack } = useHistory();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { createImage } = usePlantImage();\n  const { createPlant } = usePlant();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      dispatch(setErrorMessage(null));\n      scrollToTop();\n    });\n  }, []);\n\n  const buttonState = useMemo(\n    (): boolean => (isUploadingPlantImage || isCreatingPlant ? true : false),\n    [isUploadingPlantImage, isCreatingPlant]\n  );\n\n  const handleUploadPlantImage = (\n    event: React.FormEvent<HTMLFormElement>\n  ): void => {\n    const { target } = event as any;\n    const { plantImage } = target as any;\n    const image = plantImage.files[0];\n    event.preventDefault();\n    const uploadForm = new FormData();\n    uploadForm.append(\"image\", image);\n    createImage(\n      uploadForm,\n      ({ imageUrl, imagePublicId }: UploadImageData): void => {\n        createPlant(target, { imageUrl, imagePublicId }, (): void => {\n          push(\"/plants/my-own\");\n        });\n      }\n    );\n  };\n\n  const convertErrorMessage = (errorMessage: string): string => {\n    switch (errorMessage) {\n      case \"Form: Name missing\":\n        return t(\"errorTexts.plants.createPlant.form.nameMissing\");\n      case \"Form: Description missing\":\n        return t(\"errorTexts.plants.createPlant.form.descriptionMissing\");\n      case \"Form: Size missing\":\n        return t(\"errorTexts.plants.createPlant.form.sizeMissing\");\n      case \"Form: Location missing\":\n        return t(\"errorTexts.plants.createPlant.form.locationMissing\");\n      case \"Form: Price missing\":\n        return t(\"errorTexts.plants.createPlant.form.priceMissing\");\n      case \"Form: Image missing\":\n        return t(\"errorTexts.plants.createPlant.form.imageMissing\");\n      default:\n        return t(\"errorTexts.general\");\n    }\n  };\n\n  const handleGoBack = (): void => {\n    goBack();\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-12 col-md-6 offset-md-4 mt-5\">\n        <h2 className=\"text-left mb-5\">\n          {t(\"texts.plants.createPlant.form.headline\")}\n        </h2>\n        <form className=\"form-style\" onSubmit={handleUploadPlantImage}>\n          <label htmlFor=\"enterName\">\n            {t(\"texts.plants.createPlant.form.name\")}\n          </label>\n          <input\n            type=\"text\"\n            id=\"enterName\"\n            name=\"name\"\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\n            className=\"form-control w-100 mb-4\"\n          />\n          <label htmlFor=\"enterDescription\">\n            {t(\"texts.plants.createPlant.form.description\")}\n          </label>\n          <input\n            type=\"text\"\n            id=\"enterDescription\"\n            name=\"description\"\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\n            className=\"form-control w-100 mb-4\"\n          />\n          <label htmlFor=\"enterSize\">\n            {t(\"texts.plants.createPlant.form.size\")}\n          </label>\n          <input\n            type=\"number\"\n            id=\"enterSize\"\n            name=\"size\"\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\n            min=\"1\"\n            className=\"form-control w-100 mb-4\"\n          />\n          <label htmlFor=\"enterLocation\">\n            {t(\"texts.plants.createPlant.form.location\")}\n          </label>\n          <select\n            id=\"enterLocation\"\n            name=\"location\"\n            className=\"form-control p-2 mb-4\"\n          >\n            <option>{t(\"select.location.title\")}</option>\n            <option value=\"sun\">{t(\"select.location.sun\")}</option>\n            <option value=\"shade\">{t(\"select.location.shade\")}</option>\n            <option value=\"sun and shade\">\n              {t(\"select.location.sunAndShade\")}\n            </option>\n          </select>\n          <label htmlFor=\"enterPrice\">\n            {t(\"texts.plants.createPlant.form.price\")}\n          </label>\n          <input\n            type=\"number\"\n            id=\"enterPrice\"\n            name=\"price\"\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\n            min=\"1\"\n            className=\"form-control w-100 mb-4\"\n          />\n          <label htmlFor=\"enterImage\">\n            {t(\"texts.plants.createPlant.form.image\")}\n          </label>\n          <input\n            type=\"file\"\n            id=\"enterImage\"\n            name=\"plantImage\"\n            className=\"form-control w-100 mb-4\"\n          />\n          <ErrorMessage\n            message={errorMessage}\n            outputFunction={convertErrorMessage}\n          />\n          <div className=\"col-12 text-right pr-0\">\n            <button\n              type=\"submit\"\n              disabled={buttonState}\n              className={`\n                [\n                  button\n                  button--width-small\n                ]\n                [\n                  btn\n                  btn-sm\n                  form-control\n                  px-4\n                  mr-0\n                  mb-2\n                ]\n              `}\n            >\n              {t(\"button.create\")}\n            </button>\n            <GoBackButton clickHandler={handleGoBack} />\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default PlantCreateForm;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nconst PlantDetailsBuyerItems = (): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <div>\n      <Link to=\"/plants/checkout\" className=\"navigation-link\">\n        <button\n          className={`\n            [ \n              button \n              button--width-small \n            ]\n            [ \n              btn\n              btn-sm\n              form-control\n              px-4\n              mx-2\n              mb-2 \n            ]          \n          `}\n        >\n          {t(\"button.buy\")}\n        </button>\n      </Link>\n      <Link to=\"/messages/create\" className=\"navigation-link\">\n        <button\n          className={`\n            [ \n              button \n              button--width-small \n            ]\n            [ \n              btn\n              btn-sm\n              form-control\n              px-4\n              mr-0\n              mb-2 \n            ]   \n          `}\n        >\n          {t(\"button.swap\")}\n        </button>\n      </Link>\n    </div>\n  );\n};\n\nexport default PlantDetailsBuyerItems;\n","import { useMemo } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport { usePlantImage } from \"../../app/custom-hooks/usePlantImage\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport {\n  selectIsDeletingMessage,\n  selectIsDeletingPlant,\n  selectIsDeletingPlantImage,\n  selectMessages,\n  selectPlant,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant, PlantId } from \"../../app/typeDefinitions\";\n\nconst PlantDetailsCreatorChoice = (): JSX.Element => {\n  const plant = useAppSelector(selectPlant);\n  const isDeletingPlant = useAppSelector(selectIsDeletingPlant);\n  const isDeletingPlantImage = useAppSelector(selectIsDeletingPlantImage);\n  const messages = useAppSelector(selectMessages);\n  const isDeletingMessage = useAppSelector(selectIsDeletingMessage);\n  const { goBack } = useHistory();\n  const { t } = useTranslation();\n  const { deleteRemainingMessages } = useMessage();\n  const { deleteImage } = usePlantImage();\n  const { deletePlant } = usePlant();\n  const { _id, imagePublicId } = plant as Plant;\n\n  const buttonState = useMemo(\n    (): boolean =>\n      isDeletingMessage || isDeletingPlantImage || isDeletingPlant\n        ? true\n        : false,\n    [isDeletingMessage, isDeletingPlantImage, isDeletingPlant]\n  );\n\n  const handleDeletePlant = (): void => {\n    deleteRemainingMessages(messages, _id as PlantId);\n    deleteImage({ imagePublicId });\n    deletePlant(_id as PlantId, (): void => {\n      goBack();\n    });\n  };\n\n  return (\n    <div className=\"p-0\">\n      <Link to={\"/plants/update\"} className=\"navigation-link\">\n        <button\n          className={`\n            [ \n              button \n              button--width-small \n            ]\n            [ \n              btn\n              btn-sm\n              form-control\n              px-4\n              mx-2\n              mb-2 \n            ]   \n          `}\n        >\n          {t(\"button.update\")}\n        </button>\n      </Link>\n      <button\n        disabled={buttonState}\n        className={`\n          [ \n            button \n            button--width-small \n          ]\n          [ \n            btn\n            btn-sm\n            form-control\n            px-4\n            mr-0\n            mb-2 \n          ]    \n        `}\n        onClick={handleDeletePlant}\n      >\n        {t(\"button.delete\")}\n      </button>\n    </div>\n  );\n};\n\nexport default PlantDetailsCreatorChoice;\n","import PlantDetailsBuyerChoice from \"./PlantDetailsBuyerChoice\";\nimport PlantDetailsCreatorChoice from \"./PlantDetailsCreatorChoice\";\n\ninterface PlantDetailsUserChoiceProps {\n  isCreator: boolean;\n}\n\nconst PlantDetailsUserChoice = ({\n  isCreator,\n}: PlantDetailsUserChoiceProps): JSX.Element => {\n  if (isCreator) {\n    return <PlantDetailsCreatorChoice />;\n  }\n  return <PlantDetailsBuyerChoice />;\n};\n\nexport default PlantDetailsUserChoice;\n","interface PlantItemProps {\n  keyword: string;\n  description: string | undefined;\n}\n\nconst PlantItem = ({ keyword, description }: PlantItemProps): JSX.Element => {\n  return (\n    <div className=\"ml-2 mt-2\">\n      <span className=\"font-weight-bold\">{keyword}</span> {description}\n    </div>\n  );\n};\n\nexport default PlantItem;\n","import { useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { selectLoggedInUser } from \"../../reducer/jungleSwapSlice\";\nimport { Plant, User } from \"../../app/typeDefinitions\";\nimport PlantDetailsUserChoice from \"./PlantDetailsUserChoice\";\nimport PlantItem from \"./PlantItem\";\nimport GoBackButton from \"../helpers/GoBackButton\";\n\ninterface PlantItemsProps {\n  plant: Plant;\n}\n\nconst PlantItems = ({\n  plant: { name, description, size, imageUrl, location, price, creator },\n}: PlantItemsProps): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const { t } = useTranslation();\n  const { goBack } = useHistory();\n  const { _id } = loggedInUser as User;\n\n  const handleGoBack = (): void => {\n    goBack();\n  };\n\n  return (\n    <div className=\"col\">\n      <div className=\"[ thumbnail-card thumbnail-card--width-large ] [ card ]\">\n        <img\n          src={imageUrl}\n          loading=\"lazy\"\n          alt={name}\n          className=\"[ thumbnail-card thumbnail-card--width-large ] [ card-img-top ]\"\n        />\n        <PlantItem\n          keyword={t(\"texts.plants.plantDetails.name\")}\n          description={name}\n        />\n        <PlantItem\n          keyword={t(\"texts.plants.plantDetails.description\")}\n          description={description}\n        />\n        <PlantItem\n          keyword={t(\"texts.plants.plantDetails.size\")}\n          description={`${size} ${t(\"texts.plants.plantDetails.sizeUnit\")}`}\n        />\n        <PlantItem\n          keyword={t(\"texts.plants.plantDetails.likes\")}\n          description={location}\n        />\n        <div className=\"ml-2 mt-2\">\n          <span className=\"font-weight-bold\"></span>{\" \"}\n        </div>\n        <PlantItem\n          keyword={t(\"texts.plants.plantDetails.price\")}\n          description={`${price} ${t(\"texts.plants.plantDetails.currency\")}`}\n        />\n        <div className=\"col justify-content-center ml-2 mt-2\">\n          <div className=\"row-2 justify-content-center\">\n            <div className=\"card-body text-right pt-0\">\n              <PlantDetailsUserChoice\n                isCreator={(creator as User)._id === _id}\n              />\n              <GoBackButton clickHandler={handleGoBack} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlantItems;\n","import { useEffect } from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport {\n  selectIsFetchingPlant,\n  selectLoggedInUser,\n  selectPlant,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant, PlantId } from \"../../app/typeDefinitions\";\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\nimport PlantItems from \"../../components/plants/PlantItems\";\n\nconst PlantDetails = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const plant = useAppSelector(selectPlant);\n  const isFetchingPlant = useAppSelector(selectIsFetchingPlant);\n  const { plantId } = useParams<{ plantId: PlantId }>();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { fetchPlant } = usePlant();\n  const { scrollToTop } = scroll;\n  const { creator } = plant as Plant;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      fetchPlant(plantId, (): void => {\n        scrollToTop();\n      });\n    });\n  }, []);\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/sign-up\"} />;\n  }\n\n  return (\n    <div className=\"container row row-md-10 offset-md-4 mt-5\">\n      <div className=\"container pt-4 mt-4 mb-3\">\n        <h2>{t(\"texts.plants.plantDetails.headline\")}</h2>\n      </div>\n      {isFetchingPlant || !creator ? (\n        <WaitSpinner />\n      ) : (\n        <PlantItems plant={plant} />\n      )}\n    </div>\n  );\n};\n\nexport default PlantDetails;\n","import { useEffect, useMemo, useRef } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { usePlantImage } from \"../../app/custom-hooks/usePlantImage\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport {\n  setPlant,\n  setDestroyImageData,\n  selectLoggedInUser,\n  selectIsUploadingPlantImage,\n  selectIsDeletingPlantImage,\n  selectDestroyImageData,\n  selectPlant,\n  selectIsUpdatingPlant,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant, UploadImageData } from \"../../app/typeDefinitions\";\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\n\nconst PlantUpdateForm = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isUploadingPlantImage = useAppSelector(selectIsUploadingPlantImage);\n  const isDeletingPlantImage = useAppSelector(selectIsDeletingPlantImage);\n  const destroyImageData = useAppSelector(selectDestroyImageData);\n  const plant = useAppSelector(selectPlant);\n  const isUpdatingPlant = useAppSelector(selectIsUpdatingPlant);\n  const dispatch = useAppDispatch();\n  const selectElementRef = useRef<HTMLSelectElement | null>(null);\n  const { t } = useTranslation();\n  const { goBack } = useHistory();\n  const { protectRoute } = useRouting();\n  const { createImage, deleteImage } = usePlantImage();\n  const { updatePlant } = usePlant();\n  const { scrollToTop } = scroll;\n  const { name, description, size, imageUrl, price } = plant as Plant;\n\n  useEffect(() => {\n    const setPlantLocation = ({ location }: Plant): void => {\n      if (location) {\n        (selectElementRef.current as HTMLSelectElement).value = location;\n      }\n    };\n\n    protectRoute((): void => {\n      setPlantLocation(plant);\n      scrollToTop();\n    });\n  }, []);\n\n  const buttonState = useMemo(\n    (): boolean =>\n      isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant\n        ? true\n        : false,\n    [isUploadingPlantImage, isDeletingPlantImage, isUpdatingPlant]\n  );\n\n  const handlePlantEntryChange = (\n    {\n      target: { name, value },\n    }: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n    plant: Plant\n  ): void => {\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\n    switch (name) {\n      case \"name\":\n        clonedPlant.name = value;\n        break;\n      case \"description\":\n        clonedPlant.description = value;\n        break;\n      case \"size\":\n        clonedPlant.size = Number(value);\n        break;\n      case \"location\":\n        clonedPlant.location = value;\n        break;\n      case \"price\":\n        clonedPlant.price = Number(value);\n    }\n    dispatch(setPlant(clonedPlant));\n  };\n\n  const handlePlantImageChange = (\n    { target }: React.ChangeEvent<HTMLInputElement>,\n    { imagePublicId }: Plant\n  ): void => {\n    const image = (target.files as any)[0];\n    dispatch(setDestroyImageData({ imagePublicId }));\n    const uploadForm = new FormData();\n    uploadForm.append(\"image\", image);\n    createImage(\n      uploadForm,\n      ({ imageUrl, imagePublicId }: UploadImageData): void => {\n        const clonedPlant = JSON.parse(JSON.stringify(plant));\n        clonedPlant.imagePublicId = imagePublicId;\n        clonedPlant.imageUrl = imageUrl;\n        dispatch(setPlant(clonedPlant));\n      }\n    );\n  };\n\n  const handleUpdatePlant = () => {\n    if (destroyImageData) {\n      deleteImage(destroyImageData);\n    }\n    updatePlant(plant, (): void => {\n      goBack();\n    });\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5 \">\n      <div className=\"col-12 col-md-6 offset-md-6 mt-2\">\n        <h2 className=\"text-left mt-5 mb-4 \">\n          {t(\"texts.plants.updatePlant.form.headline\")}\n        </h2>\n        <div className=\"[ thumbnail-card thumbnail-card--width-large ] [ card mb-5 ]\">\n          {isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant ? (\n            <WaitSpinner />\n          ) : (\n            <img\n              src={imageUrl}\n              loading=\"lazy\"\n              alt={name}\n              className=\"[ image image--size-medium ] [ mb-2 ]\"\n            />\n          )}\n          <div className=\"card-body\">\n            <label htmlFor=\"updateName\">\n              {t(\"texts.plants.updatePlant.form.name\")}\n            </label>\n            <input\n              type=\"text\"\n              id=\"updateName\"\n              name=\"name\"\n              value={name}\n              className=\"form-control mb-4\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n                handlePlantEntryChange(event, plant);\n              }}\n            />\n            <label htmlFor=\"updateDescription\">\n              {t(\"texts.plants.updatePlant.form.description\")}\n            </label>\n            <input\n              type=\"text\"\n              id=\"updateDescription\"\n              name=\"description\"\n              value={description}\n              className=\"form-control mb-4\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n                handlePlantEntryChange(event, plant);\n              }}\n            />\n            <label htmlFor=\"updateSize\">\n              {t(\"texts.plants.updatePlant.form.size\")}\n            </label>\n            <input\n              type=\"number\"\n              id=\"updateSize\"\n              name=\"size\"\n              value={size}\n              min=\"1\"\n              className=\"form-control mb-4\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n                handlePlantEntryChange(event, plant);\n              }}\n            />\n            <label htmlFor=\"updateLocation\">\n              {t(\"texts.plants.updatePlant.form.location\")}\n            </label>\n            <select\n              ref={selectElementRef}\n              id=\"updateLocation\"\n              name=\"location\"\n              className=\"form-control px-2 mb-4\"\n              onChange={(event: React.ChangeEvent<HTMLSelectElement>): void => {\n                handlePlantEntryChange(event, plant);\n              }}\n            >\n              <option value=\"sun\">{t(\"select.location.sun\")}</option>\n              <option value=\"shade\">{t(\"select.location.shade\")}</option>\n              <option value=\"sun and shade\">\n                {t(\"select.location.sunAndShade\")}\n              </option>\n            </select>\n            <label htmlFor=\"updatePrice\">\n              {t(\"texts.plants.updatePlant.form.price\")}\n            </label>\n            <input\n              type=\"number\"\n              id=\"updatePrice\"\n              name=\"price\"\n              value={price}\n              min=\"1\"\n              className=\"form-control mb-4\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n                handlePlantEntryChange(event, plant);\n              }}\n            />\n            <label htmlFor=\"updateImage\">\n              {t(\"texts.plants.updatePlant.form.image\")}\n            </label>\n            <input\n              type=\"file\"\n              id=\"updateImage\"\n              name=\"plantImage\"\n              className=\"form-control mb-4\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n                handlePlantImageChange(event, plant);\n              }}\n            />\n            <div className=\"col-12 text-right pr-0\">\n              <button\n                disabled={buttonState}\n                className={`\n                  [\n                    button \n                    button--width-small\n                  ]\n                  [\n                    btn\n                    btn-sm\n                    form-control\n                    px-4\n                    mr-0\n                    mb-2\n                  ]\n                `}\n                onClick={handleUpdatePlant}\n              >\n                {t(\"button.save\")}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlantUpdateForm;\n","import { useHistory } from \"react-router\";\nimport { animateScroll as scroll } from \"react-scroll\";\n\ninterface NavigationMethods {\n  goToHome: () => void;\n  goToRequests: () => void;\n  goToReplies: () => void;\n}\n\nexport const useNavigation = (): NavigationMethods => {\n  const { push } = useHistory();\n  const { scrollToTop } = scroll;\n\n  return {\n    goToHome: (): void => {\n      push(\"/\");\n      scrollToTop();\n    },\n\n    goToRequests: (): void => {\n      push(\"/requests/fetch-all\");\n      scrollToTop();\n    },\n\n    goToReplies: (): void => {\n      push(\"/replies/fetch-all\");\n      scrollToTop();\n    },\n  };\n};\n","interface PaymentErrorMessageProps {\n  errorMessage: string;\n}\n\nconst PaymentErrorMessage = ({\n  errorMessage,\n}: PaymentErrorMessageProps): JSX.Element | null => {\n  if (!errorMessage) {\n    return null;\n  }\n\n  return (\n    <div role=\"alert\" className=\"card-error\">\n      {errorMessage}\n    </div>\n  );\n};\n\nexport default PaymentErrorMessage;\n","import { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { usePayment } from \"../../app/custom-hooks/usePayment\";\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport {\n  scrollToPlants,\n  selectClientSecret,\n  selectPlant,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant } from \"../../app/typeDefinitions\";\nimport { Stripe } from \"@stripe/stripe-js\";\nimport PaymentErrorMessage from \"./PaymentErrorMessage\";\nimport GoBackButton from \"../helpers/GoBackButton\";\n\ninterface CardStyle {\n  style: {\n    base: {\n      color: string;\n      fontFamily: string;\n      fontSmoothing: string;\n      fontSize: string;\n      \"::placeholder\": { color: string };\n    };\n    invalid: {\n      color: string;\n      iconColor: string;\n    };\n  };\n}\n\nconst PaymentCheckoutForm = (): JSX.Element => {\n  const [isSucceeded, setIsSucceeded] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [paymentError, setPaymentError] = useState(\"\");\n  const clientSecret = useAppSelector(selectClientSecret);\n  const plant = useAppSelector(selectPlant);\n  const dispatch = useAppDispatch();\n  const { push } = useHistory();\n  const stripe = useStripe();\n  const elements = useElements();\n  const { initializePayment } = usePayment();\n  const { t } = useTranslation();\n  const { goToHome } = useNavigation();\n  const { name, price } = plant as Plant;\n  const cardStyle: CardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": { color: \"#32325d\" },\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\",\n      },\n    },\n  };\n\n  useEffect(() => {\n    initializePayment(plant);\n\n    return (): void => {\n      push(\"/\");\n      dispatch(scrollToPlants());\n    };\n  }, []);\n\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\n    event.preventDefault();\n    // Stripe.js has not yet been loaded\n    if (!stripe || !elements) {\n      return;\n    }\n    setIsProcessing(true);\n    const payload = await (stripe as Stripe).confirmCardPayment(clientSecret, {\n      payment_method: { card: elements.getElement(CardElement) } as any,\n    });\n    if (payload.error) {\n      setPaymentError(`Payment failed ${payload.error.message}`);\n      setIsProcessing(false);\n    } else {\n      setPaymentError(\"\");\n      setIsProcessing(false);\n      setIsSucceeded(true);\n    }\n  };\n\n  const handleInputChanges = async ({ empty, error }: any): Promise<void> => {\n    setIsDisabled(empty);\n    setPaymentError(error ? error.message : \"\");\n  };\n\n  const processingState = (): JSX.Element | string =>\n    isProcessing ? (\n      <div id=\"spinner\" className=\"spinner font-weight-bold\" />\n    ) : (\n      t(\"texts.plants.checkout.form.payNow\")\n    );\n\n  const messageVisibility = (): string =>\n    isSucceeded ? \"result-message text-center\" : \"result-message--hidden\";\n\n  const handleGoBack = (): void => {\n    goToHome();\n  };\n\n  return (\n    <div className=\"container col-md-9 col-sm-12\">\n      <h2 className=\"[ payment-checkout-form__headline ] [ text-break mb-4 ]\">\n        {name}\n      </h2>\n      <h3 className=\"mb-4\">\n        {t(\"texts.plants.checkout.form.price\")} {price}{\" \"}\n        {t(\"texts.plants.checkout.form.currency\")}\n      </h3>\n      <form\n        id=\"payment-form\"\n        className=\"[ payment-checkout-form ] [ mt-5 ]\"\n        onSubmit={handleSubmitPayment}\n      >\n        <CardElement\n          id=\"card-element\"\n          options={cardStyle}\n          className=\"p-2\"\n          onChange={handleInputChanges}\n        />\n        <div className=\"row justify-content-center\">\n          <button\n            type=\"submit\"\n            id=\"submit\"\n            disabled={isProcessing || isDisabled || isSucceeded}\n            className=\"btn btn-sm card-button mt-5 mb-4\"\n          >\n            <span id=\"button-text\">{processingState()}</span>\n          </button>\n        </div>\n        {/* Show any error that happens when processing the payment */}\n        <PaymentErrorMessage errorMessage={paymentError} />\n        {/* Show success message upon completion */}\n        <p className={messageVisibility()}>\n          {t(\"texts.plants.checkout.form.paymentSuccessful\")}\n        </p>\n      </form>\n      <div className=\"row justify-content-center\">\n        <GoBackButton clickHandler={handleGoBack} />\n      </div>\n    </div>\n  );\n};\n\nexport default PaymentCheckoutForm;\n","import { useAppDispatch } from \"../hooks\";\nimport {\n  createPayment,\n  setClientSecret,\n  setErrorMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant } from \"../typeDefinitions\";\n\ninterface PaymentMethods {\n  initializePayment: (plant: Plant) => void;\n}\n\nexport const usePayment = (): PaymentMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    initializePayment: (plant: Plant): void => {\n      dispatch(createPayment(plant))\n        .unwrap()\n        .then((payment: any): void => {\n          dispatch(setClientSecret(payment.clientSecret));\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n  };\n};\n","import { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { selectLoggedInUser } from \"../../reducer/jungleSwapSlice\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport PaymentCheckoutForm from \"../../components/apis/PaymentCheckoutForm\";\n\nconst PaymentCheckoutView = (): JSX.Element => {\n  const [stripePromise] = useState(() =>\n    loadStripe(\n      \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\n    )\n  );\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const { protectRoute } = useRouting();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      scrollToTop();\n    });\n  }, []);\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-11 col-md-6 offset-1 offset-md-5 mt-5\">\n        <Elements stripe={stripePromise}>\n          <PaymentCheckoutForm />\n        </Elements>\n      </div>\n    </div>\n  );\n};\n\nexport default PaymentCheckoutView;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { User, Message, Plant } from \"../../app/typeDefinitions\";\n\ninterface RequestThumbnailProps {\n  message: Message;\n}\n\nconst RequestTile = ({\n  message: { _id, buyer, plant },\n}: RequestThumbnailProps): JSX.Element => {\n  const { t } = useTranslation();\n  const { name } = (plant as Plant) || {};\n  const { username } = buyer as User;\n\n  return (\n    <div className=\"card p-3 mt-4\">\n      <h4>\n        {t(\"texts.requests.requestTile.headline\")} {name}\n      </h4>\n      <h5>\n        {t(\"texts.requests.requestTile.subheadline\")} {username}\n      </h5>\n      <div className=\"text-center\">\n        <Link to={`/requests/fetch/${_id}`} className=\"navigation-link\">\n          <button className=\"[ button button--width-small ] [ btn form-control ]\">\n            {t(\"link.details\")}\n          </button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default RequestTile;\n","import { useAppSelector } from \"../../app/hooks\";\nimport {\n  selectLoggedInUser,\n  selectMessages,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Message, User } from \"../../app/typeDefinitions\";\nimport RequestTile from \"./RequestTile\";\n\nconst RequestsCollection = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const messages = useAppSelector(selectMessages);\n\n  return (\n    <div>\n      {messages.map((message: Message): JSX.Element | null => {\n        const { _id, seller, messageState } = message;\n        return (seller as User)._id === (loggedInUser as User)._id &&\n          messageState === true ? (\n          <RequestTile message={message} key={_id} />\n        ) : null;\n      })}\n    </div>\n  );\n};\n\nexport default RequestsCollection;\n","import { useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\nimport {\n  selectAmountOfRequests,\n  selectiIsFetchingMessages,\n  selectIsUserChange,\n  selectLoggedInUser,\n  setIsNewRequest,\n  setStartAmountOfRequests,\n} from \"../../reducer/jungleSwapSlice\";\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\nimport RequestsCollection from \"../../components/requests/RequestsCollection\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst RequestsView = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isUserChange = useAppSelector(selectIsUserChange);\n  const isFetchingMessages = useAppSelector(selectiIsFetchingMessages);\n  const amountOfRequests = useAppSelector(selectAmountOfRequests);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { fetchMessages } = useMessage();\n  const { goToHome } = useNavigation();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    const resetRequestVariableAndScrollToTop = (): void => {\n      dispatch(setIsNewRequest(false));\n      scrollToTop();\n    };\n\n    protectRoute((): void => {\n      fetchMessages((): void => {\n        isUserChange && dispatch(setStartAmountOfRequests());\n        resetRequestVariableAndScrollToTop();\n      });\n    });\n    return () => {\n      resetRequestVariableAndScrollToTop();\n    };\n  }, []);\n\n  const handleGoBack = (): void => {\n    goToHome();\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2>{t(\"texts.requests.overview.headline\")}</h2>\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\n        <GoBackButton clickHandler={handleGoBack} />\n        {isFetchingMessages ? <WaitSpinner /> : <RequestsCollection />}\n        {amountOfRequests !== 0 && <GoBackButton clickHandler={handleGoBack} />}\n      </div>\n    </div>\n  );\n};\n\nexport default RequestsView;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { User, Plant, Message } from \"../../app/typeDefinitions\";\n\ninterface ReplyThumbnailProps {\n  message: Message;\n}\n\nconst ReplyThumbnail = ({\n  message: { _id, seller, plant },\n}: ReplyThumbnailProps): JSX.Element => {\n  const { name } = plant as Plant;\n  const { username } = seller as User;\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"card p-3 mt-4 \">\n      <h4>\n        {t(\"texts.replies.replyTile.headline\")} \"{name}\"\n      </h4>\n      <h5>\n        {t(\"texts.replies.replyTile.subheadline\")} {username}\n      </h5>\n      <div className=\"text-center\">\n        <Link to={`/replies/fetch/${_id}`} className=\"navigation-link\">\n          <button className=\"[ button button--width-small ] [ btn form-control ]\">\n            {t(\"link.details\")}\n          </button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default ReplyThumbnail;\n","import { useAppSelector } from \"../../app/hooks\";\nimport {\n  selectLoggedInUser,\n  selectMessages,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Message, User } from \"../../app/typeDefinitions\";\nimport ReplyTile from \"./ReplyTile\";\n\nconst RepliesCollection = (): JSX.Element | null => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const messages = useAppSelector(selectMessages);\n\n  return (\n    <div>\n      {messages.map((message: Message): JSX.Element | null => {\n        const { _id, buyer, reply } = message;\n        return (buyer as User)._id === (loggedInUser as User)._id &&\n          reply !== \"\" ? (\n          <ReplyTile message={message} key={_id} />\n        ) : null;\n      })}\n    </div>\n  );\n};\n\nexport default RepliesCollection;\n","import { useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\nimport {\n  selectAmountOfReplies,\n  selectiIsFetchingMessages,\n  selectIsUserChange,\n  selectLoggedInUser,\n  setIsNewReply,\n  setStartAmountOfReplies,\n} from \"../../reducer/jungleSwapSlice\";\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\nimport RepliesCollection from \"../../components/replies/RepliesCollection\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst RepliesView = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isUserChange = useAppSelector(selectIsUserChange);\n  const isFetchingMessages = useAppSelector(selectiIsFetchingMessages);\n  const amountOfReplies = useAppSelector(selectAmountOfReplies);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { fetchMessages } = useMessage();\n  const { goToHome } = useNavigation();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    const resetReplyVariableAndScrollToTop = (): void => {\n      dispatch(setIsNewReply(false));\n      scrollToTop();\n    };\n\n    protectRoute((): void => {\n      fetchMessages((): void => {\n        isUserChange && dispatch(setStartAmountOfReplies());\n        resetReplyVariableAndScrollToTop();\n      });\n    });\n\n    return () => {\n      resetReplyVariableAndScrollToTop();\n    };\n  }, []);\n\n  const handleGoBack = (): void => {\n    goToHome();\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2>{t(\"texts.replies.overview.headline\")}</h2>\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\n        <GoBackButton clickHandler={handleGoBack} />\n        {isFetchingMessages ? <WaitSpinner /> : <RepliesCollection />}\n        {amountOfReplies !== 0 && <GoBackButton clickHandler={handleGoBack} />}\n      </div>\n    </div>\n  );\n};\n\nexport default RepliesView;\n","import { useEffect, useMemo } from \"react\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport {\n  selectErrorMessage,\n  selectIsCreatingMessage,\n  selectLoggedInUser,\n  selectPlant,\n  setErrorMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User, Plant, Message } from \"../../app/typeDefinitions\";\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst RequestCreateForm = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const plant = useAppSelector(selectPlant);\n  const isCreatingMessage = useAppSelector(selectIsCreatingMessage);\n  const errorMessage = useAppSelector(selectErrorMessage);\n  const dispatch = useAppDispatch();\n  const { goBack } = useHistory();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { createMessage } = useMessage();\n  const { scrollToTop } = scroll;\n  const { name } = plant as Plant;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      dispatch(setErrorMessage(null));\n      scrollToTop();\n    });\n  }, []);\n\n  const buttonState = useMemo(\n    (): boolean => (isCreatingMessage ? true : false),\n    [isCreatingMessage]\n  );\n\n  const handleCreateMessageForRequest = (\n    event: React.FormEvent<HTMLFormElement>,\n    { _id, creator }: Plant\n  ): void => {\n    const {\n      target: {\n        request: { value },\n      },\n    } = event as any;\n    const newMessage: Message = {\n      seller: (creator as User)._id,\n      plant: _id,\n      request: value,\n    };\n    event.preventDefault();\n    createMessage(newMessage, (): void => {\n      goBack();\n    });\n  };\n\n  const convertErrorMessage = (errorMessage: string): string => {\n    switch (errorMessage) {\n      case \"Form: Request text missing\":\n        return t(\"errorTexts.messages.createRequest.form.requestTextMissing\");\n      default:\n        return t(\"errorTexts.general\");\n    }\n  };\n\n  const handleGoBack = (): void => {\n    goBack();\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2 className=\"mb-4\">\n          {t(\"texts.requests.createRequest.form.headline\")}\n        </h2>\n        <h3 className=\"mb-4\">\n          {t(\"texts.requests.createRequest.form.subheadline\")} \"{name}\"\n        </h3>\n        <form\n          className=\"request-create-form pl-0\"\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\n            handleCreateMessageForRequest(event, plant);\n          }}\n        >\n          <div>\n            <textarea\n              name=\"request\"\n              cols={35}\n              rows={7}\n              className=\"form-control w-100 mb-4\"\n            />\n          </div>\n          <ErrorMessage\n            message={errorMessage}\n            outputFunction={convertErrorMessage}\n          />\n          <div className=\"text-right\">\n            <button\n              type=\"submit\"\n              disabled={buttonState}\n              className={`\n                [ \n                  button\n                  button--width-small \n                ] \n                [ \n                  btn \n                  btn-sm \n                  form-control \n                  px-4 \n                  mr-0 \n                  mb-4 \n                ]\n              `}\n            >\n              {t(\"button.send\")}\n            </button>\n            <GoBackButton clickHandler={handleGoBack} />\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default RequestCreateForm;\n","import WaitSpinner from \"./WaitSpinner\";\n\ninterface WaitSpinnerTextProps {\n  text: string;\n}\n\nconst WaitSpinnerText = ({ text }: WaitSpinnerTextProps): JSX.Element => {\n  return (\n    <div className=\"container d-flex align-items-center justify-content-center mt-5\">\n      <WaitSpinner />\n      <span className=\"font-weight-bold\">{text}</span>\n    </div>\n  );\n};\n\nexport default WaitSpinnerText;\n","interface ReplyProps {\n  headline: string;\n  text: string | undefined;\n}\n\nconst Reply = ({ headline, text }: ReplyProps): JSX.Element | null => {\n  if (!text) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h5>{headline}</h5>\n      <p className=\"text-field p-3 mb-4\">{text}</p>\n    </div>\n  );\n};\n\nexport default Reply;\n","import { useEffect } from \"react\";\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\nimport {\n  setMessage,\n  decreaseAmountOfRequests,\n  selectLoggedInUser,\n  selectIsFetchingMessage,\n  selectMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User, Plant, Message, MessageId } from \"../../app/typeDefinitions\";\nimport WaitSpinnerText from \"../../components/spinners/WaitSpinnerText\";\nimport Reply from \"../../components/replies/Reply\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst RequestDetails = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isFetchingMessage = useAppSelector(selectIsFetchingMessage);\n  const message = useAppSelector(selectMessage);\n  const { messageId } = useParams<{ messageId: MessageId }>();\n  const dispatch = useAppDispatch();\n  const { goBack } = useHistory();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { fetchMessage, updateMessage } = useMessage();\n  const { goToRequests } = useNavigation();\n  const { scrollToTop } = scroll;\n  const { _id, buyer, plant, request, reply } = message as Message;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      fetchMessage(messageId, (): void => {\n        scrollToTop();\n      });\n    });\n  }, []);\n\n  const handleChangeMessageState = (message: Message): void => {\n    const setBuyerMessageInactive = (message: Message): Message => {\n      const clonedMessage: Message = JSON.parse(JSON.stringify(message));\n      clonedMessage.messageState = false;\n      dispatch(setMessage(clonedMessage));\n      return clonedMessage;\n    };\n\n    const updateBuyerMessage = (updatedMessage: Message) => {\n      updateMessage(updatedMessage, (): void => {\n        dispatch(decreaseAmountOfRequests());\n        goBack();\n      });\n    };\n\n    const updatedMessage = setBuyerMessageInactive(message);\n    updateBuyerMessage(updatedMessage);\n  };\n\n  const handleGoBack = (): void => {\n    goToRequests();\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  if (isFetchingMessage || !buyer || !plant) {\n    return <WaitSpinnerText text={\"Loading request\"} />;\n  }\n  const { name } = plant as Plant;\n  const { username } = buyer as User;\n\n  return (\n    <div className=\"container row mt-5 \">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2 className=\"mb-5\">\n          {t(\"texts.requests.requestDetails.headline\")} {name}\n        </h2>\n        <h5>\n          {t(\"texts.requests.requestDetails.subheadline\")} {username}\n        </h5>\n        <p className=\"[ text-field ] [ p-3 mb-4 ]\">{request}</p>\n        <Reply\n          headline={t(\"texts.requests.requestDetails.yourReply\")}\n          text={reply}\n        />\n        <div className=\"text-right px-3\">\n          {!reply && (\n            <Link to={`/messages/update/${_id}`} className=\"navigation-link\">\n              <button\n                className={`\n                  [ \n                    button\n                    button--width-small \n                  ] \n                  [ \n                    btn \n                    btn-sm \n                    form-control \n                    px-4 \n                    mx-2 \n                    mb-1 \n                  ]\n                `}\n              >\n                {t(\"button.reply\")}\n              </button>\n            </Link>\n          )}\n          <button\n            className={`\n              [ \n                button\n                button--width-small \n              ] \n              [ \n                btn \n                btn-sm \n                form-control \n                px-4\n                ml-2 \n                mr-0 \n                mb-1 \n              ]\n            `}\n            onClick={(): void => {\n              handleChangeMessageState(message);\n            }}\n          >\n            {t(\"button.done\")}\n          </button>\n        </div>\n        <div className=\"text-right px-3\">\n          <GoBackButton clickHandler={handleGoBack} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RequestDetails;\n","import { useEffect, useMemo } from \"react\";\nimport { useParams, useHistory, Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\nimport {\n  decreaseAmountOfReplies,\n  selectIsDeletingMessage,\n  selectIsFetchingMessage,\n  selectLoggedInUser,\n  selectMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User, Plant, Message, MessageId } from \"../../app/typeDefinitions\";\nimport WaitSpinnerText from \"../../components/spinners/WaitSpinnerText\";\nimport Reply from \"../../components/replies/Reply\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst ReplyDetails = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const message = useAppSelector(selectMessage);\n  const isFetchingMessage = useAppSelector(selectIsFetchingMessage);\n  const isDeletingMessage = useAppSelector(selectIsDeletingMessage);\n  const { messageId } = useParams<{ messageId: MessageId }>();\n  const dispatch = useAppDispatch();\n  const { goBack } = useHistory();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { fetchMessage, deleteMessage } = useMessage();\n  const { goToReplies } = useNavigation();\n  const { scrollToTop } = scroll;\n  const { _id, seller, plant, request, reply } = message as Message;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      fetchMessage(messageId, (): void => {\n        scrollToTop();\n      });\n    });\n  }, []);\n\n  const buttonState = useMemo(\n    (): boolean => (isDeletingMessage ? true : false),\n    [isDeletingMessage]\n  );\n\n  const handleDeleteMessage = (messageId: MessageId): void => {\n    deleteMessage(messageId, (): void => {\n      dispatch(decreaseAmountOfReplies());\n      goBack();\n    });\n  };\n\n  const handleGoBack = (): void => {\n    goToReplies();\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  if (isFetchingMessage || !seller || !plant) {\n    return <WaitSpinnerText text={\"Loading reply\"} />;\n  }\n  const { name } = plant as Plant;\n  const { username } = seller as User;\n\n  return (\n    <div className=\"container row mt-5 \">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2 className=\"mb-5\">\n          {t(\"texts.replies.replyDetails.headline\")} {name}\n        </h2>\n        <p className=\"[ text-field ] [ p-3 mb-4 ]\">{request}</p>\n        <Reply\n          headline={`${t(\"texts.replies.replyDetails.replyBy\")} ${username}`}\n          text={reply}\n        />\n        <div className=\"text-right px-3\">\n          <button\n            disabled={buttonState}\n            className={`\n              [\n                button \n                button--width-small\n              ]\n              [\n                btn\n                btn-sm\n                form-control\n                px-4\n                mr-0\n                mb-1\n              ]\n            `}\n            onClick={(): void => {\n              handleDeleteMessage(_id as MessageId);\n            }}\n          >\n            {t(\"button.delete\")}\n          </button>\n        </div>\n        <div className=\"text-right px-3\">\n          <GoBackButton clickHandler={handleGoBack} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReplyDetails;\n","import { useEffect, useMemo } from \"react\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport {\n  selectErrorMessage,\n  selectIsUpdatingMessage,\n  selectLoggedInUser,\n  selectMessage,\n  setMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Message } from \"../../app/typeDefinitions\";\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst RequestUpdateForm = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const message = useAppSelector(selectMessage);\n  const isUpdatingMessage = useAppSelector(selectIsUpdatingMessage);\n  const errorMessage = useAppSelector(selectErrorMessage);\n  const dispatch = useAppDispatch();\n  const { goBack } = useHistory();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { updateMessage } = useMessage();\n  const { scrollToTop } = scroll;\n  const { request } = message as Message;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      scrollToTop();\n    });\n  }, []);\n\n  const buttonState = useMemo(\n    (): boolean => (isUpdatingMessage ? true : false),\n    [isUpdatingMessage]\n  );\n\n  const handleCreateReply = (\n    { target: { value } }: React.ChangeEvent<HTMLTextAreaElement>,\n    message: Message\n  ): void => {\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\n    clonedMessage.reply = value;\n    dispatch(setMessage(clonedMessage));\n  };\n\n  const handleUpdateMessage = (updatedMessage: Message): void => {\n    updateMessage(updatedMessage, (): void => {\n      goBack();\n    });\n  };\n\n  const handleGoBack = () => {\n    goBack();\n  };\n\n  const convertErrorMessage = (errorMessage: string): string => {\n    switch (errorMessage) {\n      case \"Form: Reply text missing\":\n        return t(\"errorTexts.messages.updateRequest.form.replyTextMissing\");\n      default:\n        return t(\"errorTexts.general\");\n    }\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5 \">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-2\">\n        <h2 className=\"mt-5 mb-4\">\n          {t(\"texts.requests.updateRequest.form.headline\")}\n        </h2>\n        <div className=\"[ thumbnail-card thumbnail-card--width-small ] [ card mb-5 ]\">\n          <div className=\"card-body\">\n            <p>{request}</p>\n            <textarea\n              name=\"reply\"\n              placeholder={t(\n                \"texts.requests.updateRequest.form.replyPlaceholder\"\n              )}\n              cols={31}\n              rows={6}\n              className=\"form-control w-100 mb-4\"\n              onChange={(\n                event: React.ChangeEvent<HTMLTextAreaElement>\n              ): void => {\n                handleCreateReply(event, message);\n              }}\n            />\n            <ErrorMessage\n              message={errorMessage}\n              outputFunction={convertErrorMessage}\n            />\n            <div className=\"text-right px-3\">\n              <button\n                disabled={buttonState}\n                className={`\n                  [\n                    button\n                    button--width-small\n                  ]\n                  [\n                    btn \n                    btn-sm \n                    form-control \n                    px-4\n                    mr-0\n                    mb-2\n                  ]                \n                `}\n                onClick={(): void => {\n                  handleUpdateMessage(message);\n                }}\n              >\n                {t(\"button.submit\")}\n              </button>\n              <GoBackButton clickHandler={handleGoBack} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RequestUpdateForm;\n","import { useTranslation } from \"react-i18next\";\n\nconst Unauthorized = (): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <div\n      className={`\n        [\n          unauthorized\n        ]\n        [\n          position-absolute \n          d-flex \n          justify-content-center \n          align-items-center \n          w-100  \n          overflow-hidden\n          text-center\n        ]\n      `}\n    >\n      <div>\n        <h1 className=\"unauthorized__headline\">\n          {t(\"texts.unauthorized.headline\")}\n        </h1>\n        <h2 className=\"[ unauthorized__subheadline1 ] [ mb-4 ]\">\n          {t(\"texts.unauthorized.subheadline1\")}\n        </h2>\n        <h3 className=\"[ unauthorized__subheadline2 ] [ text-uppercase ]\">\n          {t(\"texts.unauthorized.subheadline2\")}\n        </h3>\n      </div>\n    </div>\n  );\n};\n\nexport default Unauthorized;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nconst NotFound = (): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <div\n      className={`\n        [\n          not-found \n        ]\n        [\n          position-absolute \n          d-flex \n          justify-content-center \n          align-items-center \n          w-100  \n          overflow-hidden\n          text-center\n        ]\n      `}\n    >\n      <div>\n        <h1 className=\"not-found__headline\">{t(\"texts.notFound.headline\")}</h1>\n        <h2 className=\"[ not-found__subheadline1 ] [ mb-4 }\">\n          {t(\"texts.notFound.subheadline1\")}\n        </h2>\n        <h3 className=\"[ not-found__subheadline2 ] [ text-uppercase mb-4 ]\">\n          {t(\"texts.notFound.subheadline2\")}\n        </h3>\n        <Link to={\"/\"} className=\"navigation-link\">\n          <button\n            className={`\n              [ \n                button \n                button--width-small \n              ] \n              [ \n                btn \n                btn-sm \n                form-control \n                px-3 \n              ]\n            `}\n          >\n            {t(\"button.takeMeHome\")}\n          </button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import { useEffect } from \"react\";\nimport { useChat } from \"../../app/custom-hooks/useChat\";\n\nconst KommunicateChat = (): JSX.Element => {\n  const { createLauncherIcon } = useChat();\n\n  useEffect(() => {\n    createLauncherIcon(document, (window as any).kommunicate ?? {});\n  }, []);\n\n  return <div />;\n};\n\nexport default KommunicateChat;\n","interface ChatMethods {\n  createLauncherIcon: (htmlDocument: Document, method: any) => void;\n}\n\ninterface KommunicateSettings {\n  appId: string;\n  popupWidget: boolean;\n  automaticChatOpenOnNavigation: boolean;\n}\n\nexport const useChat = (): ChatMethods => {\n  return {\n    createLauncherIcon: (htmlDocument: Document, method: any): void => {\n      const kommunicateSettings: KommunicateSettings = {\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\n        popupWidget: true,\n        automaticChatOpenOnNavigation: true,\n      };\n      const scriptElement = htmlDocument.createElement(\"script\");\n      scriptElement.type = \"text/javascript\";\n      scriptElement.async = true;\n      scriptElement.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\n      const headElement = htmlDocument.getElementsByTagName(\"head\")[0];\n      headElement.appendChild(scriptElement);\n      (window as any).kommunicate = method;\n      method._globals = kommunicateSettings;\n    },\n  };\n};\n","import { useAppSelector } from \"../../app/hooks\";\nimport {\n  selectLoggedInUser,\n  selectPlants,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant, User } from \"../../app/typeDefinitions\";\nimport PlantThumbnail from \"./PlantThumbnail\";\n\nconst PlantsCreatedCollection = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const plants = useAppSelector(selectPlants);\n\n  return (\n    <div\n      className={`\n        row\n        row-cols-1\n        row-cols-md-2\n        row-cols-lg-2\n        row-cols-xl-3\n        row-cols-xxl-3\n      `}\n    >\n      {plants.map((plant: Plant): JSX.Element | null => {\n        const { _id, creator } = plant;\n        return (creator as User)._id === (loggedInUser as User)._id ? (\n          <PlantThumbnail plant={plant} key={_id} />\n        ) : null;\n      })}\n    </div>\n  );\n};\n\nexport default PlantsCreatedCollection;\n","import { useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport {\n  selectIsFetchingPlants,\n  selectLoggedInUser,\n} from \"../../reducer/jungleSwapSlice\";\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\nimport PlantsCreatedCollection from \"../../components/plants/PlantsCreatedCollection\";\n\nconst PlantsCreatedView = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isFetchingPlants = useAppSelector(selectIsFetchingPlants);\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { fetchPlants } = usePlant();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      fetchPlants((): void => {\n        scrollToTop();\n      });\n    });\n  }, []);\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container mt-5\">\n      <div className=\"mt-5 mb-5\">\n        <h2 className=\"plants-created-view__headline\">\n          {t(\"texts.plants.myPlants.headline\")}\n        </h2>\n      </div>\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsCreatedCollection />}\n    </div>\n  );\n};\n\nexport default PlantsCreatedView;\n","import { useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { setErrorMessage } from \"../../reducer/jungleSwapSlice\";\n\ninterface ModalBodyProps {\n  headline: string;\n  subheadline: string;\n  text: string;\n  isClose: boolean;\n}\n\nconst ModalBody = ({\n  headline,\n  subheadline,\n  text,\n  isClose,\n}: ModalBodyProps): JSX.Element => {\n  const divElementRef = useRef<HTMLDivElement | null>(null);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n\n  const handleCloseModal = (): void => {\n    dispatch(setErrorMessage(null));\n  };\n\n  const handleClickOutside = ({ target }: any): void => {\n    if (divElementRef.current === target && isClose) {\n      handleCloseModal();\n    }\n  };\n\n  return (\n    <div\n      ref={divElementRef}\n      className={`\n        [ modal-body ]\n        [ \n          fixed-top\n          w-100\n          h-100\n          d-flex\n          justify-content-center\n          align-items-center\n          flex-col\n        ]\n      `}\n      onClick={handleClickOutside}\n    >\n      <div className=\"[ modal-body__box ] [ text-center ]\">\n        <h1 className=\"[ modal-body__box__headline ] [ mt-3 mb-4 ]\">\n          {headline}\n        </h1>\n        <h2 className=\"[ modal-body__box__subheadline ] [ mb-5 ]\">\n          {subheadline}\n        </h2>\n        <h3 className=\"[ modal-body__box__text ] [ text-uppercase mb-5 ]\">\n          {text}\n        </h3>\n        {isClose && (\n          <button\n            className={`\n              [ \n                button \n                button--width-small \n              ] \n              [ \n                btn \n                form-control \n                mt-4 \n                mb-3 \n              ]\n            `}\n            onClick={handleCloseModal}\n          >\n            {t(\"button.proceed\")}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ModalBody;\n","import { useTranslation } from \"react-i18next\";\nimport ModalBody from \"./ModalBody\";\n\ninterface ErrorModalProps {\n  message: string | null;\n}\n\nconst ErrorModal = ({ message }: ErrorModalProps): JSX.Element | null => {\n  const { t } = useTranslation();\n\n  const convertErrorMessage = (message: string): string => {\n    switch (message) {\n      // Authentification\n      case \"Error while creating user\":\n        return t(\"errorTexts.auth.signUp.errorWhileCreatingUser\");\n      case \"User does not exist\":\n        return t(\"errorTexts.auth.signIn.userUnknown\");\n      case \"Could not update user\":\n        return t(\"errorTexts.auth.logOut.noUserUpdate\");\n      // Plants\n      case \"Create plant failed\":\n        return t(\"errorTexts.plants.createPlantFailed\");\n      case \"Fetch plant failed\":\n        return t(\"errorTexts.plants.fetchPlantFailed\");\n      case \"Fetch all plants failed\":\n        return t(\"errorTexts.plants.techAllPlantsFailed\");\n      case \"Search plant failed\":\n        return t(\"errorTexts.plants.searchPlantFailed\");\n      case \"Update plant failed\":\n        return t(\"errorTexts.plants.updatePlantFailed\");\n      case \"Delete plant failed\":\n        return t(\"errorTexts.plants.deletePlantFailed\");\n      // Messages\n      case \"Create message failed\":\n        return t(\"errorTexts.messages.createMessageFailed\");\n      case \"Fetch message failed\":\n        return t(\"errorTexts.messages.fetchMessageFailed\");\n      case \"Fetch all messages failed\":\n        return t(\"errorTexts.messages.fetchAllMessagesFailed\");\n      case \"Update message failed\":\n        return t(\"errorTexts.updateMessageFailed\");\n      case \"Delete message failed\":\n        return t(\"errorTexts.deleteMessageFailed\");\n      default:\n        return t(\"errorTexts.general\");\n    }\n  };\n\n  if (!message || message.includes(\"Form\")) {\n    return null;\n  }\n\n  return (\n    <ModalBody\n      headline={t(\"texts.errorModal.headline\")}\n      subheadline={t(\"texts.errorModal.subheadline\")}\n      text={convertErrorMessage(message)}\n      isClose={true}\n    />\n  );\n};\n\nexport default ErrorModal;\n","import { useTranslation } from \"react-i18next\";\nimport ModalBody from \"./ModalBody\";\n\ninterface OfflineModalProps {\n  isOnline: boolean;\n}\n\nconst OfflineModal = ({ isOnline }: OfflineModalProps): JSX.Element | null => {\n  const { t } = useTranslation();\n\n  if (isOnline) {\n    return null;\n  }\n\n  return (\n    <ModalBody\n      headline={t(\"texts.offlineModal.headline\")}\n      subheadline={t(\"texts.offlineModal.subheadline\")}\n      text={t(\"errorTexts.offline\")}\n      isClose={false}\n    />\n  );\n};\n\nexport default OfflineModal;\n","import { useAppSelector } from \"../../app/hooks\";\nimport { useOnlineStatus } from \"../../app/custom-hooks/useOnlineStatus\";\nimport ErrorModal from \"./ErrorModal\";\nimport OfflineModal from \"./OfflineModal\";\nimport { selectErrorMessage } from \"../../reducer/jungleSwapSlice\";\n\nconst Modals = (): JSX.Element => {\n  const errorMessage = useAppSelector(selectErrorMessage);\n  const isOnline = useOnlineStatus();\n\n  if (isOnline) {\n    return <ErrorModal message={errorMessage} />;\n  }\n  return <OfflineModal isOnline={isOnline} />;\n};\n\nexport default Modals;\n","import { useState, useEffect } from \"react\";\n\nexport const useOnlineStatus = (): boolean => {\n  const [isOnline, setIsOnline] = useState<boolean>(true);\n\n  useEffect(() => {\n    const handleOfflineEventCallback = (): void => {\n      setIsOnline(false);\n    };\n\n    const handleOnlineEventCallback = (): void => {\n      setIsOnline(true);\n    };\n\n    window.addEventListener(\"offline\", handleOfflineEventCallback);\n    window.addEventListener(\"online\", handleOnlineEventCallback);\n\n    return () => {\n      window.removeEventListener(\"offline\", handleOfflineEventCallback);\n      window.removeEventListener(\"online\", handleOnlineEventCallback);\n    };\n  }, []);\n\n  return isOnline;\n};\n","import { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { selectIsLanguageChange } from \"../../reducer/jungleSwapSlice\";\n\ninterface AccordionItemProps {\n  header: String;\n  body: String;\n}\n\nconst AccordionItem = ({ header, body }: AccordionItemProps): JSX.Element => {\n  const isLanguageChange = useAppSelector(selectIsLanguageChange);\n  const [isBodyVisible, setIsBodyVisible] = useState<boolean>(false);\n  const divBodyRef = useRef<HTMLDivElement>(null);\n\n  useEffect((): void => {\n    const accordionItemBody = divBodyRef.current;\n\n    if (accordionItemBody) {\n      if (isBodyVisible) {\n        accordionItemBody.style.height = `${accordionItemBody.scrollHeight}px`;\n      } else {\n        accordionItemBody.style.height = \"0\";\n      }\n    }\n  }, [isBodyVisible]);\n\n  useEffect((): void => {\n    const accordionItemBody = divBodyRef.current;\n\n    if (isBodyVisible && accordionItemBody) {\n      accordionItemBody.style.height = \"auto\";\n      accordionItemBody.style.height = `${accordionItemBody.scrollHeight}px`;\n    }\n  }, [isLanguageChange]);\n\n  const headerState = useMemo(\n    (): string => (isBodyVisible ? \"accordion-item__header--is-active\" : \"\"),\n    [isBodyVisible]\n  );\n\n  const imageState = useMemo(\n    (): string =>\n      isBodyVisible ? \"accordion-item__header__imagebox__image--is-active\" : \"\",\n    [isBodyVisible]\n  );\n\n  const handleClickButton = () => {\n    setIsBodyVisible(!isBodyVisible);\n  };\n\n  return (\n    <div className=\"accordion-item\">\n      <div className={`accordion-item__header ${headerState}`}>\n        <button\n          type=\"button\"\n          className={`\n            [ \n              accordion-item__header__button \n            ] \n            [ \n              d-flex \n              flex-row \n              justify-content-between \n              align-items-start \n              w-100 \n              text-left \n              p-2 \n              border-0 \n            ]\n          `}\n          onClick={handleClickButton}\n        >\n          <h4 className=\"[ accordion-item__header__text ] [ mx-0 mt-1 mb-1 ]\">\n            {header}\n          </h4>\n          <div className=\"[ accordion-item__header__imagebox ] [ mx-2 mt-1 ]\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 512 412\"\n              className={`[ accordion-item__header__imagebox__image ${imageState} ] [ w-full h-100 ]`}\n            >\n              <path d=\"M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z\" />\n            </svg>\n          </div>\n        </button>\n      </div>\n      <div\n        ref={divBodyRef}\n        className={`\n          [ \n            accordion-item__body \n          ] \n          [ \n            pt-0 \n            pt-1 \n            px-1 \n            overflow-hidden \n          ]\n        `}\n      >\n        <div className=\"pb-1\">\n          <div className=\"px-1 py-1\">\n            <p>{body}</p>\n          </div>\n        </div>\n      </div>\n      <hr className=\"mx-1 my-0\" />\n    </div>\n  );\n};\n\nexport default AccordionItem;\n","import { AccordionItemData } from \"../../app/typeDefinitions\";\nimport AccordionItem from \"./AccordionItem\";\n\ninterface AccordionProps {\n  data: AccordionItemData[];\n}\n\nconst Accordion = ({ data }: AccordionProps): JSX.Element => {\n  return (\n    <div className=\"mb-5\">\n      {data.map(({ headerText, bodyText }) => (\n        <AccordionItem header={headerText} body={bodyText} />\n      ))}\n    </div>\n  );\n};\n\nexport default Accordion;\n","import { useTranslation } from \"react-i18next\";\nimport { useFaqData } from \"../../app/custom-hooks/useFaqData\";\nimport Accordion from \"../../components/faq/Accordion\";\n\nconst FaqView = () => {\n  const { t } = useTranslation();\n  const faqData = useFaqData();\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-12 col-md-6 offset-md-4 mt-5\">\n        <h2 className=\"text-left mb-5\">{t(\"texts.faq.overview.headline\")}</h2>\n      </div>\n      <div className=\"col-12 col-md-6 offset-md-4\">\n        <Accordion data={faqData} />\n      </div>\n    </div>\n  );\n};\n\nexport default FaqView;\n","import { useTranslation } from \"react-i18next\";\nimport { AccordionItemData } from \"../typeDefinitions\";\n\nexport const useFaqData = (): AccordionItemData[] => {\n  const { t } = useTranslation();\n\n  return [\n    {\n      headerText: t(\"texts.faq.item1.header\"),\n      bodyText: t(\"texts.faq.item1.body\"),\n    },\n    {\n      headerText: t(\"texts.faq.item2.header\"),\n      bodyText: t(\"texts.faq.item2.body\"),\n    },\n    {\n      headerText: t(\"texts.faq.item3.header\"),\n      bodyText: t(\"texts.faq.item3.body\"),\n    },\n    {\n      headerText: t(\"texts.faq.item4.header\"),\n      bodyText: t(\"texts.faq.item4.body\"),\n    },\n  ];\n};\n","import { Route, Switch, withRouter } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport NavBar from \"./components/navigation/NavBar\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./views/home/Home\";\nimport SignUp from \"./views/auth/SignUp\";\nimport SignIn from \"./views/auth/SignIn\";\nimport LogOut from \"./components/auth/LogOut\";\nimport PlantCreateForm from \"./views/plants/PlantCreateForm\";\nimport PlantDetails from \"./views/plants/PlantDetails\";\nimport PlantUpdateForm from \"./views/plants/PlantUpdateForm\";\nimport PaymentCheckoutView from \"./views/apis/PaymentCheckoutView\";\nimport RequestsView from \"./views/requests/RequestsView\";\nimport RepliesView from \"./views/replies/RepliesView\";\nimport RequestCreateForm from \"./views/requests/RequestCreateForm\";\nimport RequestDetails from \"./views/requests/RequestDetails\";\nimport ReplyDetails from \"./views/replies/ReplyDetails\";\nimport RequestUpdateForm from \"./views/requests/RequestUpdateForm\";\nimport Unauthorized from \"./views/auth/Unauthorized\";\nimport NotFound from \"./views/errors/NotFound\";\nimport KommunicateChat from \"./components/apis/KommunicateChat\";\nimport PlantsCreatedView from \"./views/plants/PlantsCreatedView\";\nimport Modals from \"./components/modals/Modals\";\nimport FaqView from \"./views/faq/FaqView\";\n\nconst App = (): JSX.Element => {\n  return (\n    <div>\n      <NavBar />\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n\n        {/* Authentification */}\n        <Route path=\"/auth/sign-up\">\n          <SignUp />\n        </Route>\n        <Route path=\"/auth/sign-in\">\n          <SignIn />\n        </Route>\n        <Route path=\"/auth/log-out\">\n          <LogOut />\n        </Route>\n        <Route path=\"/auth/unauthorized\">\n          <Unauthorized />\n        </Route>\n\n        {/* Plants */}\n        <Route path=\"/plants/create\">\n          <PlantCreateForm />\n        </Route>\n        <Route path=\"/plants/fetch/:plantId\">\n          <PlantDetails />\n        </Route>\n        <Route path=\"/plants/update\">\n          <PlantUpdateForm />\n        </Route>\n        <Route path=\"/plants/checkout\">\n          <PaymentCheckoutView />\n        </Route>\n        <Route path=\"/plants/my-own\">\n          <PlantsCreatedView />\n        </Route>\n\n        {/* Messages */}\n        <Route path=\"/messages/create\">\n          <RequestCreateForm />\n        </Route>\n        <Route path=\"/messages/update\">\n          <RequestUpdateForm />\n        </Route>\n\n        {/* Requests */}\n        <Route path=\"/requests/fetch-all\">\n          <RequestsView />\n        </Route>\n        <Route path=\"/requests/fetch/:messageId\">\n          <RequestDetails />\n        </Route>\n\n        {/* Replies */}\n        <Route path=\"/replies/fetch-all\">\n          <RepliesView />\n        </Route>\n        <Route path=\"/replies/fetch/:messageId\">\n          <ReplyDetails />\n        </Route>\n\n        {/* FAQ */}\n        <Route path=\"/faq\">\n          <FaqView />\n        </Route>\n        <Route path=\"/replies/fetch/:messageId\">\n          <ReplyDetails />\n        </Route>\n\n        <Route component={NotFound} />\n      </Switch>\n      <KommunicateChat />\n      <Modals />\n      <Footer />\n    </div>\n  );\n};\n\nexport default withRouter(App);\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    fallbackLng: \"en\",\n    ns: [\"translation\"],\n    defaultNS: \"translation\",\n    backend: {\n      loadPath: \"/locales/{{lng}}/{{ns}}.json\",\n    },\n    debug: false,\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\nimport App from \"./App\";\nimport \"./app/i18next.config\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <Suspense fallback=\"loading\">\n          <App />\n        </Suspense>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}