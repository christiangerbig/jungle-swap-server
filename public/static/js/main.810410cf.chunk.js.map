{"version":3,"sources":["hooks.ts","reducer/jungleSwapSlice.ts","config.ts","custom-hooks/useIntervalCounter.ts","lib/messageIO.ts","components/navigation/NavAuthentificationItems.tsx","components/navigation/NavUserItems.tsx","components/navigation/NavAdditionalItems.tsx","components/navigation/NavBar.tsx","components/Footer.tsx","lib/externalLinkPaths.ts","lib/plantIO.ts","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/home/HomeAbout.tsx","components/spinners/WaitSpinner.tsx","components/plants/PlantSearch.tsx","components/plants/PlantThumbnail.tsx","components/plants/PlantsCollection.tsx","components/plants/PlantsCockpit.tsx","components/home/HomeTitle.tsx","views/home/Home.tsx","custom-hooks/useAuthentification.ts","components/helpers/ErrorMessage.tsx","views/authentification/SignUp.tsx","views/authentification/SignIn.tsx","components/authentification/LogOut.tsx","lib/routing.ts","lib/plantImageIO.ts","views/plants/PlantCreateForm.tsx","components/plants/PlantDetailsBuyerChoice.tsx","components/plants/PlantDetailsCreatorChoice.tsx","components/plants/PlantDetailsUserChoice.tsx","components/plants/PlantItems.tsx","views/plants/PlantDetails.tsx","views/plants/PlantUpdateForm.tsx","lib/paymentIO.ts","components/apis/CheckoutForm.tsx","views/apis/CheckoutView.tsx","components/requests/RequestTile.tsx","components/requests/RequestsCollection.tsx","lib/MainPageScrolling.ts","components/helpers/GoBackButton.tsx","views/requests/RequestsView.tsx","components/replies/ReplyTile.tsx","components/replies/RepliesCollection.tsx","views/replies/RepliesView.tsx","views/requests/RequestCreateForm.tsx","components/spinners/WaitSpinnerText.tsx","components/replies/Reply.tsx","views/requests/RequestDetails.tsx","views/replies/ReplyDetails.tsx","views/requests/RequestUpdateForm.tsx","views/authentification/Unauthorized.tsx","views/errors/NotFound.tsx","components/apis/KommunicateChat.tsx","components/plants/PlantsCreatedCollection.tsx","views/plants/PlantsCreatedView.tsx","custom-hooks/useOnlineStatus.tsx","components/modals/ModalBody.tsx","components/modals/ErrorModal.tsx","components/modals/OfflineModal.tsx","components/modals/Modals.tsx","App.tsx","store.ts","locales/en.ts","i18n.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","apiPath","process","rejectWithValue","data","Error","signUp","createAsyncThunk","newUser","a","axios","post","response","error","signIn","user","withCredentials","logOut","checkUserLoggedIn","get","createPlant","newPlant","fetchAllPlants","fetchQueryPlants","query","fetchPlant","plantId","updatePlant","updatedPlant","patch","deletePlant","delete","uploadPlantImage","uploadForm","deletePlantImage","destroyImageData","createPayment","plant","price","createMessage","newMessage","fetchAllMessages","fetchMessage","messageId","updateMessage","updatedMessage","deleteMessage","jungleSwapSlice","createSlice","name","initialState","isUserChange","loggedInUser","isCreatingPlant","isFetchingPlants","isFetchingPlant","isUpdatingPlant","isDeletingPlant","plants","filteredPlants","numberOfVisibleEntries","isUploadingPlantImage","isDeletingPlantImage","clientSecret","isCreatingMessage","isFetchingMessages","isFetchingMessage","isUpdatingMessage","isDeletingMessage","messages","message","isNewRequest","isNewReply","amountOfRequests","amountOfReplies","intervalId","delayCounter","titleSectionHeight","aboutSectionHeight","errorMessage","reducers","setIsUserChange","state","action","payload","setLoggedInUser","setIsCreatingPlant","setIsFetchingPlants","setIsFetchingPlant","setIsUpdatingPlant","setIsDeletingPlant","addPlant","push","setPlant","setPlants","setFilteredPlants","setPlantChanges","_id","description","size","imageUrl","imagePublicId","location","map","singlePlant","removePlant","filter","setNumberOfVisibleEntries","setIsUploadingPlantImage","setIsDeletingPlantImage","setDestroyImageData","setClientSecret","setIsCreatingMessage","setIsFetchingMessages","setIsFetchingMessage","setIsUpdatingMessage","setIsDeletingMessage","addMessage","setMessages","setMessage","setMessageChanges","buyer","seller","request","reply","messageState","singleMessage","removeMessage","setIsNewRequest","setIsNewReply","setStartAmountOfRequests","setStartAmountOfReplies","setAmountOfRequests","setAmountOfReplies","decreaseAmountOfRequests","decreaseAmountOfReplies","setIntervalId","setDelayCounter","increaseDelayCounter","setTitleSectionHeight","setAboutSectionHeight","scrollToAbout","scroll","scrollTo","scrollToPlants","setErrorMessage","extraReducers","builder","addCase","fulfilled","rejected","actions","useIntervalCounter","dispatch","stop","clearInterval","MessageIO","create","callbackFunction","unwrap","then","catch","rejectedValue","fetch","fetchAll","fetchCheck","update","deleteRemaining","forEach","checkNewRequests","currentAmountOfRequests","checkAmountOfRequests","length","calculateAmountOfRequests","checkNewReplies","currentAmountOfReplies","checkAmountOfReplies","calculateAmountOfReplies","this","NavAuthentificationItems","t","useTranslation","to","className","NavUserItems","jungleSwap","title","icon","faBell","username","NavAdditionalItems","NavBar","intervalCounter","useEffect","setInterval","startInterval","messageIO","checkNewRequestsReplies","Navbar","variant","expand","fixed","Brand","onClick","scrollToTop","Toggle","aria-controls","Collapse","id","Nav","faSearch","Footer","year","Date","getFullYear","pathname","target","rel","PlantIO","value","search","HomeAbout","src","plantsImage","loading","alt","plantPotIcon","WaitSpinner","role","PlantSearch","useState","setQuery","setFilter","plantIO","fetchPlantQueryByName","filterPlantsByLocation","type","placeholder","onChange","event","PlantThumbnail","PlantsCollection","index","PlantsCockpit","HomeTitle","Home","elementRef","useRef","elementHeight","Math","round","getBoundingClientRect","height","current","ref","titleSection","aboutSection","useAuthentification","ErrorMessage","outputFunction","includes","SignUp","history","useHistory","authentification","onSubmit","email","password","toLowerCase","preventDefault","handleSignUp","htmlFor","formNoValidate","SignIn","handleSignIn","LogOut","updateUserData","clonedUser","JSON","parse","stringify","updateUserRequestsReplies","Routing","protect","PlantImageIO","uploadImageData","PlantCreateForm","image","plantImage","files","FormData","append","handleUploadPlantImage","min","disabled","goBack","PlantDetailsBuyerItems","PlantDetailsCreatorChoice","PlantDetailsUserChoice","isCreator","PlantDetailsBuyerChoice","PlantItems","creator","PlantDetails","useParams","PlantUpdateForm","selectElementRef","setPlantLocation","handlePlantEntryChange","clonedPlant","handlePlantImageChange","PaymentIO","initialize","payment","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","handleInputChanges","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","stripePromise","loadStripe","CheckoutView","RequestTile","RequestsCollection","MainPageScrolling","toTop","GoBackButton","RequestsView","resetRequestVariableAndScrollToTop","ReplyThumbnail","RepliesCollection","ReplyTile","RepliesView","resetReplyVariableAndScrollToTop","RequestCreateForm","handleCreateMessageForRequest","cols","rows","WaitSpinnerText","text","Reply","headline","RequestDetails","clonedMessage","setBuyerMessageInactive","handleChangeMessageState","ReplyDetails","handleDeleteMessage","RequestUpdateForm","handleCreateReply","Unauthorized","NotFound","KommunicateChat","htmlDocument","method","scriptElement","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","createLauncherIcon","document","PlantsCreatedCollection","PlantsCreatedView","OnlineStatusContext","createContext","OnlineStatusProvider","children","onlineStatus","setOnlineStatus","handleOfflineEventCallback","handleOnlineEventCallback","addEventListener","removeEventListener","Provider","ModalBody","subheadline","isClose","divElementRef","handleCloseModal","handleClickOutside","ErrorModal","convertErrorMessage","OfflineModal","isOnline","Modals","useContext","withRouter","exact","path","component","store","configureStore","reducer","en","translations","link","allPlants","myPlants","requests","replies","tryIt","details","tooltipps","newRequest","newReply","button","save","send","submit","buy","swap","done","more","proceed","takeMeHome","select","sun","shade","sunAndShade","texts","home","about","paragraph","line1","line2","line3","line4","line5","line6","searchPlant","namePlaceholder","enterPlaceholder","alreadyAccountCreated","form","plantThumbnail","currency","plantDetails","sizeUnit","likes","checkout","payNow","paymentSuccessful","createRequest","updateRequest","replyPlaceholder","overview","requestDetails","yourReply","requestTile","replyDetails","replyBy","replyTile","notFound","subheadline1","subheadline2","unauthorized","footer","copyright","appAuthor1","appAuthor2","errorModal","offlineModal","errorTexts","usernameMissing","emailMissing","passwordMissing","emailFormatInvalid","passwordInvalid","userAlreadyExists","errorWhileCreatingUser","noMatchPasswords","userUnknown","noUserUpdate","nameMissing","descriptionMissing","sizeMissing","locationMissing","priceMissing","imageMissing","noImageSelected","createPlantFailed","fetchPlantFailed","fetchAllPlantsFailed","updatePlantFailed","deletePlantFailed","requestTextMissing","replyTextMissing","createMessageFailed","fetchMessageFailed","fetchAllMessagesFailed","updateMessageFailed","deleteMessageFailed","offline","general","i18n","use","initReactI18next","init","resources","fallbackLng","debug","ns","defaultNS","interpolation","escapeValue","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.810410cf.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  User,\r\n  Plant,\r\n  PlantId,\r\n  Message,\r\n  MessageId,\r\n  DestroyImageData,\r\n  IntervalId,\r\n} from \"../typeDefinitions\";\r\n\r\ntype ErrorMessage = string | null;\r\n\r\ninterface InitialState {\r\n  // ----- User authentication -----\r\n  isUserChange: boolean;\r\n  loggedInUser: User | null;\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: boolean;\r\n  isFetchingPlants: boolean;\r\n  isFetchingPlant: boolean;\r\n  isUpdatingPlant: boolean;\r\n  isDeletingPlant: boolean;\r\n  plant: Plant | {};\r\n  plants: Plant[];\r\n  filteredPlants: Plant[];\r\n  numberOfVisibleEntries: number;\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: boolean;\r\n  isDeletingPlantImage: boolean;\r\n  destroyImageData: DestroyImageData | null;\r\n\r\n  // ----- Payment -----\r\n  clientSecret: string;\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: boolean;\r\n  isFetchingMessages: boolean;\r\n  isFetchingMessage: boolean;\r\n  isUpdatingMessage: boolean;\r\n  isDeletingMessage: boolean;\r\n  messages: Message[];\r\n  message: Message | {};\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: boolean;\r\n  isNewReply: boolean;\r\n  amountOfRequests: number;\r\n  amountOfReplies: number;\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: IntervalId;\r\n  delayCounter: number;\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: number;\r\n  aboutSectionHeight: number;\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: ErrorMessage;\r\n}\r\n\r\ninterface UpdatePlantParameters {\r\n  plantId: PlantId;\r\n  updatedPlant: Plant;\r\n}\r\n\r\ninterface UpdateMessageParameters {\r\n  messageId: MessageId;\r\n  updatedMessage: Message;\r\n}\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\nconst initialState: InitialState = {\r\n  // ----- User authentication -----\r\n  isUserChange: false,\r\n  loggedInUser: null,\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: false,\r\n  isFetchingPlants: false,\r\n  isFetchingPlant: false,\r\n  isUpdatingPlant: false,\r\n  isDeletingPlant: false,\r\n  plant: {},\r\n  plants: [],\r\n  filteredPlants: [],\r\n  numberOfVisibleEntries: 6,\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: false,\r\n  isDeletingPlantImage: false,\r\n  destroyImageData: null,\r\n\r\n  // ----- Payment -----\r\n  clientSecret: \"\",\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: false,\r\n  isFetchingMessages: false,\r\n  isFetchingMessage: false,\r\n  isUpdatingMessage: false,\r\n  isDeletingMessage: false,\r\n  messages: [],\r\n  message: {},\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: false,\r\n  isNewReply: false,\r\n  amountOfRequests: 0,\r\n  amountOfReplies: 0,\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: null,\r\n  delayCounter: 0,\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: 0,\r\n  aboutSectionHeight: 0,\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: null,\r\n};\r\n\r\nconst rejectWithValue = (data: any): void | PromiseLike<void> => {\r\n  throw new Error(data);\r\n};\r\n\r\n// ----- User authentification -----\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (newUser: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-up`, newUser);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async (user: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-in`, user, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (user: User): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/auth/log-out`, user, {\r\n        withCredentials: true,\r\n      });\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const checkUserLoggedIn = createAsyncThunk(\r\n  \"jungleSwap/checkUserLoggedIn\",\r\n  async (): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/auth/check-user`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Plants -----\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async (newPlant: Plant): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/plants/create`, newPlant, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async (): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query: string): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchPlant = createAsyncThunk(\r\n  \"jungleSwap/fetchPlant\",\r\n  async (plantId: PlantId): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async ({\r\n    plantId,\r\n    updatedPlant,\r\n  }: UpdatePlantParameters): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (plantId: PlantId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Images -----\r\nexport const uploadPlantImage = createAsyncThunk(\r\n  \"jungleSwap/uploadPlantImage\",\r\n  async (uploadForm: FormData): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/cloudinary/upload`,\r\n        uploadForm\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlantImage = createAsyncThunk(\r\n  \"jungleSwap/deletePlantImage\",\r\n  async (destroyImageData: DestroyImageData): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/cloudinary/destroy`, destroyImageData);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Payment -----\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant: Plant): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/stripe/create-payment-intent`,\r\n        {\r\n          price: plant.price,\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Messages -----\r\nexport const createMessage = createAsyncThunk(\r\n  \"jungleSwap/createMessage\",\r\n  async (newMessage: Message): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/messages/create`,\r\n        newMessage,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllMessages = createAsyncThunk(\r\n  \"jungleSwap/fetchAllMessages\",\r\n  async (): Promise<Message[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/messages/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchMessage = createAsyncThunk(\r\n  \"jungleSwap/fetchMessage\",\r\n  async (messageId: MessageId): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${apiPath}/messages/fetch/${messageId}`,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updateMessage = createAsyncThunk(\r\n  \"jungleSwap/updateMessage\",\r\n  async ({\r\n    messageId,\r\n    updatedMessage,\r\n  }: UpdateMessageParameters): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/messages/update/${messageId}`,\r\n        updatedMessage\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteMessage = createAsyncThunk(\r\n  \"jungleSwap/deleteMessage\",\r\n  async (messageId: MessageId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    // ----- User authentication ------\r\n    setIsUserChange: (state, action: PayloadAction<boolean>) => {\r\n      state.isUserChange = action.payload;\r\n    },\r\n    setLoggedInUser: (state, action: PayloadAction<User | null>) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n\r\n    // ----- Plants ------\r\n    setIsCreatingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isCreatingPlant = action.payload;\r\n    },\r\n    setIsFetchingPlants: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingPlants = action.payload;\r\n    },\r\n    setIsFetchingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingPlant = action.payload;\r\n    },\r\n    setIsUpdatingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isUpdatingPlant = action.payload;\r\n    },\r\n    setIsDeletingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingPlant = action.payload;\r\n    },\r\n    addPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plants.push(action.payload);\r\n    },\r\n    setPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plant = action.payload;\r\n    },\r\n    setPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.plants = action.payload;\r\n    },\r\n    setFilteredPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.filteredPlants = action.payload;\r\n    },\r\n    setPlantChanges: (state, action: PayloadAction<Plant>) => {\r\n      const {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      } = action.payload;\r\n      state.plants = state.plants.map((singlePlant: Plant): Plant => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, action: PayloadAction<PlantId>) => {\r\n      state.plants = state.plants.filter(\r\n        (plant: Plant): boolean => plant._id !== action.payload\r\n      );\r\n    },\r\n    setNumberOfVisibleEntries: (state, action: PayloadAction<number>) => {\r\n      state.numberOfVisibleEntries = action.payload;\r\n    },\r\n\r\n    // ----- Images -----\r\n    setIsUploadingPlantImage: (state, action: PayloadAction<boolean>) => {\r\n      state.isUploadingPlantImage = action.payload;\r\n    },\r\n    setIsDeletingPlantImage: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingPlantImage = action.payload;\r\n    },\r\n    setDestroyImageData: (\r\n      state,\r\n      action: PayloadAction<DestroyImageData | null>\r\n    ) => {\r\n      state.destroyImageData = action.payload;\r\n    },\r\n\r\n    // ----- Payment -----\r\n    setClientSecret: (state, action: PayloadAction<string>) => {\r\n      state.clientSecret = action.payload;\r\n    },\r\n\r\n    // ----- Messages -----\r\n    setIsCreatingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isCreatingMessage = action.payload;\r\n    },\r\n    setIsFetchingMessages: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingMessages = action.payload;\r\n    },\r\n    setIsFetchingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingMessage = action.payload;\r\n    },\r\n    setIsUpdatingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isUpdatingMessage = action.payload;\r\n    },\r\n    setIsDeletingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingMessage = action.payload;\r\n    },\r\n    addMessage: (state, action: PayloadAction<Message>) => {\r\n      state.messages.push(action.payload);\r\n    },\r\n    setMessages: (state, action: PayloadAction<Message[]>) => {\r\n      state.messages = action.payload;\r\n    },\r\n    setMessage: (state, action: PayloadAction<Message>) => {\r\n      state.message = action.payload;\r\n    },\r\n    setMessageChanges: (state, action: PayloadAction<Message>) => {\r\n      const { _id, buyer, seller, plant, request, reply, messageState } =\r\n        action.payload;\r\n      state.messages = state.messages.map((singleMessage) => {\r\n        if (singleMessage._id === _id) {\r\n          singleMessage.buyer = buyer;\r\n          singleMessage.seller = seller;\r\n          singleMessage.plant = plant;\r\n          singleMessage.request = request;\r\n          singleMessage.reply = reply;\r\n          singleMessage.messageState = messageState;\r\n        }\r\n        return singleMessage;\r\n      });\r\n    },\r\n    removeMessage: (state, action: PayloadAction<MessageId>) => {\r\n      state.messages = state.messages.filter((message: Message): boolean => {\r\n        return message._id !== action.payload;\r\n      });\r\n    },\r\n\r\n    // ----- Requests/Replies check ------\r\n    setIsNewRequest: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewRequest = action.payload;\r\n    },\r\n    setIsNewReply: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewReply = action.payload;\r\n    },\r\n    setStartAmountOfRequests: (state) => {\r\n      state.amountOfRequests = (state.loggedInUser as any).amountOfRequests;\r\n    },\r\n    setStartAmountOfReplies: (state) => {\r\n      state.amountOfReplies = (state.loggedInUser as any).amountOfReplies;\r\n    },\r\n    setAmountOfRequests: (state, action: PayloadAction<number>) => {\r\n      state.amountOfRequests = action.payload;\r\n    },\r\n    setAmountOfReplies: (state, action: PayloadAction<number>) => {\r\n      state.amountOfReplies = action.payload;\r\n    },\r\n    decreaseAmountOfRequests: (state) => {\r\n      state.amountOfRequests -= 1;\r\n    },\r\n    decreaseAmountOfReplies: (state) => {\r\n      state.amountOfReplies -= 1;\r\n    },\r\n\r\n    // ----- Interval counter -----\r\n    setIntervalId: (state, action: PayloadAction<IntervalId>) => {\r\n      state.intervalId = action.payload;\r\n    },\r\n    setDelayCounter: (state, action: PayloadAction<number>) => {\r\n      state.delayCounter = action.payload;\r\n    },\r\n    increaseDelayCounter: (state) => {\r\n      state.delayCounter += 1;\r\n    },\r\n\r\n    // ----- Pages handling -----\r\n    setTitleSectionHeight: (state, action: PayloadAction<number>) => {\r\n      state.titleSectionHeight = action.payload;\r\n    },\r\n    setAboutSectionHeight: (state, action: PayloadAction<number>) => {\r\n      state.aboutSectionHeight = action.payload;\r\n    },\r\n    scrollToAbout: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight);\r\n    },\r\n    scrollToPlants: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight + state.aboutSectionHeight);\r\n    },\r\n\r\n    // ----- Error handling -----\r\n    setErrorMessage: (state, action: PayloadAction<ErrorMessage>) => {\r\n      state.errorMessage = action.payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    // ----- Plants ------\r\n    builder.addCase(createPlant.fulfilled, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(createPlant.rejected, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchPlant.fulfilled, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(fetchPlant.rejected, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.fulfilled, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.rejected, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.fulfilled, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.rejected, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n\r\n    // ----- Images -----\r\n    builder.addCase(uploadPlantImage.fulfilled, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(uploadPlantImage.rejected, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.fulfilled, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.rejected, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n\r\n    // ----- Messages -----\r\n    builder.addCase(createMessage.fulfilled, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(createMessage.rejected, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.fulfilled, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.rejected, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchMessage.fulfilled, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(fetchMessage.rejected, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.fulfilled, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.rejected, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.fulfilled, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.rejected, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n  },\r\n});\r\n\r\n// ----- Slice actions -----\r\nexport const {\r\n  // ----- User authentification -----\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n\r\n  // ----- Plants -----\r\n  setIsCreatingPlant,\r\n  setIsFetchingPlants,\r\n  setIsFetchingPlant,\r\n  setIsUpdatingPlant,\r\n  setIsDeletingPlant,\r\n  addPlant,\r\n  setPlants,\r\n  setFilteredPlants,\r\n  setPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n  setNumberOfVisibleEntries,\r\n\r\n  // ----- Images -----\r\n  setIsUploadingPlantImage,\r\n  setIsDeletingPlantImage,\r\n  setDestroyImageData,\r\n\r\n  // ----- Payment -----\r\n  setClientSecret,\r\n\r\n  // ----- Messages -----\r\n  setIsCreatingMessage,\r\n  setIsFetchingMessages,\r\n  setIsFetchingMessage,\r\n  setIsUpdatingMessage,\r\n  setIsDeletingMessage,\r\n  addMessage,\r\n  setMessages,\r\n  setMessage,\r\n  setMessageChanges,\r\n  removeMessage,\r\n\r\n  // ----- Requests/Replies check -----\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  decreaseAmountOfRequests,\r\n  decreaseAmountOfReplies,\r\n\r\n  // ----- Interval counter -----\r\n  setIntervalId,\r\n  setDelayCounter,\r\n  increaseDelayCounter,\r\n\r\n  // ----- Pages handling -----\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n\r\n  // ----- Error handling -----\r\n  setErrorMessage,\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport { setDelayCounter, setIntervalId } from \"../reducer/jungleSwapSlice\";\r\n\r\ntype IntervalCounter = {\r\n  stop: Function;\r\n};\r\n\r\nexport const useIntervalCounter = (): IntervalCounter => {\r\n  const dispatch = useAppDispatch();\r\n  const intervalCounter = {\r\n    stop(intervalId: NodeJS.Timeout): void {\r\n      clearInterval(intervalId);\r\n      dispatch(setIntervalId(null));\r\n      dispatch(setDelayCounter(0));\r\n    },\r\n  };\r\n  return intervalCounter;\r\n};\r\n","import {\r\n  addMessage,\r\n  createMessage,\r\n  deleteMessage,\r\n  fetchAllMessages,\r\n  fetchMessage,\r\n  removeMessage,\r\n  setAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setErrorMessage,\r\n  setIsCreatingMessage,\r\n  setIsDeletingMessage,\r\n  setIsFetchingMessage,\r\n  setIsFetchingMessages,\r\n  setIsNewReply,\r\n  setIsNewRequest,\r\n  setIsUpdatingMessage,\r\n  setMessage,\r\n  setMessageChanges,\r\n  setMessages,\r\n  updateMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Message, MessageId, Plant, PlantId, User } from \"../typeDefinitions\";\r\n\r\nexport class MessageIO {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n\r\n  create = (newMessage: Message, callbackFunction: Function): void => {\r\n    this.dispatch(setIsCreatingMessage(true));\r\n    this.dispatch(createMessage(newMessage))\r\n      .unwrap()\r\n      .then((message: Message): void => {\r\n        this.dispatch(addMessage(message));\r\n        callbackFunction();\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  fetch = (messageId: MessageId, callbackFunction: Function): void => {\r\n    this.dispatch(setIsFetchingMessage(true));\r\n    this.dispatch(fetchMessage(messageId))\r\n      .unwrap()\r\n      .then((message: Message): void => {\r\n        this.dispatch(setMessage(message));\r\n        callbackFunction();\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  fetchAll = (callbackFunction: Function): void => {\r\n    this.dispatch(setIsFetchingMessages(true));\r\n    this.dispatch(fetchAllMessages())\r\n      .unwrap()\r\n      .then((messages: Message[]): void => {\r\n        this.dispatch(setMessages(messages));\r\n        callbackFunction();\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  fetchCheck = (callbackFunction: Function): void => {\r\n    this.dispatch(fetchAllMessages())\r\n      .unwrap()\r\n      .then((messages: Message[]): void => {\r\n        this.dispatch(setMessages(messages));\r\n        callbackFunction(messages);\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  update = (\r\n    messageId: MessageId,\r\n    updatedMessage: Message,\r\n    callbackFunction: Function\r\n  ): void => {\r\n    this.dispatch(setIsUpdatingMessage(true));\r\n    this.dispatch(updateMessage({ messageId, updatedMessage }))\r\n      .unwrap()\r\n      .then((message: Message): void => {\r\n        this.dispatch(setMessageChanges(message));\r\n        callbackFunction();\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  delete = (messageId: MessageId, callbackFunction: Function): void => {\r\n    this.dispatch(setIsDeletingMessage(true));\r\n    this.dispatch(deleteMessage(messageId))\r\n      .unwrap()\r\n      .then((): void => {\r\n        this.dispatch(removeMessage(messageId));\r\n        callbackFunction();\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  deleteRemaining = (messages: Message[], plantId: PlantId): void => {\r\n    messages.forEach(({ _id, plant }: Message): void => {\r\n      if ((plant as Plant)._id === plantId) {\r\n        this.dispatch(setIsDeletingMessage(true));\r\n        this.dispatch(deleteMessage(_id as PlantId))\r\n          .unwrap()\r\n          .then((): void => {\r\n            this.dispatch(removeMessage(_id as PlantId));\r\n          })\r\n          .catch((rejectedValue: any): void => {\r\n            this.dispatch(setErrorMessage(rejectedValue.message));\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  checkNewRequests = (\r\n    loggedInUser: User | null,\r\n    messages: Message[],\r\n    amountOfRequests: number\r\n  ): void => {\r\n    const calculateAmountOfRequests = (messages: Message[]): number => {\r\n      const currentAmountOfRequests = messages.filter(\r\n        ({ seller, messageState }: Message): boolean => {\r\n          return (\r\n            (seller as User)._id === (loggedInUser as User)._id &&\r\n            messageState === true\r\n          );\r\n        }\r\n      ).length;\r\n      return currentAmountOfRequests;\r\n    };\r\n\r\n    const checkAmountOfRequests = (\r\n      currentAmountOfRequests: number,\r\n      amountOfRequests: number\r\n    ): void => {\r\n      if (amountOfRequests < currentAmountOfRequests) {\r\n        this.dispatch(setIsNewRequest(true));\r\n      }\r\n      if (amountOfRequests !== currentAmountOfRequests) {\r\n        this.dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n      }\r\n    };\r\n\r\n    const currentAmountOfRequests = calculateAmountOfRequests(messages);\r\n    checkAmountOfRequests(currentAmountOfRequests, amountOfRequests);\r\n  };\r\n\r\n  checkNewReplies = (\r\n    loggedInUser: User | null,\r\n    messages: Message[],\r\n    amountOfReplies: number\r\n  ): void => {\r\n    const calculateAmountOfReplies = (messages: Message[]): number => {\r\n      const currentAmountOfReplies = messages.filter(\r\n        ({ buyer, reply }: Message): boolean => {\r\n          return (\r\n            (buyer as User)._id === (loggedInUser as User)._id && reply !== \"\"\r\n          );\r\n        }\r\n      ).length;\r\n      return currentAmountOfReplies;\r\n    };\r\n\r\n    const checkAmountOfReplies = (\r\n      currentAmountOfReplies: number,\r\n      amountOfReplies: number\r\n    ): void => {\r\n      if (amountOfReplies < currentAmountOfReplies) {\r\n        this.dispatch(setIsNewReply(true));\r\n      }\r\n      if (amountOfReplies !== currentAmountOfReplies) {\r\n        this.dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n      }\r\n    };\r\n\r\n    const currentAmountOfReplies = calculateAmountOfReplies(messages);\r\n    checkAmountOfReplies(currentAmountOfReplies, amountOfReplies);\r\n  };\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst NavAuthentificationItems = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/auth/sign-in\" className=\"p-2 is-link\">\r\n        {t(\"link.signIn\")}\r\n      </Link>\r\n      <Link to=\"/auth/sign-up\" className=\"p-2 is-link\">\r\n        {t(\"link.signUp\")}\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavAuthentificationItems;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { RootState } from \"../../store\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NavUserItems = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const { t } = useTranslation();\r\n\r\n  const tooltipItemRequests = (): string => {\r\n    return isNewRequest ? t(\"link.tooltipps.newRequest\") : \"\";\r\n  };\r\n\r\n  const tooltipItemReplies = (): string => {\r\n    return isNewReply ? t(\"link.tooltipps.newReply\") : \"\";\r\n  };\r\n\r\n  const tooltipItemLogOut = (): any => {\r\n    return loggedInUser ? loggedInUser.username : \"\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/plants/my-own\" className=\"p-2 is-link\">\r\n        {t(\"link.myPlants\")}\r\n      </Link>\r\n      <Link to=\"/plants/create\" className=\"p-2 is-link\">\r\n        {t(\"link.createPlant\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/requests/fetch-all\"\r\n        title={tooltipItemRequests()}\r\n        className=\"p-2 is-link\"\r\n      >\r\n        {isNewRequest && <FontAwesomeIcon icon={faBell} />}\r\n        {t(\"link.requests\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/replies/fetch-all\"\r\n        title={tooltipItemReplies()}\r\n        className=\"p-2 is-link\"\r\n      >\r\n        {isNewReply && <FontAwesomeIcon icon={faBell} />}\r\n        {t(\"link.replies\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/auth/log-out\"\r\n        title={tooltipItemLogOut()}\r\n        className=\"p-2 is-link\"\r\n      >\r\n        {t(\"link.logOut\")}\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavUserItems;\r\n","import { User } from \"../../typeDefinitions\";\r\nimport NavAuthentificationItems from \"./NavAuthentificationItems\";\r\nimport NavUserItems from \"./NavUserItems\";\r\n\r\ntype NavAdditionalItemsProps = {\r\n  user: User | null;\r\n};\r\n\r\nconst NavAdditionalItems = ({ user }: NavAdditionalItemsProps): JSX.Element => {\r\n  if (user) {\r\n    return <NavUserItems />;\r\n  }\r\n  return <NavAuthentificationItems />;\r\n};\r\n\r\nexport default NavAdditionalItems;\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { useIntervalCounter } from \"../../custom-hooks/useIntervalCounter\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  setIsUserChange,\r\n  setIntervalId,\r\n  increaseDelayCounter,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  scrollToPlants,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../../store\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell, faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { MessageIO } from \"../../lib/messageIO\";\r\nimport { Message } from \"../../typeDefinitions\";\r\nimport NavAdditionalItems from \"./NavAdditionalItems\";\r\n\r\nconst NavBar = (): JSX.Element => {\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const delayCounter = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.delayCounter\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const intervalCounter = useIntervalCounter();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalId) {\r\n        intervalCounter.stop(intervalId);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const startRequestsRepliesCheck = (): void => {\r\n      const setInitialMessageVariables = (): void => {\r\n        dispatch(setStartAmountOfRequests());\r\n        dispatch(setStartAmountOfReplies());\r\n        dispatch(setIsUserChange(false));\r\n      };\r\n\r\n      const startInterval = (): void => {\r\n        const intervalId = setInterval(\r\n          (): void => {\r\n            dispatch(increaseDelayCounter());\r\n          },\r\n          1000 // every second\r\n        );\r\n        dispatch(setIntervalId(intervalId));\r\n        dispatch(increaseDelayCounter());\r\n      };\r\n\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetchAll((): void => {\r\n        setInitialMessageVariables();\r\n        startInterval();\r\n      });\r\n    };\r\n\r\n    isUserChange && startRequestsRepliesCheck();\r\n  }, [isUserChange]);\r\n\r\n  useEffect(() => {\r\n    const checkNewRequestsReplies = (): void => {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetchCheck((messages: Message[]): void => {\r\n        messageIO.checkNewRequests(loggedInUser, messages, amountOfRequests);\r\n        messageIO.checkNewReplies(loggedInUser, messages, amountOfReplies);\r\n      });\r\n    };\r\n\r\n    if (isUserChange) {\r\n      dispatch(setStartAmountOfRequests());\r\n      dispatch(setStartAmountOfReplies());\r\n    }\r\n    loggedInUser && checkNewRequestsReplies();\r\n  }, [delayCounter]);\r\n\r\n  const tooltipItemSearch = (): string => {\r\n    return t(\"link.tooltipps.search\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar variant=\"dark\" expand=\"lg\" fixed=\"top\" className=\"pl-5\">\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" className=\"is-link\" onClick={scroll.scrollToTop}>\r\n            {t(\"link.jungleSwap\")}\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\r\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\r\n        </Navbar.Toggle>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Link\r\n              to=\"/\"\r\n              className=\"p-2 is-link\"\r\n              onClick={(): void => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              {t(\"link.allPlants\")}\r\n            </Link>\r\n            <NavAdditionalItems user={loggedInUser} />\r\n            <Link\r\n              to=\"/\"\r\n              title={tooltipItemSearch()}\r\n              className=\"p-2 is-link\"\r\n              onClick={(): void => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              <FontAwesomeIcon icon={faSearch} />\r\n            </Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { linkedInPath1, linkedInPath2 } from \"../lib/externalLinkPaths\";\r\n\r\nconst Footer = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n  const currentTime = new Date();\r\n  const year = currentTime.getFullYear();\r\n\r\n  return (\r\n    <div className=\"has-background-image\">\r\n      <footer>\r\n        {t(\"texts.footer.copyright\")} {year}{\" \"}\r\n        <Link\r\n          to={{ pathname: linkedInPath1 }}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n          className=\"is-link\"\r\n        >\r\n          {t(\"texts.footer.appAuthor1\")}\r\n        </Link>{\" \"}\r\n        &amp;{\" \"}\r\n        <Link\r\n          to={{ pathname: linkedInPath2 }}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n          className=\"is-link\"\r\n        >\r\n          {t(\"texts.footer.appAuthor2\")}\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","// LinkedIn\r\n\r\nexport const linkedInPath1: string = \"https://www.linkedin.com/in/christian-gerbig/\";\r\nexport const linkedInPath2: string = \"https://www.linkedin.com/in/lisa-montebaur/\";\r\n\r\n","import {\r\n  addPlant,\r\n  createPlant,\r\n  deletePlant,\r\n  fetchAllPlants,\r\n  fetchPlant,\r\n  fetchQueryPlants,\r\n  removePlant,\r\n  setErrorMessage,\r\n  setIsCreatingPlant,\r\n  setIsDeletingPlant,\r\n  setIsFetchingPlant,\r\n  setIsFetchingPlants,\r\n  setIsUpdatingPlant,\r\n  setPlant,\r\n  setPlantChanges,\r\n  setPlants,\r\n  updatePlant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant, PlantId, UploadImageData } from \"../typeDefinitions\";\r\n\r\nexport class PlantIO {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n\r\n  create = (\r\n    { name, description, size, location, price }: any,\r\n    { imageUrl, imagePublicId }: UploadImageData,\r\n    callbackFunction: Function\r\n  ): void => {\r\n    const newPlant: Plant = {\r\n      name: name.value,\r\n      description: description.value,\r\n      size: size.value,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location: location.value,\r\n      price: price.value,\r\n    };\r\n    this.dispatch(setIsCreatingPlant(true));\r\n    this.dispatch(createPlant(newPlant))\r\n      .unwrap()\r\n      .then((plant: Plant): void => {\r\n        this.dispatch(addPlant(plant));\r\n        callbackFunction();\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  fetch = (plantId: PlantId, callbackFunction: Function): void => {\r\n    this.dispatch(setIsFetchingPlant(true));\r\n    this.dispatch(fetchPlant(plantId))\r\n      .unwrap()\r\n      .then((plant: Plant): void => {\r\n        this.dispatch(setPlant(plant));\r\n        callbackFunction();\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  fetchAll = (callbackFunction?: Function): void => {\r\n    this.dispatch(setIsFetchingPlants(true));\r\n    this.dispatch(fetchAllPlants())\r\n      .unwrap()\r\n      .then((plants: Plant[]): void => {\r\n        this.dispatch(setPlants(plants));\r\n        if (typeof callbackFunction !== \"undefined\") {\r\n          callbackFunction();\r\n        }\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  update = (\r\n    {\r\n      _id,\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    }: Plant,\r\n    callbackFunction: Function\r\n  ): void => {\r\n    const updatedPlant: Plant = {\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    };\r\n    this.dispatch(setIsUpdatingPlant(true));\r\n    this.dispatch(updatePlant({ plantId: _id as PlantId, updatedPlant }))\r\n      .unwrap()\r\n      .then((updatedPlant: Plant): void => {\r\n        this.dispatch(setPlantChanges(updatedPlant));\r\n        callbackFunction();\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  delete = (plantId: PlantId, callbackFunction: Function): void => {\r\n    this.dispatch(setIsDeletingPlant(true));\r\n    this.dispatch(deletePlant(plantId))\r\n      .unwrap()\r\n      .then((): void => {\r\n        this.dispatch(removePlant(plantId));\r\n        callbackFunction();\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  search = (query: string): void => {\r\n    this.dispatch(setIsFetchingPlants(true));\r\n    this.dispatch(fetchQueryPlants(query))\r\n      .unwrap()\r\n      .then((plants: Plant[]): void => {\r\n        this.dispatch(setPlants(plants));\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n}\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import { useTranslation } from \"react-i18next\";\r\nimport plantsImage from \"../../images/JungleSwap_Home.png\";\r\nimport plantPotIcon from \"../../images/JungleSwap_Icon.png\";\r\n\r\nconst HomeAbout = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"about centered container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n          <img\r\n            src={plantsImage}\r\n            loading=\"eager\"\r\n            alt=\"plants\"\r\n            className=\"is-background-image\"\r\n          />\r\n        </div>\r\n        <br />\r\n        <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 is-no-overflow\">\r\n          <article>\r\n            <header>\r\n              <h4>{t(\"texts.home.about.headline\")}</h4>\r\n              <h5>{t(\"texts.home.about.subheadline\")}</h5>\r\n            </header>\r\n            <p>\r\n              {t(\"texts.home.about.paragraph.line1\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line2\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line3\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line4\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line5\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line6\")}\r\n            </p>\r\n            <img\r\n              src={plantPotIcon}\r\n              loading=\"lazy\"\r\n              alt=\"plant pot\"\r\n              className=\"is-icon\"\r\n            />\r\n          </article>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeAbout;\r\n","const WaitSpinner = (): JSX.Element => {\r\n  return (\r\n    <div className=\"d-flex align-items-center justify-content-center\">\r\n      <div role=\"status\" className=\"spinner-border m-3 loading-wait-spinner\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitSpinner;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { PlantIO } from \"../../lib/plantIO\";\r\nimport { setFilteredPlants } from \"../../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../../store\";\r\nimport { Plant } from \"../../typeDefinitions\";\r\n\r\nconst PlantSearch = (): JSX.Element => {\r\n  const [query, setQuery] = useState<string>(\"\");\r\n  const [filter, setFilter] = useState<string>(\"\");\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const fetchPlantQueryByName = (query: string): void => {\r\n      const plantIO = new PlantIO(dispatch);\r\n      if (query) {\r\n        plantIO.search(query);\r\n      } else {\r\n        plantIO.fetchAll();\r\n      }\r\n    };\r\n\r\n    fetchPlantQueryByName(query);\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    const filterPlantsByLocation = (filter: string, plants: Plant[]): void => {\r\n      const filteredPlants = plants.filter(({ location }: Plant): boolean => {\r\n        return filter === location || filter === \"\";\r\n      });\r\n      dispatch(setFilteredPlants(filteredPlants));\r\n    };\r\n\r\n    filterPlantsByLocation(filter, plants);\r\n  }, [filter]);\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <hr className=\"horizontal-rule\" />\r\n      <h4>{t(\"texts.home.searchPlant.headline\")}</h4>\r\n      <div className=\"d-flex\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder={t(\"texts.home.searchPlant.namePlaceholder\")}\r\n          value={query}\r\n          className=\"is-width-medium form-control\"\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n            setQuery(event.target.value);\r\n          }}\r\n        />\r\n        <select\r\n          name=\"location\"\r\n          className=\"location-filter form-control ml-4\"\r\n          onChange={(event: React.ChangeEvent<HTMLSelectElement>): void => {\r\n            setFilter(event.target.value);\r\n          }}\r\n        >\r\n          <option value=\"\">{t(\"select.location.title\")}</option>\r\n          <option value=\"sun\">{t(\"select.location.sun\")}</option>\r\n          <option value=\"shade\">{t(\"select.location.shade\")}</option>\r\n          <option value=\"sun and shade\">\r\n            {t(\"select.location.sunAndShade\")}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantSearch;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Plant } from \"../../typeDefinitions\";\r\n\r\ntype PlantThumbnailProps = {\r\n  plant: Plant;\r\n};\r\n\r\nconst PlantThumbnail = ({ plant }: PlantThumbnailProps): JSX.Element => {\r\n  const { t } = useTranslation();\r\n  const { _id, name, imageUrl, price } = plant;\r\n\r\n  return (\r\n    <div className=\"col mb-5\">\r\n      <div className=\"card card-medium-width text-center h-100\">\r\n        <img\r\n          src={imageUrl}\r\n          loading=\"lazy\"\r\n          alt={name}\r\n          className=\"card-img-top is-image-size-large\"\r\n        />\r\n        <div className=\"card-body mb-5\">\r\n          <h5>{name}</h5>\r\n          <p>\r\n            {price} {t(\"texts.plants.plantThumbnail.currency\")}\r\n          </p>\r\n          <Link\r\n            className=\"btn form-control is-width-medium is-link\"\r\n            to={`/plants/fetch/${_id}`}\r\n          >\r\n            {t(\"link.details\")}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantThumbnail;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setNumberOfVisibleEntries } from \"../../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../../store\";\r\nimport { Plant } from \"../../typeDefinitions\";\r\nimport PlantThumbnail from \"./PlantThumbnail\";\r\n\r\nconst PlantsCollection = (): JSX.Element => {\r\n  const filteredPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.filteredPlants\r\n  );\r\n  const numberOfVisibleEntries = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.numberOfVisibleEntries\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  const handleClickButton = (): void => {\r\n    dispatch(setNumberOfVisibleEntries(numberOfVisibleEntries + 6));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-2 row-cols-xl-3 row-cols-xxl-3\">\r\n        {filteredPlants.map(\r\n          (plant: Plant, index: number): JSX.Element | null => {\r\n            const { _id } = plant;\r\n            return index < numberOfVisibleEntries ? (\r\n              <PlantThumbnail plant={plant} key={_id} />\r\n            ) : null;\r\n          }\r\n        )}\r\n      </div>\r\n      {numberOfVisibleEntries < filteredPlants.length && (\r\n        <div className=\"is-text-align-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-sm is-width-medium form-control\"\r\n            onClick={handleClickButton}\r\n          >\r\n            {t(\"button.more\")}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCollection;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { RootState } from \"../../store\";\r\nimport WaitSpinner from \"../spinners/WaitSpinner\";\r\nimport PlantSearch from \"./PlantSearch\";\r\nimport PlantsCollection from \"./PlantsCollection\";\r\n\r\nconst PlantsCockpit = (): JSX.Element => {\r\n  const isFetchingPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlants\r\n  );\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-3\">\r\n        <h2>{t(\"texts.home.allPlants.headline\")}</h2>\r\n      </div>\r\n      <PlantSearch />\r\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsCollection />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCockpit;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { scrollToAbout } from \"../../reducer/jungleSwapSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst HomeTitle = (): JSX.Element => {\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"row my-5\">\r\n      <div className=\"col-6 offset-3 my-5 has-border-around\">\r\n        <h2 className=\"title mb-2\">{t(\"texts.home.title.headline\")}</h2>\r\n        <h5 className=\"mt-3 mb-5\">{t(\"texts.home.title.subheadline\")}</h5>\r\n        <div className=\"mb-5\">\r\n          <Link\r\n            to={\"/\"}\r\n            className=\"try-it-link is-link\"\r\n            onClick={(): void => {\r\n              dispatch(scrollToAbout());\r\n            }}\r\n          >\r\n            {t(\"link.tryIt\")}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeTitle;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport {\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  setFilteredPlants,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../../store\";\r\nimport { PlantIO } from \"../../lib/plantIO\";\r\nimport HomeAbout from \"../../components/home/HomeAbout\";\r\nimport PlantsCockpit from \"../../components/plants/PlantsCockpit\";\r\nimport HomeTitle from \"../../components/home/HomeTitle\";\r\n\r\nconst Home = (): JSX.Element => {\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n  const elementRef = useRef<HTMLElement[]>([]);\r\n\r\n  useEffect(() => {\r\n    const elementHeight = (elementRef: HTMLElement): number => {\r\n      return Math.round(elementRef.getBoundingClientRect().height);\r\n    };\r\n\r\n    const plantIO = new PlantIO(dispatch);\r\n    plantIO.fetchAll((): void => {\r\n      const titleSectionHeight = elementHeight(elementRef.current[0]);\r\n      dispatch(setTitleSectionHeight(titleSectionHeight));\r\n      const aboutSectionHeight = elementHeight(elementRef.current[1]);\r\n      dispatch(setAboutSectionHeight(aboutSectionHeight));\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(setFilteredPlants(plants));\r\n  }, [plants]);\r\n\r\n  return (\r\n    <div>\r\n      <section\r\n        ref={(titleSection: HTMLElement): void => {\r\n          (elementRef.current[0] as HTMLElement | null) = titleSection;\r\n        }}\r\n        className=\"text-center pt-5 pb-5 title-header has-fixed-background-image\"\r\n      >\r\n        <HomeTitle />\r\n      </section>\r\n\r\n      <section\r\n        ref={(aboutSection: HTMLElement): void => {\r\n          (elementRef.current[1] as HTMLElement | null) = aboutSection;\r\n        }}\r\n      >\r\n        <HomeAbout />\r\n      </section>\r\n\r\n      <section>\r\n        <PlantsCockpit />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  setErrorMessage,\r\n  setLoggedInUser,\r\n  signIn,\r\n  signUp,\r\n  logOut,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\n\r\ntype Authentification = {\r\n  signIn: Function;\r\n  signUp: Function;\r\n  logOut: Function;\r\n};\r\n\r\nexport const useAuthentification = (): Authentification => {\r\n  const dispatch = useAppDispatch();\r\n  const authentification = {\r\n    signIn(user: User, callbackFunction: Function): void {\r\n      dispatch(signIn(user))\r\n        .unwrap()\r\n        .then((user: User): void => {\r\n          dispatch(setLoggedInUser(user));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    signUp(newUser: User, callbackFunction: Function): void {\r\n      dispatch(signUp(newUser))\r\n        .unwrap()\r\n        .then((user: User): void => {\r\n          dispatch(setLoggedInUser(user));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    logOut(loggedInUser: User, callbackFunction: Function): void {\r\n      dispatch(logOut(loggedInUser))\r\n        .unwrap()\r\n        .then((): void => {\r\n          dispatch(setLoggedInUser(null));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n  };\r\n  return authentification;\r\n};\r\n","type ErrorMessageProps = {\r\n  message: string | null;\r\n  outputFunction: Function;\r\n};\r\n\r\nconst ErrorMessage = ({\r\n  message,\r\n  outputFunction,\r\n}: ErrorMessageProps): JSX.Element | null => {\r\n  if (!message || !message.includes(\"Form\")) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <span className=\"is-danger is-text-bold is-display-block\">\r\n        {outputFunction(message)}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { useAuthentification } from \"../../custom-hooks/useAuthentification\";\r\nimport {\r\n  setIsUserChange,\r\n  setErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../typeDefinitions\";\r\nimport { RootState } from \"../../store\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst SignUp = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const authentification = useAuthentification();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignUp = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    const { username, email, password } = event.target as any;\r\n    const newUser: User = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    event.preventDefault();\r\n    authentification.signUp(newUser, (): void => {\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Username missing\":\r\n        return t(\"errorTexts.authentification.signUp.form.usernameMissing\");\r\n      case \"Form: Email missing\":\r\n        return t(\"errorTexts.authentification.signUp.form.emailMissing\");\r\n      case \"Form: Password missing\":\r\n        return t(\"errorTexts.authentification.signUp.form.passwordMissing\");\r\n      case \"Form: Email format invalid\":\r\n        return t(\"errorTexts.authentification.signUp.form.emailFormatInvalid\");\r\n      case \"Form: Password invalid\":\r\n        return t(\"errorTexts.authentification.signUp.form.passwordInvalid\");\r\n      case \"Form: Username or email already exists\":\r\n        return t(\"errorTexts.authentification.signUp.form.userAlreadyExists\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">{t(\"texts.authentification.signUp.headline\")}</h2>\r\n        <form\r\n          className=\"form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleSignUp(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\">\r\n              {t(\"texts.authentification.signUp.username\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n              placeholder={t(\"texts.authentification.signUp.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\">\r\n              {t(\"texts.authentification.signUp.email\")}\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder={t(\"texts.authentification.signUp.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\">\r\n              {t(\"texts.authentification.signUp.password\")}\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder={t(\"texts.authentification.signUp.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className=\"btn btn-sm mt-4 is-width-medium form-control\"\r\n          >\r\n            {t(\"button.signUp\")}\r\n          </button>\r\n          <p className=\"is-padding-top\">\r\n            {t(\"texts.authentification.signUp.alreadyAccountCreated\")}\r\n          </p>\r\n          <div className=\"text-right\">\r\n            <Link to={\"/auth/sign-in\"} className=\"is-link\">\r\n              <button className=\"btn btn-sm ml-4 is-width-medium form-control mt-0 mb-2\">\r\n                {t(\"button.signIn\")}\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { useAuthentification } from \"../../custom-hooks/useAuthentification\";\r\nimport {\r\n  setIsUserChange,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../typeDefinitions\";\r\nimport { RootState } from \"../../store\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst SignIn = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const authentification = useAuthentification();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignIn = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    const { email, password } = event.target as any;\r\n    const user: User = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    event.preventDefault();\r\n    authentification.signIn(user, (): void => {\r\n      dispatch(setIsUserChange(true));\r\n      const { amountOfRequests, amountOfReplies } = user;\r\n      dispatch(setAmountOfRequests(amountOfRequests as number));\r\n      dispatch(setAmountOfReplies(amountOfReplies as number));\r\n      history.push(\"/\");\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Email missing\":\r\n        return t(\"errorTexts.authentification.signIn.form.emailMissing\");\r\n      case \"Form: Password missing\":\r\n        return t(\"errorTexts.authentification.signIn.form.passwordMissing\");\r\n      case \"Form: Email format invalid\":\r\n        return t(\"errorTexts.authentification.signIn.form.emailFormatInvalid\");\r\n      case \"Form: Passwords don't match\":\r\n        return t(\"errorTexts.authentification.signIn.form.noMatchPasswords\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">{t(\"texts.authentification.signIn.headline\")}</h2>\r\n        <form\r\n          className=\"form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleSignIn(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\">\r\n              {t(\"texts.authentification.signIn.email\")}\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder={t(\"texts.authentification.signIn.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\">\r\n              {t(\"texts.authentification.signIn.password\")}\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder={t(\"texts.authentification.signIn.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className=\"btn btn-sm mt-4 is-width-medium form-control\"\r\n          >\r\n            {t(\"button.signIn\")}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { useAuthentification } from \"../../custom-hooks/useAuthentification\";\r\nimport { useIntervalCounter } from \"../../custom-hooks/useIntervalCounter\";\r\nimport {\r\n  setLoggedInUser,\r\n  setIsNewRequest,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../typeDefinitions\";\r\nimport { RootState } from \"../../store\";\r\n\r\nconst LogOut = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const authentification = useAuthentification();\r\n  const intervalCounter = useIntervalCounter();\r\n\r\n  useEffect(() => {\r\n    const logOutUser = (): void => {\r\n      const updateUserRequestsReplies = (loggedInUser: User): User => {\r\n        const clonedUser: User = JSON.parse(JSON.stringify(loggedInUser));\r\n        clonedUser.amountOfRequests = amountOfRequests;\r\n        clonedUser.amountOfReplies = amountOfReplies;\r\n        dispatch(setLoggedInUser(clonedUser));\r\n        return clonedUser;\r\n      };\r\n\r\n      const updateUserData = (loggedInUser: User): void => {\r\n        authentification.logOut(loggedInUser, (): void => {\r\n          intervalCounter.stop(intervalId as NodeJS.Timeout);\r\n          dispatch(setIsNewRequest(false));\r\n          dispatch(setAmountOfRequests(0));\r\n          dispatch(setAmountOfReplies(0));\r\n          history.push(\"/\");\r\n          scroll.scrollToTop();\r\n        });\r\n      };\r\n\r\n      const updatedUser = updateUserRequestsReplies(loggedInUser as User);\r\n      updateUserData(updatedUser);\r\n    };\r\n\r\n    logOutUser();\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import {\r\n  checkUserLoggedIn,\r\n  setErrorMessage,\r\n  setLoggedInUser,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\n\r\nexport class Routing {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n  protect = (callbackFunction: Function): void => {\r\n    this.dispatch(checkUserLoggedIn())\r\n      .unwrap()\r\n      .then((user: User): void => {\r\n        this.dispatch(setLoggedInUser(user));\r\n        callbackFunction();\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        if (rejectedValue.message !== \"Unauthorized user\") {\r\n          this.dispatch(setErrorMessage(rejectedValue.message));\r\n        }\r\n      });\r\n  };\r\n}\r\n","import {\r\n  deletePlantImage,\r\n  setErrorMessage,\r\n  setIsDeletingPlantImage,\r\n  setIsUploadingPlantImage,\r\n  uploadPlantImage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { DestroyImageData, UploadImageData } from \"../typeDefinitions\";\r\n\r\nexport class PlantImageIO {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n\r\n  create = (uploadForm: any, callbackFunction: Function): void => {\r\n    this.dispatch(setIsUploadingPlantImage(true));\r\n    this.dispatch(uploadPlantImage(uploadForm))\r\n      .unwrap()\r\n      .then((uploadImageData: UploadImageData): void => {\r\n        callbackFunction(uploadImageData);\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  delete = (destroyImageData: DestroyImageData): void => {\r\n    this.dispatch(setIsDeletingPlantImage(true));\r\n    this.dispatch(deletePlantImage(destroyImageData))\r\n      .unwrap()\r\n      .then((): void => {\r\n        return;\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setErrorMessage } from \"../../reducer/jungleSwapSlice\";\r\nimport { UploadImageData } from \"../../typeDefinitions\";\r\nimport { RootState } from \"../../store\";\r\nimport { Routing } from \"../../lib/routing\";\r\nimport { PlantIO } from \"../../lib/plantIO\";\r\nimport { PlantImageIO } from \"../../lib/plantImageIO\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst PlantCreateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingPlantImage\r\n  );\r\n  const isCreatingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isCreatingPlant\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect((): void => {\r\n      dispatch(setErrorMessage(null));\r\n      scroll.scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const handleUploadPlantImage = (\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ): void => {\r\n    const { plantImage } = event.target as any;\r\n    const image = plantImage.files[0];\r\n    event.preventDefault();\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    const plantImageIO = new PlantImageIO(dispatch);\r\n    plantImageIO.create(\r\n      uploadForm,\r\n      ({ imageUrl, imagePublicId }: UploadImageData): void => {\r\n        const plantIO = new PlantIO(dispatch);\r\n        plantIO.create(event.target, { imageUrl, imagePublicId }, (): void => {\r\n          history.push(\"/plants/my-own\");\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Name missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.nameMissing\");\r\n      case \"Form: Description missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.descriptionMissing\");\r\n      case \"Form: Size missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.sizeMissing\");\r\n      case \"Form: Location missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.locationMissing\");\r\n      case \"Form: Price missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.priceMissing\");\r\n      case \"Form: Image missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.imageMissing\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isUploadingPlantImage || isCreatingPlant ? true : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-12 col-md-6 offset-md-4\">\r\n        <h2 className=\"mb-5 text-left\">\r\n          {t(\"texts.plants.createPlant.form.headline\")}\r\n        </h2>\r\n        <form\r\n          className=\"form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleUploadPlantImage(event);\r\n          }}\r\n        >\r\n          <label htmlFor=\"enterName\">\r\n            {t(\"texts.plants.createPlant.form.name\")}\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterName\"\r\n            name=\"name\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterDescription\">\r\n            {t(\"texts.plants.createPlant.form.description\")}\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterDescription\"\r\n            name=\"description\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterSize\">\r\n            {t(\"texts.plants.createPlant.form.size\")}\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterSize\"\r\n            name=\"size\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            min=\"1\"\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterLocation\">\r\n            {t(\"texts.plants.createPlant.form.location\")}\r\n          </label>\r\n          <select\r\n            id=\"enterLocation\"\r\n            name=\"location\"\r\n            className=\"mb-4 form-control p-2\"\r\n          >\r\n            <option>{t(\"select.location.title\")}</option>\r\n            <option value=\"sun\">{t(\"select.location.sun\")}</option>\r\n            <option value=\"shade\">{t(\"select.location.shade\")}</option>\r\n            <option value=\"sun and shade\">\r\n              {t(\"select.location.sunAndShade\")}\r\n            </option>\r\n          </select>\r\n          <label htmlFor=\"enterPrice\">\r\n            {t(\"texts.plants.createPlant.form.price\")}\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterPrice\"\r\n            name=\"price\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            min=\"1\"\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterImage\">\r\n            {t(\"texts.plants.createPlant.form.image\")}\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"enterImage\"\r\n            name=\"plantImage\"\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <div className=\"col-12 text-right pr-0\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={buttonState()}\r\n              className=\"ml-4 mb-2 btn btn-sm form-control is-width-medium\"\r\n            >\r\n              {t(\"button.create\")}\r\n            </button>\r\n            <button\r\n              className=\"ml-4 mb-2 btn btn-sm form-control is-width-medium\"\r\n              onClick={(): void => {\r\n                history.goBack();\r\n              }}\r\n            >\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantCreateForm;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst PlantDetailsBuyerItems = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/plants/checkout\" className=\"is-link\">\r\n        <button className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\">\r\n          {t(\"button.buy\")}\r\n        </button>\r\n      </Link>\r\n      <Link to=\"/messages/create\" className=\"is-link\">\r\n        <button className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\">\r\n          {t(\"button.swap\")}\r\n        </button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetailsBuyerItems;\r\n","import { Link, useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { RootState } from \"../../store\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { MessageIO } from \"../../lib/messageIO\";\r\nimport { PlantImageIO } from \"../../lib/plantImageIO\";\r\nimport { PlantIO } from \"../../lib/plantIO\";\r\nimport { Plant, PlantId } from \"../../typeDefinitions\";\r\n\r\nconst PlantDetailsCreatorChoice = (): JSX.Element => {\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isDeletingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlant\r\n  );\r\n  const isDeletingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlantImage\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const isDeletingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n  const { _id, imagePublicId } = plant as Plant;\r\n\r\n  const handleDelete = (): void => {\r\n    const messageIO = new MessageIO(dispatch);\r\n    messageIO.deleteRemaining(messages, _id as PlantId);\r\n    const plantImageIO = new PlantImageIO(dispatch);\r\n    plantImageIO.delete({ imagePublicId });\r\n    const plantIO = new PlantIO(dispatch);\r\n    plantIO.delete(_id as PlantId, (): void => {\r\n      history.goBack();\r\n    });\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isDeletingMessage || isDeletingPlantImage || isDeletingPlant\r\n      ? true\r\n      : false;\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-0\">\r\n      <Link to={\"/plants/update\"} className=\"is-link\">\r\n        <button className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\">\r\n          {t(\"button.update\")}\r\n        </button>\r\n      </Link>\r\n      <button\r\n        disabled={buttonState()}\r\n        className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\"\r\n        onClick={handleDelete}\r\n      >\r\n        {t(\"button.delete\")}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetailsCreatorChoice;\r\n","import PlantDetailsBuyerChoice from \"./PlantDetailsBuyerChoice\";\r\nimport PlantDetailsCreatorChoice from \"./PlantDetailsCreatorChoice\";\r\n\r\ntype PlantDetailsUserChoiceProps = {\r\n  isCreator: boolean;\r\n};\r\n\r\nconst PlantDetailsUserChoice = ({\r\n  isCreator,\r\n}: PlantDetailsUserChoiceProps): JSX.Element => {\r\n  if (isCreator) {\r\n    return <PlantDetailsCreatorChoice />;\r\n  }\r\n  return <PlantDetailsBuyerChoice />;\r\n};\r\n\r\nexport default PlantDetailsUserChoice;\r\n","import { useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { RootState } from \"../../store\";\r\nimport { Plant, User } from \"../../typeDefinitions\";\r\nimport PlantDetailsUserChoice from \"./PlantDetailsUserChoice\";\r\n\r\ntype PlantItemsProps = {\r\n  plant: Plant;\r\n};\r\n\r\nconst PlantItems = ({ plant }: PlantItemsProps): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n  const { name, description, size, imageUrl, location, price, creator } = plant;\r\n  const { _id } = creator as User;\r\n\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"card is-card-width-large\">\r\n        <img\r\n          src={imageUrl}\r\n          loading=\"lazy\"\r\n          alt={name}\r\n          className=\"card-img-top is-image-size-large\"\r\n        />\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"is-text-bold\">\r\n            {t(\"texts.plants.plantDetails.name\")}\r\n          </span>{\" \"}\r\n          {name}\r\n        </div>\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"is-text-bold\">\r\n            {t(\"texts.plants.plantDetails.description\")}\r\n          </span>{\" \"}\r\n          {description}\r\n        </div>\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"is-text-bold\">\r\n            {t(\"texts.plants.plantDetails.size\")}\r\n          </span>{\" \"}\r\n          {size} {t(\"texts.plants.plantDetails.sizeUnit\")}\r\n        </div>\r\n        <div className=\"ml-2 mt-2\">\r\n          <span>{t(\"texts.plants.plantDetails.likes\")}</span> {location}\r\n        </div>\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"is-text-bold\">\r\n            {t(\"texts.plants.plantDetails.price\")}\r\n          </span>{\" \"}\r\n          {price} {t(\"texts.plants.plantDetails.currency\")}\r\n        </div>\r\n        <div className=\"ml-2 mt-2 col justify-content-center\">\r\n          <div className=\"row-2 justify-content-center\">\r\n            <div className=\"card-body text-right pt-0\">\r\n              <PlantDetailsUserChoice\r\n                isCreator={(loggedInUser as User)._id === _id}\r\n              />\r\n              <button\r\n                className=\"btn btn-sm ml-2 form-control is-width-medium mb-3\"\r\n                onClick={(): void => {\r\n                  history.goBack();\r\n                }}\r\n              >\r\n                {t(\"button.goBack\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantItems;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { Plant, PlantId } from \"../../typeDefinitions\";\r\nimport { RootState } from \"../../store\";\r\nimport { Routing } from \"../../lib/routing\";\r\nimport { PlantIO } from \"../../lib/plantIO\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport PlantItems from \"../../components/plants/PlantItems\";\r\n\r\nconst PlantDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isFetchingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlant\r\n  );\r\n  const { plantId } = useParams<{ plantId: PlantId }>();\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n  const { creator } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect((): void => {\r\n      const plantIO = new PlantIO(dispatch);\r\n      plantIO.fetch(plantId, (): void => {\r\n        scroll.scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/sign-up\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2>{t(\"texts.plants.plantDetails.headline\")}</h2>\r\n      </div>\r\n      {isFetchingPlant || !creator ? (\r\n        <WaitSpinner />\r\n      ) : (\r\n        <PlantItems plant={plant} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setPlant, setDestroyImageData } from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, UploadImageData } from \"../../typeDefinitions\";\r\nimport { RootState } from \"../../store\";\r\nimport { Routing } from \"../../lib/routing\";\r\nimport { PlantImageIO } from \"../../lib/plantImageIO\";\r\nimport { PlantIO } from \"../../lib/plantIO\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\n\r\nconst PlantUpdateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingPlantImage\r\n  );\r\n  const isDeletingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlantImage\r\n  );\r\n  const destroyImageData = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.destroyImageData\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isUpdatingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUpdatingPlant\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const selectElementRef = useRef<HTMLSelectElement | null>(null);\r\n  const { t } = useTranslation();\r\n  const { name, description, size, imageUrl, price } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    const setPlantLocation = ({ location }: Plant): void => {\r\n      if (location) {\r\n        (selectElementRef.current as HTMLSelectElement).value = location;\r\n      }\r\n    };\r\n\r\n    const routing = new Routing(dispatch);\r\n    routing.protect((): void => {\r\n      setPlantLocation(plant);\r\n      scroll.scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const handlePlantEntryChange = (\r\n    { target }: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\r\n    plant: Plant\r\n  ): void => {\r\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\r\n    switch (target.name) {\r\n      case \"name\":\r\n        clonedPlant.name = target.value;\r\n        break;\r\n      case \"description\":\r\n        clonedPlant.description = target.value;\r\n        break;\r\n      case \"size\":\r\n        clonedPlant.size = target.value as unknown as number;\r\n        break;\r\n      case \"location\":\r\n        clonedPlant.location = target.value;\r\n        break;\r\n      case \"price\":\r\n        clonedPlant.price = target.value as unknown as number;\r\n    }\r\n    dispatch(setPlant(clonedPlant));\r\n  };\r\n\r\n  const handlePlantImageChange = (\r\n    { target }: React.ChangeEvent<HTMLInputElement>,\r\n    { imagePublicId }: Plant\r\n  ): void => {\r\n    const image = (target.files as any)[0];\r\n    dispatch(setDestroyImageData({ imagePublicId }));\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    const plantImageIO = new PlantImageIO(dispatch);\r\n    plantImageIO.create(\r\n      uploadForm,\r\n      ({ imageUrl, imagePublicId }: UploadImageData): void => {\r\n        const clonedPlant = JSON.parse(JSON.stringify(plant));\r\n        clonedPlant.imagePublicId = imagePublicId;\r\n        clonedPlant.imageUrl = imageUrl;\r\n        dispatch(setPlant(clonedPlant));\r\n      }\r\n    );\r\n  };\r\n\r\n  const handleUpdatePlant = () => {\r\n    if (destroyImageData) {\r\n      const plantImageIO = new PlantImageIO(dispatch);\r\n      plantImageIO.delete(destroyImageData);\r\n    }\r\n    const plantIO = new PlantIO(dispatch);\r\n    plantIO.update(plant, (): void => {\r\n      history.goBack();\r\n    });\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant\r\n      ? true\r\n      : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mt-5 mb-4 text-left\">\r\n          {t(\"texts.plants.updatePlant.form.headline\")}\r\n        </h2>\r\n        <div className=\"card is-card-width-large mb-5\">\r\n          {isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant ? (\r\n            <WaitSpinner />\r\n          ) : (\r\n            <img\r\n              src={imageUrl}\r\n              loading=\"lazy\"\r\n              alt={name}\r\n              className=\"mb-2 is-image-size-medium\"\r\n            />\r\n          )}\r\n          <div className=\"card-body\">\r\n            <label htmlFor=\"updateName\">\r\n              {t(\"texts.plants.updatePlant.form.name\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateName\"\r\n              name=\"name\"\r\n              value={name}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateDescription\">\r\n              {t(\"texts.plants.updatePlant.form.description\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateDescription\"\r\n              name=\"description\"\r\n              value={description}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateSize\">\r\n              {t(\"texts.plants.updatePlant.form.size\")}\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updateSize\"\r\n              name=\"size\"\r\n              value={size}\r\n              min=\"1\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateLocation\">\r\n              {t(\"texts.plants.updatePlant.form.location\")}\r\n            </label>\r\n            <select\r\n              ref={selectElementRef}\r\n              id=\"updateLocation\"\r\n              name=\"location\"\r\n              className=\"mb-4 form-control px-2\"\r\n              onChange={(event: React.ChangeEvent<HTMLSelectElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            >\r\n              <option value=\"sun\">{t(\"select.location.sun\")}</option>\r\n              <option value=\"shade\">{t(\"select.location.shade\")}</option>\r\n              <option value=\"sun and shade\">\r\n                {t(\"select.location.sunAndShade\")}\r\n              </option>\r\n            </select>\r\n            <label htmlFor=\"updatePrice\">\r\n              {t(\"texts.plants.updatePlant.form.price\")}\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updatePrice\"\r\n              name=\"price\"\r\n              value={price}\r\n              min=\"1\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateImage\">\r\n              {t(\"texts.plants.updatePlant.form.image\")}\r\n            </label>\r\n            <input\r\n              type=\"file\"\r\n              id=\"updateImage\"\r\n              name=\"plantImage\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantImageChange(event, plant);\r\n              }}\r\n            />\r\n            <div className=\"col-12 text-right pr-0\">\r\n              <button\r\n                disabled={buttonState()}\r\n                className=\"btn btn-sm ml-4 form-control is-width-medium mb-2\"\r\n                onClick={handleUpdatePlant}\r\n              >\r\n                {t(\"button.save\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantUpdateForm;\r\n","import {\r\n  createPayment,\r\n  setClientSecret,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\nexport class PaymentIO {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n\r\n  initialize = (plant: Plant): void => {\r\n    this.dispatch(createPayment(plant))\r\n      .unwrap()\r\n      .then((payment: any): void => {\r\n        this.dispatch(setClientSecret(payment.clientSecret));\r\n      })\r\n      .catch((rejectedValue: any): void => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport { scrollToPlants } from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../../typeDefinitions\";\r\nimport { RootState } from \"../../store\";\r\nimport { Stripe } from \"@stripe/stripe-js\";\r\nimport { PaymentIO } from \"../../lib/paymentIO\";\r\n\r\ntype CardStyle = {\r\n  style: {\r\n    base: {\r\n      color: string;\r\n      fontFamily: string;\r\n      fontSmoothing: string;\r\n      fontSize: string;\r\n      \"::placeholder\": { color: string };\r\n    };\r\n    invalid: {\r\n      color: string;\r\n      iconColor: string;\r\n    };\r\n  };\r\n};\r\n\r\nconst CheckoutForm = (): JSX.Element => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(\"\");\r\n  const clientSecret = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.clientSecret\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const { t } = useTranslation();\r\n  const { _id, name, price } = plant as Plant;\r\n  const cardStyle: CardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    const paymentIO = new PaymentIO(dispatch);\r\n    paymentIO.initialize(plant);\r\n    return (): void => {\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    };\r\n  }, []);\r\n\r\n  const handleInputChanges = async (event: any): Promise<void> => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    // Stripe.js has not yet been loaded\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n    setIsProcessing(true);\r\n    const payload = await (stripe as Stripe).confirmCardPayment(clientSecret, {\r\n      payment_method: { card: elements.getElement(CardElement) } as any,\r\n    });\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    } else {\r\n      setPaymentError(\"\");\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n\r\n  const messageVisibility = (): string => {\r\n    return isSucceeded ? \"result-message text-center\" : \"is-hidden\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"container col-md-9 col-sm-12\">\r\n      <h2 className=\"mb-4 is-word-break\">{name}</h2>\r\n      <h3 className=\"mb-4\">\r\n        {t(\"texts.plants.checkout.form.price\")} {price}{\" \"}\r\n        {t(\"texts.plants.checkout.form.currency\")}\r\n      </h3>\r\n      <form\r\n        id=\"payment-form\"\r\n        className=\"checkoutForm form-style mt-5\"\r\n        onSubmit={handleSubmitPayment}\r\n      >\r\n        <CardElement\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          className=\"p-2\"\r\n          onChange={handleInputChanges}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            type=\"submit\"\r\n            id=\"submit\"\r\n            disabled={isProcessing || isDisabled || isSucceeded}\r\n            className=\"btn btn-sm mt-5 mb-4 card-button\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isProcessing ? (\r\n                <div id=\"spinner\" className=\"spinner is-text-bold\" />\r\n              ) : (\r\n                t(\"texts.plants.checkout.form.payNow\")\r\n              )}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {/* Show any error that happens when processing the payment */}\r\n        {paymentError && (\r\n          <div role=\"alert\" className=\"card-error\">\r\n            {paymentError}\r\n          </div>\r\n        )}\r\n        {/* Show success message upon completion */}\r\n        <p className={messageVisibility()}>\r\n          {t(\"texts.plants.checkout.form.paymentSuccessful\")}\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {isSucceeded ? (\r\n          <Link\r\n            to={\"/\"}\r\n            onClick={(): void => {\r\n              dispatch(scrollToPlants());\r\n            }}\r\n            className=\"is-link\"\r\n          >\r\n            <button className=\"btn btn-sm form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        ) : (\r\n          <Link to={`/plants/fetch/${_id}`} className=\"is-link\">\r\n            <button className=\"btn btn-sm form-control pl-3 pr-3\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { RootState } from \"../../store\";\r\nimport { Routing } from \"../../lib/routing\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"../../components/apis/CheckoutForm\";\r\n\r\nconst stripePromise = loadStripe(\r\n  \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n);\r\n\r\nconst CheckoutView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect((): void => {\r\n      scroll.scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5\">\r\n        <Elements stripe={stripePromise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutView;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { User, Message, Plant } from \"../../typeDefinitions\";\r\n\r\ntype RequestThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst RequestTile = ({ message }: RequestThumbnailProps): JSX.Element => {\r\n  const { t } = useTranslation();\r\n  const { _id, buyer, plant } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <div className=\"card p-3 mt-4\">\r\n      <h4>\r\n        {t(\"texts.requests.requestTile.subheadline\")} {name}\r\n      </h4>\r\n      <h5>{username}</h5>\r\n      <div className=\"text-center\">\r\n        <Link\r\n          to={`/requests/fetch/${_id}`}\r\n          className=\"btn is-width-medium form-control is-link\"\r\n        >\r\n          {t(\"link.details\")}\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestTile;\r\n","import { useAppSelector } from \"../../hooks\";\r\nimport { RootState } from \"../../store\";\r\nimport { Message, User } from \"../../typeDefinitions\";\r\nimport RequestTile from \"./RequestTile\";\r\n\r\nconst RequestsCollection = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((message: Message): JSX.Element | null => {\r\n        const { _id, seller, messageState } = message;\r\n        return (seller as User)._id === (loggedInUser as User)._id &&\r\n          messageState === true ? (\r\n          <RequestTile message={message} key={_id} />\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsCollection;\r\n","import { animateScroll as scroll } from \"react-scroll\";\r\n\r\nexport class MainPageScrolling {\r\n  history: any;\r\n  constructor(history: any) {\r\n    this.history = history;\r\n  }\r\n\r\n  toTop = (): void => {\r\n    this.history.push(\"/\");\r\n    scroll.scrollToTop();\r\n  };\r\n}\r\n","import { useHistory } from \"react-router\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { MainPageScrolling } from \"../../lib/MainPageScrolling\";\r\n\r\nconst GoBackButton = (): JSX.Element => {\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  const handleGoBack = (): void => {\r\n    const pageScrolling = new MainPageScrolling(history);\r\n    pageScrolling.toTop();\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-right pr-2\">\r\n      <button\r\n        className=\"btn btn-sm mt-4 is-width-medium form-control\"\r\n        onClick={handleGoBack}\r\n      >\r\n        {t(\"button.goBack\")}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoBackButton;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport {\r\n  setIsNewRequest,\r\n  setStartAmountOfRequests,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../../store\";\r\nimport { Routing } from \"../../lib/routing\";\r\nimport { MessageIO } from \"../../lib/messageIO\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport RequestsCollection from \"../../components/requests/RequestsCollection\";\r\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\r\n\r\nconst RequestsView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const resetRequestVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    const routing = new Routing(dispatch);\r\n    routing.protect((): void => {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetchAll((): void => {\r\n        isUserChange && dispatch(setStartAmountOfRequests());\r\n        resetRequestVariableAndScrollToTop();\r\n      });\r\n    });\r\n    return () => {\r\n      resetRequestVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2>{t(\"texts.requests.overview.headline\")}</h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <GoBackButton />\r\n        {isFetchingMessages ? <WaitSpinner /> : <RequestsCollection />}\r\n        {amountOfRequests !== 0 && <GoBackButton />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsView;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { User, Plant, Message } from \"../../typeDefinitions\";\r\n\r\ntype ReplyThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst ReplyThumbnail = ({ message }: ReplyThumbnailProps): JSX.Element => {\r\n  const { _id, seller, plant } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"card p-3 mt-4 \">\r\n      <h4>\r\n        {t(\"texts.replies.replyTile.headline\")} {name}\r\n      </h4>\r\n      <h5>\r\n        {t(\"texts.replies.replyTile.subheadline\")} {username}\r\n      </h5>\r\n      <div className=\"text-center\">\r\n        <Link\r\n          to={`/replies/fetch/${_id}`}\r\n          className=\"btn is-width-medium form-control is-link\"\r\n        >\r\n          {t(\"link.details\")}\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyThumbnail;\r\n","import { useAppSelector } from \"../../hooks\";\r\nimport { RootState } from \"../../store\";\r\nimport { Message, User } from \"../../typeDefinitions\";\r\nimport ReplyTile from \"./ReplyTile\";\r\n\r\nconst RepliesCollection = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((message: Message): JSX.Element | null => {\r\n        const { _id, buyer, reply } = message;\r\n        return (buyer as User)._id === (loggedInUser as User)._id &&\r\n          reply !== \"\" ? (\r\n          <ReplyTile message={message} key={_id} />\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesCollection;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport {\r\n  setIsNewReply,\r\n  setStartAmountOfReplies,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../../store\";\r\nimport { Routing } from \"../../lib/routing\";\r\nimport { MessageIO } from \"../../lib/messageIO\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport RepliesCollection from \"../../components/replies/RepliesCollection\";\r\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\r\n\r\nconst RepliesView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const resetReplyVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewReply(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    const routing = new Routing(dispatch);\r\n    routing.protect((): void => {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetchAll((): void => {\r\n        isUserChange && dispatch(setStartAmountOfReplies());\r\n        resetReplyVariableAndScrollToTop();\r\n      });\r\n    });\r\n    return () => {\r\n      resetReplyVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2>{t(\"texts.replies.overview.headline\")}</h2>\r\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\r\n        <GoBackButton />\r\n        {isFetchingMessages ? <WaitSpinner /> : <RepliesCollection />}\r\n        {amountOfReplies !== 0 && <GoBackButton />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesView;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setErrorMessage } from \"../../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message } from \"../../typeDefinitions\";\r\nimport { RootState } from \"../../store\";\r\nimport { Routing } from \"../../lib/routing\";\r\nimport { MessageIO } from \"../../lib/messageIO\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst RequestCreateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isCreatingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isCreatingMessage\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n  const { name } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect((): void => {\r\n      dispatch(setErrorMessage(null));\r\n      scroll.scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const handleCreateMessageForRequest = (\r\n    event: React.FormEvent<HTMLFormElement>,\r\n    { _id, creator }: Plant\r\n  ): void => {\r\n    const { request } = event.target as any;\r\n    const newMessage: Message = {\r\n      seller: (creator as User)._id,\r\n      plant: _id,\r\n      request: request.value,\r\n    };\r\n    event.preventDefault();\r\n    const messageIO = new MessageIO(dispatch);\r\n    messageIO.create(newMessage, (): void => {\r\n      history.goBack();\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Request text missing\":\r\n        return t(\"errorTexts.messages.createRequest.form.requestTextMissing\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isCreatingMessage ? true : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\">\r\n          {t(\"texts.requests.createRequest.form.headline\")}\r\n        </h2>\r\n        <h3 className=\"mb-4\">\r\n          {t(\"texts.requests.createRequest.form.subheadline\")} {name}\r\n        </h3>\r\n        <form\r\n          className=\"pl-0 form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleCreateMessageForRequest(event, plant);\r\n          }}\r\n        >\r\n          <div>\r\n            <textarea\r\n              name=\"request\"\r\n              cols={35}\r\n              rows={7}\r\n              className=\"mb-4 form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <div className=\"text-right\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={buttonState()}\r\n              className=\"btn btn-sm mx-2 form-control is-width-medium\"\r\n            >\r\n              {t(\"button.send\")}\r\n            </button>\r\n            <button\r\n              className=\"btn btn-sm mx-2 form-control is-width-medium\"\r\n              onClick={(): void => {\r\n                history.goBack();\r\n              }}\r\n            >\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestCreateForm;\r\n","import WaitSpinner from \"./WaitSpinner\";\r\n\r\ntype WaitSpinnerTextProps = {\r\n  text: string;\r\n};\r\n\r\nconst WaitSpinnerText = ({ text }: WaitSpinnerTextProps): JSX.Element => {\r\n  return (\r\n    <div className=\"container d-flex align-items-center justify-content-center mt-5\">\r\n      <WaitSpinner />\r\n      <span className=\"is-text-bold\">{text}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitSpinnerText;\r\n","type ReplyProps = {\r\n  headline: string;\r\n  text: string | undefined;\r\n};\r\n\r\nconst Reply = ({ headline, text }: ReplyProps): JSX.Element | null => {\r\n  if (!text) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h5>{headline}</h5>\r\n      <p className=\"text-field p-3 mb-4\">{text}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reply;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport {\r\n  setMessage,\r\n  decreaseAmountOfRequests,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../../typeDefinitions\";\r\nimport { RootState } from \"../../store\";\r\nimport { Routing } from \"../../lib/routing\";\r\nimport { MessageIO } from \"../../lib/messageIO\";\r\nimport WaitSpinnerText from \"../../components/spinners/WaitSpinnerText\";\r\nimport Reply from \"../../components/replies/Reply\";\r\n\r\nconst RequestDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n  const { _id, buyer, plant, request, reply } = message as Message;\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect((): void => {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetch(messageId, (): void => {\r\n        scroll.scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const handleChangeMessageState = (message: Message): void => {\r\n    const setBuyerMessageInactive = (message: Message): Message => {\r\n      const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n      clonedMessage.messageState = false;\r\n      dispatch(setMessage(clonedMessage));\r\n      return clonedMessage;\r\n    };\r\n\r\n    const updateBuyerMessage = (updatedMessage: Message) => {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.update(\r\n        updatedMessage._id as MessageId,\r\n        updatedMessage,\r\n        (): void => {\r\n          dispatch(decreaseAmountOfRequests());\r\n          history.goBack();\r\n        }\r\n      );\r\n    };\r\n\r\n    const updatedMessage = setBuyerMessageInactive(message);\r\n    updateBuyerMessage(updatedMessage);\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  if (isFetchingMessage || !buyer || !plant) {\r\n    return <WaitSpinnerText text={\"Loading request\"} />;\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">\r\n          {t(\"texts.requests.requestDetails.headline\")} {name}\r\n        </h2>\r\n        <h5>\r\n          {t(\"texts.requests.requestDetails.subheadline\")} {username}\r\n        </h5>\r\n        <p className=\"text-field p-3 mb-4\">{request}</p>\r\n        <Reply\r\n          headline={t(\"texts.requests.requestDetails.yourReply\")}\r\n          text={reply}\r\n        />\r\n        <div className=\"text-right px-3\">\r\n          {!reply && (\r\n            <Link to={`/messages/update/${_id}`} className=\"is-link\">\r\n              <button className=\"btn btn-sm ml-2 is-width-medium form-control mb-1\">\r\n                {t(\"button.reply\")}\r\n              </button>\r\n            </Link>\r\n          )}\r\n          <button\r\n            className=\"btn btn-sm ml-2 is-width-medium form-control mb-1\"\r\n            onClick={(): void => {\r\n              handleChangeMessageState(message);\r\n            }}\r\n          >\r\n            {t(\"button.done\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link\r\n            to={\"/requests/fetch-all\"}\r\n            className=\"is-link\"\r\n            onClick={scroll.scrollToTop}\r\n          >\r\n            <button className=\"btn btn-sm mt-4 is-width-medium form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { decreaseAmountOfReplies } from \"../../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../../typeDefinitions\";\r\nimport { RootState } from \"../../store\";\r\nimport { Routing } from \"../../lib/routing\";\r\nimport { MessageIO } from \"../../lib/messageIO\";\r\nimport WaitSpinnerText from \"../../components/spinners/WaitSpinnerText\";\r\nimport Reply from \"../../components/replies/Reply\";\r\n\r\nconst ReplyDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const isDeletingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingMessage\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n  const { _id, seller, plant, request, reply } = message as Message;\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect((): void => {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetch(messageId, (): void => {\r\n        scroll.scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const handleDeleteMessage = (messageId: MessageId): void => {\r\n    const messageIO = new MessageIO(dispatch);\r\n    messageIO.delete(messageId, (): void => {\r\n      dispatch(decreaseAmountOfReplies());\r\n      history.goBack();\r\n    });\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isDeletingMessage ? true : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  if (isFetchingMessage || !seller || !plant) {\r\n    return <WaitSpinnerText text={\"Loading reply\"} />;\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">\r\n          {t(\"texts.replies.replyDetails.headline\")} {name}\r\n        </h2>\r\n        <p className=\"text-field p-3 mb-4\">{request}</p>\r\n        <Reply\r\n          headline={`${t(\"texts.replies.replyDetails.replyBy\")} ${username}`}\r\n          text={reply}\r\n        />\r\n        <div className=\"text-right px-3\">\r\n          <button\r\n            disabled={buttonState()}\r\n            className=\"btn btn-sm ml-2 is-width-medium form-control mb-1\"\r\n            onClick={(): void => {\r\n              handleDeleteMessage(_id as MessageId);\r\n            }}\r\n          >\r\n            {t(\"button.delete\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link\r\n            to={\"/replies/fetch-all\"}\r\n            className=\"is-link\"\r\n            onClick={scroll.scrollToTop}\r\n          >\r\n            <button className=\"btn btn-sm mt-4 is-width-medium form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyDetails;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setMessage } from \"../../reducer/jungleSwapSlice\";\r\nimport { Message, MessageId } from \"../../typeDefinitions\";\r\nimport { RootState } from \"../../store\";\r\nimport { Routing } from \"../../lib/routing\";\r\nimport { MessageIO } from \"../../lib/messageIO\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst RequestUpdateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const isUpdatingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUpdatingMessage\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n  const { request } = message as Message;\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect((): void => {\r\n      scroll.scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const handleCreateReply = (\r\n    { target }: React.ChangeEvent<HTMLTextAreaElement>,\r\n    message: Message\r\n  ): void => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.reply = target.value;\r\n    dispatch(setMessage(clonedMessage));\r\n  };\r\n\r\n  const handleUpdateMessage = (updatedMessage: Message): void => {\r\n    const messageIO = new MessageIO(dispatch);\r\n    messageIO.update(\r\n      updatedMessage._id as MessageId,\r\n      updatedMessage,\r\n      (): void => {\r\n        history.goBack();\r\n      }\r\n    );\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Reply text missing\":\r\n        return t(\"errorTexts.messages.updateRequest.form.replyTextMissing\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isUpdatingMessage ? true : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\">\r\n          {t(\"texts.requests.updateRequest.form.headline\")}\r\n        </h2>\r\n        <div className=\"card is-card-width-small mb-5\">\r\n          <div className=\"card-body\">\r\n            <p>{request}</p>\r\n            <textarea\r\n              name=\"reply\"\r\n              placeholder={t(\r\n                \"texts.requests.updateRequest.form.replyPlaceholder\"\r\n              )}\r\n              cols={31}\r\n              rows={6}\r\n              className=\"mb-4 form-control is-width-full\"\r\n              onChange={(\r\n                event: React.ChangeEvent<HTMLTextAreaElement>\r\n              ): void => {\r\n                handleCreateReply(event, message);\r\n              }}\r\n            />\r\n            <ErrorMessage\r\n              message={errorMessage}\r\n              outputFunction={convertErrorMessage}\r\n            />\r\n            <div className=\"row justify-content-end px-3\">\r\n              <button\r\n                disabled={buttonState()}\r\n                className=\"btn btn-sm is-width-medium form-control mr-3 mb-2\"\r\n                onClick={(): void => {\r\n                  handleUpdateMessage(message);\r\n                }}\r\n              >\r\n                {t(\"button.submit\")}\r\n              </button>\r\n              <button\r\n                className=\"btn btn-sm is-width-medium form-control mb-2\"\r\n                onClick={(): void => {\r\n                  history.goBack();\r\n                }}\r\n              >\r\n                {t(\"button.goBack\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestUpdateForm;\r\n","import { useTranslation } from \"react-i18next\";\r\n\r\nconst Unauthorized = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"unauthorized has-background-image2\">\r\n      <div>\r\n        <h1>{t(\"texts.unauthorized.headline\")}</h1>\r\n        <h2>{t(\"texts.unauthorized.subheadline1\")}</h2>\r\n        <h3>{t(\"texts.unauthorized.subheadline2\")}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Unauthorized;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"not-found has-background-image2\">\r\n      <div>\r\n        <h1>{t(\"texts.notFound.headline\")}</h1>\r\n        <h2>{t(\"texts.notFound.subheadline1\")}</h2>\r\n        <h3>{t(\"texts.notFound.subheadline2\")}</h3>\r\n        <Link to={\"/\"} className=\"is-link\">\r\n          <button className=\"ml-2 btn btn-sm is-width-medium form-control\">\r\n            {t(\"button.takeMeHome\")}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useEffect } from \"react\";\r\n\r\ntype KommunicateSettings = {\r\n  appId: string;\r\n  popupWidget: boolean;\r\n  automaticChatOpenOnNavigation: boolean;\r\n};\r\n\r\nconst KommunicateChat = (): JSX.Element => {\r\n  useEffect(() => {\r\n    const createLauncherIcon = (htmlDocument: Document, method: any): void => {\r\n      const kommunicateSettings: KommunicateSettings = {\r\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      const scriptElement = htmlDocument.createElement(\"script\");\r\n      scriptElement.type = \"text/javascript\";\r\n      scriptElement.async = true;\r\n      scriptElement.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      const headElement = htmlDocument.getElementsByTagName(\"head\")[0];\r\n      headElement.appendChild(scriptElement);\r\n      (window as any).kommunicate = method;\r\n      method._globals = kommunicateSettings;\r\n    };\r\n\r\n    createLauncherIcon(document, (window as any).kommunicate || {});\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default KommunicateChat;\r\n","import { useAppSelector } from \"../../hooks\";\r\nimport { RootState } from \"../../store\";\r\nimport { Plant, User } from \"../../typeDefinitions\";\r\nimport PlantThumbnail from \"./PlantThumbnail\";\r\n\r\nconst PlantsCreatedCollection = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n\r\n  return (\r\n    <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-2 row-cols-xl-3 row-cols-xxl-3\">\r\n      {plants.map((plant: Plant): JSX.Element | null => {\r\n        const { _id, creator } = plant;\r\n        return (creator as User)._id === (loggedInUser as User)._id ? (\r\n          <PlantThumbnail plant={plant} key={_id} />\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCreatedCollection;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { RootState } from \"../../store\";\r\nimport { Routing } from \"../../lib/routing\";\r\nimport { PlantIO } from \"../../lib/plantIO\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport PlantsCreatedCollection from \"../../components/plants/PlantsCreatedCollection\";\r\n\r\nconst PlantsCreatedView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isFetchingPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlants\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect((): void => {\r\n      const plantIO = new PlantIO(dispatch);\r\n      plantIO.fetchAll((): void => {\r\n        scroll.scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-5\">\r\n        <h2>{t(\"texts.plants.myPlants.headline\")}</h2>\r\n      </div>\r\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsCreatedCollection />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCreatedView;\r\n","import { useState, useEffect, useContext, createContext } from \"react\";\r\n\r\ntype OnlineStatusProviderProps = {\r\n  children: any;\r\n};\r\n\r\nconst OnlineStatusContext = createContext(true);\r\n\r\nexport const OnlineStatusProvider = ({\r\n  children,\r\n}: OnlineStatusProviderProps): JSX.Element => {\r\n  const [onlineStatus, setOnlineStatus] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    const handleOfflineEventCallback = (): void => {\r\n      setOnlineStatus(false);\r\n    };\r\n\r\n    const handleOnlineEventCallback = (): void => {\r\n      setOnlineStatus(true);\r\n    };\r\n\r\n    window.addEventListener(\"offline\", handleOfflineEventCallback);\r\n    window.addEventListener(\"online\", handleOnlineEventCallback);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"offline\", handleOfflineEventCallback);\r\n      window.removeEventListener(\"online\", handleOnlineEventCallback);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <OnlineStatusContext.Provider value={onlineStatus}>\r\n      {children}\r\n    </OnlineStatusContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useOnlineStatus = (): boolean => {\r\n  return useContext(OnlineStatusContext);\r\n};\r\n","import { useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { setErrorMessage } from \"../../reducer/jungleSwapSlice\";\r\n\r\ntype ModalBodyProps = {\r\n  headline: string;\r\n  subheadline: string;\r\n  text: string;\r\n  isClose: boolean;\r\n};\r\n\r\nconst ModalBody = ({\r\n  headline,\r\n  subheadline,\r\n  text,\r\n  isClose,\r\n}: ModalBodyProps): JSX.Element => {\r\n  const divElementRef = useRef<HTMLDivElement | null>(null);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  const handleCloseModal = (): void => {\r\n    dispatch(setErrorMessage(null));\r\n  };\r\n\r\n  const handleClickOutside = (event: any): void => {\r\n    if (divElementRef.current === event.target) {\r\n      handleCloseModal();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={divElementRef}\r\n      className=\"error-modal fade-error-modal-in\"\r\n      onClick={(event: any): void => {\r\n        isClose && handleClickOutside(event);\r\n      }}\r\n    >\r\n      <div className=\"error-modal-box\">\r\n        <h1>{headline}</h1>\r\n        <h2>{subheadline}</h2>\r\n        <h3>{text}</h3>\r\n        {isClose && (\r\n          <button\r\n            className=\"btn form-control is-width-small mt-4 mb-3\"\r\n            onClick={handleCloseModal}\r\n          >\r\n            {t(\"button.proceed\")}\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalBody;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport ModalBody from \"./ModalBody\";\r\n\r\ntype ErrorModalProps = {\r\n  message: string | null;\r\n};\r\n\r\nconst ErrorModal = ({ message }: ErrorModalProps): JSX.Element | null => {\r\n  const { t } = useTranslation();\r\n\r\n  const convertErrorMessage = (message: string): string => {\r\n    switch (message) {\r\n      // Authentification\r\n      case \"Error while creating user\":\r\n        return t(\"errorTexts.authentification.signUp.errorWhileCreatingUser\");\r\n      case \"User does not exist\":\r\n        return t(\"errorTexts.authentification.signIn.userUnknown\");\r\n      case \"Could not update user\":\r\n        return t(\"errorTexts.authentification.logOut.noUserUpdate\");\r\n      // Plants\r\n      case \"Create plant failed\":\r\n        return t(\"errorTexts.plants.createPlantFailed\");\r\n      case \"Fetch plant failed\":\r\n        return t(\"errorTexts.plants.fetchPlantFailed\");\r\n      case \"Fetch all plants failed\":\r\n        return t(\"errorTexts.plants.techAllPlantsFailed\");\r\n      case \"Search plant failed\":\r\n        return t(\"errorTexts.plants.searchPlantFailed\");\r\n      case \"Update plant failed\":\r\n        return t(\"errorTexts.plants.updatePlantFailed\");\r\n      case \"Delete plant failed\":\r\n        return t(\"errorTexts.plants.deletePlantFailed\");\r\n      // Messages\r\n      case \"Create message failed\":\r\n        return t(\"errorTexts.messages.createMessageFailed\");\r\n      case \"Fetch message failed\":\r\n        return t(\"errorTexts.messages.fetchMessageFailed\");\r\n      case \"Fetch all messages failed\":\r\n        return t(\"errorTexts.messages.fetchAllMessagesFailed\");\r\n      case \"Update message failed\":\r\n        return t(\"errorTexts.updateMessageFailed\");\r\n      case \"Delete message failed\":\r\n        return t(\"errorTexts.deleteMessageFailed\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  if (!message || message.includes(\"Form\")) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ModalBody\r\n      headline={t(\"texts.errorModal.headline\")}\r\n      subheadline={t(\"texts.errorModal.subheadline\")}\r\n      text={convertErrorMessage(message)}\r\n      isClose={true}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorModal;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport ModalBody from \"./ModalBody\";\r\n\r\ntype OfflineModalProps = {\r\n  isOnline: boolean;\r\n};\r\n\r\nconst OfflineModal = ({ isOnline }: OfflineModalProps): JSX.Element | null => {\r\n  const { t } = useTranslation();\r\n  \r\n  if (isOnline) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ModalBody\r\n      headline={t(\"texts.offlineModal.headline\")}\r\n      subheadline={t(\"texts.offlineModal.subheadline\")}\r\n      text={t(\"errorTexts.offline\")}\r\n      isClose={false}\r\n    />\r\n  );\r\n};\r\n\r\nexport default OfflineModal;\r\n","import { useAppSelector } from \"../../hooks\";\r\nimport { useOnlineStatus } from \"../../custom-hooks/useOnlineStatus\";\r\nimport { RootState } from \"../../store\";\r\nimport ErrorModal from \"./ErrorModal\";\r\nimport OfflineModal from \"./OfflineModal\";\r\n\r\nconst Modals = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const isOnline = useOnlineStatus();\r\n\r\n  if (isOnline) {\r\n    return <ErrorModal message={errorMessage} />;\r\n  }\r\n  return <OfflineModal isOnline={isOnline} />;\r\n};\r\n\r\nexport default Modals;\r\n","import { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nimport NavBar from \"./components/navigation/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./views/home/Home\";\r\nimport SignUp from \"./views/authentification/SignUp\";\r\nimport SignIn from \"./views/authentification/SignIn\";\r\nimport LogOut from \"./components/authentification/LogOut\";\r\nimport CreatePlantForm from \"./views/plants/PlantCreateForm\";\r\nimport PlantDetails from \"./views/plants/PlantDetails\";\r\nimport UpdatePlantForm from \"./views/plants/PlantUpdateForm\";\r\nimport CheckoutPage from \"./views/apis/CheckoutView\";\r\nimport RequestsOverview from \"./views/requests/RequestsView\";\r\nimport RepliesOverview from \"./views/replies/RepliesView\";\r\nimport CreateRequestForm from \"./views/requests/RequestCreateForm\";\r\nimport RequestDetails from \"./views/requests/RequestDetails\";\r\nimport ReplyDetails from \"./views/replies/ReplyDetails\";\r\nimport UpdateRequestForm from \"./views/requests/RequestUpdateForm\";\r\nimport Unauthorized from \"./views/authentification/Unauthorized\";\r\nimport NotFound from \"./views/errors/NotFound\";\r\nimport KommunicateChat from \"./components/apis/KommunicateChat\";\r\nimport MyPlants from \"./views/plants/PlantsCreatedView\";\r\nimport Modals from \"./components/modals/Modals\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n\r\n        <Route path=\"/auth/sign-up\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/auth/sign-in\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/auth/log-out\">\r\n          <LogOut />\r\n        </Route>\r\n        <Route path=\"/auth/unauthorized\">\r\n          <Unauthorized />\r\n        </Route>\r\n\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/fetch/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n        <Route path=\"/plants/my-own\">\r\n          <MyPlants />\r\n        </Route>\r\n\r\n        <Route path=\"/messages/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/messages/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch-all\">\r\n          <RequestsOverview />\r\n        </Route>\r\n        <Route path=\"/requests/fetch/:messageId\">\r\n          <RequestDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/replies/fetch-all\">\r\n          <RepliesOverview />\r\n        </Route>\r\n        <Route path=\"/replies/fetch/:messageId\">\r\n          <ReplyDetails />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Footer />\r\n      <Modals />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"./reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","const en = {\r\n  translations: {\r\n    link: {\r\n      jungleSwap: \"JungleSwap\",\r\n      allPlants: \"All Plants\",\r\n      myPlants: \"My Plants\",\r\n      createPlant: \"Create Plant\",\r\n      requests: \"Requests\",\r\n      replies: \"Replies\",\r\n      logOut: \"Log out\",\r\n      tryIt: \"Try it!\",\r\n      signIn: \"Sign in\",\r\n      signUp: \"Sign up\",\r\n      details: \"Details\",\r\n      tooltipps: {\r\n        newRequest: \"new request\",\r\n        newReply: \"new reply\",\r\n        search: \"search plant\",\r\n      },\r\n    },\r\n\r\n    button: {\r\n      signIn: \"Sign in\",\r\n      signUp: \"Sign up\",\r\n      create: \"Create\",\r\n      update: \"Update\",\r\n      save: \"Save\",\r\n      delete: \"Delete\",\r\n      send: \"Send\",\r\n      submit: \"Submit\",\r\n      buy: \"Buy\",\r\n      swap: \"Swap\",\r\n      reply: \"Reply\",\r\n      done: \"Done\",\r\n      goBack: \"Back\",\r\n      more: \"More\",\r\n      proceed: \"Proceed\",\r\n      takeMeHome: \"Take me home\",\r\n    },\r\n\r\n    select: {\r\n      location: {\r\n        title: \"Select location\",\r\n        sun: \"sun\",\r\n        shade: \"shade\",\r\n        sunAndShade: \"sun and shade\",\r\n      },\r\n    },\r\n\r\n    texts: {\r\n      home: {\r\n        title: {\r\n          headline: \"JungleSwap\",\r\n          subheadline: \"Share your green heart\",\r\n        },\r\n        about: {\r\n          headline: \"Welcome to JungleSwap!\",\r\n          subheadline: \"Add green to your Home\",\r\n          paragraph: {\r\n            line1: \"It's easy-peasy.\",\r\n            line2: \"Share your plant offshoots.\",\r\n            line3: \"Make money!\",\r\n            line4: \"Or swap them for another plant.\",\r\n            line5: \"Don't have any baby plants?\",\r\n            line6: \"You can simply shop and give a plant a new home.\",\r\n          },\r\n        },\r\n        allPlants: {\r\n          headline: \"Plants\",\r\n        },\r\n        searchPlant: {\r\n          headline: \"Search a plant\",\r\n          namePlaceholder: \"Enter name\",\r\n        },\r\n      },\r\n      authentification: {\r\n        signIn: {\r\n          headline: \"Sign In\",\r\n          email: \"Email address\",\r\n          password: \"Password\",\r\n          enterPlaceholder: \"Enter\",\r\n        },\r\n        signUp: {\r\n          headline: \"Sign Up\",\r\n          username: \"Username\",\r\n          email: \"Email address\",\r\n          password: \"Password\",\r\n          enterPlaceholder: \"Enter\",\r\n          alreadyAccountCreated: \"Already have an account?\",\r\n        },\r\n      },\r\n      plants: {\r\n        myPlants: {\r\n          headline: \"My plants\",\r\n        },\r\n        createPlant: {\r\n          form: {\r\n            headline: \"Create a plant\",\r\n            name: \"Name\",\r\n            description: \"Description\",\r\n            size: \"Size (cm)\",\r\n            location: \"Location\",\r\n            price: \"Price (EUR)\",\r\n            image: \"Image\",\r\n            enterPlaceholder: \"Enter\",\r\n          },\r\n        },\r\n        updatePlant: {\r\n          form: {\r\n            headline: \"Update your plant\",\r\n            name: \"Name\",\r\n            description: \"Description\",\r\n            size: \"Size (cm)\",\r\n            location: \"Location\",\r\n            price: \"Price (EUR)\",\r\n            image: \"Image\",\r\n          },\r\n        },\r\n        plantThumbnail: {\r\n          currency: \"€\",\r\n        },\r\n        plantDetails: {\r\n          headline: \"Plant details\",\r\n          name: \"Name:\",\r\n          description: \"Description:\",\r\n          size: \"Size:\",\r\n          sizeUnit: \"cm\",\r\n          likes: \"Likes:\",\r\n          price: \"Price:\",\r\n          currency: \"€\",\r\n        },\r\n        checkout: {\r\n          form: {\r\n            price: \" Price:\",\r\n            currency: \"€\",\r\n            payNow: \"Pay now\",\r\n            paymentSuccessful: \"Payment succeeded.\",\r\n          },\r\n        },\r\n      },\r\n      requests: {\r\n        createRequest: {\r\n          form: {\r\n            headline: \"Your request\",\r\n            subheadline: \"for\",\r\n          },\r\n        },\r\n        updateRequest: {\r\n          form: {\r\n            headline: \"Reply your request\",\r\n            replyPlaceholder: \"Your reply\",\r\n          },\r\n        },\r\n        overview: {\r\n          headline: \"Requests for your plants\",\r\n        },\r\n        requestDetails: {\r\n          headline: \"Request for\",\r\n          subheadline: \"by\",\r\n          yourReply: \"Your reply\",\r\n        },\r\n        requestTile: {\r\n          headline: \"Request for\",\r\n          subheadline: \"by\",\r\n        },\r\n      },\r\n      replies: {\r\n        overview: {\r\n          headline: \"Replies for your requests\",\r\n        },\r\n        replyDetails: {\r\n          headline: \"Your request for\",\r\n          replyBy: \"Reply by\",\r\n        },\r\n        replyTile: {\r\n          headline: \"Reply for\",\r\n          subheadline: \"by\",\r\n        },\r\n      },\r\n      notFound: {\r\n        headline: \"Oh-oh!\",\r\n        subheadline1: \"We think you got lost in the jungle!\",\r\n        subheadline2: \"404 Not Found\",\r\n      },\r\n      unauthorized: {\r\n        headline: \"Oh-oh!\",\r\n        subheadline1: \"We think you reached the forbidden part of the jungle!\",\r\n        subheadline2: \"401 Unauthorized\",\r\n      },\r\n      footer: {\r\n        copyright: \"©\",\r\n        appAuthor1: \"Christian Gerbig\",\r\n        appAuthor2: \"Lisa Montebaur\",\r\n      },\r\n      errorModal: {\r\n        headline: \"Oh-oh!\",\r\n        subheadline: \"Something went wrong in the jungle!\",\r\n      },\r\n      offlineModal: {\r\n        headline: \"Oh-oh!\",\r\n        subheadline: \"You lost your roots in the jungle!\",\r\n      },\r\n    },\r\n\r\n    errorTexts: {\r\n      authentification: {\r\n        unauthorized: \"Unauthorized user\",\r\n        signUp: {\r\n          form: {\r\n            usernameMissing: \"Please enter username\",\r\n            emailMissing: \"Please enter email\",\r\n            passwordMissing: \"Please enter password\",\r\n            emailFormatInvalid: \"The email format is invalid\",\r\n            passwordInvalid:\r\n              \"The password needs to have 8 characters, a number, a special character and an uppercase alphabet\",\r\n            userAlreadyExists: \"Username or email already exists\",\r\n          },\r\n          errorWhileCreatingUser: \"Error while creating user\",\r\n        },\r\n        signIn: {\r\n          form: {\r\n            emailMissing: \"Please enter email\",\r\n            passwordMissing: \"Please enter password\",\r\n            emailFormatInvalid: \"The email format is invalid\",\r\n            noMatchPasswords: \"Passwords don't match\",\r\n          },\r\n          userUnknown: \"User does not exist\",\r\n        },\r\n        logOut: {\r\n          noUserUpdate: \"Could not update user\",\r\n        },\r\n      },\r\n      plants: {\r\n        createPlant: {\r\n          form: {\r\n            nameMissing: \"Please enter name\",\r\n            descriptionMissing: \"Please enter description\",\r\n            sizeMissing: \"Please enter size\",\r\n            locationMissing: \"Please enter location\",\r\n            priceMissing: \"Please enter price\",\r\n            imageMissing: \"Please choose an image\",\r\n            noImageSelected: \"Please choose an image to delete\",\r\n          },\r\n        },\r\n        createPlantFailed: \"Creating the plant failed\",\r\n        fetchPlantFailed: \"Fetching the plant failed\",\r\n        fetchAllPlantsFailed: \"Fetching all plants failed\",\r\n        updatePlantFailed: \"Updating the plant failed\",\r\n        deletePlantFailed: \"Delete plant failed\",\r\n      },\r\n      messages: {\r\n        createRequest: {\r\n          form: {\r\n            requestTextMissing: \"Please enter request text\",\r\n          },\r\n        },\r\n        updateRequest: {\r\n          form: {\r\n            replyTextMissing: \"Please enter reply text\",\r\n          },\r\n        },\r\n        createMessageFailed: \"Creating message failed\",\r\n        fetchMessageFailed: \"Fetching message failed\",\r\n        fetchAllMessagesFailed: \"Fetching all messages failed\",\r\n        updateMessageFailed: \"Updating the message failed\",\r\n        deleteMessageFailed: \"Delete message failed\",\r\n      },\r\n      offline: \"No internet connection\",\r\n      general: \"An error occured\",\r\n    },\r\n  },\r\n};\r\n\r\nexport default en;\r\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport en from \"./locales/en\";\r\n\r\ni18n.use(initReactI18next).init({\r\n  resources: {\r\n    en: en,\r\n  },\r\n  fallbackLng: \"en\",\r\n  debug: false,\r\n  ns: [\"translations\"],\r\n  defaultNS: \"translations\",\r\n  interpolation: {\r\n    escapeValue: false,\r\n  },\r\n});\r\n\r\nexport default i18n;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\nimport { OnlineStatusProvider } from \"./custom-hooks/useOnlineStatus\";\r\n\r\nimport \"./i18n\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <OnlineStatusProvider>\r\n        <Router>\r\n          <App />\r\n        </Router>\r\n      </OnlineStatusProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}