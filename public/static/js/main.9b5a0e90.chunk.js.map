{"version":3,"sources":["reducer/jungleSwapSlice.ts","config.ts","components/NavBar.tsx","components/Footer.tsx","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","screens/Home.tsx","screens/SignUp.tsx","screens/SignIn.tsx","components/LogOut.tsx","screens/CreatePlantForm.tsx","screens/PlantDetails.tsx","screens/UpdatePlantForm.tsx","components/CheckoutForm.tsx","screens/CheckoutPage.tsx","screens/RequestsPage.tsx","screens/RepliesPage.tsx","screens/CreateRequestForm.tsx","screens/RequestDetails.tsx","screens/ReplyDetails.tsx","screens/UpdateRequestForm.tsx","screens/NotFound.tsx","components/Chat.tsx","App.tsx","store.ts","index.tsx"],"names":["apiPath","process","fetchAllPlants","createAsyncThunk","_options","a","dispatch","axios","get","response","setPlants","data","console","log","fetchQueryPlants","query","createPlant","uploadForm","plant","history","name","description","size","location","price","post","imageUrl","imagePublicId","newPlant","withCredentials","addPlant","push","scroll","scrollToBottom","setError","error","readPlant","plantId","setPlant","imageChange","destroyImageData","image","FormData","append","clonePlant","JSON","parse","stringify","updatePlant","updatedPlant","patch","setPlantChanges","scrollToPlants","deletePlant","delete","removePlant","createPayment","setClientSecret","clientSecret","payPlant","fetchAllRequests","isUserChange","setRequests","setStartAmountOfRequests","createRequest","newRequest","addRequest","_id","readRequest","requestId","setRequest","updateRequest","updatedRequest","setRequestChanges","deleteRequest","removeRequest","decreaseAmountOfRequests","readUser","setLoggedInUser","setIsFetchingUser","signUp","newUser","setIsUserChange","signIn","user","logOut","intervalId","clearInterval","setIntervalId","setMinutesCounter","setIsNewRequest","scrollToTop","jungleSwapSlice","createSlice","initialState","isFetchingUser","loggedInUser","plants","requests","request","amountOfRequests","amountOfReplies","isNewRequest","isNewReply","minutesCounter","isMessagesDropdown","headerContainerHeight","aboutContainerHeight","reducers","state","action","payload","map","singlePlant","filter","buyer","seller","message","reply","requestState","singleRequest","currentRequest","length","setStartAmountOfReplies","currentReply","setAmountOfRequests","setAmountOfReplies","setIsNewReply","increaseMinutesCounter","setHeaderContainerHeight","setAboutContainerHeight","scrollToAbout","scrollTo","actions","NavBar","useSelector","jungleSwap","useDispatch","useEffect","setInterval","currentAmountOfRequests","currentAmountOfReplies","Navbar","className","variant","expand","fixed","Brand","to","onClick","Toggle","aria-controls","Collapse","id","Nav","title","icon","faBell","username","Footer","Home","useState","setQuery","elementRef","useRef","headerElementHeight","Math","round","current","getBoundingClientRect","height","aboutElementHeight","role","ref","element","src","alt","type","placeholder","value","onChange","event","target","SignUp","useHistory","onSubmit","preventDefault","email","password","toLowerCase","handleSignUp","htmlFor","formNoValidate","SignIn","handleSignIn","LogOut","CreatePlantForm","plantImage","files","handleCreatePlant","min","PlantDetails","useParams","creator","forEach","handleDeletePlant","UpdatePlantForm","handlePlantEntryChange","itemNumber","handleImageChange","handleUpdatePlant","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","handleChange","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","disabled","promise","loadStripe","CheckoutPage","RequestsPage","handleResetAll","RepliesPage","CreateRequestForm","handleCreateRequest","cols","rows","RequestDetails","cloneRequest","handleSetRequestInactive","ReplyDetails","UpdateRequestForm","handleCreateReply","handleUpdateRequest","NotFound","KommunicateChat","d","m","s","document","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","withRouter","exact","path","component","store","configureStore","reducer","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.9b5a0e90.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\nexport interface User {\r\n  _id?: string;\r\n  username?: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface Plant {\r\n  _id?: string;\r\n  name?: string;\r\n  description?: string;\r\n  size?: number;\r\n  imageUrl?: string;\r\n  imagePublicId?: string;\r\n  location?: string;\r\n  price?: number;\r\n  creator?: string | User | undefined;\r\n}\r\n\r\nexport interface Request {\r\n  _id?: string;\r\n  buyer?: string | User | undefined;\r\n  seller?: string | User | undefined;\r\n  plant?: string | Plant | undefined;\r\n  message?: string;\r\n  reply?: string;\r\n  requestState?: boolean;\r\n}\r\n\r\nexport type LoggedInUser = User | null;\r\nexport type IntervalId = NodeJS.Timer | null;\r\nexport type Error = string | null;\r\n\r\ninterface SliceState {\r\n  isFetchingUser: boolean;\r\n  loggedInUser: LoggedInUser;\r\n  isUserChange: boolean;\r\n  plants: Plant[];\r\n  plant: Plant | {};\r\n  requests: Request[];\r\n  request: Request | {};\r\n  amountOfRequests: number;\r\n  amountOfReplies: number;\r\n  isNewRequest: boolean;\r\n  isNewReply: boolean;\r\n  intervalId: IntervalId;\r\n  minutesCounter: number;\r\n  isMessagesDropdown: boolean;\r\n  headerContainerHeight: number;\r\n  aboutContainerHeight: number;\r\n  clientSecret: string;\r\n  error: Error;\r\n}\r\n\r\nconst initialState: SliceState = {\r\n  isFetchingUser: true,\r\n  loggedInUser: null,\r\n  isUserChange: false,\r\n  plants: [],\r\n  plant: {},\r\n  requests: [],\r\n  request: {},\r\n  amountOfRequests: 0,\r\n  amountOfReplies: 0,\r\n  isNewRequest: false,\r\n  isNewReply: false,\r\n  intervalId: null,\r\n  minutesCounter: 0,\r\n  isMessagesDropdown: false,\r\n  headerContainerHeight: 0,\r\n  aboutContainerHeight: 0,\r\n  clientSecret: \"\",\r\n  error: null,\r\n};\r\n\r\n// --------- Plants ---------\r\n// Fetch all plants\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async (_options, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch`);\r\n      dispatch(setPlants(response.data));\r\n    } catch (err) {\r\n      console.log(\"Fetching plants failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch query plants\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query: string, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      dispatch(setPlants(response.data));\r\n    } catch (err) {\r\n      console.log(\"Fetching query plants failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant\r\ninterface CreatePlantParameters {\r\n  uploadForm: any;\r\n  plant: Plant;\r\n  history: any;\r\n}\r\n\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async (\r\n    { uploadForm, plant, history }: CreatePlantParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    const { name, description, size, location, price } = plant;\r\n    try {\r\n      const response = await axios.post(`${apiPath}/upload`, uploadForm);\r\n      const { imageUrl, imagePublicId } = response.data;\r\n      const newPlant: Plant = {\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      };\r\n      try {\r\n        const response = await axios.post(\r\n          `${apiPath}/plants/create`,\r\n          newPlant,\r\n          { withCredentials: true }\r\n        );\r\n        dispatch(addPlant(response.data));\r\n        history.push(\"/\");\r\n        scroll.scrollToBottom();\r\n      } catch (err: any) {\r\n        dispatch(setError(err.response.data.error));\r\n      }\r\n    } catch (err: any) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Read plant\r\nexport const readPlant = createAsyncThunk(\r\n  \"jungleSwap/readPlant\",\r\n  async (plantId: string, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/read/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      dispatch(setPlant(response.data));\r\n    } catch {\r\n      console.log(\"Read plant failed\");\r\n    }\r\n  }\r\n);\r\n\r\n// Plant image change\r\ninterface DestroyImageData {\r\n  imagePublicId: string | undefined;\r\n}\r\n\r\ninterface ImageChangeParameters {\r\n  destroyImageData: DestroyImageData;\r\n  image: string;\r\n  plant: Plant;\r\n}\r\n\r\nexport const imageChange = createAsyncThunk(\r\n  \"jungleSwap/imageChange\",\r\n  async (\r\n    { destroyImageData, image, plant }: ImageChangeParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      await axios.post(`${apiPath}/destroy`, destroyImageData);\r\n      try {\r\n        const uploadForm = new FormData();\r\n        uploadForm.append(\"image\", image);\r\n        const response = await axios.post(`${apiPath}/upload`, uploadForm);\r\n        const { imagePublicId, imageUrl } = response.data;\r\n        const clonePlant = JSON.parse(JSON.stringify(plant));\r\n        clonePlant.imagePublicId = imagePublicId;\r\n        clonePlant.imageUrl = imageUrl;\r\n        dispatch(setPlant(clonePlant));\r\n      } catch (err) {\r\n        console.log(\"Image upload failed\", err);\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Delete old image failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Update plant\r\ninterface UpdatePlantParameters {\r\n  plantId: string | undefined;\r\n  updatedPlant: Plant;\r\n  history: any;\r\n}\r\n\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async (\r\n    { plantId, updatedPlant, history }: UpdatePlantParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      dispatch(setPlantChanges(response.data));\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    } catch (err) {\r\n      console.log(\"Update plant failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete Plant\r\ninterface DeletePlantParameters {\r\n  imagePublicId: string | undefined;\r\n  plantId: string | undefined;\r\n  history: any;\r\n}\r\n\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (\r\n    { imagePublicId, plantId, history }: DeletePlantParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      const destroyImageData = {\r\n        imagePublicId,\r\n      };\r\n      await axios.post(`${apiPath}/destroy`, destroyImageData);\r\n      try {\r\n        await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n        dispatch(removePlant(plantId));\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      } catch (err) {\r\n        console.log(\"Delete plant failed\", err);\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Delete image failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant payment\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant: Plant, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/create-payment-intent`, {\r\n        price: plant.price,\r\n      });\r\n      dispatch(setClientSecret(response.data.clientSecret));\r\n    } catch (err) {\r\n      console.log(\"Create payment failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Pay plant\r\nexport const payPlant = createAsyncThunk(\r\n  \"jungleSwap/payPlant\",\r\n  async (history: any, { dispatch }): Promise<void> => {\r\n    try {\r\n      await axios.post(\r\n        `${apiPath}/create-payment-intent`,\r\n        {},\r\n        { withCredentials: true }\r\n      );\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    } catch (err) {\r\n      console.log(\"Checkout failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// --------- Requests ----------\r\n// Fetch all requests\r\nexport const fetchAllRequests = createAsyncThunk(\r\n  \"jungleSwap/fetchAllRequests\",\r\n  async (isUserChange: boolean, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/requests/fetch`);\r\n      dispatch(setRequests(response.data));\r\n      isUserChange && dispatch(setStartAmountOfRequests());\r\n    } catch (err) {\r\n      console.log(\"Fetching requests failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create request\r\ninterface CreateRequestParameters {\r\n  newRequest: Request;\r\n  history: any;\r\n}\r\n\r\nexport const createRequest = createAsyncThunk(\r\n  \"jungleSwap/createRequest\",\r\n  async (\r\n    { newRequest, history }: CreateRequestParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/requests/create`,\r\n        newRequest,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(addRequest(response.data));\r\n      history.push(`/plants/read/${response.data.plant._id}`);\r\n    } catch (err: any) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Read request\r\nexport const readRequest = createAsyncThunk(\r\n  \"jungleSwap/readRequest\",\r\n  async (requestId: string, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${apiPath}/requests/read/${requestId}`,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setRequest(response.data));\r\n    } catch {\r\n      console.log(\"Read request failed\");\r\n    }\r\n  }\r\n);\r\n\r\n// Update request\r\ninterface UpdateRequestParameters {\r\n  requestId: string | undefined;\r\n  updatedRequest: Request;\r\n  history: any;\r\n}\r\n\r\nexport const updateRequest = createAsyncThunk(\r\n  \"jungleSwap/updateRequest\",\r\n  async (\r\n    { requestId, updatedRequest, history }: UpdateRequestParameters,\r\n    { dispatch }\r\n  ) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/requests/update/${requestId}`,\r\n        updatedRequest\r\n      );\r\n      dispatch(setRequestChanges(response.data));\r\n      history.push(`/requests/read/${requestId}`);\r\n    } catch (err) {\r\n      console.log(\"Update request failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete request\r\ninterface DeleteRequestParameters {\r\n  requestId: string | undefined;\r\n  history: any;\r\n}\r\n\r\nexport const deleteRequest = createAsyncThunk(\r\n  \"jungleSwap/deleteRequest\",\r\n  async (\r\n    { requestId, history }: DeleteRequestParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/requests/delete/${requestId}`);\r\n      dispatch(removeRequest(requestId));\r\n      dispatch(decreaseAmountOfRequests());\r\n      history && history.push(\"/requests/fetch\");\r\n    } catch (err) {\r\n      console.log(\"Delete request failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// ---------- User authentification ----------\r\n// Read user\r\nexport const readUser = createAsyncThunk(\r\n  \"jungleSwap/readUserData\",\r\n  async (_options, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/user`, {\r\n        withCredentials: true,\r\n      });\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsFetchingUser(false));\r\n    } catch (err) {\r\n      console.log(\"Initializing fetching failed\", err);\r\n      dispatch(setIsFetchingUser(false));\r\n    }\r\n  }\r\n);\r\n\r\n// Sign up\r\ninterface SignUpParameters {\r\n  newUser: User;\r\n  history: any;\r\n}\r\n\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (\r\n    { newUser, history }: SignUpParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/signup`, newUser);\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    } catch (err: any) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Sign in\r\ninterface SignInParameters {\r\n  user: User;\r\n  history: any;\r\n}\r\n\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async ({ user, history }: SignInParameters, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/signin`, user, {\r\n        withCredentials: true,\r\n      });\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    } catch (err: any) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// LogOut\r\ninterface LogOutParameters {\r\n  intervalId: NodeJS.Timer;\r\n  history: any;\r\n}\r\n\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (\r\n    { intervalId, history }: LogOutParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      await axios.post(`${apiPath}/logout`, {}, { withCredentials: true });\r\n      dispatch(setLoggedInUser(null));\r\n      clearInterval(intervalId);\r\n      dispatch(setIntervalId(null));\r\n      dispatch(setMinutesCounter(0));\r\n      dispatch(setIsNewRequest(false));\r\n      history.push(\"/\");\r\n      scroll.scrollToTop();\r\n    } catch (err) {\r\n      console.log(\"Logout failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n  // ---------- Reducers -----------\r\n  reducers: {\r\n    // --------- Plants ----------\r\n    setPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.plants = action.payload;\r\n    },\r\n    setPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plant = action.payload;\r\n    },\r\n    addPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plants.push(action.payload);\r\n    },\r\n    setPlantChanges: (state, action: PayloadAction<Plant>) => {\r\n      const {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      } = action.payload;\r\n      state.plants = state.plants.map((singlePlant: Plant) => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, action: PayloadAction<string | undefined>) => {\r\n      state.plants = state.plants.filter(\r\n        (plant) => plant._id !== action.payload\r\n      );\r\n    },\r\n    setClientSecret: (state, action: PayloadAction<string>) => {\r\n      state.clientSecret = action.payload;\r\n    },\r\n\r\n    // ---------- Requests ----------\r\n    setRequests: (state, action: PayloadAction<Request[]>) => {\r\n      state.requests = action.payload;\r\n    },\r\n    setRequest: (state, action: PayloadAction<Request>) => {\r\n      state.request = action.payload;\r\n    },\r\n    addRequest: (state, action: PayloadAction<Request>) => {\r\n      state.requests.push(action.payload);\r\n    },\r\n    setRequestChanges: (state, action: PayloadAction<Request>) => {\r\n      const { _id, buyer, seller, plant, message, reply, requestState } = action.payload;\r\n      state.requests = state.requests.map((singleRequest) => {\r\n        if (singleRequest._id === _id) {\r\n          singleRequest.buyer = buyer;\r\n          singleRequest.seller = seller;\r\n          singleRequest.plant = plant;\r\n          singleRequest.message = message;\r\n          singleRequest.reply = reply;\r\n          singleRequest.requestState = requestState;\r\n        }\r\n        return singleRequest;\r\n      });\r\n    },\r\n    removeRequest: (state, action: PayloadAction<string | undefined>) => {\r\n      state.requests = state.requests.filter(\r\n        (request) => request._id !== action.payload\r\n      );\r\n    },\r\n    setStartAmountOfRequests: (state) => {\r\n      state.amountOfRequests = state.requests.filter(\r\n        (currentRequest) =>\r\n          state.loggedInUser &&\r\n          (currentRequest.seller as User)._id === state.loggedInUser._id\r\n      ).length;\r\n    },\r\n    setStartAmountOfReplies: (state) => {\r\n      state.amountOfReplies = state.requests.filter(\r\n        (currentReply) =>\r\n          state.loggedInUser &&\r\n          (currentReply.buyer as User)._id === state.loggedInUser._id\r\n      ).length;\r\n    },\r\n    setAmountOfRequests: (state, action: PayloadAction<number>) => {\r\n      state.amountOfRequests = action.payload;\r\n    },\r\n    setAmountOfReplies: (state, action: PayloadAction<number>) => {\r\n      state.amountOfReplies = action.payload;\r\n    },\r\n    setIsNewRequest: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewRequest = action.payload;\r\n    },\r\n    setIsNewReply: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewReply = action.payload;\r\n    },\r\n    setIntervalId: (state, action: PayloadAction<IntervalId>) => {\r\n      state.intervalId = action.payload;\r\n    },\r\n    setMinutesCounter: (state, action: PayloadAction<number>) => {\r\n      state.minutesCounter = action.payload;\r\n    },\r\n    increaseMinutesCounter: (state) => {\r\n      state.minutesCounter += 1;\r\n    },\r\n    decreaseAmountOfRequests: (state) => {\r\n      state.amountOfRequests -= 1;\r\n    },\r\n\r\n    // ---------- User authentification ----------\r\n    setLoggedInUser: (state, action: PayloadAction<LoggedInUser>) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n    setIsFetchingUser: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingUser = action.payload;\r\n    },\r\n    setIsUserChange: (state, action: PayloadAction<boolean>) => {\r\n      state.isUserChange = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<Error>) => {\r\n      state.error = action.payload;\r\n    },\r\n\r\n    // ---------- Pages handling ----------\r\n    setHeaderContainerHeight: (state, action: PayloadAction<number>) => {\r\n      state.headerContainerHeight = action.payload;\r\n    },\r\n    setAboutContainerHeight: (state, action: PayloadAction<number>) => {\r\n      state.aboutContainerHeight = action.payload;\r\n    },\r\n    scrollToAbout: (state) => {\r\n      scroll.scrollTo(state.headerContainerHeight);\r\n    },\r\n    scrollToPlants: (state) => {\r\n      scroll.scrollTo(state.headerContainerHeight + state.aboutContainerHeight);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  // ----------- Plants ----------\r\n  setPlants,\r\n  setPlant,\r\n  addPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n  setClientSecret,\r\n\r\n  // ---------- Requests ----------\r\n  setRequests,\r\n  setRequest,\r\n  addRequest,\r\n  setRequestChanges,\r\n  removeRequest,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setIntervalId,\r\n  setMinutesCounter,\r\n  increaseMinutesCounter,\r\n  decreaseAmountOfRequests,\r\n\r\n  // ---------- User authentification ----------\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n  setIsUserChange,\r\n  setError,\r\n\r\n  // ---------- Pages handling ----------\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  fetchAllRequests,\r\n  setIsUserChange,\r\n  setIntervalId,\r\n  increaseMinutesCounter,\r\n  setMinutesCounter,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  scrollToPlants,\r\n  User,\r\n  Request,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NavBar = () => {\r\n  const loggedInUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const requests = useSelector((state: RootState) => state.jungleSwap.requests);\r\n\r\n  const intervalId = useSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const minutesCounter = useSelector(\r\n    (state: RootState) => state.jungleSwap.minutesCounter\r\n  );\r\n  const amountOfRequests = useSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const isNewRequest = useSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  // Stop interval at cleanup\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n        dispatch(setIntervalId(null));\r\n        dispatch(setMinutesCounter(0));\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Start request check if user changes\r\n  useEffect(() => {\r\n    if (isUserChange) {\r\n      dispatch(fetchAllRequests(isUserChange));\r\n      dispatch(setIsUserChange(false));\r\n      dispatch(\r\n        setIntervalId(\r\n          setInterval(\r\n            () => dispatch(increaseMinutesCounter()),\r\n            10000 // every minute\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }, [isUserChange]);\r\n\r\n  // Check new requests/replies for logged in user every minute\r\n  useEffect(() => {\r\n    if (loggedInUser) {\r\n      dispatch(fetchAllRequests(isUserChange));\r\n      const currentAmountOfRequests = requests.filter(\r\n        (currentRequest: Request) => {\r\n          const { seller } = currentRequest;\r\n          return (seller as User)._id === loggedInUser._id;\r\n        }\r\n      ).length;\r\n      if (amountOfRequests < currentAmountOfRequests) {\r\n        dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n        dispatch(setIsNewRequest(true));\r\n      }\r\n\r\n      const currentAmountOfReplies = requests.filter(\r\n        (currentReply: Request) => {\r\n          const { buyer, reply } = currentReply;\r\n          return ((buyer as User)._id === loggedInUser._id) && reply;\r\n        }\r\n      ).length;\r\n      if (amountOfReplies < currentAmountOfReplies) {\r\n        dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n        dispatch(setIsNewReply(true));\r\n      }\r\n    }\r\n  }, [minutesCounter]);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar className=\"pl-5\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" onClick={scroll.scrollToTop}>\r\n            JungleSwap\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <>\r\n              <Link\r\n                to=\"/\"\r\n                className=\"p-2\"\r\n                onClick={() => dispatch(scrollToPlants())}\r\n              >\r\n                All Plants\r\n              </Link>\r\n            </>\r\n            {loggedInUser && (\r\n              <>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/requests/fetch\"\r\n                  title={isNewRequest ? \"new request\" : \"\"}\r\n                >\r\n                  {isNewRequest && <FontAwesomeIcon icon={faBell} />}\r\n                  Requests\r\n                </Link>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/replies/fetch\"\r\n                  title={isNewReply ? \"new reply\" : \"\"}\r\n                >\r\n                  {isNewReply && <FontAwesomeIcon icon={faBell} />}\r\n                  Replies\r\n                </Link>\r\n              </>\r\n            )}\r\n            {loggedInUser ? (\r\n              <>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/logout\"\r\n                  title={loggedInUser.username}\r\n                >\r\n                  Log out\r\n                </Link>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Link className=\"p-2\" to=\"/signin\">\r\n                  Sign in\r\n                </Link>\r\n                <Link className=\"p-2\" to=\"/signup\">\r\n                  Sign up\r\n                </Link>\r\n              </>\r\n            )}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer-row\">\r\n      <footer>\r\n        © 2021\r\n        <Link to={\"https://www.linkedin.com/in/christian-gerbig/\"}>\r\n          Christian Gerbig\r\n        </Link>\r\n        &amp;\r\n        <Link to={\"https://www.linkedin.com/in/lisa-montebaur/\"}>\r\n          Lisa Montebaur\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import { useEffect, useState, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  fetchAllPlants,\r\n  fetchQueryPlants,\r\n  readUser,\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  scrollToAbout,\r\n  Plant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport image from \"../images/JungleSwap_Home.png\";\r\nimport icon from \"../images/JungleSwap_Icon.png\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst Home = () => {\r\n  const isFetchingUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingUser\r\n  );\r\n  const loggedInUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plants = useSelector((state: RootState) => state.jungleSwap.plants);\r\n  const [query, setQuery] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const elementRef = useRef([]);\r\n\r\n  // Load plants and user data as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(fetchAllPlants());\r\n    !loggedInUser && dispatch(readUser());\r\n    const headerElementHeight = Math.round(\r\n      (elementRef.current[0] as any).getBoundingClientRect().height\r\n    );\r\n    dispatch(setHeaderContainerHeight(headerElementHeight));\r\n    const aboutElementHeight = Math.round(\r\n      (elementRef.current[1] as any).getBoundingClientRect().height\r\n    );\r\n    dispatch(setAboutContainerHeight(aboutElementHeight));\r\n  }, []);\r\n\r\n  // Handle plant search result if user types in query\r\n  useEffect(() => {\r\n    query ? dispatch(fetchQueryPlants(query)) : dispatch(fetchAllPlants());\r\n  }, [query]);\r\n\r\n  return (\r\n    <div>\r\n      {!plants && (\r\n        <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span className=\"visually-hidden\">\r\n            <br /> <br /> Loading plants...\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      {isFetchingUser && (\r\n        <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span className=\"visually-hidden\">\r\n            <br /> <br /> Loading user data...\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      <header\r\n        className=\"text-center pt-5 pb-5 headerImg\"\r\n        ref={(element) => ((elementRef.current[0] as any) = element)}\r\n      >\r\n        <div className=\"row my-5\">\r\n          <div className=\"col-6 offset-3 my-5 borderAround\">\r\n            <h2 className=\"title mb-2\"> JungleSwap </h2>\r\n            <h5 className=\"mt-3 mb-5\"> Share your green heart </h5>\r\n            <div className=\"mb-5\">\r\n              <Link\r\n                className=\"biggerFontSize\"\r\n                onClick={() => dispatch(scrollToAbout())}\r\n                to={\"\"}\r\n              >\r\n                Try it!\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <section ref={(element) => ((elementRef.current[1] as any) = element)}>\r\n        <div className=\"about centered container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n              <img className=\"image\" src={image} alt=\"plants\" />\r\n            </div>\r\n            <br />\r\n            <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 noOverflow\">\r\n              <h4> Welcome to JungleSwap! </h4>\r\n              <h5> Add green to your Home </h5>\r\n              <p>\r\n                It\"s easy-peasy. <br />\r\n                Share your plant offshoots. <br />\r\n                Make money! <br />\r\n                Or swap them for another plant. <br />\r\n                Don\"t have any baby plants? <br />\r\n                You can simply shop and give a plant a new home.\r\n              </p>\r\n              <img className=\"icon\" src={icon} alt=\"icon\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section>\r\n        <div className=\"container mt-5\">\r\n          <div className=\"mt-5 mb-3\">\r\n            <h2> Plants </h2>\r\n            <hr />\r\n            <h4> Search a plant </h4>\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <input\r\n              className=\"smallWidth form-control\"\r\n              type=\"text\"\r\n              placeholder=\"Search...\"\r\n              value={query}\r\n              onChange={(event) => setQuery(event.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n            {plants &&\r\n              plants.map((plant: Plant) => {\r\n                const { _id, name, imageUrl, price } = plant;\r\n                return (\r\n                  <div className=\"col mb-5\" key={_id}>\r\n                    <div className=\"card card-medium-width text-center h-100\">\r\n                      <img\r\n                        className=\"card-img-top mediumPicSize\"\r\n                        src={imageUrl}\r\n                        alt={name}\r\n                      />\r\n                      <div className=\"card-body mb-5\">\r\n                        <h5> {name} </h5>\r\n                        <p> {price} € </p>\r\n                        <Link\r\n                          className=\"btn form-control smallWidth\"\r\n                          to={`/plants/read/${_id}`}\r\n                        >\r\n                          Details\r\n                        </Link>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { setError, setIsNewRequest, signUp } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignUp = () => {\r\n  const error = useSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign up\r\n  const handleSignUp = (event: any, history: any) => {\r\n    event.preventDefault();\r\n    const { username, email, password } = event.target;\r\n    const newUser = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    dispatch(signUp({ newUser, history }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign Up </h2>\r\n        <form onSubmit={(event) => handleSignUp(event, history)}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\"> Username </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n            formNoValidate\r\n          >\r\n            Sign up\r\n          </button>\r\n          <p className=\"padding\"> Already have an account? </p>\r\n          <div className=\"text-right\">\r\n            <Link to={\"/signin\"}>\r\n              <button className=\"btn btn-sm ml-4 smallWidth form-control mt-0 mb-2\">\r\n                Sign In\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  setError,\r\n  setIsNewRequest,\r\n  signIn,\r\n  User,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignIn = () => {\r\n  const error = useSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign in\r\n  const handleSignIn = (event: any, history: any) => {\r\n    event.preventDefault();\r\n    const { email, password } = event.target;\r\n    const user: User = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    dispatch(signIn({ user, history }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign In </h2>\r\n        <form onSubmit={(event) => handleSignIn(event, history)}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n            formNoValidate\r\n          >\r\n            Sign in\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { logOut } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst LogOut = () => {\r\n  const intervalId: any = useSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Log out, stop interval, reset variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(logOut({ intervalId, history }));\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { createPlant, Plant, setError } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst CreatePlantForm = () => {\r\n  const loggedInUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const error = useSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads and scroll to plants section during cleanup\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Create plant\r\n  const handleCreatePlant = (event: any, history: any) => {\r\n    event.preventDefault();\r\n    const { name, description, size, plantImage, location, price } =\r\n      event.target;\r\n    const image = plantImage.files[0];\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    const plant: Plant = {\r\n      name: name.value,\r\n      description: description.value,\r\n      size: size.value,\r\n      location: location.value,\r\n      price: price.value,\r\n    };\r\n    dispatch(createPlant({ uploadForm, plant, history }));\r\n  };\r\n\r\n  if (!loggedInUser) return <Redirect to={\"/signup\"} />;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mb-5 text-left\"> Create a plant </h2>\r\n        <form onSubmit={(event) => handleCreatePlant(event, history)}>\r\n          <label htmlFor=\"enterName\"> Name </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterName\"\r\n          />\r\n          <label htmlFor=\"enterDescription\"> Description </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"description\"\r\n            type=\"text\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterDescription\"\r\n          />\r\n          <label htmlFor=\"enterSize\"> Size (cm) </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"size\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterSize\"\r\n          />\r\n          <label htmlFor=\"enterLocation\"> Location </label>\r\n          <select className=\"mb-4 form-control p-2\" name=\"location\" id=\"enterLocation\">\r\n            <option> Select location </option>\r\n            <option value=\"sun\"> sun </option>\r\n            <option value=\"shade\"> shade </option>\r\n            <option value=\"sun and shade\"> sun and shade </option>\r\n          </select>\r\n          <label htmlFor=\"enterPrice\"> Price (EUR) </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"price\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterPrice\"\r\n          />\r\n          <label htmlFor=\"enterImage\"> Image </label>\r\n          <input className=\"mb-4 form-control\" name=\"plantImage\" type=\"file\" id=\"enterImage\"/>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <div className=\"col-12 text-right pr-0\">\r\n            <button className=\"btn btn-sm form-control smallWidth ml-4 mb-2\" type=\"submit\">\r\n              Create\r\n            </button>\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm form-control smallWidth ml-4 mb-2\"> Go back </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePlantForm;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  readPlant,\r\n  deletePlant,\r\n  deleteRequest,\r\n  scrollToPlants,\r\n  User,\r\n  Request,\r\n  Plant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst PlantDetails = () => {\r\n  const loggedInUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const requests = useSelector((state: RootState) => state.jungleSwap.requests);\r\n  const plant = useSelector((state: RootState) => state.jungleSwap.plant);\r\n  const { plantId }: any = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read plant data and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readPlant(plantId));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Delete plant\r\n  const handleDeletePlant = (\r\n    imagePublicId: string | undefined,\r\n    plantId: string | undefined,\r\n    history: any,\r\n    requests: Request[]\r\n  ) => {\r\n    requests.forEach((request: Request) => {\r\n      const { plant }: any = request;\r\n      if (plant._id === plantId) {\r\n        dispatch(deleteRequest({ requestId: request._id, history: null }));\r\n      }\r\n    });\r\n    dispatch(deletePlant({ imagePublicId, plantId, history }));\r\n  };\r\n\r\n  if (!loggedInUser) return <Redirect to={\"/signup\"} />;\r\n\r\n  const {\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n    creator,\r\n  } = plant as Plant;\r\n  if (!creator)\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading plant details...\r\n        </span>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2> Plant details </h2>\r\n      </div>\r\n      <div className=\"col\">\r\n        <div className=\"card cardMediumWidth\">\r\n          {imageUrl && (\r\n            <img\r\n              className=\"card-img-top mediumPicSize\"\r\n              src={imageUrl}\r\n              alt={name}\r\n            />\r\n          )}\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Name: </span> {name}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Description: </span> {description}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Size: </span> {size} cm\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Likes: </span> {location}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Price: </span> {price} €\r\n          </div>\r\n          <div className=\"ml-2 mt-2 col justify-content-center\">\r\n            <div className=\"row-2 justify-content-center\">\r\n              <div className=\"card-body text-right pt-0\">\r\n                {loggedInUser._id === (creator as User)._id ? (\r\n                  <div className=\"p-0\">\r\n                    <Link to={\"/plants/update\"}>\r\n                      <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                        Update\r\n                      </button>\r\n                    </Link>\r\n                    <button\r\n                      className=\"btn btn-sm ml-2 form-control smallWidth mb-2\"\r\n                      onClick={() =>\r\n                        handleDeletePlant(imagePublicId, _id, history, requests)\r\n                      }\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <Link to=\"/plants/checkout\">\r\n                      <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                        Buy\r\n                      </button>\r\n                    </Link>\r\n                    <Link to=\"/requests/create\">\r\n                      <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                        Swap\r\n                      </button>\r\n                    </Link>\r\n                  </div>\r\n                )}\r\n                <Link to={\"/\"} onClick={() => dispatch(scrollToPlants())}>\r\n                  <button className=\"btn btn-sm ml-2 form-control smallWidth mb-3\"> Go back </button>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  imageChange,\r\n  updatePlant,\r\n  setPlant,\r\n  Plant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst UpdatePlantForm = () => {\r\n  const plant = useSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => scroll.scrollToTop(), []);\r\n\r\n  // Check which plant values changed\r\n  const handlePlantEntryChange = (\r\n    { target }: any,\r\n    plant: Plant,\r\n    itemNumber: number\r\n  ) => {\r\n    const clonePlant: Plant = JSON.parse(JSON.stringify(plant));\r\n    // eslint-disable-next-line default-case\r\n    switch (itemNumber) {\r\n      case 0:\r\n        clonePlant.name = target.value;\r\n        break;\r\n      case 1:\r\n        clonePlant.description = target.value;\r\n        break;\r\n      case 2:\r\n        clonePlant.size = target.value;\r\n        break;\r\n      case 3:\r\n        clonePlant.location = target.value;\r\n        break;\r\n      case 4:\r\n        clonePlant.price = target.value;\r\n    }\r\n    dispatch(setPlant(clonePlant));\r\n  };\r\n\r\n  // Plant image changed\r\n  const handleImageChange = ({ target }: any, plant: Plant) => {\r\n    const image = target.files[0];\r\n    const { imagePublicId } = plant as Plant;\r\n    const destroyImageData = {\r\n      imagePublicId,\r\n    };\r\n    dispatch(imageChange({ destroyImageData, image, plant }));\r\n  };\r\n\r\n  const handleUpdatePlant = (\r\n    {\r\n      _id,\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    }: Plant,\r\n    history: any\r\n  ) => {\r\n    const updatedPlant: Plant = {\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    };\r\n    dispatch(updatePlant({ plantId: _id, updatedPlant, history }));\r\n  };\r\n\r\n  const { _id, name, description, size, imageUrl, price } = plant as Plant;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mt-5 mb-4 text-left\"> Update your plant </h2>\r\n        <div className=\"card cardMediumWidth mb-5\">\r\n          <img className=\"mb-2 smallPicSize\" src={imageUrl} alt={name} />\r\n          <div className=\"card-body\">\r\n            <label htmlFor=\"updateName\"> Name </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"text\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 0)}\r\n              value={name}\r\n              id=\"updateName\"\r\n            />\r\n            <label htmlFor=\"updateDescription\"> Description </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"text\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 1)}\r\n              value={description}\r\n              id=\"updateDescription\"\r\n            />\r\n            <label htmlFor=\"updateSize\"> Size (cm) </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"number\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 2)}\r\n              value={size}\r\n              id=\"updateSize\"\r\n            />\r\n            <label htmlFor=\"updateLocation\"> Location </label>\r\n            <select\r\n              className=\"mb-4 form-control px-2\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 3)}\r\n              name=\"location\"\r\n              placeholder=\"Select\"\r\n              id=\"updateLocation\"\r\n            >\r\n              <option value=\"sun\"> sun </option>\r\n              <option value=\"shade\"> shade </option>\r\n              <option value=\"sun and shade\"> sun and shade </option>\r\n            </select>\r\n            <label htmlFor=\"updatePrice\"> Price (EUR) </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              name=\"price\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 4)}\r\n              value={price}\r\n              id=\"updatePrice\"\r\n            />\r\n            <label htmlFor=\"updateImage\"> Image </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event) => handleImageChange(event, plant)}\r\n              type=\"file\"\r\n              id=\"updateImage\"\r\n            />\r\n              <div className=\"col-12 text-right pr-0\">\r\n              <button\r\n                className=\"btn btn-sm ml-4 form-control smallWidth mb-2\"\r\n                onClick={() => handleUpdatePlant(plant, history)}\r\n              >\r\n                Save\r\n              </button>\r\n              <Link to={`/plants/read/${_id}`}>\r\n                <button className=\"btn btn-sm ml-4 smallWidth form-control mb-2\">\r\n                  Go back\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdatePlantForm;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport {\r\n  payPlant,\r\n  createPayment,\r\n  scrollToPlants,\r\n  Plant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst CheckoutForm = () => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(\"\");\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const clientSecret = useSelector(\r\n    (state: RootState) => state.jungleSwap.clientSecret\r\n  );\r\n  const plant = useSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Create payment as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(createPayment(plant));\r\n    return () => {\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    };\r\n  }, []);\r\n\r\n  interface CardStyle {\r\n    style: {\r\n      base: {\r\n        color: string;\r\n        fontFamily: string;\r\n        fontSmoothing: string;\r\n        fontSize: string;\r\n        \"::placeholder\": { color: string };\r\n      };\r\n      invalid: {\r\n        color: string;\r\n        iconColor: string;\r\n      };\r\n    };\r\n  }\r\n\r\n  // Card styling\r\n  const cardStyle: CardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n  // Listen for changes in Card element and display any errors as customer types card details\r\n  const handleChange = async (event: any) => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  // Submit payment\r\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    setIsProcessing(true);\r\n    const payload = await (stripe as any).confirmCardPayment(clientSecret, {\r\n      payment_method: { card: (elements as any).getElement(CardElement) },\r\n    });\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    } else {\r\n      setPaymentError(\"\");\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n\r\n  const { _id, name, price } = plant as Plant;\r\n  return (\r\n    <div className=\"container col-9\">\r\n      <form\r\n        className=\"checkoutForm mt-5\"\r\n        id=\"payment-form\"\r\n        onSubmit={handleSubmitPayment}\r\n      >\r\n        <h2 className=\"text-left mb-2 p-2\"> {name} </h2>\r\n        <h3 className=\"text-left mb-4 p-2\"> Price: {price} € </h3>\r\n        <CardElement\r\n          className=\"p-2\"\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            onClick={() => dispatch(payPlant(history))}\r\n            className=\"btn btn-sm mt-5 mb-4\"\r\n            disabled={isProcessing || isDisabled || isSucceeded}\r\n            id=\"submit\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isProcessing ? (\r\n                <div className=\"spinner\" id=\"spinner\" />\r\n              ) : (\r\n                \"Pay now\"\r\n              )}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {\r\n          /* Show any error that happens when processing the payment */\r\n          paymentError && (\r\n            <div className=\"card-error\" role=\"alert\">\r\n              {paymentError}\r\n            </div>\r\n          )\r\n          /* Show success message upon completion */\r\n        }\r\n        <p\r\n          className={\r\n            isSucceeded\r\n              ? \"result-message text-center\"\r\n              : \"result-message hidden text-center\"\r\n          }\r\n        >\r\n          Payment succeeded.\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {isSucceeded ? (\r\n          <Link to={\"/\"} onClick={() => dispatch(scrollToPlants())}>\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        ) : (\r\n          <Link to={`/plants/read/${_id}`}>\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n","import { useEffect } from \"react\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"../components/CheckoutForm\";\r\n\r\nconst promise = loadStripe(\r\n  \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n);\r\n\r\nconst CheckoutPage = () => {\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => scroll.scrollToTop(), []);\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5 App\">\r\n        <Elements stripe={promise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutPage;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  fetchAllRequests,\r\n  setIsNewRequest,\r\n  User,\r\n  Plant,\r\n  Request,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst RequestsPage = () => {\r\n  const loggedInUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const requests = useSelector((state: RootState) => state.jungleSwap.requests);\r\n  const amountOfRequests = useSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  // Fetch all requests and reset values as soon as page loads and reset values during cleanup\r\n  useEffect(() => {\r\n    const handleResetAll = () => {\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    dispatch(fetchAllRequests(isUserChange));\r\n    handleResetAll();\r\n    return () => handleResetAll();\r\n  }, []);\r\n\r\n  if (!loggedInUser) return <Redirect to={\"/signup\"} />;\r\n\r\n  if (!requests)\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading requests...\r\n        </span>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Requests for your plants </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {requests.map(({ _id, buyer, seller, plant, requestState }: Request) => {\r\n          return (\r\n            (((seller as User)._id === loggedInUser._id) && (requestState === true)) && (\r\n              <div className=\"card p-3 mt-4 \" key={_id}>\r\n                <h4> Request for {(plant as Plant).name} </h4>\r\n                <h5> by {(buyer as User).username} </h5>\r\n                <div className=\"text-center\">\r\n                  <Link\r\n                    className=\"btn smallWidth form-control\"\r\n                    to={`/requests/read/${_id}`}\r\n                  >\r\n                    Details\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            )\r\n          );\r\n        })}\r\n        {amountOfRequests !== 0 && (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsPage;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  fetchAllRequests,\r\n  setIsNewReply,\r\n  User,\r\n  Plant,\r\n  Request,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst RepliesPage = () => {\r\n  const loggedInUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const requests = useSelector((state: RootState) => state.jungleSwap.requests);\r\n  const amountOfReplies = useSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  // Fetch all requests and reset values as soon as page loads and reset values during cleanup\r\n  useEffect(() => {\r\n    const handleResetAll = () => {\r\n      dispatch(setIsNewReply(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    dispatch(fetchAllRequests(isUserChange));\r\n    handleResetAll();\r\n    return () => handleResetAll();\r\n  }, []);\r\n\r\n  if (!loggedInUser) return <Redirect to={\"/signup\"} />;\r\n\r\n  if (!requests)\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading replies...\r\n        </span>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Replies for your requests </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {requests.map(({ _id, buyer, seller, plant, reply }: Request) => {\r\n          return (\r\n            (((buyer as User)._id === loggedInUser._id) && reply) && (\r\n              <div className=\"card p-3 mt-4 \" key={_id}>\r\n                <h4> Reply for {(plant as Plant).name} </h4>\r\n                <h5> by {(seller as User).username} </h5>\r\n                <div className=\"text-center\">\r\n                  <Link\r\n                    className=\"btn smallWidth form-control\"\r\n                    to={`/replies/read/${_id}`}\r\n                  >\r\n                    Details\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            )\r\n          );\r\n        })}\r\n        {amountOfReplies !== 0 && (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesPage;","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  createRequest,\r\n  setError,\r\n  Plant,\r\n  Request,\r\n  User,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst CreateRequestForm = () => {\r\n  const plant = useSelector((state: RootState) => state.jungleSwap.plant);\r\n  const error = useSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Set variable and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Create request\r\n  const handleCreateRequest = (event: any, plant: Plant, history: any) => {\r\n    event.preventDefault();\r\n    const { message } = event.target;\r\n    const { creator } = plant;\r\n    const newRequest: Request = {\r\n      seller: (creator as User)._id,\r\n      plant: plant._id,\r\n      message: message.value,\r\n    };\r\n    dispatch(createRequest({ newRequest, history }));\r\n  };\r\n\r\n  const { _id, name } = plant as Plant;\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\"> Your message </h2>\r\n        <h3 className=\"mb-4\"> for: {name} </h3>\r\n        <form onSubmit={(event) => handleCreateRequest(event, plant, history)}>\r\n          <div>\r\n            <textarea\r\n              className=\"mb-4 form-control\"\r\n              name=\"message\"\r\n              cols={35}\r\n              rows={7}\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <div className=\"text-right\">\r\n            <button\r\n              className=\"btn btn-sm mx-2 form-control smallWidth\"\r\n              type=\"submit\"\r\n            >\r\n              Send\r\n            </button>\r\n            <Link to={`/plants/read/${_id}`}>\r\n              <button className=\"btn btn-sm mx-2 form-control smallWidth\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRequestForm;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  readRequest,\r\n  User,\r\n  Plant,\r\n  Request,\r\n  setRequest,\r\n  updateRequest,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst RequestDetails = () => {\r\n  const request = useSelector((state: RootState) => state.jungleSwap.request);\r\n  const { requestId }: any = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read request and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readRequest(requestId));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const { _id, buyer, plant, message, reply } = request as Request;\r\n  if (!buyer || !plant)\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading request...\r\n        </span>\r\n      </div>\r\n    );\r\n\r\n  const handleSetRequestInactive = (request: Request, history: any) => {\r\n    const cloneRequest: Request = JSON.parse(JSON.stringify(request));\r\n    cloneRequest.requestState = false;\r\n    dispatch(setRequest(cloneRequest));\r\n\r\n    const { _id, buyer, seller, plant, message, reply, requestState } = cloneRequest;\r\n    const updatedRequest: Request = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      message,\r\n      reply,\r\n      requestState,\r\n    };\r\n    dispatch(updateRequest({ requestId: _id, updatedRequest, history }));\r\n    history.push(\"/requests/fetch\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Request for {(plant as Plant).name} </h2>\r\n        <h5> by {(buyer as User).username} </h5>\r\n        <p className=\"form-control\"> {message} </p>\r\n        {reply && (\r\n          <div>\r\n            <h5> Your reply </h5>\r\n            <p className=\"form-control\"> {reply} </p>\r\n          </div>\r\n        )}\r\n        <div className=\"text-right px-3\">\r\n          {!reply && (\r\n            <Link to={`/requests/update/${_id}`}>\r\n              <button className=\"btn btn-sm ml-2 smallWidth form-control mb-1\">\r\n                Reply\r\n              </button>\r\n            </Link>\r\n          )}\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => handleSetRequestInactive(request, history)}\r\n          >\r\n            Done\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/requests/fetch\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  readRequest,\r\n  deleteRequest,\r\n  User,\r\n  Plant,\r\n  Request,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst ReplyDetails = () => {\r\n  const request = useSelector((state: RootState) => state.jungleSwap.request);\r\n  const { requestId }: any = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read request and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readRequest(requestId));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const { _id, buyer, seller, plant, message, reply } = request as Request;\r\n  if (!buyer || !plant)\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading replies...\r\n        </span>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Your request </h2>\r\n        <h4> for {(plant as Plant).name} </h4>\r\n        <p className=\"form-control\"> {message} </p>\r\n        {reply && (\r\n          <div>\r\n            <h5> Reply by {(seller as User).username} </h5>\r\n            <p className=\"form-control\"> {reply} </p>\r\n          </div>\r\n        )}\r\n        <div className=\"text-right px-3\">\r\n          {!reply && (\r\n            <Link to={`/requests/update/${_id}`}>\r\n              <button className=\"btn btn-sm ml-2 smallWidth form-control mb-1\">\r\n                Reply\r\n              </button>\r\n            </Link>\r\n          )}\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => dispatch(deleteRequest({ requestId, history }))}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/replies/fetch\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { setRequest, updateRequest, Request } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst UpdateRequestForm = () => {\r\n  const request = useSelector((state: RootState) => state.jungleSwap.request);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => scroll.scrollToTop(), []);\r\n\r\n  // Create reply\r\n  const handleCreateReply = ({ target }: any, request: Request) => {\r\n    const cloneRequest: Request = JSON.parse(JSON.stringify(request));\r\n    cloneRequest.reply = target.value;\r\n    dispatch(setRequest(cloneRequest));\r\n  };\r\n\r\n  // Update request\r\n  const handleUpdateRequest = (\r\n    { _id, buyer, seller, plant, message, reply, requestState }: Request,\r\n    history: any\r\n  ) => {\r\n    const updatedRequest: Request = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      message,\r\n      reply,\r\n      requestState,\r\n    };\r\n    dispatch(updateRequest({ requestId: _id, updatedRequest, history }));\r\n  };\r\n\r\n  const { _id, message } = request as Request;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> Reply your request </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <div className=\"card-body\">\r\n            <p> {message} </p>\r\n            <textarea\r\n              className=\"mb-4 form-control\"\r\n              name=\"reply\"\r\n              cols={31}\r\n              rows={6}\r\n              placeholder=\"Your reply\"\r\n              onChange={(event) => handleCreateReply(event, request)}\r\n            />\r\n            <div className=\"row justify-content-end px-3\">\r\n              <button\r\n                className=\"btn btn-sm smallWidth form-control mr-3 mb-2\"\r\n                onClick={() => handleUpdateRequest(request, history)}\r\n              >\r\n                Submit\r\n              </button>\r\n              <Link to={`/requests/read/${_id}`}>\r\n                <button className=\"btn btn-sm form-control mb-2\">\r\n                  Go back\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateRequestForm;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 404 Not Found </h3>\r\n        <Link to={\"/\"}>\r\n          <button className=\"btn btn-sm ml-2 smallWidth form-control\"> Take me home </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useEffect } from \"react\";\r\n\r\nconst KommunicateChat = () => {\r\n  // Create launcher icon as soon as page loads\r\n  useEffect(() => {\r\n    ((d, m) => {\r\n      const kommunicateSettings = {\r\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      const s = document.createElement(\"script\");\r\n      s.type = \"text/javascript\";\r\n      s.async = true;\r\n      s.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      const h = document.getElementsByTagName(\"head\")[0];\r\n      h.appendChild(s);\r\n      (window as any).kommunicate = m;\r\n      m._globals = kommunicateSettings;\r\n    })(document, (window as any).kommunicate || {});\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default KommunicateChat;\r\n","import { Route, Switch, withRouter } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./screens/Home\";\r\nimport SignUp from \"./screens/SignUp\";\r\nimport SignIn from \"./screens/SignIn\";\r\nimport LogOut from \"./components/LogOut\";\r\nimport CreatePlantForm from \"./screens/CreatePlantForm\";\r\nimport PlantDetails from \"./screens/PlantDetails\";\r\nimport UpdatePlantForm from \"./screens/UpdatePlantForm\";\r\nimport CheckoutPage from \"./screens/CheckoutPage\";\r\nimport RequestsPage from \"./screens/RequestsPage\";\r\nimport RepliesPage from \"./screens/RepliesPage\";\r\nimport CreateRequestForm from \"./screens/CreateRequestForm\";\r\nimport RequestDetails from \"./screens/RequestDetails\";\r\nimport ReplyDetails from \"./screens/ReplyDetails\";\r\nimport UpdateRequestForm from \"./screens/UpdateRequestForm\";\r\nimport NotFound from \"./screens/NotFound\";\r\nimport KommunicateChat from \"./components/Chat\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"main\">\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/read/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch\">\r\n          <RequestsPage />\r\n        </Route>\r\n        <Route path=\"/requests/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/requests/read/:requestId\">\r\n          <RequestDetails />\r\n        </Route>\r\n        <Route path=\"/requests/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/replies/fetch\">\r\n          <RepliesPage />\r\n        </Route>\r\n        <Route path=\"/replies/read/:requestId\">\r\n          <ReplyDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/signup\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/signin\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/logout\">\r\n          <LogOut />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"./reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}