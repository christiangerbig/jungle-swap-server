{"version":3,"sources":["reducer/jungleSwapSlice.ts","app/config.ts","app/store.ts","app/hooks.ts","app/custom-hooks/useMessage.ts","app/custom-hooks/useIntervalCounter.ts","components/navigation/NavAuthItems.tsx","components/navigation/NavUserItems.tsx","components/navigation/NavAdditionalItems.tsx","components/helpers/SelectLanguage.tsx","components/navigation/NavBar.tsx","components/Footer.tsx","lib/externalLinkPaths.ts","app/custom-hooks/usePlant.ts","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/home/HomeAbout.tsx","components/spinners/WaitSpinner.tsx","components/plants/PlantSearch.tsx","components/plants/PlantThumbnail.tsx","components/plants/PlantsCollection.tsx","components/plants/PlantsCockpit.tsx","components/home/HomeTitle.tsx","views/home/Home.tsx","app/custom-hooks/useAuthentification.ts","components/helpers/ErrorMessage.tsx","views/auth/SignUp.tsx","views/auth/SignIn.tsx","components/auth/LogOut.tsx","app/custom-hooks/useRouting.ts","app/custom-hooks/usePlantImage.ts","components/helpers/GoBackButton.tsx","views/plants/PlantCreateForm.tsx","components/plants/PlantDetailsBuyerChoice.tsx","components/plants/PlantDetailsCreatorChoice.tsx","components/plants/PlantDetailsUserChoice.tsx","components/plants/PlantItem.tsx","components/plants/PlantItems.tsx","views/plants/PlantDetails.tsx","views/plants/PlantUpdateForm.tsx","app/custom-hooks/useNavigation.ts","components/apis/PaymentErrorMessage.tsx","components/apis/PaymentCheckoutForm.tsx","app/custom-hooks/usePayment.ts","views/apis/PaymentCheckoutView.tsx","components/requests/RequestTile.tsx","components/requests/RequestsCollection.tsx","views/requests/RequestsView.tsx","components/replies/ReplyTile.tsx","components/replies/RepliesCollection.tsx","views/replies/RepliesView.tsx","views/requests/RequestCreateForm.tsx","components/spinners/WaitSpinnerText.tsx","components/replies/Reply.tsx","views/requests/RequestDetails.tsx","views/replies/ReplyDetails.tsx","views/requests/RequestUpdateForm.tsx","views/auth/Unauthorized.tsx","views/errors/NotFound.tsx","components/apis/KommunicateChat.tsx","app/custom-hooks/useChat.ts","components/plants/PlantsCreatedCollection.tsx","views/plants/PlantsCreatedView.tsx","components/modals/ModalBody.tsx","components/modals/ErrorModal.tsx","components/modals/OfflineModal.tsx","components/modals/Modals.tsx","app/custom-hooks/useOnlineStatus.ts","components/faq/AccordionItem.tsx","components/faq/Accordion.tsx","views/faq/FaqView.jsx","app/custom-hooks/useFaqData.ts","App.tsx","app/i18next.config.ts","index.tsx"],"names":["apiPath","process","rejectWithValue","data","Error","signUp","createAsyncThunk","newUser","a","axios","post","error","response","signIn","user","withCredentials","logOut","checkUserLoggedIn","get","createPlant","newPlant","fetchAllPlants","fetchQueryPlants","query","fetchPlant","plantId","updatePlant","updatedPlant","patch","deletePlant","delete","uploadPlantImage","uploadForm","deletePlantImage","destroyImageData","createPayment","price","createMessage","newMessage","fetchAllMessages","fetchMessage","messageId","updateMessage","updatedMessage","deleteMessage","jungleSwapSlice","createSlice","name","initialState","isUserChange","loggedInUser","isCreatingPlant","isFetchingPlants","isFetchingPlant","isUpdatingPlant","isDeletingPlant","plant","plants","filteredPlants","numberOfVisibleEntries","isUploadingPlantImage","isDeletingPlantImage","clientSecret","isCreatingMessage","isFetchingMessages","isFetchingMessage","isUpdatingMessage","isDeletingMessage","messages","message","isNewRequest","isNewReply","amountOfRequests","amountOfReplies","intervalId","delayCounter","titleSectionHeight","aboutSectionHeight","isLanguageChange","errorMessage","reducers","setIsUserChange","state","payload","setLoggedInUser","setIsCreatingPlant","setIsFetchingPlants","setIsFetchingPlant","setIsUpdatingPlant","setIsDeletingPlant","addPlant","push","setPlant","setPlants","setFilteredPlants","setPlantChanges","_id","description","size","imageUrl","imagePublicId","location","map","singlePlant","removePlant","filter","setNumberOfVisibleEntries","setIsUploadingPlantImage","setIsDeletingPlantImage","setDestroyImageData","setClientSecret","setIsCreatingMessage","setIsFetchingMessages","setIsFetchingMessage","setIsUpdatingMessage","setIsDeletingMessage","addMessage","setMessages","setMessage","setMessageChanges","buyer","seller","request","reply","messageState","singleMessage","removeMessage","setIsNewRequest","setIsNewReply","setStartAmountOfRequests","setStartAmountOfReplies","setAmountOfRequests","setAmountOfReplies","decreaseAmountOfRequests","decreaseAmountOfReplies","setIntervalId","setDelayCounter","increaseDelayCounter","setTitleSectionHeight","setAboutSectionHeight","scrollToAbout","scroll","scrollTo","scrollToPlants","setIsLanguageChange","setErrorMessage","extraReducers","builder","addCase","fulfilled","rejected","selectors","jungleSwap","actions","selectIsUserChange","selectLoggedInUser","selectIsCreatingPlant","selectIsFetchingPlants","selectIsFetchingPlant","selectIsUpdatingPlant","selectIsDeletingPlant","selectPlant","selectPlants","selectfFilteredPlants","selectNumberOfVisibleEntries","selectIsUploadingPlantImage","selectIsDeletingPlantImage","selectDestroyImageData","selectClientSecret","selectIsCreatingMessage","selectiIsFetchingMessages","selectIsFetchingMessage","selectIsUpdatingMessage","selectIsDeletingMessage","selectMessages","selectMessage","selectIsNewRequest","selectIsNewReply","selectAmountOfRequests","selectAmountOfReplies","selectIntervalId","selectDelayCounter","selectIsLanguageChange","selectErrorMessage","store","configureStore","reducer","useAppDispatch","useDispatch","useAppSelector","useSelector","useMessage","dispatch","callbackFunction","unwrap","then","catch","rejectedValue","fetchMessages","fetchCheck","deleteRemainingMessages","forEach","checkNewRequests","currentAmountOfRequests","checkAmountOfRequests","length","calculateAmountOfRequests","checkNewReplies","currentAmountOfReplies","checkAmountOfReplies","calculateAmountOfReplies","useIntervalCounter","stopCounter","clearInterval","NavAuthItems","t","useTranslation","to","className","NavUserItems","title","icon","faBell","username","NavAdditionalItems","SelectLanguage","i18n","faLanguage","onChange","value","target","changeLanguage","NavBar","scrollToTop","useEffect","setInterval","startInterval","Navbar","variant","expand","fixed","Brand","onClick","Toggle","aria-controls","Collapse","id","Nav","faSearch","Footer","year","Date","getFullYear","pathname","rel","usePlant","fetchPlants","searchPlant","HomeAbout","src","plantsImage","loading","alt","plantPotIcon","WaitSpinner","role","PlantSearch","useState","setQuery","selectedOptions","setSelectedOptions","fetchPlantQueryByName","selectedLocations","option","selectedLocation","filterPlantsByLocation","optionsChoice","label","localizationTexts","allItemsAreSelected","clearSearch","noOptions","search","selectAll","selectAllFiltered","selectSomeItems","create","type","placeholder","labelledBy","options","overrideStrings","disableSearch","PlantThumbnail","PlantsCollection","index","PlantsCockpit","HomeTitle","Home","elementRef","useRef","elementHeight","Math","round","getBoundingClientRect","height","current","ref","titleSection","aboutSection","useAuthentification","updateUserRequestsReplies","clonedUser","JSON","parse","stringify","ErrorMessage","outputFunction","includes","SignUp","useHistory","onSubmit","event","email","password","toLowerCase","preventDefault","htmlFor","formNoValidate","SignIn","LogOut","updatedUser","useRouting","protectRoute","usePlantImage","createImage","uploadImageData","deleteImage","GoBackButton","clickHandler","PlantCreateForm","goBack","buttonState","useMemo","image","plantImage","files","FormData","append","min","disabled","PlantDetailsBuyerItems","PlantDetailsCreatorChoice","PlantDetailsUserChoice","isCreator","PlantDetailsBuyerChoice","PlantItem","keyword","PlantItems","creator","PlantDetails","useParams","PlantUpdateForm","selectElementRef","setPlantLocation","handlePlantEntryChange","clonedPlant","Number","handlePlantImageChange","useNavigation","goToHome","goToRequests","goToReplies","PaymentErrorMessage","PaymentCheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","initializePayment","payment","usePayment","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","handleInputChanges","empty","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","PaymentCheckoutView","loadStripe","stripePromise","RequestTile","RequestsCollection","RequestsView","resetRequestVariableAndScrollToTop","handleGoBack","ReplyThumbnail","RepliesCollection","ReplyTile","RepliesView","resetReplyVariableAndScrollToTop","RequestCreateForm","handleCreateMessageForRequest","cols","rows","WaitSpinnerText","text","Reply","headline","RequestDetails","clonedMessage","setBuyerMessageInactive","handleChangeMessageState","ReplyDetails","handleDeleteMessage","RequestUpdateForm","handleCreateReply","Unauthorized","NotFound","KommunicateChat","createLauncherIcon","htmlDocument","method","scriptElement","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","document","PlantsCreatedCollection","PlantsCreatedView","ModalBody","subheadline","isClose","divElementRef","handleCloseModal","ErrorModal","convertErrorMessage","OfflineModal","isOnline","Modals","setIsOnline","handleOfflineEventCallback","handleOnlineEventCallback","addEventListener","removeEventListener","useOnlineStatus","AccordionItem","header","body","isBodyVisible","setIsBodyVisible","divBodyRef","accordionItemBody","scrollHeight","headerState","imageState","xmlns","viewBox","d","Accordion","headerText","bodyText","FaqView","faqData","useFaqData","withRouter","exact","path","component","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","ns","defaultNS","backend","loadPath","debug","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","querySelector"],"mappings":"wQAiFMA,EAAO,UCjFaC,mCDiFb,QAwDPC,EAAkB,SAACC,GACvB,MAAM,IAAIC,MAAMD,IAILE,EAASC,YACpB,oBADoC,uCAEpC,WAAOC,GAAP,mBAAAC,EAAA,+EAE2BC,IAAMC,KAAN,UAAcV,EAAd,iBAAsCO,GAFjE,uBAEYJ,EAFZ,EAEYA,KAFZ,kBAGWA,GAHX,uCAMcQ,EANd,KAKIC,SACET,KAAQQ,MANd,kBASWT,EAAgBS,IAT3B,yDAFoC,uDAgBzBE,EAASP,YACpB,oBADoC,uCAEpC,WAAOQ,GAAP,mBAAAN,EAAA,+EAE2BC,IAAMC,KAAN,UAAcV,EAAd,iBAAsCc,EAAM,CACjEC,iBAAiB,IAHvB,uBAEYZ,EAFZ,EAEYA,KAFZ,kBAKWA,GALX,uCAQcQ,EARd,KAOIC,SACET,KAAQQ,MARd,kBAWWT,EAAgBS,IAX3B,yDAFoC,uDAkBzBK,EAASV,YACpB,oBADoC,uCAEpC,WAAOQ,GAAP,eAAAN,EAAA,+EAEUC,IAAMC,KAAN,UAAcV,EAAd,iBAAsCc,EAAM,CAChDC,iBAAiB,IAHvB,6DAOcJ,EAPd,KAMIC,SACET,KAAQQ,MAPd,kBAUWT,EAAgBS,IAV3B,wDAFoC,uDAiBzBM,EAAoBX,YAC/B,+BAD+C,sBAE/C,gCAAAE,EAAA,+EAE2BC,IAAMS,IAAN,UAAalB,EAAb,oBAAwC,CAC7De,iBAAiB,IAHvB,uBAEYZ,EAFZ,EAEYA,KAFZ,kBAKWA,GALX,uCAQcQ,EARd,KAOIC,SACET,KAAQQ,MARd,kBAWWT,EAAgBS,IAX3B,0DAiBWQ,EAAcb,YACzB,yBADyC,uCAEzC,WAAOc,GAAP,mBAAAZ,EAAA,+EAE2BC,IAAMC,KAAN,UAAcV,EAAd,kBAAuCoB,EAAU,CACtEL,iBAAiB,IAHvB,uBAEYZ,EAFZ,EAEYA,KAFZ,kBAKWA,GALX,uCAQcQ,EARd,KAOIC,SACET,KAAQQ,MARd,kBAWWT,EAAgBS,IAX3B,yDAFyC,uDAkB9BU,EAAiBf,YAC5B,4BAD4C,sBAE5C,gCAAAE,EAAA,+EAE2BC,IAAMS,IAAN,UAAalB,EAAb,sBAF3B,uBAEYG,EAFZ,EAEYA,KAFZ,kBAGWA,GAHX,uCAMcQ,EANd,KAKIC,SACET,KAAQQ,MANd,kBASWT,EAAgBS,IAT3B,0DAcWW,EAAmBhB,YAC9B,8BAD8C,uCAE9C,WAAOiB,GAAP,mBAAAf,EAAA,+EAE2BC,IAAMS,IAAN,UAAalB,EAAb,4BAAwCuB,IAFnE,uBAEYpB,EAFZ,EAEYA,KAFZ,kBAGWA,GAHX,uCAMcQ,EANd,KAKIC,SACET,KAAQQ,MANd,kBASWT,EAAgBS,IAT3B,yDAF8C,uDAgBnCa,EAAalB,YACxB,wBADwC,uCAExC,WAAOmB,GAAP,mBAAAjB,EAAA,+EAE2BC,IAAMS,IAAN,UAAalB,EAAb,yBAAqCyB,GAAW,CACrEV,iBAAiB,IAHvB,uBAEYZ,EAFZ,EAEYA,KAFZ,kBAKWA,GALX,uCAQcQ,EARd,KAOIC,SACET,KAAQQ,MARd,kBAWWT,EAAgBS,IAX3B,yDAFwC,uDAkB7Be,EAAcpB,YACzB,yBADyC,uCAEzC,qCAAAE,EAAA,6DACEiB,EADF,EACEA,QACAE,EAFF,EAEEA,aAFF,kBAK2BlB,IAAMmB,MAAN,UAClB5B,EADkB,0BACOyB,GAC5BE,GAPN,uBAKYxB,EALZ,EAKYA,KALZ,kBASWA,GATX,uCAYcQ,EAZd,KAWIC,SACET,KAAQQ,MAZd,kBAeWT,EAAgBS,IAf3B,yDAFyC,uDAsB9BkB,EAAcvB,YACzB,yBADyC,uCAEzC,WAAOmB,GAAP,eAAAjB,EAAA,+EAEUC,IAAMqB,OAAN,UAAgB9B,EAAhB,0BAAyCyB,IAFnD,6DAKcd,EALd,KAIIC,SACET,KAAQQ,MALd,kBAQWT,EAAgBS,IAR3B,wDAFyC,uDAgB9BoB,EAAmBzB,YAC9B,8BAD8C,uCAE9C,WAAO0B,GAAP,mBAAAxB,EAAA,+EAE2BC,IAAMC,KAAN,UAClBV,EADkB,sBAErBgC,GAJN,uBAEY7B,EAFZ,EAEYA,KAFZ,kBAMWA,GANX,uCAScQ,EATd,KAQIC,SACET,KAAQQ,MATd,kBAYWT,EAAgBS,IAZ3B,yDAF8C,uDAmBnCsB,EAAmB3B,YAC9B,8BAD8C,uCAE9C,WAAO4B,GAAP,eAAA1B,EAAA,+EAEUC,IAAMC,KAAN,UAAcV,EAAd,uBAA4CkC,GAFtD,6DAKcvB,EALd,KAIIC,SACET,KAAQQ,MALd,kBAQWT,EAAgBS,IAR3B,wDAF8C,uDAgBnCwB,EAAgB7B,YAC3B,2BAD2C,uCAE3C,mCAAAE,EAAA,6DAAS4B,EAAT,EAASA,MAAT,kBAE2B3B,IAAMC,KAAN,UAClBV,EADkB,iCAErB,CACEoC,UALR,uBAEYjC,EAFZ,EAEYA,KAFZ,kBAQWA,GARX,uCAWcQ,EAXd,KAUIC,SACET,KAAQQ,MAXd,kBAcWT,EAAgBS,IAd3B,yDAF2C,uDAsBhC0B,EAAgB/B,YAC3B,2BAD2C,uCAE3C,WAAOgC,GAAP,mBAAA9B,EAAA,+EAE2BC,IAAMC,KAAN,UAClBV,EADkB,oBAErBsC,EACA,CAAEvB,iBAAiB,IALzB,uBAEYZ,EAFZ,EAEYA,KAFZ,kBAOWA,GAPX,uCAUcQ,EAVd,KASIC,SACET,KAAQQ,MAVd,kBAaWT,EAAgBS,IAb3B,yDAF2C,uDAoBhC4B,EAAmBjC,YAC9B,8BAD8C,sBAE9C,gCAAAE,EAAA,+EAE2BC,IAAMS,IAAN,UAAalB,EAAb,wBAF3B,uBAEYG,EAFZ,EAEYA,KAFZ,kBAGWA,GAHX,uCAMcQ,EANd,KAKIC,SACET,KAAQQ,MANd,kBASWT,EAAgBS,IAT3B,0DAcW6B,EAAelC,YAC1B,0BAD0C,uCAE1C,WAAOmC,GAAP,mBAAAjC,EAAA,+EAE2BC,IAAMS,IAAN,UAClBlB,EADkB,2BACQyC,GAC7B,CAAE1B,iBAAiB,IAJzB,uBAEYZ,EAFZ,EAEYA,KAFZ,kBAMWA,GANX,uCAScQ,EATd,KAQIC,SACET,KAAQQ,MATd,kBAYWT,EAAgBS,IAZ3B,yDAF0C,uDAmB/B+B,EAAgBpC,YAC3B,2BAD2C,uCAE3C,qCAAAE,EAAA,6DACEiC,EADF,EACEA,UACAE,EAFF,EAEEA,eAFF,kBAK2BlC,IAAMmB,MAAN,UAClB5B,EADkB,4BACSyC,GAC9BE,GAPN,uBAKYxC,EALZ,EAKYA,KALZ,kBASWA,GATX,uCAYcQ,EAZd,KAWIC,SACET,KAAQQ,MAZd,kBAeWT,EAAgBS,IAf3B,yDAF2C,uDAsBhCiC,EAAgBtC,YAC3B,2BAD2C,uCAE3C,WAAOmC,GAAP,eAAAjC,EAAA,+EAEUC,IAAMqB,OAAN,UAAgB9B,EAAhB,4BAA2CyC,IAFrD,6DAKc9B,EALd,KAIIC,SACET,KAAQQ,MALd,kBAQWT,EAAgBS,IAR3B,wDAF2C,uDAehCkC,EAAkBC,YAAY,CACzCC,KAAM,aACNC,aAlYiC,CAEjCC,cAAc,EACdC,aAAc,KAGdC,iBAAiB,EACjBC,kBAAkB,EAClBC,iBAAiB,EACjBC,iBAAiB,EACjBC,iBAAiB,EACjBC,MAAO,GACPC,OAAQ,GACRC,eAAgB,GAChBC,uBAAwB,EAGxBC,uBAAuB,EACvBC,sBAAsB,EACtB3B,iBAAkB,KAGlB4B,aAAc,GAGdC,mBAAmB,EACnBC,oBAAoB,EACpBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,SAAU,GACVC,QAAS,GAGTC,cAAc,EACdC,YAAY,EACZC,iBAAkB,EAClBC,gBAAiB,EAGjBC,WAAY,KACZC,aAAc,EAGdC,mBAAoB,EACpBC,mBAAoB,EAGpBC,kBAAkB,EAGlBC,aAAc,MAiVdC,SAAU,CAERC,gBAAiB,SAACC,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QACzBD,EAAMjC,aAAekC,GAEvBC,gBAAiB,SAACF,EAAD,GAAqD,IAA3CC,EAA0C,EAA1CA,QACzBD,EAAMhC,aAAeiC,GAIvBE,mBAAoB,SAACH,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QAC5BD,EAAM/B,gBAAkBgC,GAE1BG,oBAAqB,SAACJ,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QAC7BD,EAAM9B,iBAAmB+B,GAE3BI,mBAAoB,SAACL,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QAC5BD,EAAM7B,gBAAkB8B,GAE1BK,mBAAoB,SAACN,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QAC5BD,EAAM5B,gBAAkB6B,GAE1BM,mBAAoB,SAACP,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QAC5BD,EAAM3B,gBAAkB4B,GAE1BO,SAAU,SAACR,EAAD,GAA+C,IAArCC,EAAoC,EAApCA,QAClBD,EAAMzB,OAAOkC,KAAKR,IAEpBS,SAAU,SAACV,EAAD,GAA+C,IAArCC,EAAoC,EAApCA,QAClBD,EAAM1B,MAAQ2B,GAEhBU,UAAW,SAACX,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QACnBD,EAAMzB,OAAS0B,GAEjBW,kBAAmB,SAACZ,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QAC3BD,EAAMxB,eAAiByB,GAEzBY,gBAAiB,SACfb,EADe,GAcX,IAAD,IAXDC,QACEa,EAUD,EAVCA,IACAjD,EASD,EATCA,KACAkD,EAQD,EARCA,YACAC,EAOD,EAPCA,KACAC,EAMD,EANCA,SACAC,EAKD,EALCA,cACAC,EAID,EAJCA,SACAjE,EAGD,EAHCA,MAIJ8C,EAAMzB,OAASyB,EAAMzB,OAAO6C,KAAI,SAACC,GAU/B,OATIA,EAAYP,MAAQA,IACtBO,EAAYxD,KAAOA,EACnBwD,EAAYN,YAAcA,EAC1BM,EAAYL,KAAOA,EACnBK,EAAYJ,SAAWA,EACvBI,EAAYH,cAAgBA,EAC5BG,EAAYF,SAAWA,EACvBE,EAAYnE,MAAQA,GAEfmE,MAGXC,YAAa,SAACtB,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QACrBD,EAAMzB,OAASyB,EAAMzB,OAAOgD,QAC1B,SAACjD,GAAD,OAA2BA,EAAMwC,MAAQb,MAG7CuB,0BAA2B,SAACxB,EAAD,GAAgD,IAAtCC,EAAqC,EAArCA,QACnCD,EAAMvB,uBAAyBwB,GAIjCwB,yBAA0B,SAACzB,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QAClCD,EAAMtB,sBAAwBuB,GAEhCyB,wBAAyB,SAAC1B,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QACjCD,EAAMrB,qBAAuBsB,GAE/B0B,oBAAqB,SACnB3B,EADmB,GAGf,IADFC,EACC,EADDA,QAEFD,EAAMhD,iBAAmBiD,GAI3B2B,gBAAiB,SAAC5B,EAAD,GAAgD,IAAtCC,EAAqC,EAArCA,QACzBD,EAAMpB,aAAeqB,GAIvB4B,qBAAsB,SAAC7B,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QAC9BD,EAAMnB,kBAAoBoB,GAE5B6B,sBAAuB,SAAC9B,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QAC/BD,EAAMlB,mBAAqBmB,GAE7B8B,qBAAsB,SAAC/B,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QAC9BD,EAAMjB,kBAAoBkB,GAE5B+B,qBAAsB,SAAChC,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QAC9BD,EAAMhB,kBAAoBiB,GAE5BgC,qBAAsB,SAACjC,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QAC9BD,EAAMf,kBAAoBgB,GAE5BiC,WAAY,SAAClC,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QACpBD,EAAMd,SAASuB,KAAKR,IAEtBkC,YAAa,SAACnC,EAAD,GAAmD,IAAzCC,EAAwC,EAAxCA,QACrBD,EAAMd,SAAWe,GAEnBmC,WAAY,SAACpC,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QACpBD,EAAMb,QAAUc,GAElBoC,kBAAmB,SACjBrC,EADiB,GAKb,IAAD,IAFDC,QAAWa,EAEV,EAFUA,IAAKwB,EAEf,EAFeA,MAAOC,EAEtB,EAFsBA,OAAQjE,EAE9B,EAF8BA,MAAOkE,EAErC,EAFqCA,QAASC,EAE9C,EAF8CA,MAAOC,EAErD,EAFqDA,aAGxD1C,EAAMd,SAAWc,EAAMd,SAASkC,KAAI,SAACuB,GASnC,OARIA,EAAc7B,MAAQA,IACxB6B,EAAcL,MAAQA,EACtBK,EAAcJ,OAASA,EACvBI,EAAcrE,MAAQA,EACtBqE,EAAcH,QAAUA,EACxBG,EAAcF,MAAQA,EACtBE,EAAcD,aAAeA,GAExBC,MAGXC,cAAe,SAAC5C,EAAD,GAAmD,IAAzCC,EAAwC,EAAxCA,QACvBD,EAAMd,SAAWc,EAAMd,SAASqC,QAC9B,SAACpC,GAAD,OAA+BA,EAAQ2B,MAAQb,MAKnD4C,gBAAiB,SAAC7C,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QACzBD,EAAMZ,aAAea,GAEvB6C,cAAe,SAAC9C,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QACvBD,EAAMX,WAAaY,GAErB8C,yBAA0B,SAAC/C,GACzBA,EAAMV,iBAAoBU,EAAMhC,aAAqBsB,kBAEvD0D,wBAAyB,SAAChD,GACxBA,EAAMT,gBAAmBS,EAAMhC,aAAqBuB,iBAEtD0D,oBAAqB,SAACjD,EAAD,GAAgD,IAAtCC,EAAqC,EAArCA,QAC7BD,EAAMV,iBAAmBW,GAE3BiD,mBAAoB,SAAClD,EAAD,GAAgD,IAAtCC,EAAqC,EAArCA,QAC5BD,EAAMT,gBAAkBU,GAE1BkD,yBAA0B,SAACnD,GACzBA,EAAMV,kBAAoB,GAE5B8D,wBAAyB,SAACpD,GACxBA,EAAMT,iBAAmB,GAI3B8D,cAAe,SAACrD,EAAD,GAAoD,IAA1CC,EAAyC,EAAzCA,QACvBD,EAAMR,WAAaS,GAErBqD,gBAAiB,SAACtD,EAAD,GAAgD,IAAtCC,EAAqC,EAArCA,QACzBD,EAAMP,aAAeQ,GAEvBsD,qBAAsB,SAACvD,GACrBA,EAAMP,cAAgB,GAIxB+D,sBAAuB,SAACxD,EAAD,GAAgD,IAAtCC,EAAqC,EAArCA,QAC/BD,EAAMN,mBAAqBO,GAE7BwD,sBAAuB,SAACzD,EAAD,GAAgD,IAAtCC,EAAqC,EAArCA,QAC/BD,EAAML,mBAAqBM,GAE7ByD,cAAe,SAAC1D,GACd2D,gBAAOC,SAAS5D,EAAMN,qBAExBmE,eAAgB,SAAC7D,GACf2D,gBAAOC,SAAS5D,EAAMN,mBAAqBM,EAAML,qBAInDmE,oBAAqB,SAAC9D,EAAD,GAAiD,IAAvCC,EAAsC,EAAtCA,QAC7BD,EAAMJ,iBAAmBK,GAI3B8D,gBAAiB,SAAC/D,EAAD,GAAsD,IAA5CC,EAA2C,EAA3CA,QACzBD,EAAMH,aAAeI,IAIzB+D,cAAe,SAACC,GAEdA,EAAQC,QAAQjI,EAAYkI,WAAW,SAACnE,GACtCA,EAAM/B,iBAAkB,KAE1BgG,EAAQC,QAAQjI,EAAYmI,UAAU,SAACpE,GACrCA,EAAM/B,iBAAkB,KAE1BgG,EAAQC,QAAQ/H,EAAegI,WAAW,SAACnE,GACzCA,EAAM9B,kBAAmB,KAE3B+F,EAAQC,QAAQ/H,EAAeiI,UAAU,SAACpE,GACxCA,EAAM9B,kBAAmB,KAE3B+F,EAAQC,QAAQ9H,EAAiB+H,WAAW,SAACnE,GAC3CA,EAAM9B,kBAAmB,KAE3B+F,EAAQC,QAAQ9H,EAAiBgI,UAAU,SAACpE,GAC1CA,EAAM9B,kBAAmB,KAE3B+F,EAAQC,QAAQ5H,EAAW6H,WAAW,SAACnE,GACrCA,EAAM7B,iBAAkB,KAE1B8F,EAAQC,QAAQ5H,EAAW8H,UAAU,SAACpE,GACpCA,EAAM7B,iBAAkB,KAE1B8F,EAAQC,QAAQ1H,EAAY2H,WAAW,SAACnE,GACtCA,EAAM5B,iBAAkB,KAE1B6F,EAAQC,QAAQ1H,EAAY4H,UAAU,SAACpE,GACrCA,EAAM5B,iBAAkB,KAE1B6F,EAAQC,QAAQvH,EAAYwH,WAAW,SAACnE,GACtCA,EAAM3B,iBAAkB,KAE1B4F,EAAQC,QAAQvH,EAAYyH,UAAU,SAACpE,GACrCA,EAAM3B,iBAAkB,KAI1B4F,EAAQC,QAAQrH,EAAiBsH,WAAW,SAACnE,GAC3CA,EAAMtB,uBAAwB,KAEhCuF,EAAQC,QAAQrH,EAAiBuH,UAAU,SAACpE,GAC1CA,EAAMtB,uBAAwB,KAEhCuF,EAAQC,QAAQnH,EAAiBoH,WAAW,SAACnE,GAC3CA,EAAMrB,sBAAuB,KAE/BsF,EAAQC,QAAQnH,EAAiBqH,UAAU,SAACpE,GAC1CA,EAAMrB,sBAAuB,KAI/BsF,EAAQC,QAAQ/G,EAAcgH,WAAW,SAACnE,GACxCA,EAAMnB,mBAAoB,KAE5BoF,EAAQC,QAAQ/G,EAAciH,UAAU,SAACpE,GACvCA,EAAMnB,mBAAoB,KAE5BoF,EAAQC,QAAQ7G,EAAiB8G,WAAW,SAACnE,GAC3CA,EAAMlB,oBAAqB,KAE7BmF,EAAQC,QAAQ7G,EAAiB+G,UAAU,SAACpE,GAC1CA,EAAMlB,oBAAqB,KAE7BmF,EAAQC,QAAQ5G,EAAa6G,WAAW,SAACnE,GACvCA,EAAMjB,mBAAoB,KAE5BkF,EAAQC,QAAQ5G,EAAa8G,UAAU,SAACpE,GACtCA,EAAMjB,mBAAoB,KAE5BkF,EAAQC,QAAQ1G,EAAc2G,WAAW,SAACnE,GACxCA,EAAMhB,mBAAoB,KAE5BiF,EAAQC,QAAQ1G,EAAc4G,UAAU,SAACpE,GACvCA,EAAMhB,mBAAoB,KAE5BiF,EAAQC,QAAQxG,EAAcyG,WAAW,SAACnE,GACxCA,EAAMf,mBAAoB,KAE5BgF,EAAQC,QAAQxG,EAAc0G,UAAU,SAACpE,GACvCA,EAAMf,mBAAoB,QAK1BoF,EAEgB,qBAAGC,WAAcvG,cAFjCsG,EAIgB,qBAAGC,WAActG,cAJjCqG,EAQmB,qBAAGC,WAAcrG,iBARpCoG,EAUoB,qBAAGC,WAAcpG,kBAVrCmG,EAYmB,qBAAGC,WAAcnG,iBAZpCkG,EAcmB,qBAAGC,WAAclG,iBAdpCiG,EAgBmB,qBAAGC,WAAcjG,iBAhBpCgG,EAkBS,qBAAGC,WAAchG,OAlB1B+F,EAmBU,qBAAGC,WAAc/F,QAnB3B8F,EAoBmB,qBAAGC,WAAc9F,gBApBpC6F,EAsB0B,qBAC5BC,WAAc7F,wBAvBZ4F,EA2ByB,qBAC3BC,WAAc5F,uBA5BZ2F,EA8BwB,qBAC1BC,WAAc3F,sBA/BZ0F,EAiCoB,qBAAGC,WAActH,kBAjCrCqH,EAqCgB,qBAAGC,WAAc1F,cArCjCyF,EAyCqB,qBAAGC,WAAczF,mBAzCtCwF,EA2CuB,qBACzBC,WAAcxF,oBA5CZuF,GA8CqB,qBAAGC,WAAcvF,mBA9CtCsF,GAgDqB,qBAAGC,WAActF,mBAhDtCqF,GAkDqB,qBAAGC,WAAcrF,mBAlDtCoF,GAoDW,qBAAGC,WAAcnF,SApD5BkF,GAqDY,qBAAGC,WAAcpF,UArD7BmF,GAwDgB,qBAAGC,WAAclF,cAxDjCiF,GA0Dc,qBAAGC,WAAcjF,YA1D/BgF,GA2DoB,qBAAGC,WAAchF,kBA3DrC+E,GA6DmB,qBAAGC,WAAc/E,iBA7DpC8E,GAiEc,qBAAGC,WAAc9E,YAjE/B6E,GAkEgB,qBAAGC,WAAc7E,cAlEjC4E,GA8EoB,qBAAGC,WAAc1E,kBA9ErCyE,GAkFgB,qBAAGC,WAAczE,c,GAsEnClC,EAAgB4G,QA/DlBxE,G,GAAAA,gBACAG,G,GAAAA,gBAGAC,G,GAAAA,mBACAC,G,GAAAA,oBACAC,G,GAAAA,mBACAC,G,GAAAA,mBACAC,G,GAAAA,mBACAC,G,GAAAA,SACAG,G,GAAAA,UACAC,G,GAAAA,kBACAF,G,GAAAA,SACAG,G,GAAAA,gBACAS,G,GAAAA,YACAE,G,GAAAA,0BAGAC,G,GAAAA,yBACAC,G,GAAAA,wBACAC,G,GAAAA,oBAGAC,G,GAAAA,gBAGAC,G,GAAAA,qBACAC,G,GAAAA,sBACAC,G,GAAAA,qBACAC,G,GAAAA,qBACAC,G,GAAAA,qBACAC,G,GAAAA,WACAC,G,GAAAA,YACAC,G,GAAAA,WACAC,G,GAAAA,kBACAO,G,GAAAA,cAGAC,G,GAAAA,gBACAC,G,GAAAA,cACAC,G,GAAAA,yBACAC,G,GAAAA,wBACAC,G,GAAAA,oBACAC,G,GAAAA,mBACAC,G,GAAAA,yBACAC,G,GAAAA,wBAGAC,G,GAAAA,cACAC,G,GAAAA,gBACAC,G,GAAAA,qBAGAC,G,GAAAA,sBACAC,G,GAAAA,sBACAC,G,GAAAA,cACAG,G,GAAAA,eAGAC,G,GAAAA,oBAGAC,G,GAAAA,gBAMAS,GAkDEH,EAjDFI,GAiDEJ,EA9CFK,GA8CEL,EA7CFM,GA6CEN,EA5CFO,GA4CEP,EA3CFQ,GA2CER,EA1CFS,GA0CET,EAzCFU,GAyCEV,EAxCFW,GAwCEX,EAvCFY,GAuCEZ,EAtCFa,GAsCEb,EAnCFc,GAmCEd,EAlCFe,GAkCEf,EAjCFgB,GAiCEhB,EA9BFiB,GA8BEjB,EA3BFkB,GA2BElB,EA1BFmB,GA0BEnB,EAzBFoB,GAyBEpB,GAxBFqB,GAwBErB,GAvBFsB,GAuBEtB,GAtBFuB,GAsBEvB,GArBFwB,GAqBExB,GAlBFyB,GAkBEzB,GAjBF0B,GAiBE1B,GAhBF2B,GAgBE3B,GAfF4B,GAeE5B,GAZF6B,GAYE7B,GAXF8B,GAWE9B,GAJF+B,GAIE/B,GADFgC,GACEhC,GAEW1G,KAAf,QEx8Ba2I,GAAQC,YAAe,CAClCC,QAAS,CAAElC,WAAY3G,M,4BCDZ8I,GAAiB,kBAAMC,eACvBC,GAAkDC,ICiClDC,GAAa,WACxB,IAAMC,EAAWL,KAEjB,MAAO,CACLtJ,cAAe,SAACC,EAAqB2J,GACnCD,EAASjF,IAAqB,IAC9BiF,EAAS3J,EAAcC,IACpB4J,SACAC,MAAK,SAAC9H,GACL2H,EAAS5E,GAAW/C,IACpB4H,OAEDG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7C7B,aAAc,SAACC,EAAsBwJ,GACnCD,EAAS/E,IAAqB,IAC9B+E,EAASxJ,EAAaC,IACnByJ,SACAC,MAAK,SAAC9H,GACL2H,EAAS1E,GAAWjD,IACpB4H,OAEDG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7CiI,cAAe,SAACL,GACdD,EAAShF,IAAsB,IAC/BgF,EAASzJ,KACN2J,SACAC,MAAK,SAAC/H,GACL4H,EAAS3E,GAAYjD,IACrB6H,OAEDG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7CkI,WAAY,SAACN,GACXD,EAASzJ,KACN2J,SACAC,MAAK,SAAC/H,GACL4H,EAAS3E,GAAYjD,IACrB6H,EAAiB7H,MAElBgI,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7C3B,cAAe,SACbC,EACAsJ,GACU,IACFjG,EAAQrD,EAARqD,IACRgG,EAAS9E,IAAqB,IAC9B8E,EAAStJ,EAAc,CAAED,UAAWuD,EAAkBrD,oBACnDuJ,SACAC,MAAK,SAAC9H,GACL2H,EAASzE,GAAkBlD,IAC3B4H,OAEDG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7CzB,cAAe,SAACH,EAAsBwJ,GACpCD,EAAS7E,IAAqB,IAC9B6E,EAASpJ,EAAcH,IACpByJ,SACAC,MAAK,WACJH,EAASlE,GAAcrF,IACvBwJ,OAEDG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7CmI,wBAlFK,SAkFmBpI,EAAqB3C,GAC3C2C,EAASqI,SAAQ,YAAoC,IAAjCzG,EAAgC,EAAhCA,IAAgC,EAA3BxC,MACFwC,MAAQvE,IAC3BuK,EAAS7E,IAAqB,IAC9B6E,EAASpJ,EAAcoD,IACpBkG,SACAC,MAAK,WACJH,EAASlE,GAAc9B,OAExBoG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,kBAMjDqI,iBAAkB,WAEhBtI,EACAI,GACU,IAHRwB,EAGO,EAHPA,KAY4B,SAC5B2G,EACAnI,GAEIA,EAAmBmI,GACrBX,EAASjE,IAAgB,IAEvBvD,IAAqBmI,GACvBX,EAAS7D,GAAoBwE,IAKjCC,CArBkC,SAACxI,GAKjC,OAJgCA,EAASqC,QACvC,gBAAGgB,EAAH,EAAGA,OAAQG,EAAX,EAAWA,aAAX,OACGH,EAAgBzB,MAAQA,IAAwB,IAAjB4B,KAClCiF,OAgB4BC,CAA0B1I,GACXI,IAGjDuI,gBAAiB,WAEf3I,EACAK,GACU,IAHRuB,EAGO,EAHPA,KAY2B,SAC3BgH,EACAvI,GAEIA,EAAkBuI,GACpBhB,EAAShE,IAAc,IAErBvD,IAAoBuI,GACtBhB,EAAS5D,GAAmB4E,IAKhCC,CArBiC,SAAC7I,GAKhC,OAJ+BA,EAASqC,QACtC,gBAAGe,EAAH,EAAGA,MAAOG,EAAV,EAAUA,MAAV,OACGH,EAAexB,MAAQA,GAAiB,KAAV2B,KACjCkF,OAgB2BK,CAAyB9I,GACXK,MC1LtC0I,GAAqB,WAChC,IAAMnB,EAAWL,KAEjB,MAAO,CACLyB,YAAa,SAAC1I,GACZ2I,cAAc3I,GACdsH,EAASzD,GAAc,OACvByD,EAASxD,GAAgB,O,8CCIhB8E,GAfM,WAAoB,IAC/BC,EAAMC,eAAND,EAER,OACE,uCACE,eAAC,IAAD,CAAME,GAAG,gBAAgBC,UAAU,uCAAnC,SACGH,EAAE,iBAEL,eAAC,IAAD,CAAME,GAAG,gBAAgBC,UAAU,uCAAnC,SACGH,EAAE,qBCuDII,GAxDM,WACnB,IAAMzK,EAAe2I,GAAelC,IAC9BrF,EAAeuH,GAAeb,IAC9BzG,EAAasH,GAAeZ,IAC1BsC,EAAMC,eAAND,EAWR,OACE,uCACE,eAAC,IAAD,CACEE,GAAG,iBACHC,UAAU,uCAFZ,SAIGH,EAAE,mBAEL,eAAC,IAAD,CACEE,GAAG,iBACHC,UAAU,uCAFZ,SAIGH,EAAE,sBAEL,gBAAC,IAAD,CACEE,GAAG,sBACHG,MAxBJtJ,EAAeiJ,EAAE,6BAA+B,GAyB5CG,UAAU,uCAHZ,UAKGpJ,GAAgB,eAAC,KAAD,CAAiBuJ,KAAMC,OACvCP,EAAE,oBAEL,gBAAC,IAAD,CACEE,GAAG,qBACHG,MA7BJrJ,EAAagJ,EAAE,2BAA6B,GA8BxCG,UAAU,uCAHZ,UAKGnJ,GAAc,eAAC,KAAD,CAAiBsJ,KAAMC,OACrCP,EAAE,mBAEL,eAAC,IAAD,CACEE,GAAG,gBACHG,MAlCJ1K,EAAeA,EAAa6K,SAAW,GAmCnCL,UAAU,uCAHZ,SAKGH,EAAE,qBC9CIS,GAPY,SAAC,GAC1B,OAD6E,EAAjDlN,KAEnB,eAAC,GAAD,IAEF,eAAC,GAAD,KC4BMmN,GA/BQ,WACrB,IAAMnJ,EAAmB+G,GAAeP,IAClCU,EAAWL,KAFuB,EAGpB6B,eAAZD,EAHgC,EAGhCA,EAAGW,EAH6B,EAG7BA,KAOX,OACE,uBAAKR,UAAU,kBAAf,UACE,eAAC,KAAD,CAAiBG,KAAMM,OACvB,0BACET,UAAU,8CACVU,SAVuB,SAAC,GAAsC,IAA1BC,EAAyB,EAAnCC,OAAUD,MACxCH,EAAKK,eAAeF,GACpBrC,EAAShD,IAAqBlE,KAM5B,UAIE,yBAAQuJ,MAAM,GAAGX,UAAU,kCAA3B,SACGH,EAAE,iCAEL,yBAAQc,MAAM,KAAKX,UAAU,kCAA7B,SACGH,EAAE,4BAEL,yBAAQc,MAAM,KAAKX,UAAU,kCAA7B,SACGH,EAAE,oCCmHEiB,GAtHA,WACb,IAAMvL,EAAe4I,GAAenC,IAC9BxG,EAAe2I,GAAelC,IAC9BjF,EAAamH,GAAeT,IAC5BzG,EAAekH,GAAeR,IAC9B/G,EAAeuH,GAAeb,IAC9BzG,EAAasH,GAAeZ,IAC5BzG,EAAmBqH,GAAeX,IAClCzG,EAAkBoH,GAAeV,IACjCa,EAAWL,KACT4B,EAAMC,eAAND,EAVwB,EAY9BxB,KADMO,EAXwB,EAWxBA,cAAeC,EAXS,EAWTA,WAAYG,EAXH,EAWGA,iBAAkBK,EAXrB,EAWqBA,gBAE7CK,EAAgBD,KAAhBC,YACAqB,EAAgB5F,gBAAhB4F,YAERC,qBAAU,WACR,OAAO,WACDhK,GACF0I,EAAY1I,MAGf,IAEHgK,qBAAU,WAyBRzL,GANEqJ,GAAc,WAhBZN,EAAS/D,MACT+D,EAAS9D,MACT8D,EAAS/G,IAAgB,IAGL,WACpB,IAAMP,EAAaiK,aACjB,WACE3C,EAASvD,QAEX,KAEFuD,EAASzD,GAAc7D,IACvBsH,EAASvD,MAKTmG,QAKH,CAAC3L,IAEJyL,qBAAU,WAQJzL,IACF+I,EAAS/D,MACT+D,EAAS9D,OAEXhF,GAVEqJ,GAAW,SAACnI,GACVsI,EAAiBxJ,EAAckB,EAAUI,GACzCuI,EAAgB7J,EAAckB,EAAUK,QAS3C,CAACE,IAIJ,OACE,+BACE,gBAACkK,GAAA,EAAD,CACEC,QAAQ,OACRC,OAAO,KACPC,MAAM,MACNtB,UAAU,uBAJZ,UAME,eAACmB,GAAA,EAAOI,MAAR,UACE,eAAC,IAAD,CAAMxB,GAAG,IAAIC,UAAU,oBAAoBwB,QAAST,EAApD,SACGlB,EAAE,uBAGP,eAACsB,GAAA,EAAOM,OAAR,CAAeC,gBAAc,mBAA7B,UACI9K,GAAgBC,IAAe,eAAC,KAAD,CAAiBsJ,KAAMC,SAE1D,gBAACe,GAAA,EAAOQ,SAAR,CAAiBC,GAAG,mBAApB,UACE,gBAACC,GAAA,EAAD,CAAK7B,UAAU,UAAf,UACE,eAAC,IAAD,CACED,GAAG,IACHC,UAAU,gCACVwB,QAAS,WACPlD,EAASjD,OAJb,SAOGwE,EAAE,oBAEL,eAAC,GAAD,CAAoBzM,KAAMoC,IAC1B,eAAC,IAAD,CAAMuK,GAAG,OAAOC,UAAU,gCAA1B,SACGH,EAAE,cAEL,eAAC,IAAD,CACEE,GAAG,IACHG,MAnC4BL,EAAE,yBAoC9BG,UAAU,gCACVwB,QAAS,WACPlD,EAASjD,OALb,SAQE,eAAC,KAAD,CAAiB8E,KAAM2B,YAG3B,eAAC,GAAD,aC1GKC,GA/BA,WAAoB,IACzBlC,EAAMC,eAAND,EAEFmC,GADc,IAAIC,MACCC,cAEzB,OACE,yBAAQlC,UAAU,SAAlB,SACE,uBAAKA,UAAU,yCAAf,UACGH,EAAE,0BADL,IACiCmC,EAAM,IACrC,eAAC,IAAD,CACEjC,GAAI,CAAEoC,SCZd,iDDaQvB,OAAO,SACPwB,IAAI,sBACJpC,UAAU,+BAJZ,SAMGH,EAAE,6BACG,IATV,IAUQ,IACN,eAAC,IAAD,CACEE,GAAI,CAAEoC,SCnBd,+CDoBQvB,OAAO,SACPwB,IAAI,sBACJpC,UAAU,+BAJZ,SAMGH,EAAE,mCEGAwC,GAAW,WACtB,IAAM/D,EAAWL,KAEjB,MAAO,CACLxK,YAAa,aAGX8K,GACU,IAHRlJ,EAGO,EAHPA,KAAMkD,EAGC,EAHDA,YAAaC,EAGZ,EAHYA,KAAMG,EAGlB,EAHkBA,SAAUjE,EAG5B,EAH4BA,MACnC+D,EAEO,EAFPA,SAAUC,EAEH,EAFGA,cAGNhF,EAAkB,CACtB2B,KAAMA,EAAKsL,MACXpI,YAAaA,EAAYoI,MACzBnI,KAAMA,EAAKmI,MACXlI,WACAC,gBACAC,SAAUA,EAASgI,MACnBjM,MAAOA,EAAMiM,OAEfrC,EAAS3G,IAAmB,IAC5B2G,EAAS7K,EAAYC,IAClB8K,SACAC,MAAK,SAAC3I,GACLwI,EAAStG,GAASlC,IAClByI,OAEDG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7C7C,WAAY,SAACC,EAAkBwK,GAC7BD,EAASzG,IAAmB,IAC5ByG,EAASxK,EAAWC,IACjByK,SACAC,MAAK,SAAC3I,GACLwI,EAASpG,GAASpC,IAClByI,OAEDG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7C2L,YAAa,SAAC/D,GACZD,EAAS1G,IAAoB,IAC7B0G,EAAS3K,KACN6K,SACAC,MAAK,SAAC1I,GACLuI,EAASnG,GAAUpC,IACa,qBAArBwI,GACTA,OAGHG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7C3C,YAAa,WAWXuK,GACU,IAVRjG,EAUO,EAVPA,IAWIrE,EAAsB,CAC1BoB,KAFO,EATPA,KAYAkD,YAHO,EARPA,YAYAC,KAJO,EAPPA,KAYAC,SALO,EANPA,SAYAC,cANO,EALPA,cAYAC,SAPO,EAJPA,SAYAjE,MARO,EAHPA,OAaF4J,EAASxG,IAAmB,IAC5BwG,EAAStK,EAAY,CAAED,QAASuE,EAAgBrE,kBAC7CuK,SACAC,MAAK,SAACxK,GACLqK,EAASjG,GAAgBpE,IACzBsK,OAEDG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7CxC,YAAa,SAACJ,EAAkBwK,GAC9BD,EAASvG,IAAmB,IAC5BuG,EAASnK,EAAYJ,IAClByK,SACAC,MAAK,WACJH,EAASxF,GAAY/E,IACrBwK,OAEDG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7C4L,YAAa,SAAC1O,GACZyK,EAAS1G,IAAoB,IAC7B0G,EAAS1K,EAAiBC,IACvB2K,SACAC,MAAK,SAAC1I,GACLuI,EAASnG,GAAUpC,OAEpB2I,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,gBChJlC,OAA0B,4CCA1B,OAA0B,4CCyD1B6L,GArDG,WAAoB,IAC5B3C,EAAMC,eAAND,EAER,OACE,sBAAKG,UAAU,oCAAf,SACE,uBAAKA,UAAU,MAAf,UACE,sBAAKA,UAAU,uDAAf,SACE,sBACEyC,IAAKC,GACLC,QAAQ,QACRC,IAAI,SACJ5C,UAAU,kBAGd,wBACA,sBAAKA,UAAU,kCAAf,SACE,2BAASA,UAAU,OAAnB,UACE,oCACE,qBAAIA,UAAU,uBAAd,SACGH,EAAE,+BAEL,qBAAIG,UAAU,0BAAd,SACGH,EAAE,qCAGP,qBAAGG,UAAU,wBAAb,UACGH,EAAE,oCACH,wBACCA,EAAE,oCACH,wBACCA,EAAE,oCACH,wBACCA,EAAE,oCACH,wBACCA,EAAE,oCACH,wBACCA,EAAE,uCAEL,sBAAKG,UAAU,mBAAf,SACE,sBACEyC,IAAKI,GACLF,QAAQ,OACRC,IAAI,YACJ5C,UAAU,6BCvCX8C,GARK,WAClB,OACE,sBAAK9C,UAAU,mDAAf,SACE,sBAAK+C,KAAK,SAAS/C,UAAU,+C,kBC6GpBgD,GAlGK,WAAoB,IAAD,EACXC,mBAAiB,IADN,oBAC9BpP,EAD8B,KACvBqP,EADuB,OAESD,mBAA2B,IAFpC,oBAE9BE,EAF8B,KAEbC,EAFa,KAG/BrN,EAASoI,GAAe3B,IACxB8B,EAAWL,KACT4B,EAAMC,eAAND,EAL6B,EAMAwC,KAA7BE,EAN6B,EAM7BA,YAAaD,EANgB,EAMhBA,YAErBtB,qBAAU,YACsB,SAACnN,GACzBA,EACF0O,EAAY1O,GAEZyO,IAIJe,CAAsBxP,KACrB,CAACA,IAEJmN,qBAAU,YACuB,SAC7BmC,EACApN,GAEA,IAAMuN,EAAoBH,EAAgBvK,KACxC,SAAC2K,GAAD,OAAoCA,EAAO5C,SAEvC3K,EAAiBD,EAAOgD,QAAO,YAAmC,IAAhCJ,EAA+B,EAA/BA,SAItC,OAAkC,IAHV2K,EAAkBvK,QACxC,SAACyK,GAAD,OAAuCA,IAAqB7K,KAEvCwG,UAEzBb,EAASlG,GAAkBpC,IAG7ByN,CAAuBN,EAAiBpN,KACvC,CAACoN,IAEJ,IAAMO,EAAkC,CACtC,CACEC,MAAO9D,EAAE,4BACTc,MAAO,OAET,CACEgD,MAAO9D,EAAE,8BACTc,MAAO,SAET,CACEgD,MAAO9D,EAAE,oCACTc,MAAO,kBAILiD,EAAyB,CAC7BC,oBAAoB,GAAD,OAAKhE,EAAE,iDAC1BiE,YAAajE,EAAE,wCACfkE,UAAWlE,EAAE,sCACbmE,OAAQnE,EAAE,mCACVoE,UAAWpE,EAAE,sCACbqE,kBAAmBrE,EAAE,8CACrBsE,gBAAiBtE,EAAE,4CACnBuE,OAAQvE,EAAE,oCAGZ,OACE,uBAAKG,UAAU,OAAf,UACE,qBAAIA,UAAU,kCACd,qBAAIA,UAAU,OAAd,SAAsBH,EAAE,qCACxB,uBAAKG,UAAU,uCAAf,UACE,wBACEqE,KAAK,OACLC,YAAazE,EAAE,0CACfc,MAAO9M,EACPmM,UAAU,2CACVU,SAAU,YAEwC,IADtCC,EACqC,EAD/CC,OAAUD,MAEVuC,EAASvC,MAGb,eAAC,KAAD,CACE4D,WAAW,kBACXC,QAASd,EACT/C,MAAOwC,EACPsB,gBAAiBb,EACjBlD,SAAU,SAAC8D,GACTpB,EAAmBoB,IAErBE,eAAe,EACf1E,UAAU,kHCnEL2E,GA9BQ,SAAC,GAEiB,IAAD,IADtC7O,MAASwC,EAC6B,EAD7BA,IAAKjD,EACwB,EADxBA,KAAMoD,EACkB,EADlBA,SAAU/D,EACQ,EADRA,MAEtBmL,EAAMC,eAAND,EAER,OACE,sBAAKG,UAAU,WAAf,SACE,uBAAKA,UAAU,iCAAf,UACE,sBACEyC,IAAKhK,EACLkK,QAAQ,OACRC,IAAKvN,EACL2K,UAAU,iDAEZ,uBAAKA,UAAU,iBAAf,UACE,qBAAIA,UAAU,iCAAd,SAAgD3K,IAChD,+BACGX,EADH,IACWmL,EAAE,2CAEb,eAAC,IAAD,CAAME,GAAE,wBAAmBzH,GAAO0H,UAAU,kBAA5C,SACE,yBAAQA,UAAU,oDAAlB,SACGH,EAAE,6BCsCF+E,GAzDU,WACvB,IAAM5O,EAAiBmI,GAAe1B,IAChCxG,EAAyBkI,GAAezB,IACxC4B,EAAWL,KACT4B,EAAMC,eAAND,EAMR,OACE,iCACE,sBACEG,UAAS,uJADX,SAUGhK,EAAe4C,KACd,SAAC9C,EAAc+O,GAAuC,IAC5CvM,EAAQxC,EAARwC,IACR,OAAOuM,EAAQ5O,EACb,eAAC,GAAD,CAAgBH,MAAOA,GAAYwC,GACjC,UAITrC,EAAyBD,EAAemJ,QACvC,sBAAKa,UAAU,cAAf,SACE,yBACEqE,KAAK,SACLrE,UAAS,4PAYTwB,QAzCgB,WACxBlD,EAAStF,GAA0B/C,EAAyB,KA0BtD,SAgBG4J,EAAE,uBCrCAiF,GAfO,WACpB,IAAMpP,EAAmByI,GAAehC,IAChC0D,EAAMC,eAAND,EAER,OACE,uBAAKG,UAAU,iBAAf,UACE,+BACE,8BAAKH,EAAE,qCAET,eAAC,GAAD,IACCnK,EAAmB,eAAC,GAAD,IAAkB,eAAC,GAAD,QCiB7BqP,GA7BG,WAChB,IAAMzG,EAAWL,KACT4B,EAAMC,eAAND,EAER,OACE,sBAAKG,UAAU,mCAAf,SACE,uBAAKA,UAAU,2BAAf,UACE,qBAAIA,UAAU,4BAAd,SACGH,EAAE,+BAEL,qBAAIG,UAAU,4CAAd,SACGH,EAAE,kCAEL,sBAAKG,UAAU,OAAf,SACE,eAAC,IAAD,CACED,GAAI,IACJC,UAAU,mBACVwB,QAAS,WACPlD,EAASpD,OAJb,SAOG2E,EAAE,wBCoCAmF,GAjDF,WACX,IAAMjP,EAASoI,GAAe3B,IACxB8B,EAAWL,KACXgH,EAAaC,iBAAsB,IACjC5C,EAAgBD,KAAhBC,YAmBR,OAjBAtB,qBAAU,WACR,IAAMmE,EAAgB,SAACF,GACrB,OAAOG,KAAKC,MAAMJ,EAAWK,wBAAwBC,SAGvDjD,GAAY,WACV,IAAMpL,EAAqBiO,EAAcF,EAAWO,QAAQ,IAC5DlH,EAAStD,GAAsB9D,IAC/B,IAAMC,EAAqBgO,EAAcF,EAAWO,QAAQ,IAC5DlH,EAASrD,GAAsB9D,SAEhC,IAEH6J,qBAAU,WACR1C,EAASlG,GAAkBrC,MAC1B,CAACA,IAGF,iCACE,0BACE0P,IAAK,SAACC,GACHT,EAAWO,QAAQ,GAA4BE,GAElD1F,UAAU,qCAJZ,SAME,eAAC,GAAD,MAGF,0BACEyF,IAAK,SAACE,GACHV,EAAWO,QAAQ,GAA4BG,GAFpD,SAKE,eAAC,GAAD,MAGF,mCACE,eAAC,GAAD,UCvCKC,GAAsB,WACjC,IAAMtH,EAAWL,KAEjB,MAAO,CACL9K,OAAQ,SAACC,EAAYmL,GACnBD,EAASnL,EAAOC,IACboL,SACAC,MAAK,SAACrL,GACLkL,EAAS5G,GAAgBtE,IACzBmL,OAEDG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7ChE,OAAQ,SAACE,EAAe0L,GACtBD,EAAS3L,EAAOE,IACb2L,SACAC,MAAK,SAACrL,GACLkL,EAAS5G,GAAgBtE,IACzBmL,OAEDG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7CrD,OAAQ,SAACkC,EAAoB+I,GAC3BD,EAAShL,EAAOkC,IACbgJ,SACAC,MAAK,WACJH,EAAS5G,GAAgB,OACzB6G,OAEDG,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7CkP,0BAA2B,SACzBrQ,EACAsB,EACAC,GAEA,IAAM+O,EAAmBC,KAAKC,MAAMD,KAAKE,UAAUzQ,IAInD,OAHAsQ,EAAWhP,iBAAmBA,EAC9BgP,EAAW/O,gBAAkBA,EAC7BuH,EAAS5G,GAAgBoO,IAClBA,KC5CEI,GAjBM,SAAC,GAGwB,IAF5CvP,EAE2C,EAF3CA,QACAwP,EAC2C,EAD3CA,eAEA,OAAKxP,GAAYA,EAAQyP,SAAS,QAKhC,qCACE,uBAAMpG,UAAU,uCAAhB,SACGmG,EAAexP,OANb,MCgJI0P,GA5IA,WACb,IAAMhP,EAAe8G,GAAeN,IAC9BS,EAAWL,KACThG,EAASqO,eAATrO,KACA4H,EAAMC,eAAND,EACAlN,EAAWiT,KAAXjT,OACAoO,EAAgB5F,gBAAhB4F,YAERC,qBAAU,WACR1C,EAAS/C,GAAgB,OACzBwF,MACC,IAqCH,OACE,sBAAKf,UAAU,qBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,qBAAIA,UAAU,OAAd,SAAsBH,EAAE,gCACxB,wBAAMG,UAAU,aAAauG,SAvCd,SAACC,GAAmD,IAAD,EAGlEA,EADF5F,OAAUP,EAF0D,EAE1DA,SAAUoG,EAFgD,EAEhDA,MAAOC,EAFyC,EAEzCA,SAEvB7T,EAAgB,CACpBwN,SAAUA,EAASM,MACnB8F,MAAOA,EAAM9F,MAAMgG,cACnBD,SAAUA,EAAS/F,OAErB6F,EAAMI,iBACNjU,EAAOE,GAAS,WACdyL,EAAS/G,IAAgB,IACzBU,EAAK,SA2BH,UACE,uBAAK+H,UAAU,aAAf,UACE,wBAAO6G,QAAQ,gBAAf,SACGhH,EAAE,gCAEL,wBACEwE,KAAK,OACLzC,GAAG,gBACHvM,KAAK,WACLiP,YAAazE,EAAE,sCACfG,UAAU,0BAGd,uBAAKA,UAAU,aAAf,UACE,wBAAO6G,QAAQ,aAAf,SAA6BhH,EAAE,6BAC/B,wBACEwE,KAAK,QACLzC,GAAG,aACHvM,KAAK,QACLiP,YAAazE,EAAE,sCACfG,UAAU,0BAGd,uBAAKA,UAAU,aAAf,UACE,wBAAO6G,QAAQ,gBAAf,SACGhH,EAAE,gCAEL,wBACEwE,KAAK,WACLzC,GAAG,gBACHvM,KAAK,WACLiP,YAAazE,EAAE,sCACfG,UAAU,0BAGd,eAAC,GAAD,CACErJ,QAASU,EACT8O,eA5DkB,SAAC9O,GAC3B,OAAQA,GACN,IAAK,yBACH,OAAOwI,EAAE,+CACX,IAAK,sBACH,OAAOA,EAAE,4CACX,IAAK,yBACH,OAAOA,EAAE,+CACX,IAAK,6BACH,OAAOA,EAAE,kDACX,IAAK,yBACH,OAAOA,EAAE,+CACX,IAAK,yCACH,OAAOA,EAAE,iDACX,QACE,OAAOA,EAAE,0BA+CP,yBACEwE,KAAK,SACLyC,gBAAc,EACd9G,UAAS,+RAHX,SAkBGH,EAAE,mBAEL,oBAAGG,UAAU,OAAb,SAAqBH,EAAE,6CACvB,sBAAKG,UAAU,aAAf,SACE,eAAC,IAAD,CAAMD,GAAI,gBAAiBC,UAAU,kBAArC,SACE,yBACEA,UAAS,2TADX,SAgBGH,EAAE,gCC1BJkH,GAtGA,WACb,IAAM1P,EAAe8G,GAAeN,IAC9BS,EAAWL,KACThG,EAASqO,eAATrO,KACA4H,EAAMC,eAAND,EACA1M,EAAWyS,KAAXzS,OACA4N,EAAgB5F,gBAAhB4F,YAERC,qBAAU,WACR1C,EAAS/C,GAAgB,OACzBwF,MACC,IAmCH,OACE,sBAAKf,UAAU,qBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,qBAAIA,UAAU,OAAd,SAAsBH,EAAE,gCACxB,wBAAMG,UAAU,aAAauG,SArCd,SAACC,GAAmD,IAAD,EAGlEA,EADF5F,OAAU6F,EAF0D,EAE1DA,MAAOC,EAFmD,EAEnDA,SAEbtT,EAAa,CACjBqT,MAAOA,EAAM9F,MACb+F,SAAUA,EAAS/F,OAErB6F,EAAMI,iBACNzT,EAAOC,GAAM,WACXkL,EAAS/G,IAAgB,IADF,IAEGR,EAAoB3D,EAApB2D,gBAC1BuH,EAAS7D,GADqCrH,EAAtC0D,mBAERwH,EAAS5D,GAAmB3D,IAC5BkB,EAAK,SAuBH,UACE,uBAAK+H,UAAU,aAAf,UACE,wBAAO6G,QAAQ,aAAf,SAA6BhH,EAAE,6BAC/B,wBACEwE,KAAK,QACLzC,GAAG,aACHvM,KAAK,QACLiP,YAAazE,EAAE,sCACfG,UAAU,0BAGd,uBAAKA,UAAU,aAAf,UACE,wBAAO6G,QAAQ,gBAAf,SACGhH,EAAE,gCAEL,wBACEwE,KAAK,WACLzC,GAAG,gBACHvM,KAAK,WACLiP,YAAazE,EAAE,sCACfG,UAAU,0BAGd,eAAC,GAAD,CACErJ,QAASU,EACT8O,eA5CkB,SAAC9O,GAC3B,OAAQA,GACN,IAAK,sBACH,OAAOwI,EAAE,4CACX,IAAK,yBACH,OAAOA,EAAE,+CACX,IAAK,6BACH,OAAOA,EAAE,kDACX,IAAK,8BACH,OAAOA,EAAE,gDACX,QACE,OAAOA,EAAE,0BAmCP,yBACEwE,KAAK,SACLyC,gBAAc,EACd9G,UAAS,iRAHX,SAiBGH,EAAE,4BC/DAmH,GA9BA,WACb,IAAMxR,EAAe2I,GAAelC,IAC9BjF,EAAamH,GAAeT,IAC5B5G,EAAmBqH,GAAeX,IAClCzG,EAAkBoH,GAAeV,IACjCa,EAAWL,KACThG,EAASqO,eAATrO,KANwB,EAOc2N,KAAtCtS,EAPwB,EAOxBA,OAAQuS,EAPgB,EAOhBA,0BACRnG,EAAgBD,KAAhBC,YACAqB,EAAgB5F,gBAAhB4F,YAkBR,OAhBAC,qBAAU,WACR,IAAMiG,EAAcpB,EAClBrQ,EACAsB,EACAC,GAEFzD,EAAO2T,GAAa,WAClBvH,EAAY1I,GACZsH,EAASjE,IAAgB,IACzBiE,EAAS7D,GAAoB,IAC7B6D,EAAS5D,GAAmB,IAC5BzC,EAAK,KACL8I,SAED,IAEI,0BChCImG,GAAa,WACxB,IAAM5I,EAAWL,KAEjB,MAAO,CACLkJ,aAAc,SAAC5I,GACbD,EAAS/K,KACNiL,SACAC,MAAK,SAACrL,GACLkL,EAAS5G,GAAgBtE,IACzBmL,OAEDG,OAAM,SAACC,GACwB,sBAA1BA,EAAchI,SAChB2H,EAAS/C,GAAgBoD,EAAchI,gBCVtCyQ,GAAgB,WAC3B,IAAM9I,EAAWL,KAEjB,MAAO,CACLoJ,YAAa,SAAC/S,EAAiBiK,GAC7BD,EAASrF,IAAyB,IAClCqF,EAASjK,EAAiBC,IACvBkK,SACAC,MAAK,SAAC6I,GACL/I,EAAiB+I,MAElB5I,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,cAI7C4Q,YAAa,SAAC/S,GACZ8J,EAASpF,IAAwB,IACjCoF,EAAS/J,EAAiBC,IACvBgK,SACAC,MAAK,eAGLC,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,gBCNlC6Q,GA1BM,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,aACd5H,EAAMC,eAAND,EAER,OACE,sBAAKG,UAAU,aAAf,SACE,yBACEA,UAAS,qNAYTwB,QAASiG,EAbX,SAeG5H,EAAE,sBCyKI6H,GAjLS,WACtB,IAAMlS,EAAe2I,GAAelC,IAC9B/F,EAAwBiI,GAAexB,IACvClH,EAAkB0I,GAAejC,IACjC7E,EAAe8G,GAAeN,IAC9BS,EAAWL,KALwB,EAMhBqI,eAAjBrO,EANiC,EAMjCA,KAAM0P,EAN2B,EAM3BA,OACN9H,EAAMC,eAAND,EACAsH,EAAiBD,KAAjBC,aACAE,EAAgBD,KAAhBC,YACA5T,EAAgB4O,KAAhB5O,YACAsN,EAAgB5F,gBAAhB4F,YAERC,qBAAU,WACRmG,GAAa,WACX7I,EAAS/C,GAAgB,OACzBwF,SAED,IAEH,IAAM6G,EAAcC,mBAClB,oBAAgB3R,IAAyBT,KACzC,CAACS,EAAuBT,IA6C1B,OAAKD,EAKH,sBAAKwK,UAAU,qBAAf,SACE,uBAAKA,UAAU,mCAAf,UACE,qBAAIA,UAAU,iBAAd,SACGH,EAAE,4CAEL,wBAAMG,UAAU,aAAauG,SApDJ,SAC7BC,GACU,IACF5F,EAAW4F,EAAX5F,OAEFkH,EADiBlH,EAAfmH,WACiBC,MAAM,GAC/BxB,EAAMI,iBACN,IAAMtS,EAAa,IAAI2T,SACvB3T,EAAW4T,OAAO,QAASJ,GAC3BT,EACE/S,GACA,YAAyD,IAAtDmE,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,cACXjF,EAAYmN,EAAQ,CAAEnI,WAAUC,kBAAiB,WAC/CT,EAAK,yBAuCP,UACE,wBAAO4O,QAAQ,YAAf,SACGhH,EAAE,wCAEL,wBACEwE,KAAK,OACLzC,GAAG,YACHvM,KAAK,OACLiP,YAAazE,EAAE,kDACfG,UAAU,4BAEZ,wBAAO6G,QAAQ,mBAAf,SACGhH,EAAE,+CAEL,wBACEwE,KAAK,OACLzC,GAAG,mBACHvM,KAAK,cACLiP,YAAazE,EAAE,kDACfG,UAAU,4BAEZ,wBAAO6G,QAAQ,YAAf,SACGhH,EAAE,wCAEL,wBACEwE,KAAK,SACLzC,GAAG,YACHvM,KAAK,OACLiP,YAAazE,EAAE,kDACfsI,IAAI,IACJnI,UAAU,4BAEZ,wBAAO6G,QAAQ,gBAAf,SACGhH,EAAE,4CAEL,0BACE+B,GAAG,gBACHvM,KAAK,WACL2K,UAAU,wBAHZ,UAKE,kCAASH,EAAE,2BACX,yBAAQc,MAAM,MAAd,SAAqBd,EAAE,yBACvB,yBAAQc,MAAM,QAAd,SAAuBd,EAAE,2BACzB,yBAAQc,MAAM,gBAAd,SACGd,EAAE,oCAGP,wBAAOgH,QAAQ,aAAf,SACGhH,EAAE,yCAEL,wBACEwE,KAAK,SACLzC,GAAG,aACHvM,KAAK,QACLiP,YAAazE,EAAE,kDACfsI,IAAI,IACJnI,UAAU,4BAEZ,wBAAO6G,QAAQ,aAAf,SACGhH,EAAE,yCAEL,wBACEwE,KAAK,OACLzC,GAAG,aACHvM,KAAK,aACL2K,UAAU,4BAEZ,eAAC,GAAD,CACErJ,QAASU,EACT8O,eAtGkB,SAAC9O,GAC3B,OAAQA,GACN,IAAK,qBACH,OAAOwI,EAAE,kDACX,IAAK,4BACH,OAAOA,EAAE,yDACX,IAAK,qBACH,OAAOA,EAAE,kDACX,IAAK,yBACH,OAAOA,EAAE,sDACX,IAAK,sBACH,OAAOA,EAAE,mDACX,IAAK,sBACH,OAAOA,EAAE,mDACX,QACE,OAAOA,EAAE,0BAyFP,uBAAKG,UAAU,yBAAf,UACE,yBACEqE,KAAK,SACL+D,SAAUR,EACV5H,UAAS,yTAHX,SAkBGH,EAAE,mBAEL,eAAC,GAAD,CAAc4H,aA1GH,WACnBE,kBAIO,eAAC,KAAD,CAAU5H,GAAI,wBCnCVsI,GAjDgB,WAAoB,IACzCxI,EAAMC,eAAND,EAER,OACE,iCACE,eAAC,IAAD,CAAME,GAAG,mBAAmBC,UAAU,kBAAtC,SACE,yBACEA,UAAS,oRADX,SAgBGH,EAAE,kBAGP,eAAC,IAAD,CAAME,GAAG,mBAAmBC,UAAU,kBAAtC,SACE,yBACEA,UAAS,6QADX,SAgBGH,EAAE,uBC8CEyI,GA3EmB,WAChC,IAAMxS,EAAQqI,GAAe5B,IACvB1G,EAAkBsI,GAAe7B,IACjCnG,EAAuBgI,GAAevB,IACtClG,EAAWyH,GAAef,IAC1B3G,EAAoB0H,GAAehB,IACjCwK,EAAWrB,eAAXqB,OACA9H,EAAMC,eAAND,EACAf,EAA4BT,KAA5BS,wBACAyI,EAAgBH,KAAhBG,YACApT,EAAgBkO,KAAhBlO,YAV2C,EAWpB2B,EAAvBwC,EAX2C,EAW3CA,IAAKI,EAXsC,EAWtCA,cAEPkP,EAAcC,mBAClB,oBACEpR,GAAqBN,GAAwBN,KAG/C,CAACY,EAAmBN,EAAsBN,IAW5C,OACE,uBAAKmK,UAAU,MAAf,UACE,eAAC,IAAD,CAAMD,GAAI,iBAAkBC,UAAU,kBAAtC,SACE,yBACEA,UAAS,6QADX,SAgBGH,EAAE,qBAGP,yBACEuI,SAAUR,EACV5H,UAAS,oPAcTwB,QA9CoB,WACxB1C,EAAwBpI,EAAU4B,GAClCiP,EAAY,CAAE7O,kBACdvE,EAAYmE,GAAK,WACfqP,QA0BA,SAkBG9H,EAAE,uBCrEI0I,GATgB,SAAC,GAG9B,OAD8C,EAD9CC,UAGS,eAAC,GAAD,IAEF,eAACC,GAAD,KCAMC,GARG,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,QAASpQ,EAA+C,EAA/CA,YAC5B,OACE,uBAAKyH,UAAU,YAAf,UACE,uBAAMA,UAAU,mBAAhB,SAAoC2I,IADtC,IACuDpQ,MCgE5CqQ,GA3DI,SAAC,GAEiB,IAAD,IADlC9S,MAAST,EACyB,EADzBA,KAAMkD,EACmB,EADnBA,YAAaC,EACM,EADNA,KAAMC,EACA,EADAA,SAAUE,EACV,EADUA,SAAUjE,EACpB,EADoBA,MAAOmU,EAC3B,EAD2BA,QAEvDrT,EAAe2I,GAAelC,IAC5B4D,EAAMC,eAAND,EACA8H,EAAWrB,eAAXqB,OACArP,EAAQ9C,EAAR8C,IAMR,OACE,sBAAK0H,UAAU,MAAf,SACE,uBAAKA,UAAU,0DAAf,UACE,sBACEyC,IAAKhK,EACLkK,QAAQ,OACRC,IAAKvN,EACL2K,UAAU,oEAEZ,eAAC,GAAD,CACE2I,QAAS9I,EAAE,kCACXtH,YAAalD,IAEf,eAAC,GAAD,CACEsT,QAAS9I,EAAE,yCACXtH,YAAaA,IAEf,eAAC,GAAD,CACEoQ,QAAS9I,EAAE,kCACXtH,YAAW,UAAKC,EAAL,YAAaqH,EAAE,yCAE5B,eAAC,GAAD,CACE8I,QAAS9I,EAAE,mCACXtH,YAAaI,IAEf,uBAAKqH,UAAU,YAAf,UACE,uBAAMA,UAAU,qBAA2B,OAE7C,eAAC,GAAD,CACE2I,QAAS9I,EAAE,mCACXtH,YAAW,UAAK7D,EAAL,YAAcmL,EAAE,yCAE7B,sBAAKG,UAAU,uCAAf,SACE,sBAAKA,UAAU,+BAAf,SACE,uBAAKA,UAAU,4BAAf,UACE,eAAC,GAAD,CACEwI,UAAYK,EAAiBvQ,MAAQA,IAEvC,eAAC,GAAD,CAAcmP,aA1CL,WACnBE,oBC+BWmB,GArCM,WACnB,IAAMtT,EAAe2I,GAAelC,IAC9BnG,EAAQqI,GAAe5B,IACvB5G,EAAkBwI,GAAe/B,IAC/BrI,EAAYgV,eAAZhV,QACA8L,EAAMC,eAAND,EACAsH,EAAiBD,KAAjBC,aACArT,EAAeuO,KAAfvO,WACAiN,EAAgB5F,gBAAhB4F,YACA8H,EAAY/S,EAAZ+S,QAUR,OARA7H,qBAAU,WACRmG,GAAa,WACXrT,EAAWC,GAAS,WAClBgN,YAGH,IAEEvL,EAKH,uBAAKwK,UAAU,2CAAf,UACE,sBAAKA,UAAU,2BAAf,SACE,8BAAKH,EAAE,0CAERlK,IAAoBkT,EACnB,eAAC,GAAD,IAEA,eAAC,GAAD,CAAY/S,MAAOA,OAXhB,eAAC,KAAD,CAAUiK,GAAI,mBCqNViJ,GAnOS,WACtB,IAAMxT,EAAe2I,GAAelC,IAC9B/F,EAAwBiI,GAAexB,IACvCxG,EAAuBgI,GAAevB,IACtCpI,EAAmB2J,GAAetB,IAClC/G,EAAQqI,GAAe5B,IACvB3G,EAAkBuI,GAAe9B,IACjCiC,EAAWL,KACXgL,EAAmB/D,iBAAiC,MAClDrF,EAAMC,eAAND,EACA8H,EAAWrB,eAAXqB,OACAR,EAAiBD,KAAjBC,aAXiC,EAYJC,KAA7BC,EAZiC,EAYjCA,YAAaE,EAZoB,EAYpBA,YACbvT,EAAgBqO,KAAhBrO,YACA+M,EAAgB5F,gBAAhB4F,YAdiC,EAeYjL,EAA7CT,EAfiC,EAejCA,KAAMkD,EAf2B,EAe3BA,YAAaC,EAfc,EAedA,KAAMC,EAfQ,EAeRA,SAAU/D,EAfF,EAeEA,MAE3CsM,qBAAU,WAORmG,GAAa,YANY,SAAC,GAA+B,IAA7BxO,EAA4B,EAA5BA,SACtBA,IACDsQ,EAAiBzD,QAA8B7E,MAAQhI,GAK1DuQ,CAAiBpT,GACjBiL,SAED,IAEH,IAAM6G,EAAcC,mBAClB,oBACE3R,GAAyBC,GAAwBP,KAGnD,CAACM,EAAuBC,EAAsBP,IAG1CuT,EAAyB,SAAC,EAI9BrT,GACU,IAAD,IAHP8K,OAAUvL,EAGH,EAHGA,KAAMsL,EAGT,EAHSA,MAIZyI,EAAqBrD,KAAKC,MAAMD,KAAKE,UAAUnQ,IACrD,OAAQT,GACN,IAAK,OACH+T,EAAY/T,KAAOsL,EACnB,MACF,IAAK,cACHyI,EAAY7Q,YAAcoI,EAC1B,MACF,IAAK,OACHyI,EAAY5Q,KAAO6Q,OAAO1I,GAC1B,MACF,IAAK,WACHyI,EAAYzQ,SAAWgI,EACvB,MACF,IAAK,QACHyI,EAAY1U,MAAQ2U,OAAO1I,GAE/BrC,EAASpG,GAASkR,KA+BpB,OAAK5T,EAKH,sBAAKwK,UAAU,sBAAf,SACE,uBAAKA,UAAU,mCAAf,UACE,qBAAIA,UAAU,uBAAd,SACGH,EAAE,4CAEL,uBAAKG,UAAU,+DAAf,UACG9J,GAAyBC,GAAwBP,EAChD,eAAC,GAAD,IAEA,sBACE6M,IAAKhK,EACLkK,QAAQ,OACRC,IAAKvN,EACL2K,UAAU,0CAGd,uBAAKA,UAAU,YAAf,UACE,wBAAO6G,QAAQ,aAAf,SACGhH,EAAE,wCAEL,wBACEwE,KAAK,OACLzC,GAAG,aACHvM,KAAK,OACLsL,MAAOtL,EACP2K,UAAU,oBACVU,SAAU,SAAC8F,GACT2C,EAAuB3C,EAAO1Q,MAGlC,wBAAO+Q,QAAQ,oBAAf,SACGhH,EAAE,+CAEL,wBACEwE,KAAK,OACLzC,GAAG,oBACHvM,KAAK,cACLsL,MAAOpI,EACPyH,UAAU,oBACVU,SAAU,SAAC8F,GACT2C,EAAuB3C,EAAO1Q,MAGlC,wBAAO+Q,QAAQ,aAAf,SACGhH,EAAE,wCAEL,wBACEwE,KAAK,SACLzC,GAAG,aACHvM,KAAK,OACLsL,MAAOnI,EACP2P,IAAI,IACJnI,UAAU,oBACVU,SAAU,SAAC8F,GACT2C,EAAuB3C,EAAO1Q,MAGlC,wBAAO+Q,QAAQ,iBAAf,SACGhH,EAAE,4CAEL,0BACE4F,IAAKwD,EACLrH,GAAG,iBACHvM,KAAK,WACL2K,UAAU,yBACVU,SAAU,SAAC8F,GACT2C,EAAuB3C,EAAO1Q,IANlC,UASE,yBAAQ6K,MAAM,MAAd,SAAqBd,EAAE,yBACvB,yBAAQc,MAAM,QAAd,SAAuBd,EAAE,2BACzB,yBAAQc,MAAM,gBAAd,SACGd,EAAE,oCAGP,wBAAOgH,QAAQ,cAAf,SACGhH,EAAE,yCAEL,wBACEwE,KAAK,SACLzC,GAAG,cACHvM,KAAK,QACLsL,MAAOjM,EACPyT,IAAI,IACJnI,UAAU,oBACVU,SAAU,SAAC8F,GACT2C,EAAuB3C,EAAO1Q,MAGlC,wBAAO+Q,QAAQ,cAAf,SACGhH,EAAE,yCAEL,wBACEwE,KAAK,OACLzC,GAAG,cACHvM,KAAK,aACL2K,UAAU,oBACVU,SAAU,SAAC8F,IAlIQ,SAAC,EAAD,GAGnB,IAFR5F,EAEO,EAFPA,OACAlI,EACO,EADPA,cAEIoP,EAASlH,EAAOoH,MAAc,GACpC1J,EAASnF,GAAoB,CAAET,mBAC/B,IAAMpE,EAAa,IAAI2T,SACvB3T,EAAW4T,OAAO,QAASJ,GAC3BT,EACE/S,GACA,YAAyD,IAAtDmE,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,cACL0Q,EAAcrD,KAAKC,MAAMD,KAAKE,UAAUnQ,IAC9CsT,EAAY1Q,cAAgBA,EAC5B0Q,EAAY3Q,SAAWA,EACvB6F,EAASpG,GAASkR,OAqHVE,CAAuB9C,EAAO1Q,MAGlC,sBAAKkK,UAAU,yBAAf,SACE,yBACEoI,SAAUR,EACV5H,UAAS,oVAcTwB,QApIY,WACpBhN,GACF+S,EAAY/S,GAEdR,EAAY8B,GAAO,WACjB6R,QA+GQ,SAkBG9H,EAAE,8BA5HR,eAAC,KAAD,CAAUE,GAAI,wB,kBC1GZwJ,GAAgB,WAA0B,IAC7CtR,EAASqO,eAATrO,KACA8I,EAAgB5F,gBAAhB4F,YAER,MAAO,CACLyI,SAAU,WACRvR,EAAK,KACL8I,KAGF0I,aAAc,WACZxR,EAAK,uBACL8I,KAGF2I,YAAa,WACXzR,EAAK,sBACL8I,OCRS4I,GAda,SAAC,GAEwB,IADnDtS,EACkD,EADlDA,aAEA,OAAKA,EAKH,sBAAK0L,KAAK,QAAQ/C,UAAU,aAA5B,SACG3I,IALI,MCoJIuS,GA3Ha,WAAoB,IAAD,EACP3G,oBAAS,GADF,oBACtC4G,EADsC,KACzBC,EADyB,OAEL7G,oBAAS,GAFJ,oBAEtC8G,EAFsC,KAExBC,EAFwB,OAGT/G,oBAAS,GAHA,oBAGtCgH,EAHsC,KAG1BC,EAH0B,OAILjH,mBAAS,IAJJ,oBAItCkH,EAJsC,KAIxBC,EAJwB,KAKvChU,EAAe+H,GAAerB,IAC9BhH,EAAQqI,GAAe5B,IACvB+B,EAAWL,KACThG,EAASqO,eAATrO,KACFoS,EAASC,uBACTC,EAAWC,yBACTC,EChCgB,WACxB,IAAMnM,EAAWL,KAEjB,MAAO,CACLwM,kBAAmB,SAAC3U,GAClBwI,EAAS7J,EAAcqB,IACpB0I,SACAC,MAAK,SAACiM,GACLpM,EAASlF,GAAgBsR,EAAQtU,kBAElCsI,OAAM,SAACC,GACNL,EAAS/C,GAAgBoD,EAAchI,eDqBjBgU,GAAtBF,kBACA5K,EAAMC,eAAND,EACA2J,EAAaD,KAAbC,SAbqC,EAchB1T,EAAhBT,GAdgC,EAcrCiD,IAdqC,EAchCjD,MAAMX,EAd0B,EAc1BA,MAiBnBsM,qBAAU,WAGR,OAFAyJ,EAAkB3U,GAEX,WACLmC,EAAK,KACLqG,EAASjD,SAEV,IAEH,IAAMuP,EAAmB,uCAAG,WAAOpE,GAAP,eAAA1T,EAAA,yDAC1B0T,EAAMI,iBAEDyD,GAAWE,EAHU,wDAM1BP,GAAgB,GANU,SAOHK,EAAkBQ,mBAAmBzU,EAAc,CACxE0U,eAAgB,CAAEC,KAAMR,EAASS,WAAWC,mBARpB,QAOpBxT,EAPoB,QAUdxE,OACVmX,EAAgB,kBAAD,OAAmB3S,EAAQxE,MAAM0D,UAChDqT,GAAgB,KAEhBI,EAAgB,IAChBJ,GAAgB,GAChBF,GAAe,IAhBS,2CAAH,sDAoBnBoB,EAAkB,uCAAG,+BAAApY,EAAA,sDAASqY,EAAT,EAASA,MAAOlY,EAAhB,EAAgBA,MACzCiX,EAAciB,GACdf,EAAgBnX,EAAQA,EAAM0D,QAAU,IAFf,2CAAH,sDAmBxB,OACE,uBAAKqJ,UAAU,+BAAf,UACE,qBAAIA,UAAU,0DAAd,SACG3K,IAEH,sBAAI2K,UAAU,OAAd,UACGH,EAAE,oCADL,IAC2CnL,EAAO,IAC/CmL,EAAE,0CAEL,wBACE+B,GAAG,eACH5B,UAAU,qCACVuG,SAAUqE,EAHZ,UAKE,eAAC,eAAD,CACEhJ,GAAG,eACH4C,QAhFqB,CAC3B4G,MAAO,CACLC,KAAM,CACJC,MAAO,UACPC,WAAY,oBACZC,cAAe,cACfC,SAAU,OACV,gBAAiB,CAAEH,MAAO,YAE5BI,QAAS,CACPJ,MAAO,UACPK,UAAW,aAsET3L,UAAU,MACVU,SAAUwK,IAEZ,sBAAKlL,UAAU,6BAAf,SACE,yBACEqE,KAAK,SACLzC,GAAG,SACHwG,SAAU2B,GAAgBE,GAAcJ,EACxC7J,UAAU,mCAJZ,SAME,uBAAM4B,GAAG,cAAT,SAxCRmI,EACE,sBAAKnI,GAAG,UAAU5B,UAAU,6BAE5BH,EAAE,2CAyCA,eAAC,GAAD,CAAqBxI,aAAc8S,IAEnC,oBAAGnK,UAvCP6J,EAAc,6BAA+B,yBAuCzC,SACGhK,EAAE,qDAGP,sBAAKG,UAAU,6BAAf,SACE,eAAC,GAAD,CAAcyH,aA1CC,WACnB+B,aEpEWoC,GA/Ba,WAAoB,IAAD,EACrB3I,oBAAS,kBAC/B4I,aACE,kHAFGC,EADsC,qBAMvCtW,EAAe2I,GAAelC,IAC5BkL,EAAiBD,KAAjBC,aACApG,EAAgB5F,gBAAhB4F,YAQR,OANAC,qBAAU,WACRmG,GAAa,WACXpG,SAED,IAEEvL,EAKH,sBAAKwK,UAAU,qBAAf,SACE,sBAAKA,UAAU,4CAAf,SACE,eAAC,YAAD,CAAUqK,OAAQyB,EAAlB,SACE,eAAC,GAAD,UAPC,eAAC,KAAD,CAAU/L,GAAI,wBCOVgM,GA1BK,SAAC,GAEsB,IAAD,IADxCpV,QAAW2B,EAC6B,EAD7BA,IAAKwB,EACwB,EADxBA,MAAOhE,EACiB,EADjBA,MAEf+J,EAAMC,eAAND,EACAxK,GAAUS,GAAmB,IAA7BT,KACAgL,EAAavG,EAAbuG,SAER,OACE,uBAAKL,UAAU,gBAAf,UACE,gCACGH,EAAE,uCADL,IAC8CxK,KAE9C,gCACGwK,EAAE,0CADL,IACiDQ,KAEjD,sBAAKL,UAAU,cAAf,SACE,eAAC,IAAD,CAAMD,GAAE,0BAAqBzH,GAAO0H,UAAU,kBAA9C,SACE,yBAAQA,UAAU,sDAAlB,SACGH,EAAE,0BCDAmM,GAjBY,WACzB,IAAMxW,EAAe2I,GAAelC,IAC9BvF,EAAWyH,GAAef,IAEhC,OACE,+BACG1G,EAASkC,KAAI,SAACjC,GAA0C,IAC/C2B,EAA8B3B,EAA9B2B,IAAKyB,EAAyBpD,EAAzBoD,OAAQG,EAAiBvD,EAAjBuD,aACrB,OAAQH,EAAgBzB,MAAS9C,EAAsB8C,MACpC,IAAjB4B,EACA,eAAC,GAAD,CAAavD,QAASA,GAAc2B,GAClC,WCmDG2T,GAlDM,WACnB,IAAMzW,EAAe2I,GAAelC,IAC9B1G,EAAe4I,GAAenC,IAC9B1F,EAAqB6H,GAAenB,IACpClG,EAAmBqH,GAAeX,IAClCc,EAAWL,KACT4B,EAAMC,eAAND,EACAsH,EAAiBD,KAAjBC,aACAvI,EAAkBP,KAAlBO,cACA4K,EAAaD,KAAbC,SACAzI,EAAgB5F,gBAAhB4F,YAERC,qBAAU,WACR,IAAMkL,EAAqC,WACzC5N,EAASjE,IAAgB,IACzB0G,KASF,OANAoG,GAAa,WACXvI,GAAc,WACZrJ,GAAgB+I,EAAS/D,MACzB2R,UAGG,WACLA,OAED,IAEH,IAAMC,EAAe,WACnB3C,KAGF,OAAKhU,EAKH,sBAAKwK,UAAU,qBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,8BAAKH,EAAE,sCACP,sBAAIG,UAAU,OAAd,eAAwBlJ,EAAxB,QACA,eAAC,GAAD,CAAc2Q,aAAc0E,IAC3B7V,EAAqB,eAAC,GAAD,IAAkB,eAAC,GAAD,IAClB,IAArBQ,GAA0B,eAAC,GAAD,CAAc2Q,aAAc0E,SAVpD,eAAC,KAAD,CAAUpM,GAAI,wBCpBVqM,GA1BQ,SAAC,GAEiB,IAAD,IADtCzV,QAAW2B,EAC2B,EAD3BA,IAAKyB,EACsB,EADtBA,OAER1E,EAD8B,EADdS,MAEhBT,KACAgL,EAAatG,EAAbsG,SACAR,EAAMC,eAAND,EAER,OACE,uBAAKG,UAAU,iBAAf,UACE,gCACGH,EAAE,oCADL,KAC4CxK,EAD5C,OAGA,gCACGwK,EAAE,uCADL,IAC8CQ,KAE9C,sBAAKL,UAAU,cAAf,SACE,eAAC,IAAD,CAAMD,GAAE,yBAAoBzH,GAAO0H,UAAU,kBAA7C,SACE,yBAAQA,UAAU,sDAAlB,SACGH,EAAE,0BCDAwM,GAjBW,WACxB,IAAM7W,EAAe2I,GAAelC,IAC9BvF,EAAWyH,GAAef,IAEhC,OACE,+BACG1G,EAASkC,KAAI,SAACjC,GAA0C,IAC/C2B,EAAsB3B,EAAtB2B,IAAKwB,EAAiBnD,EAAjBmD,MAAOG,EAAUtD,EAAVsD,MACpB,OAAQH,EAAexB,MAAS9C,EAAsB8C,KAC1C,KAAV2B,EACA,eAACqS,GAAD,CAAW3V,QAASA,GAAc2B,GAChC,WCoDGiU,GAnDK,WAClB,IAAM/W,EAAe2I,GAAelC,IAC9B1G,EAAe4I,GAAenC,IAC9B1F,EAAqB6H,GAAenB,IACpCjG,EAAkBoH,GAAeV,IACjCa,EAAWL,KACT4B,EAAMC,eAAND,EACAsH,EAAiBD,KAAjBC,aACAvI,EAAkBP,KAAlBO,cACA4K,EAAaD,KAAbC,SACAzI,EAAgB5F,gBAAhB4F,YAERC,qBAAU,WACR,IAAMwL,EAAmC,WACvClO,EAAShE,IAAc,IACvByG,KAUF,OAPAoG,GAAa,WACXvI,GAAc,WACZrJ,GAAgB+I,EAAS9D,MACzBgS,UAIG,WACLA,OAED,IAEH,IAAML,EAAe,WACnB3C,KAGF,OAAKhU,EAKH,sBAAKwK,UAAU,qBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,8BAAKH,EAAE,qCACP,sBAAIG,UAAU,OAAd,eAAwBjJ,EAAxB,QACA,eAAC,GAAD,CAAc0Q,aAAc0E,IAC3B7V,EAAqB,eAAC,GAAD,IAAkB,eAAC,GAAD,IACnB,IAApBS,GAAyB,eAAC,GAAD,CAAc0Q,aAAc0E,SAVnD,eAAC,KAAD,CAAUpM,GAAI,wBCiFV0M,GAtHW,WACxB,IAAMjX,EAAe2I,GAAelC,IAC9BnG,EAAQqI,GAAe5B,IACvBlG,EAAoB8H,GAAepB,IACnC1F,EAAe8G,GAAeN,IAC9BS,EAAWL,KACT0J,EAAWrB,eAAXqB,OACA9H,EAAMC,eAAND,EACAsH,EAAiBD,KAAjBC,aACAxS,EAAkB0J,KAAlB1J,cACAoM,EAAgB5F,gBAAhB4F,YACA1L,EAASS,EAATT,KAER2L,qBAAU,WACRmG,GAAa,WACX7I,EAAS/C,GAAgB,OACzBwF,SAED,IAEH,IAAM6G,EAAcC,mBAClB,mBAAgBxR,IAChB,CAACA,IAoCH,OAAKb,EAKH,sBAAKwK,UAAU,qBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,qBAAIA,UAAU,OAAd,SACGH,EAAE,gDAEL,sBAAIG,UAAU,OAAd,UACGH,EAAE,iDADL,KACyDxK,EADzD,OAGA,wBACE2K,UAAU,2BACVuG,SAAU,SAACC,IAhDmB,SACpCA,EADoC,GAG1B,IADRlO,EACO,EADPA,IAAKuQ,EACE,EADFA,QAIQlI,EAEX6F,EAHF5F,OACE5G,QAAW2G,MAGT/L,EAAsB,CAC1BmF,OAAS8O,EAAiBvQ,IAC1BxC,MAAOwC,EACP0B,QAAS2G,GAEX6F,EAAMI,iBACNjS,EAAcC,GAAY,WACxB+S,OAiCM+E,CAA8BlG,EAAO1Q,IAHzC,UAME,+BACE,2BACET,KAAK,UACLsX,KAAM,GACNC,KAAM,EACN5M,UAAU,8BAGd,eAAC,GAAD,CACErJ,QAASU,EACT8O,eA1CkB,SAAC9O,GAC3B,OAAQA,GACN,IAAK,6BACH,OAAOwI,EAAE,6DACX,QACE,OAAOA,EAAE,0BAuCP,uBAAKG,UAAU,aAAf,UACE,yBACEqE,KAAK,SACL+D,SAAUR,EACV5H,UAAS,mUAHX,SAkBGH,EAAE,iBAEL,eAAC,GAAD,CAAc4H,aAxDH,WACnBE,kBAIO,eAAC,KAAD,CAAU5H,GAAI,wBC9DV8M,GATS,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,KACzB,OACE,uBAAK9M,UAAU,kEAAf,UACE,eAAC,GAAD,IACA,uBAAMA,UAAU,mBAAhB,SAAoC8M,QCQ3BC,GAbD,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,SAAUF,EAA2C,EAA3CA,KACzB,OAAKA,EAKH,iCACE,8BAAKE,IACL,oBAAGhN,UAAU,sBAAb,SAAoC8M,OAN/B,MCwIIG,GA3HQ,WACrB,IAAMzX,EAAe2I,GAAelC,IAC9B1F,EAAoB4H,GAAelB,IACnCtG,EAAUwH,GAAed,IACvBtI,EAAcgU,eAAdhU,UACFuJ,EAAWL,KACT0J,EAAWrB,eAAXqB,OACA9H,EAAMC,eAAND,EACAsH,EAAiBD,KAAjBC,aARgC,EASA9I,KAAhCvJ,EATgC,EAShCA,aAAcE,EATkB,EASlBA,cACdyU,EAAiBF,KAAjBE,aACA1I,EAAgB5F,gBAAhB4F,YAXgC,EAYMpK,EAAtC2B,EAZgC,EAYhCA,IAAKwB,EAZ2B,EAY3BA,MAAOhE,EAZoB,EAYpBA,MAAOkE,EAZa,EAYbA,QAASC,EAZI,EAYJA,MAEpC+G,qBAAU,WACRmG,GAAa,WACXrS,EAAaC,GAAW,WACtBgM,YAGH,IAyBH,IAAKvL,EACH,OAAO,eAAC,KAAD,CAAUuK,GAAI,uBAGvB,GAAIxJ,IAAsBuD,IAAUhE,EAClC,OAAO,eAAC,GAAD,CAAiBgX,KAAM,oBAlDQ,IAoDhCzX,EAASS,EAATT,KACAgL,EAAavG,EAAbuG,SAER,OACE,sBAAKL,UAAU,sBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,sBAAIA,UAAU,OAAd,UACGH,EAAE,0CADL,IACiDxK,KAEjD,gCACGwK,EAAE,6CADL,IACoDQ,KAEpD,oBAAGL,UAAU,8BAAb,SAA4ChG,IAC5C,eAAC,GAAD,CACEgT,SAAUnN,EAAE,2CACZiN,KAAM7S,IAER,uBAAK+F,UAAU,kBAAf,WACI/F,GACA,eAAC,IAAD,CAAM8F,GAAE,2BAAsBzH,GAAO0H,UAAU,kBAA/C,SACE,yBACEA,UAAS,6VADX,SAgBGH,EAAE,oBAIT,yBACEG,UAAS,+TAeTwB,QAAS,YAtFc,SAAC7K,GAQJ1B,EAPI,SAAC0B,GAC/B,IAAMuW,EAAyBnH,KAAKC,MAAMD,KAAKE,UAAUtP,IAGzD,OAFAuW,EAAchT,cAAe,EAC7BoE,EAAS1E,GAAWsT,IACbA,EAUcC,CAAwBxW,GAN7C3B,EAAcC,GAAgB,WAC5BqJ,EAAS3D,MACTgN,OAHuB,IAAC1S,EA+ElBmY,CAAyBzW,IAjB7B,SAoBGkJ,EAAE,oBAGP,sBAAKG,UAAU,kBAAf,SACE,eAAC,GAAD,CAAcyH,aA3ED,WACnBgC,eCkDW4D,GA5FM,WACnB,IAAM7X,EAAe2I,GAAelC,IAC9BtF,EAAUwH,GAAed,IACzB9G,EAAoB4H,GAAelB,IACnCxG,EAAoB0H,GAAehB,IACjCpI,EAAcgU,eAAdhU,UACFuJ,EAAWL,KACT0J,EAAWrB,eAAXqB,OACA9H,EAAMC,eAAND,EACAsH,EAAiBD,KAAjBC,aAT8B,EAUE9I,KAAhCvJ,EAV8B,EAU9BA,aAAcI,EAVgB,EAUhBA,cACdwU,EAAgBH,KAAhBG,YACA3I,EAAgB5F,gBAAhB4F,YAZ8B,EAaSpK,EAAvC2B,EAb8B,EAa9BA,IAAKyB,EAbyB,EAazBA,OAAQjE,EAbiB,EAajBA,MAAOkE,EAbU,EAaVA,QAASC,EAbC,EAaDA,MAErC+G,qBAAU,WACRmG,GAAa,WACXrS,EAAaC,GAAW,WACtBgM,YAGH,IAEH,IAAM6G,EAAcC,mBAClB,mBAAgBpR,IAChB,CAACA,IAcH,IAAKjB,EACH,OAAO,eAAC,KAAD,CAAUuK,GAAI,uBAGvB,GAAIxJ,IAAsBwD,IAAWjE,EACnC,OAAO,eAAC,GAAD,CAAiBgX,KAAM,kBA5CM,IA8C9BzX,EAASS,EAATT,KACAgL,EAAatG,EAAbsG,SAER,OACE,sBAAKL,UAAU,sBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,sBAAIA,UAAU,OAAd,UACGH,EAAE,uCADL,IAC8CxK,KAE9C,oBAAG2K,UAAU,8BAAb,SAA4ChG,IAC5C,eAAC,GAAD,CACEgT,SAAQ,UAAKnN,EAAE,sCAAP,YAAgDQ,GACxDyM,KAAM7S,IAER,sBAAK+F,UAAU,kBAAf,SACE,yBACEoI,SAAUR,EACV5H,UAAS,gSAcTwB,QAAS,YAjDS,SAACzM,GAC3BG,EAAcH,GAAW,WACvBuJ,EAAS1D,MACT+M,OA+CQ2F,CAAoBhV,IAjBxB,SAoBGuH,EAAE,qBAGP,sBAAKG,UAAU,kBAAf,SACE,eAAC,GAAD,CAAcyH,aAlDD,WACnBiC,eC6EW6D,GAnHW,WACxB,IAAM/X,EAAe2I,GAAelC,IAC9BtF,EAAUwH,GAAed,IACzB7G,EAAoB2H,GAAejB,IACnC7F,EAAe8G,GAAeN,IAC9BS,EAAWL,KACT0J,EAAWrB,eAAXqB,OACA9H,EAAMC,eAAND,EACAsH,EAAiBD,KAAjBC,aACAnS,EAAkBqJ,KAAlBrJ,cACA+L,EAAgB5F,gBAAhB4F,YACA/G,EAAYrD,EAAZqD,QAERgH,qBAAU,WACRmG,GAAa,WACXpG,SAED,IAEH,IAAM6G,EAAcC,mBAClB,mBAAgBrR,IAChB,CAACA,IA+BH,OAAKhB,EAKH,sBAAKwK,UAAU,sBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,qBAAIA,UAAU,YAAd,SACGH,EAAE,gDAEL,sBAAKG,UAAU,+DAAf,SACE,uBAAKA,UAAU,YAAf,UACE,6BAAIhG,IACJ,2BACE3E,KAAK,QACLiP,YAAazE,EACX,sDAEF8M,KAAM,GACNC,KAAM,EACN5M,UAAU,0BACVU,SAAU,SACR8F,IAlDY,SAAC,EAEzB7P,GACU,IAFEgK,EAEH,EAFPC,OAAUD,MAGNuM,EAAyBnH,KAAKC,MAAMD,KAAKE,UAAUtP,IACzDuW,EAAcjT,MAAQ0G,EACtBrC,EAAS1E,GAAWsT,IA8CRM,CAAkBhH,EAAO7P,MAG7B,eAAC,GAAD,CACEA,QAASU,EACT8O,eAtCgB,SAAC9O,GAC3B,OAAQA,GACN,IAAK,2BACH,OAAOwI,EAAE,2DACX,QACE,OAAOA,EAAE,0BAmCL,uBAAKG,UAAU,kBAAf,UACE,yBACEoI,SAAUR,EACV5H,UAAS,sWAcTwB,QAAS,WAlErBxM,EAmEkC2B,GAnEJ,WAC5BgR,QAiDQ,SAoBG9H,EAAE,mBAEL,eAAC,GAAD,CAAc4H,aAnEL,WACnBE,oBAaO,eAAC,KAAD,CAAU5H,GAAI,wBClCV0N,GAnCM,WAAoB,IAC/B5N,EAAMC,eAAND,EAER,OACE,sBACEG,UAAS,uQADX,SAgBE,iCACE,qBAAIA,UAAU,yBAAd,SACGH,EAAE,iCAEL,qBAAIG,UAAU,0CAAd,SACGH,EAAE,qCAEL,qBAAIG,UAAU,oDAAd,SACGH,EAAE,2CCwBE6N,GAnDE,WAAoB,IAC3B7N,EAAMC,eAAND,EAER,OACE,sBACEG,UAAS,qQADX,SAgBE,iCACE,qBAAIA,UAAU,sBAAd,SAAqCH,EAAE,6BACvC,qBAAIG,UAAU,uCAAd,SACGH,EAAE,iCAEL,qBAAIG,UAAU,sDAAd,SACGH,EAAE,iCAEL,eAAC,IAAD,CAAME,GAAI,IAAKC,UAAU,kBAAzB,SACE,yBACEA,UAAS,4PADX,SAcGH,EAAE,+BCjCA8N,GAVS,WAAoB,IAClCC,ECOD,CACLA,mBAAoB,SAACC,EAAwBC,GAC3C,IAKMC,EAAgBF,EAAaG,cAAc,UACjDD,EAAc1J,KAAO,kBACrB0J,EAAcE,OAAQ,EACtBF,EAActL,IAAM,mDACAoL,EAAaK,qBAAqB,QAAQ,GAClDC,YAAYJ,GACvBK,OAAeC,YAAcP,EAC9BA,EAAOQ,SAZ0C,CAC/CC,MAAO,kCACPC,aAAa,EACbC,+BAA+B,KDZ7Bb,mBAMR,OAJA5M,qBAAU,WAAO,IAAD,EACd4M,EAAmBc,SAAD,UAAYN,OAAeC,mBAA3B,QAA0C,MAC3D,IAEI,0BEuBMM,GAzBiB,WAC9B,IAAMnZ,EAAe2I,GAAelC,IAC9BlG,EAASoI,GAAe3B,IAE9B,OACE,sBACEwD,UAAS,yIADX,SAUGjK,EAAO6C,KAAI,SAAC9C,GAAsC,IACzCwC,EAAiBxC,EAAjBwC,IACR,OADyBxC,EAAZ+S,QACYvQ,MAAS9C,EAAsB8C,IACtD,eAAC,GAAD,CAAgBxC,MAAOA,GAAYwC,GACjC,WCmBGsW,GAhCW,WACxB,IAAMpZ,EAAe2I,GAAelC,IAC9BvG,EAAmByI,GAAehC,IAChC0D,EAAMC,eAAND,EACAsH,EAAiBD,KAAjBC,aACA7E,EAAgBD,KAAhBC,YACAvB,EAAgB5F,gBAAhB4F,YAUR,OARAC,qBAAU,WACRmG,GAAa,WACX7E,GAAY,WACVvB,YAGH,IAEEvL,EAKH,uBAAKwK,UAAU,iBAAf,UACE,sBAAKA,UAAU,YAAf,SACE,qBAAIA,UAAU,gCAAd,SACGH,EAAE,sCAGNnK,EAAmB,eAAC,GAAD,IAAkB,eAAC,GAAD,OAVjC,eAAC,KAAD,CAAUqK,GAAI,wBCoDV8O,GAvEG,SAAC,GAKiB,IAJlC7B,EAIiC,EAJjCA,SACA8B,EAGiC,EAHjCA,YACAhC,EAEiC,EAFjCA,KACAiC,EACiC,EADjCA,QAEMC,EAAgB9J,iBAA8B,MAC9C5G,EAAWL,KACT4B,EAAMC,eAAND,EAEFoP,EAAmB,WACvB3Q,EAAS/C,GAAgB,QAS3B,OACE,sBACEkK,IAAKuJ,EACLhP,UAAS,uNAYTwB,QArBuB,SAAC,GAA2B,IAAzBZ,EAAwB,EAAxBA,OACxBoO,EAAcxJ,UAAY5E,GAAUmO,GACtCE,KAKF,SAgBE,uBAAKjP,UAAU,sCAAf,UACE,qBAAIA,UAAU,8CAAd,SACGgN,IAEH,qBAAIhN,UAAU,4CAAd,SACG8O,IAEH,qBAAI9O,UAAU,oDAAd,SACG8M,IAEFiC,GACC,yBACE/O,UAAS,0PAYTwB,QAASyN,EAbX,SAeGpP,EAAE,0BCbAqP,GAvDI,SAAC,GAAsD,IAApDvY,EAAmD,EAAnDA,QACZkJ,EAAMC,eAAND,EAwCR,OAAKlJ,GAAWA,EAAQyP,SAAS,QACxB,KAIP,eAAC,GAAD,CACE4G,SAAUnN,EAAE,6BACZiP,YAAajP,EAAE,gCACfiN,KA9CwB,SAACnW,GAC3B,OAAQA,GAEN,IAAK,4BACH,OAAOkJ,EAAE,iDACX,IAAK,sBACH,OAAOA,EAAE,sCACX,IAAK,wBACH,OAAOA,EAAE,uCAEX,IAAK,sBACH,OAAOA,EAAE,uCACX,IAAK,qBACH,OAAOA,EAAE,sCACX,IAAK,0BACH,OAAOA,EAAE,yCACX,IAAK,sBACH,OAAOA,EAAE,uCACX,IAAK,sBACH,OAAOA,EAAE,uCACX,IAAK,sBACH,OAAOA,EAAE,uCAEX,IAAK,wBACH,OAAOA,EAAE,2CACX,IAAK,uBACH,OAAOA,EAAE,0CACX,IAAK,4BACH,OAAOA,EAAE,8CACX,IAAK,wBACH,OAAOA,EAAE,kCACX,IAAK,wBACH,OAAOA,EAAE,kCACX,QACE,OAAOA,EAAE,uBAYLsP,CAAoBxY,GAC1BoY,SAAS,KCjCAK,GAjBM,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,SACdxP,EAAMC,eAAND,EAER,OAAIwP,EACK,KAIP,eAAC,GAAD,CACErC,SAAUnN,EAAE,+BACZiP,YAAajP,EAAE,kCACfiN,KAAMjN,EAAE,sBACRkP,SAAS,KCHAO,GAVA,WACb,IAAMjY,EAAe8G,GAAeN,IAC9BwR,ECNuB,WAAgB,IAAD,EACZpM,oBAAkB,GADN,oBACrCoM,EADqC,KAC3BE,EAD2B,KAqB5C,OAlBAvO,qBAAU,WACR,IAAMwO,EAA6B,WACjCD,GAAY,IAGRE,EAA4B,WAChCF,GAAY,IAMd,OAHAnB,OAAOsB,iBAAiB,UAAWF,GACnCpB,OAAOsB,iBAAiB,SAAUD,GAE3B,WACLrB,OAAOuB,oBAAoB,UAAWH,GACtCpB,OAAOuB,oBAAoB,SAAUF,MAEtC,IAEIJ,EDfUO,GAEjB,OAAIP,EACK,eAAC,GAAD,CAAY1Y,QAASU,IAEvB,eAAC,GAAD,CAAcgY,SAAUA,KEkGlBQ,GAtGO,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,KACzB3Y,EAAmB+G,GAAeP,IADmC,EAEjCqF,oBAAkB,GAFe,oBAEpE+M,EAFoE,KAErDC,EAFqD,KAGrEC,EAAahL,iBAAuB,MAE1ClE,qBAAU,WACR,IAAMmP,EAAoBD,EAAW1K,QAEjC2K,IAEAA,EAAkB/E,MAAM7F,OADtByK,EACF,UAAoCG,EAAkBC,aAAtD,MAEiC,OAGpC,CAACJ,IAEJhP,qBAAU,WACR,IAAMmP,EAAoBD,EAAW1K,QAEjCwK,GAAiBG,IACnBA,EAAkB/E,MAAM7F,OAAS,OACjC4K,EAAkB/E,MAAM7F,OAAxB,UAAoC4K,EAAkBC,aAAtD,SAED,CAAChZ,IAEJ,IAAMiZ,EAAcxI,mBAClB,kBAAemI,EAAgB,oCAAsC,KACrE,CAACA,IAGGM,EAAazI,mBACjB,kBACEmI,EAAgB,qDAAuD,KACzE,CAACA,IAOH,OACE,uBAAKhQ,UAAU,iBAAf,UACE,sBAAKA,UAAS,iCAA4BqQ,GAA1C,SACE,0BACEhM,KAAK,SACLrE,UAAS,oVAeTwB,QAxBkB,WACxByO,GAAkBD,IAMd,UAmBE,qBAAIhQ,UAAU,sDAAd,SACG8P,IAEH,sBAAK9P,UAAU,qDAAf,SACE,sBACEuQ,MAAM,6BACNC,QAAQ,cACRxQ,UAAS,oDAA+CsQ,EAA/C,uBAHX,SAKE,uBAAMG,EAAE,sLAKhB,sBACEhL,IAAKyK,EACLlQ,UAAS,8LAFX,SAcE,sBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,SACE,6BAAI+P,UAIV,qBAAI/P,UAAU,kBCzFL0Q,GAVG,SAAC,GAA2C,IAAzCje,EAAwC,EAAxCA,KACnB,OACE,sBAAKuN,UAAU,OAAf,SACGvN,EAAKmG,KAAI,gBAAG+X,EAAH,EAAGA,WAAYC,EAAf,EAAeA,SAAf,OACR,eAAC,GAAD,CAAed,OAAQa,EAAYZ,KAAMa,UCSlCC,GAhBC,WAAO,IACbhR,EAAMC,eAAND,EACFiR,ECHkB,WAA4B,IAC5CjR,EAAMC,eAAND,EAER,MAAO,CACL,CACE8Q,WAAY9Q,EAAE,0BACd+Q,SAAU/Q,EAAE,yBAEd,CACE8Q,WAAY9Q,EAAE,0BACd+Q,SAAU/Q,EAAE,yBAEd,CACE8Q,WAAY9Q,EAAE,0BACd+Q,SAAU/Q,EAAE,yBAEd,CACE8Q,WAAY9Q,EAAE,0BACd+Q,SAAU/Q,EAAE,0BDfAkR,GAEhB,OACE,uBAAK/Q,UAAU,qBAAf,UACE,sBAAKA,UAAU,mCAAf,SACE,qBAAIA,UAAU,iBAAd,SAAgCH,EAAE,mCAEpC,sBAAKG,UAAU,8BAAf,SACE,eAAC,GAAD,CAAWvN,KAAMqe,UE4FVE,iBAjFH,WACV,OACE,iCACE,eAAC,GAAD,IACA,gBAAC,KAAD,WACE,eAAC,KAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,eAAC,GAAD,MAIF,eAAC,KAAD,CAAOA,KAAK,gBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,gBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,gBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,qBAAZ,SACE,eAAC,GAAD,MAIF,eAAC,KAAD,CAAOA,KAAK,iBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,yBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,iBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,mBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,iBAAZ,SACE,eAAC,GAAD,MAIF,eAAC,KAAD,CAAOA,KAAK,mBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,mBAAZ,SACE,eAAC,GAAD,MAIF,eAAC,KAAD,CAAOA,KAAK,sBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,6BAAZ,SACE,eAAC,GAAD,MAIF,eAAC,KAAD,CAAOA,KAAK,qBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,4BAAZ,SACE,eAAC,GAAD,MAIF,eAAC,KAAD,CAAOA,KAAK,OAAZ,SACE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOA,KAAK,4BAAZ,SACE,eAAC,GAAD,MAGF,eAAC,KAAD,CAAOC,UAAWzD,QAEpB,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,U,oCChGNlN,KACG4Q,IAAIC,MACJD,IAAIE,MACJF,IAAIG,MACJC,KAAK,CACJC,YAAa,KACbC,GAAI,CAAC,eACLC,UAAW,cACXC,QAAS,CACPC,SAAU,gCAEZC,OAAO,EACPC,cAAe,CACbC,aAAa,KAIJxR,GAAf,E,OCbAyR,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUrU,MAAOA,GAAjB,SACE,eAAC,IAAD,UACE,eAAC,WAAD,CAAUsU,SAAS,UAAnB,SACE,eAAC,GAAD,YAKR1D,SAAS2D,cAAc,Y","file":"static/js/main.d19cee81.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport config from \"../app/config\";\nimport axios from \"axios\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport {\n  User,\n  Plant,\n  PlantId,\n  Message,\n  MessageId,\n  DestroyImageData,\n  IntervalId,\n} from \"../app/typeDefinitions\";\nimport { RootState } from \"../app/store\";\n\ntype ErrorMessage = string | null;\n\ninterface InitialState {\n  // ----- User authentication -----\n  isUserChange: boolean;\n  loggedInUser: User | null;\n\n  // ----- Plants -----\n  isCreatingPlant: boolean;\n  isFetchingPlants: boolean;\n  isFetchingPlant: boolean;\n  isUpdatingPlant: boolean;\n  isDeletingPlant: boolean;\n  plant: Plant | {};\n  plants: Plant[];\n  filteredPlants: Plant[];\n  numberOfVisibleEntries: number;\n\n  // ----- Images -----\n  isUploadingPlantImage: boolean;\n  isDeletingPlantImage: boolean;\n  destroyImageData: DestroyImageData | null;\n\n  // ----- Payment -----\n  clientSecret: string;\n\n  // ----- Messages -----\n  isCreatingMessage: boolean;\n  isFetchingMessages: boolean;\n  isFetchingMessage: boolean;\n  isUpdatingMessage: boolean;\n  isDeletingMessage: boolean;\n  messages: Message[];\n  message: Message | {};\n\n  // ----- Requests/Replies check -----\n  isNewRequest: boolean;\n  isNewReply: boolean;\n  amountOfRequests: number;\n  amountOfReplies: number;\n\n  // ----- Interval counter -----\n  intervalId: IntervalId;\n  delayCounter: number;\n\n  // ----- Pages handling -----\n  titleSectionHeight: number;\n  aboutSectionHeight: number;\n\n  // ----- Language handling -----\n  isLanguageChange: boolean;\n\n  // ----- Error handling -----\n  errorMessage: ErrorMessage;\n}\n\ninterface UpdatePlantParameters {\n  plantId: PlantId;\n  updatedPlant: Plant;\n}\n\ninterface UpdateMessageParameters {\n  messageId: MessageId;\n  updatedMessage: Message;\n}\n\nconst apiPath = `${config.API_URL}/api`;\n\nconst initialState: InitialState = {\n  // ----- User authentication -----\n  isUserChange: false,\n  loggedInUser: null,\n\n  // ----- Plants -----\n  isCreatingPlant: false,\n  isFetchingPlants: false,\n  isFetchingPlant: false,\n  isUpdatingPlant: false,\n  isDeletingPlant: false,\n  plant: {},\n  plants: [],\n  filteredPlants: [],\n  numberOfVisibleEntries: 6,\n\n  // ----- Images -----\n  isUploadingPlantImage: false,\n  isDeletingPlantImage: false,\n  destroyImageData: null,\n\n  // ----- Payment -----\n  clientSecret: \"\",\n\n  // ----- Messages -----\n  isCreatingMessage: false,\n  isFetchingMessages: false,\n  isFetchingMessage: false,\n  isUpdatingMessage: false,\n  isDeletingMessage: false,\n  messages: [],\n  message: {},\n\n  // ----- Requests/Replies check -----\n  isNewRequest: false,\n  isNewReply: false,\n  amountOfRequests: 0,\n  amountOfReplies: 0,\n\n  // ----- Interval counter -----\n  intervalId: null,\n  delayCounter: 0,\n\n  // ----- Pages handling -----\n  titleSectionHeight: 0,\n  aboutSectionHeight: 0,\n\n  // ----- Language handling -----\n  isLanguageChange: false,\n\n  // ----- Error handling -----\n  errorMessage: null,\n};\n\nconst rejectWithValue = (data: any): void | PromiseLike<void> => {\n  throw new Error(data);\n};\n\n// ----- User authentification -----\nexport const signUp = createAsyncThunk(\n  \"jungleSwap/signUp\",\n  async (newUser: User): Promise<User | any> => {\n    try {\n      const { data } = await axios.post(`${apiPath}/auth/sign-up`, newUser);\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const signIn = createAsyncThunk(\n  \"jungleSwap/signIn\",\n  async (user: User): Promise<User | any> => {\n    try {\n      const { data } = await axios.post(`${apiPath}/auth/sign-in`, user, {\n        withCredentials: true,\n      });\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const logOut = createAsyncThunk(\n  \"jungleSwap/logOut\",\n  async (user: User): Promise<void | any> => {\n    try {\n      await axios.post(`${apiPath}/auth/log-out`, user, {\n        withCredentials: true,\n      });\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const checkUserLoggedIn = createAsyncThunk(\n  \"jungleSwap/checkUserLoggedIn\",\n  async (): Promise<User | any> => {\n    try {\n      const { data } = await axios.get(`${apiPath}/auth/check-user`, {\n        withCredentials: true,\n      });\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\n// ----- Plants -----\nexport const createPlant = createAsyncThunk(\n  \"jungleSwap/createPlant\",\n  async (newPlant: Plant): Promise<Plant | any> => {\n    try {\n      const { data } = await axios.post(`${apiPath}/plants/create`, newPlant, {\n        withCredentials: true,\n      });\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const fetchAllPlants = createAsyncThunk(\n  \"jungleSwap/fetchAllPlants\",\n  async (): Promise<Plant[] | any> => {\n    try {\n      const { data } = await axios.get(`${apiPath}/plants/fetch-all`);\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const fetchQueryPlants = createAsyncThunk(\n  \"jungleSwap/fetchQueryPlants\",\n  async (query: string): Promise<Plant[] | any> => {\n    try {\n      const { data } = await axios.get(`${apiPath}/plants/search?q=${query}`);\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const fetchPlant = createAsyncThunk(\n  \"jungleSwap/fetchPlant\",\n  async (plantId: PlantId): Promise<Plant | any> => {\n    try {\n      const { data } = await axios.get(`${apiPath}/plants/fetch/${plantId}`, {\n        withCredentials: true,\n      });\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const updatePlant = createAsyncThunk(\n  \"jungleSwap/updatePlant\",\n  async ({\n    plantId,\n    updatedPlant,\n  }: UpdatePlantParameters): Promise<Plant | any> => {\n    try {\n      const { data } = await axios.patch(\n        `${apiPath}/plants/update/${plantId}`,\n        updatedPlant\n      );\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const deletePlant = createAsyncThunk(\n  \"jungleSwap/deletePlant\",\n  async (plantId: PlantId): Promise<void | any> => {\n    try {\n      await axios.delete(`${apiPath}/plants/delete/${plantId}`);\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\n// ----- Images -----\nexport const uploadPlantImage = createAsyncThunk(\n  \"jungleSwap/uploadPlantImage\",\n  async (uploadForm: FormData): Promise<any> => {\n    try {\n      const { data } = await axios.post(\n        `${apiPath}/cloudinary/upload`,\n        uploadForm\n      );\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const deletePlantImage = createAsyncThunk(\n  \"jungleSwap/deletePlantImage\",\n  async (destroyImageData: DestroyImageData): Promise<void | any> => {\n    try {\n      await axios.post(`${apiPath}/cloudinary/destroy`, destroyImageData);\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\n// ----- Payment -----\nexport const createPayment = createAsyncThunk(\n  \"jungleSwap/createPayment\",\n  async ({ price }: Plant): Promise<any> => {\n    try {\n      const { data } = await axios.post(\n        `${apiPath}/stripe/create-payment-intent`,\n        {\n          price,\n        }\n      );\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\n// ----- Messages -----\nexport const createMessage = createAsyncThunk(\n  \"jungleSwap/createMessage\",\n  async (newMessage: Message): Promise<Message | any> => {\n    try {\n      const { data } = await axios.post(\n        `${apiPath}/messages/create`,\n        newMessage,\n        { withCredentials: true }\n      );\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const fetchAllMessages = createAsyncThunk(\n  \"jungleSwap/fetchAllMessages\",\n  async (): Promise<Message[] | any> => {\n    try {\n      const { data } = await axios.get(`${apiPath}/messages/fetch-all`);\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const fetchMessage = createAsyncThunk(\n  \"jungleSwap/fetchMessage\",\n  async (messageId: MessageId): Promise<Message | any> => {\n    try {\n      const { data } = await axios.get(\n        `${apiPath}/messages/fetch/${messageId}`,\n        { withCredentials: true }\n      );\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const updateMessage = createAsyncThunk(\n  \"jungleSwap/updateMessage\",\n  async ({\n    messageId,\n    updatedMessage,\n  }: UpdateMessageParameters): Promise<Message | any> => {\n    try {\n      const { data } = await axios.patch(\n        `${apiPath}/messages/update/${messageId}`,\n        updatedMessage\n      );\n      return data;\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const deleteMessage = createAsyncThunk(\n  \"jungleSwap/deleteMessage\",\n  async (messageId: MessageId): Promise<void | any> => {\n    try {\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\n    } catch ({\n      response: {\n        data: { error },\n      },\n    }: any) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const jungleSwapSlice = createSlice({\n  name: \"jungleSwap\",\n  initialState,\n\n  reducers: {\n    // ----- User authentication ------\n    setIsUserChange: (state, { payload }: PayloadAction<boolean>) => {\n      state.isUserChange = payload;\n    },\n    setLoggedInUser: (state, { payload }: PayloadAction<User | null>) => {\n      state.loggedInUser = payload;\n    },\n\n    // ----- Plants ------\n    setIsCreatingPlant: (state, { payload }: PayloadAction<boolean>) => {\n      state.isCreatingPlant = payload;\n    },\n    setIsFetchingPlants: (state, { payload }: PayloadAction<boolean>) => {\n      state.isFetchingPlants = payload;\n    },\n    setIsFetchingPlant: (state, { payload }: PayloadAction<boolean>) => {\n      state.isFetchingPlant = payload;\n    },\n    setIsUpdatingPlant: (state, { payload }: PayloadAction<boolean>) => {\n      state.isUpdatingPlant = payload;\n    },\n    setIsDeletingPlant: (state, { payload }: PayloadAction<boolean>) => {\n      state.isDeletingPlant = payload;\n    },\n    addPlant: (state, { payload }: PayloadAction<Plant>) => {\n      state.plants.push(payload);\n    },\n    setPlant: (state, { payload }: PayloadAction<Plant>) => {\n      state.plant = payload;\n    },\n    setPlants: (state, { payload }: PayloadAction<Plant[]>) => {\n      state.plants = payload;\n    },\n    setFilteredPlants: (state, { payload }: PayloadAction<Plant[]>) => {\n      state.filteredPlants = payload;\n    },\n    setPlantChanges: (\n      state,\n      {\n        payload: {\n          _id,\n          name,\n          description,\n          size,\n          imageUrl,\n          imagePublicId,\n          location,\n          price,\n        },\n      }: PayloadAction<Plant>\n    ) => {\n      state.plants = state.plants.map((singlePlant: Plant): Plant => {\n        if (singlePlant._id === _id) {\n          singlePlant.name = name;\n          singlePlant.description = description;\n          singlePlant.size = size;\n          singlePlant.imageUrl = imageUrl;\n          singlePlant.imagePublicId = imagePublicId;\n          singlePlant.location = location;\n          singlePlant.price = price;\n        }\n        return singlePlant;\n      });\n    },\n    removePlant: (state, { payload }: PayloadAction<PlantId>) => {\n      state.plants = state.plants.filter(\n        (plant: Plant): boolean => plant._id !== payload\n      );\n    },\n    setNumberOfVisibleEntries: (state, { payload }: PayloadAction<number>) => {\n      state.numberOfVisibleEntries = payload;\n    },\n\n    // ----- Images -----\n    setIsUploadingPlantImage: (state, { payload }: PayloadAction<boolean>) => {\n      state.isUploadingPlantImage = payload;\n    },\n    setIsDeletingPlantImage: (state, { payload }: PayloadAction<boolean>) => {\n      state.isDeletingPlantImage = payload;\n    },\n    setDestroyImageData: (\n      state,\n      { payload }: PayloadAction<DestroyImageData | null>\n    ) => {\n      state.destroyImageData = payload;\n    },\n\n    // ----- Payment -----\n    setClientSecret: (state, { payload }: PayloadAction<string>) => {\n      state.clientSecret = payload;\n    },\n\n    // ----- Messages -----\n    setIsCreatingMessage: (state, { payload }: PayloadAction<boolean>) => {\n      state.isCreatingMessage = payload;\n    },\n    setIsFetchingMessages: (state, { payload }: PayloadAction<boolean>) => {\n      state.isFetchingMessages = payload;\n    },\n    setIsFetchingMessage: (state, { payload }: PayloadAction<boolean>) => {\n      state.isFetchingMessage = payload;\n    },\n    setIsUpdatingMessage: (state, { payload }: PayloadAction<boolean>) => {\n      state.isUpdatingMessage = payload;\n    },\n    setIsDeletingMessage: (state, { payload }: PayloadAction<boolean>) => {\n      state.isDeletingMessage = payload;\n    },\n    addMessage: (state, { payload }: PayloadAction<Message>) => {\n      state.messages.push(payload);\n    },\n    setMessages: (state, { payload }: PayloadAction<Message[]>) => {\n      state.messages = payload;\n    },\n    setMessage: (state, { payload }: PayloadAction<Message>) => {\n      state.message = payload;\n    },\n    setMessageChanges: (\n      state,\n      {\n        payload: { _id, buyer, seller, plant, request, reply, messageState },\n      }: PayloadAction<Message>\n    ) => {\n      state.messages = state.messages.map((singleMessage) => {\n        if (singleMessage._id === _id) {\n          singleMessage.buyer = buyer;\n          singleMessage.seller = seller;\n          singleMessage.plant = plant;\n          singleMessage.request = request;\n          singleMessage.reply = reply;\n          singleMessage.messageState = messageState;\n        }\n        return singleMessage;\n      });\n    },\n    removeMessage: (state, { payload }: PayloadAction<MessageId>) => {\n      state.messages = state.messages.filter(\n        (message: Message): boolean => message._id !== payload\n      );\n    },\n\n    // ----- Requests/Replies check ------\n    setIsNewRequest: (state, { payload }: PayloadAction<boolean>) => {\n      state.isNewRequest = payload;\n    },\n    setIsNewReply: (state, { payload }: PayloadAction<boolean>) => {\n      state.isNewReply = payload;\n    },\n    setStartAmountOfRequests: (state) => {\n      state.amountOfRequests = (state.loggedInUser as any).amountOfRequests;\n    },\n    setStartAmountOfReplies: (state) => {\n      state.amountOfReplies = (state.loggedInUser as any).amountOfReplies;\n    },\n    setAmountOfRequests: (state, { payload }: PayloadAction<number>) => {\n      state.amountOfRequests = payload;\n    },\n    setAmountOfReplies: (state, { payload }: PayloadAction<number>) => {\n      state.amountOfReplies = payload;\n    },\n    decreaseAmountOfRequests: (state) => {\n      state.amountOfRequests -= 1;\n    },\n    decreaseAmountOfReplies: (state) => {\n      state.amountOfReplies -= 1;\n    },\n\n    // ----- Interval counter -----\n    setIntervalId: (state, { payload }: PayloadAction<IntervalId>) => {\n      state.intervalId = payload;\n    },\n    setDelayCounter: (state, { payload }: PayloadAction<number>) => {\n      state.delayCounter = payload;\n    },\n    increaseDelayCounter: (state) => {\n      state.delayCounter += 1;\n    },\n\n    // ----- Pages handling -----\n    setTitleSectionHeight: (state, { payload }: PayloadAction<number>) => {\n      state.titleSectionHeight = payload;\n    },\n    setAboutSectionHeight: (state, { payload }: PayloadAction<number>) => {\n      state.aboutSectionHeight = payload;\n    },\n    scrollToAbout: (state) => {\n      scroll.scrollTo(state.titleSectionHeight);\n    },\n    scrollToPlants: (state) => {\n      scroll.scrollTo(state.titleSectionHeight + state.aboutSectionHeight);\n    },\n\n    // ----- Language handling -----\n    setIsLanguageChange: (state, { payload }: PayloadAction<boolean>) => {\n      state.isLanguageChange = payload;\n    },\n\n    // ----- Error handling -----\n    setErrorMessage: (state, { payload }: PayloadAction<ErrorMessage>) => {\n      state.errorMessage = payload;\n    },\n  },\n\n  extraReducers: (builder) => {\n    // ----- Plants ------\n    builder.addCase(createPlant.fulfilled, (state) => {\n      state.isCreatingPlant = false;\n    });\n    builder.addCase(createPlant.rejected, (state) => {\n      state.isCreatingPlant = false;\n    });\n    builder.addCase(fetchAllPlants.fulfilled, (state) => {\n      state.isFetchingPlants = false;\n    });\n    builder.addCase(fetchAllPlants.rejected, (state) => {\n      state.isFetchingPlants = false;\n    });\n    builder.addCase(fetchQueryPlants.fulfilled, (state) => {\n      state.isFetchingPlants = false;\n    });\n    builder.addCase(fetchQueryPlants.rejected, (state) => {\n      state.isFetchingPlants = false;\n    });\n    builder.addCase(fetchPlant.fulfilled, (state) => {\n      state.isFetchingPlant = false;\n    });\n    builder.addCase(fetchPlant.rejected, (state) => {\n      state.isFetchingPlant = false;\n    });\n    builder.addCase(updatePlant.fulfilled, (state) => {\n      state.isUpdatingPlant = false;\n    });\n    builder.addCase(updatePlant.rejected, (state) => {\n      state.isUpdatingPlant = false;\n    });\n    builder.addCase(deletePlant.fulfilled, (state) => {\n      state.isDeletingPlant = false;\n    });\n    builder.addCase(deletePlant.rejected, (state) => {\n      state.isDeletingPlant = false;\n    });\n\n    // ----- Images -----\n    builder.addCase(uploadPlantImage.fulfilled, (state) => {\n      state.isUploadingPlantImage = false;\n    });\n    builder.addCase(uploadPlantImage.rejected, (state) => {\n      state.isUploadingPlantImage = false;\n    });\n    builder.addCase(deletePlantImage.fulfilled, (state) => {\n      state.isDeletingPlantImage = false;\n    });\n    builder.addCase(deletePlantImage.rejected, (state) => {\n      state.isDeletingPlantImage = false;\n    });\n\n    // ----- Messages -----\n    builder.addCase(createMessage.fulfilled, (state) => {\n      state.isCreatingMessage = false;\n    });\n    builder.addCase(createMessage.rejected, (state) => {\n      state.isCreatingMessage = false;\n    });\n    builder.addCase(fetchAllMessages.fulfilled, (state) => {\n      state.isFetchingMessages = false;\n    });\n    builder.addCase(fetchAllMessages.rejected, (state) => {\n      state.isFetchingMessages = false;\n    });\n    builder.addCase(fetchMessage.fulfilled, (state) => {\n      state.isFetchingMessage = false;\n    });\n    builder.addCase(fetchMessage.rejected, (state) => {\n      state.isFetchingMessage = false;\n    });\n    builder.addCase(updateMessage.fulfilled, (state) => {\n      state.isUpdatingMessage = false;\n    });\n    builder.addCase(updateMessage.rejected, (state) => {\n      state.isUpdatingMessage = false;\n    });\n    builder.addCase(deleteMessage.fulfilled, (state) => {\n      state.isDeletingMessage = false;\n    });\n    builder.addCase(deleteMessage.rejected, (state) => {\n      state.isDeletingMessage = false;\n    });\n  },\n});\n\nconst selectors = {\n  // ----- User authentication -----\n  selectIsUserChange: ({ jungleSwap: { isUserChange } }: RootState) =>\n    isUserChange,\n  selectLoggedInUser: ({ jungleSwap: { loggedInUser } }: RootState) =>\n    loggedInUser,\n\n  // ----- Plants -----\n  selectIsCreatingPlant: ({ jungleSwap: { isCreatingPlant } }: RootState) =>\n    isCreatingPlant,\n  selectIsFetchingPlants: ({ jungleSwap: { isFetchingPlants } }: RootState) =>\n    isFetchingPlants,\n  selectIsFetchingPlant: ({ jungleSwap: { isFetchingPlant } }: RootState) =>\n    isFetchingPlant,\n  selectIsUpdatingPlant: ({ jungleSwap: { isUpdatingPlant } }: RootState) =>\n    isUpdatingPlant,\n  selectIsDeletingPlant: ({ jungleSwap: { isDeletingPlant } }: RootState) =>\n    isDeletingPlant,\n  selectPlant: ({ jungleSwap: { plant } }: RootState) => plant,\n  selectPlants: ({ jungleSwap: { plants } }: RootState) => plants,\n  selectfFilteredPlants: ({ jungleSwap: { filteredPlants } }: RootState) =>\n    filteredPlants,\n  selectNumberOfVisibleEntries: ({\n    jungleSwap: { numberOfVisibleEntries },\n  }: RootState) => numberOfVisibleEntries,\n\n  // ----- Images -----\n  selectIsUploadingPlantImage: ({\n    jungleSwap: { isUploadingPlantImage },\n  }: RootState) => isUploadingPlantImage,\n  selectIsDeletingPlantImage: ({\n    jungleSwap: { isDeletingPlantImage },\n  }: RootState) => isDeletingPlantImage,\n  selectDestroyImageData: ({ jungleSwap: { destroyImageData } }: RootState) =>\n    destroyImageData,\n\n  // ----- Payment -----\n  selectClientSecret: ({ jungleSwap: { clientSecret } }: RootState) =>\n    clientSecret,\n\n  // ----- Messages -----\n  selectIsCreatingMessage: ({ jungleSwap: { isCreatingMessage } }: RootState) =>\n    isCreatingMessage,\n  selectiIsFetchingMessages: ({\n    jungleSwap: { isFetchingMessages },\n  }: RootState) => isFetchingMessages,\n  selectIsFetchingMessage: ({ jungleSwap: { isFetchingMessage } }: RootState) =>\n    isFetchingMessage,\n  selectIsUpdatingMessage: ({ jungleSwap: { isUpdatingMessage } }: RootState) =>\n    isUpdatingMessage,\n  selectIsDeletingMessage: ({ jungleSwap: { isDeletingMessage } }: RootState) =>\n    isDeletingMessage,\n  selectMessage: ({ jungleSwap: { message } }: RootState) => message,\n  selectMessages: ({ jungleSwap: { messages } }: RootState) => messages,\n\n  // ----- Requests/Replies check -----\n  selectIsNewRequest: ({ jungleSwap: { isNewRequest } }: RootState) =>\n    isNewRequest,\n  selectIsNewReply: ({ jungleSwap: { isNewReply } }: RootState) => isNewReply,\n  selectAmountOfRequests: ({ jungleSwap: { amountOfRequests } }: RootState) =>\n    amountOfRequests,\n  selectAmountOfReplies: ({ jungleSwap: { amountOfReplies } }: RootState) =>\n    amountOfReplies,\n\n  // ----- Interval counter -----\n  selectIntervalId: ({ jungleSwap: { intervalId } }: RootState) => intervalId,\n  selectDelayCounter: ({ jungleSwap: { delayCounter } }: RootState) =>\n    delayCounter,\n\n  // ----- Pages handling -----\n  selectTitleSectionHeight: ({\n    jungleSwap: { titleSectionHeight },\n  }: RootState) => titleSectionHeight,\n  selectAboutSectionHeight: ({\n    jungleSwap: { aboutSectionHeight },\n  }: RootState) => aboutSectionHeight,\n\n  // ----- Language handling -----\n  selectIsLanguageChange: ({ jungleSwap: { isLanguageChange } }: RootState) =>\n    isLanguageChange,\n\n  // ----- Error handling -----\n  selectErrorMessage: ({ jungleSwap: { errorMessage } }: RootState) =>\n    errorMessage,\n};\n\n// ----- Slice actions -----\nexport const {\n  // ----- User authentification -----\n  setIsUserChange,\n  setLoggedInUser,\n\n  // ----- Plants -----\n  setIsCreatingPlant,\n  setIsFetchingPlants,\n  setIsFetchingPlant,\n  setIsUpdatingPlant,\n  setIsDeletingPlant,\n  addPlant,\n  setPlants,\n  setFilteredPlants,\n  setPlant,\n  setPlantChanges,\n  removePlant,\n  setNumberOfVisibleEntries,\n\n  // ----- Images -----\n  setIsUploadingPlantImage,\n  setIsDeletingPlantImage,\n  setDestroyImageData,\n\n  // ----- Payment -----\n  setClientSecret,\n\n  // ----- Messages -----\n  setIsCreatingMessage,\n  setIsFetchingMessages,\n  setIsFetchingMessage,\n  setIsUpdatingMessage,\n  setIsDeletingMessage,\n  addMessage,\n  setMessages,\n  setMessage,\n  setMessageChanges,\n  removeMessage,\n\n  // ----- Requests/Replies check -----\n  setIsNewRequest,\n  setIsNewReply,\n  setStartAmountOfRequests,\n  setStartAmountOfReplies,\n  setAmountOfRequests,\n  setAmountOfReplies,\n  decreaseAmountOfRequests,\n  decreaseAmountOfReplies,\n\n  // ----- Interval counter -----\n  setIntervalId,\n  setDelayCounter,\n  increaseDelayCounter,\n\n  // ----- Pages handling -----\n  setTitleSectionHeight,\n  setAboutSectionHeight,\n  scrollToAbout,\n  scrollToPlants,\n\n  // ----- Language handling -----\n  setIsLanguageChange,\n\n  // ----- Error handling -----\n  setErrorMessage,\n} = jungleSwapSlice.actions;\n\n// ----- Slice selectors -----\nexport const {\n  // ----- User authentication -----\n  selectIsUserChange,\n  selectLoggedInUser,\n\n  // ----- Plants -----\n  selectIsCreatingPlant,\n  selectIsFetchingPlants,\n  selectIsFetchingPlant,\n  selectIsUpdatingPlant,\n  selectIsDeletingPlant,\n  selectPlant,\n  selectPlants,\n  selectfFilteredPlants,\n  selectNumberOfVisibleEntries,\n\n  // ----- Images -----\n  selectIsUploadingPlantImage,\n  selectIsDeletingPlantImage,\n  selectDestroyImageData,\n\n  // ----- Payment -----\n  selectClientSecret,\n\n  // ----- Messages -----\n  selectIsCreatingMessage,\n  selectiIsFetchingMessages,\n  selectIsFetchingMessage,\n  selectIsUpdatingMessage,\n  selectIsDeletingMessage,\n  selectMessages,\n  selectMessage,\n\n  // ----- Requests/Replies check -----\n  selectIsNewRequest,\n  selectIsNewReply,\n  selectAmountOfRequests,\n  selectAmountOfReplies,\n\n  // ----- Interval counter -----\n  selectIntervalId,\n  selectDelayCounter,\n\n  // ----- Pages handling -----\n  selectTitleSectionHeight,\n  selectAboutSectionHeight,\n\n  // ----- Language handling -----\n  selectIsLanguageChange,\n\n  // ----- Error handling -----\n  selectErrorMessage,\n} = selectors;\n\nexport default jungleSwapSlice.reducer;\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport jungleSwapSlice from \"../reducer/jungleSwapSlice\";\n\nexport const store = configureStore({\n  reducer: { jungleSwap: jungleSwapSlice },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useAppDispatch } from \"../hooks\";\nimport {\n  addMessage,\n  createMessage,\n  deleteMessage,\n  fetchAllMessages,\n  fetchMessage,\n  removeMessage,\n  setAmountOfReplies,\n  setAmountOfRequests,\n  setErrorMessage,\n  setIsCreatingMessage,\n  setIsDeletingMessage,\n  setIsFetchingMessage,\n  setIsFetchingMessages,\n  setIsNewReply,\n  setIsNewRequest,\n  setIsUpdatingMessage,\n  setMessage,\n  setMessageChanges,\n  setMessages,\n  updateMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Message, MessageId, Plant, PlantId, User } from \"../typeDefinitions\";\n\ninterface MessageMethods {\n  createMessage: Function;\n  fetchMessage: Function;\n  fetchMessages: Function;\n  fetchCheck: Function;\n  updateMessage: Function;\n  deleteMessage: Function;\n  deleteRemainingMessages: Function;\n  checkNewRequests: Function;\n  checkNewReplies: Function;\n}\n\nexport const useMessage = (): MessageMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    createMessage: (newMessage: Message, callbackFunction: Function): void => {\n      dispatch(setIsCreatingMessage(true));\n      dispatch(createMessage(newMessage))\n        .unwrap()\n        .then((message: Message): void => {\n          dispatch(addMessage(message));\n          callbackFunction();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    fetchMessage: (messageId: MessageId, callbackFunction: Function): void => {\n      dispatch(setIsFetchingMessage(true));\n      dispatch(fetchMessage(messageId))\n        .unwrap()\n        .then((message: Message): void => {\n          dispatch(setMessage(message));\n          callbackFunction();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    fetchMessages: (callbackFunction: Function): void => {\n      dispatch(setIsFetchingMessages(true));\n      dispatch(fetchAllMessages())\n        .unwrap()\n        .then((messages: Message[]): void => {\n          dispatch(setMessages(messages));\n          callbackFunction();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    fetchCheck: (callbackFunction: Function): void => {\n      dispatch(fetchAllMessages())\n        .unwrap()\n        .then((messages: Message[]): void => {\n          dispatch(setMessages(messages));\n          callbackFunction(messages);\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    updateMessage: (\n      updatedMessage: Message,\n      callbackFunction: Function\n    ): void => {\n      const { _id } = updatedMessage;\n      dispatch(setIsUpdatingMessage(true));\n      dispatch(updateMessage({ messageId: _id as MessageId, updatedMessage }))\n        .unwrap()\n        .then((message: Message): void => {\n          dispatch(setMessageChanges(message));\n          callbackFunction();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    deleteMessage: (messageId: MessageId, callbackFunction: Function): void => {\n      dispatch(setIsDeletingMessage(true));\n      dispatch(deleteMessage(messageId))\n        .unwrap()\n        .then((): void => {\n          dispatch(removeMessage(messageId));\n          callbackFunction();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    deleteRemainingMessages(messages: Message[], plantId: PlantId): void {\n      messages.forEach(({ _id, plant }: Message): void => {\n        if ((plant as Plant)._id === plantId) {\n          dispatch(setIsDeletingMessage(true));\n          dispatch(deleteMessage(_id as MessageId))\n            .unwrap()\n            .then((): void => {\n              dispatch(removeMessage(_id as MessageId));\n            })\n            .catch((rejectedValue: any): void => {\n              dispatch(setErrorMessage(rejectedValue.message));\n            });\n        }\n      });\n    },\n\n    checkNewRequests: (\n      { _id }: { _id: string },\n      messages: Message[],\n      amountOfRequests: number\n    ): void => {\n      const calculateAmountOfRequests = (messages: Message[]): number => {\n        const currentAmountOfRequests = messages.filter(\n          ({ seller, messageState }: Message): boolean =>\n            (seller as User)._id === _id && messageState === true\n        ).length;\n        return currentAmountOfRequests;\n      };\n\n      const checkAmountOfRequests = (\n        currentAmountOfRequests: number,\n        amountOfRequests: number\n      ): void => {\n        if (amountOfRequests < currentAmountOfRequests) {\n          dispatch(setIsNewRequest(true));\n        }\n        if (amountOfRequests !== currentAmountOfRequests) {\n          dispatch(setAmountOfRequests(currentAmountOfRequests));\n        }\n      };\n\n      const currentAmountOfRequests = calculateAmountOfRequests(messages);\n      checkAmountOfRequests(currentAmountOfRequests, amountOfRequests);\n    },\n\n    checkNewReplies: (\n      { _id }: { _id: string },\n      messages: Message[],\n      amountOfReplies: number\n    ): void => {\n      const calculateAmountOfReplies = (messages: Message[]): number => {\n        const currentAmountOfReplies = messages.filter(\n          ({ buyer, reply }: Message): boolean =>\n            (buyer as User)._id === _id && reply !== \"\"\n        ).length;\n        return currentAmountOfReplies;\n      };\n\n      const checkAmountOfReplies = (\n        currentAmountOfReplies: number,\n        amountOfReplies: number\n      ): void => {\n        if (amountOfReplies < currentAmountOfReplies) {\n          dispatch(setIsNewReply(true));\n        }\n        if (amountOfReplies !== currentAmountOfReplies) {\n          dispatch(setAmountOfReplies(currentAmountOfReplies));\n        }\n      };\n\n      const currentAmountOfReplies = calculateAmountOfReplies(messages);\n      checkAmountOfReplies(currentAmountOfReplies, amountOfReplies);\n    },\n  };\n};\n","import { useAppDispatch } from \"../hooks\";\nimport { setDelayCounter, setIntervalId } from \"../../reducer/jungleSwapSlice\";\n\ninterface IntervalCounterMethods {\n  stopCounter: Function;\n}\n\nexport const useIntervalCounter = (): IntervalCounterMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    stopCounter: (intervalId: NodeJS.Timeout): void => {\n      clearInterval(intervalId);\n      dispatch(setIntervalId(null));\n      dispatch(setDelayCounter(0));\n    },\n  };\n};\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nconst NavAuthItems = (): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <Link to=\"/auth/sign-in\" className=\"[ nav-auth-items__nav-link ] [ p-2 ]\">\n        {t(\"link.signIn\")}\n      </Link>\n      <Link to=\"/auth/sign-up\" className=\"[ nav-auth-items__nav-link ] [ p-2 ]\">\n        {t(\"link.signUp\")}\n      </Link>\n    </>\n  );\n};\n\nexport default NavAuthItems;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport {\n  selectIsNewReply,\n  selectIsNewRequest,\n  selectLoggedInUser,\n} from \"../../reducer/jungleSwapSlice\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\n\nconst NavUserItems = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isNewRequest = useAppSelector(selectIsNewRequest);\n  const isNewReply = useAppSelector(selectIsNewReply);\n  const { t } = useTranslation();\n\n  const tooltipItemRequests = (): string =>\n    isNewRequest ? t(\"link.tooltipps.newRequest\") : \"\";\n\n  const tooltipItemReplies = (): string =>\n    isNewReply ? t(\"link.tooltipps.newReply\") : \"\";\n\n  const tooltipItemLogOut = (): string | undefined =>\n    loggedInUser ? loggedInUser.username : \"\";\n\n  return (\n    <>\n      <Link\n        to=\"/plants/my-own\"\n        className=\"[ nav-user-items__nav-link ] [ p-2 ]\"\n      >\n        {t(\"link.myPlants\")}\n      </Link>\n      <Link\n        to=\"/plants/create\"\n        className=\"[ nav-user-items__nav-link ] [ p-2 ]\"\n      >\n        {t(\"link.createPlant\")}\n      </Link>\n      <Link\n        to=\"/requests/fetch-all\"\n        title={tooltipItemRequests()}\n        className=\"[ nav-user-items__nav-link ] [ p-2 ]\"\n      >\n        {isNewRequest && <FontAwesomeIcon icon={faBell} />}\n        {t(\"link.requests\")}\n      </Link>\n      <Link\n        to=\"/replies/fetch-all\"\n        title={tooltipItemReplies()}\n        className=\"[ nav-user-items__nav-link ] [ p-2 ]\"\n      >\n        {isNewReply && <FontAwesomeIcon icon={faBell} />}\n        {t(\"link.replies\")}\n      </Link>\n      <Link\n        to=\"/auth/log-out\"\n        title={tooltipItemLogOut()}\n        className=\"[ nav-user-items__nav-link ] [ p-2 ]\"\n      >\n        {t(\"link.logOut\")}\n      </Link>\n    </>\n  );\n};\n\nexport default NavUserItems;\n","import { User } from \"../../app/typeDefinitions\";\nimport NavAuthItems from \"./NavAuthItems\";\nimport NavUserItems from \"./NavUserItems\";\n\ninterface NavAdditionalItemsProps {\n  user: User | null;\n}\n\nconst NavAdditionalItems = ({ user }: NavAdditionalItemsProps): JSX.Element => {\n  if (user) {\n    return <NavUserItems />;\n  }\n  return <NavAuthItems />;\n};\n\nexport default NavAdditionalItems;\n","import { useTranslation } from \"react-i18next\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLanguage } from \"@fortawesome/free-solid-svg-icons\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport {\n  selectIsLanguageChange,\n  setIsLanguageChange,\n} from \"../../reducer/jungleSwapSlice\";\n\nconst SelectLanguage = (): JSX.Element => {\n  const isLanguageChange = useAppSelector(selectIsLanguageChange);\n  const dispatch = useAppDispatch();\n  const { t, i18n } = useTranslation();\n\n  const handleSelectLanguage = ({ target: { value } }: any): void => {\n    i18n.changeLanguage(value);\n    dispatch(setIsLanguageChange(!isLanguageChange));\n  };\n\n  return (\n    <div className=\"select-language\">\n      <FontAwesomeIcon icon={faLanguage} />\n      <select\n        className=\"[ select-language__select ] [ form-select ]\"\n        onChange={handleSelectLanguage}\n      >\n        <option value=\"\" className=\"select-language__select__option\">\n          {t(\"select.language.placeholder\")}\n        </option>\n        <option value=\"de\" className=\"select-language__select__option\">\n          {t(\"select.language.german\")}\n        </option>\n        <option value=\"en\" className=\"select-language__select__option\">\n          {t(\"select.language.english\")}\n        </option>\n      </select>\n    </div>\n  );\n};\n\nexport default SelectLanguage;\n","import { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport { useIntervalCounter } from \"../../app/custom-hooks/useIntervalCounter\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport {\n  setIsUserChange,\n  setIntervalId,\n  increaseDelayCounter,\n  setStartAmountOfRequests,\n  setStartAmountOfReplies,\n  scrollToPlants,\n  selectIsUserChange,\n  selectLoggedInUser,\n  selectIntervalId,\n  selectDelayCounter,\n  selectIsNewRequest,\n  selectIsNewReply,\n  selectAmountOfRequests,\n  selectAmountOfReplies,\n} from \"../../reducer/jungleSwapSlice\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBell, faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { Message } from \"../../app/typeDefinitions\";\nimport NavAdditionalItems from \"./NavAdditionalItems\";\nimport SelectLanguage from \"../helpers/SelectLanguage\";\n\nconst NavBar = (): JSX.Element => {\n  const isUserChange = useAppSelector(selectIsUserChange);\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const intervalId = useAppSelector(selectIntervalId);\n  const delayCounter = useAppSelector(selectDelayCounter);\n  const isNewRequest = useAppSelector(selectIsNewRequest);\n  const isNewReply = useAppSelector(selectIsNewReply);\n  const amountOfRequests = useAppSelector(selectAmountOfRequests);\n  const amountOfReplies = useAppSelector(selectAmountOfReplies);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n  const { fetchMessages, fetchCheck, checkNewRequests, checkNewReplies } =\n    useMessage();\n  const { stopCounter } = useIntervalCounter();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    return () => {\n      if (intervalId) {\n        stopCounter(intervalId);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const startRequestsRepliesCheck = (): void => {\n      const setInitialMessageVariables = (): void => {\n        dispatch(setStartAmountOfRequests());\n        dispatch(setStartAmountOfReplies());\n        dispatch(setIsUserChange(false));\n      };\n\n      const startInterval = (): void => {\n        const intervalId = setInterval(\n          (): void => {\n            dispatch(increaseDelayCounter());\n          },\n          1000 // every second\n        );\n        dispatch(setIntervalId(intervalId));\n        dispatch(increaseDelayCounter());\n      };\n\n      fetchMessages((): void => {\n        setInitialMessageVariables();\n        startInterval();\n      });\n    };\n\n    isUserChange && startRequestsRepliesCheck();\n  }, [isUserChange]);\n\n  useEffect(() => {\n    const checkNewRequestsReplies = (): void => {\n      fetchCheck((messages: Message[]): void => {\n        checkNewRequests(loggedInUser, messages, amountOfRequests);\n        checkNewReplies(loggedInUser, messages, amountOfReplies);\n      });\n    };\n\n    if (isUserChange) {\n      dispatch(setStartAmountOfRequests());\n      dispatch(setStartAmountOfReplies());\n    }\n    loggedInUser && checkNewRequestsReplies();\n  }, [delayCounter]);\n\n  const tooltipItemSearch = (): string => t(\"link.tooltipps.search\");\n\n  return (\n    <div>\n      <Navbar\n        variant=\"dark\"\n        expand=\"lg\"\n        fixed=\"top\"\n        className=\"[ nav-bar ] [ px-5 ]\"\n      >\n        <Navbar.Brand>\n          <Link to=\"/\" className=\"nav-bar__nav-link\" onClick={scrollToTop}>\n            {t(\"link.jungleSwap\")}\n          </Link>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\n        </Navbar.Toggle>\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Link\n              to=\"/\"\n              className=\"[ nav-bar__nav-link ] [ p-2 ]\"\n              onClick={(): void => {\n                dispatch(scrollToPlants());\n              }}\n            >\n              {t(\"link.allPlants\")}\n            </Link>\n            <NavAdditionalItems user={loggedInUser} />\n            <Link to=\"/faq\" className=\"[ nav-bar__nav-link ] [ p-2 ]\">\n              {t(\"link.faq\")}\n            </Link>\n            <Link\n              to=\"/\"\n              title={tooltipItemSearch()}\n              className=\"[ nav-bar__nav-link ] [ p-2 ]\"\n              onClick={(): void => {\n                dispatch(scrollToPlants());\n              }}\n            >\n              <FontAwesomeIcon icon={faSearch} />\n            </Link>\n          </Nav>\n          <SelectLanguage />\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { linkedInPath1, linkedInPath2 } from \"../lib/externalLinkPaths\";\n\nconst Footer = (): JSX.Element => {\n  const { t } = useTranslation();\n  const currentTime = new Date();\n  const year = currentTime.getFullYear();\n\n  return (\n    <footer className=\"footer\">\n      <div className=\"[ footer__navigation ] [ text-center ]\">\n        {t(\"texts.footer.copyright\")} {year}{\" \"}\n        <Link\n          to={{ pathname: linkedInPath1 }}\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n          className=\"footer__navigation__nav-link\"\n        >\n          {t(\"texts.footer.appAuthor1\")}\n        </Link>{\" \"}\n        &amp;{\" \"}\n        <Link\n          to={{ pathname: linkedInPath2 }}\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n          className=\"footer__navigation__nav-link\"\n        >\n          {t(\"texts.footer.appAuthor2\")}\n        </Link>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","// LinkedIn\nexport const linkedInPath1: string =\n  \"https://www.linkedin.com/in/christian-gerbig/\";\nexport const linkedInPath2: string =\n  \"https://www.linkedin.com/in/lisa-montebaur/\";\n","import { useAppDispatch } from \"../hooks\";\nimport {\n  addPlant,\n  createPlant,\n  deletePlant,\n  fetchAllPlants,\n  fetchPlant,\n  fetchQueryPlants,\n  removePlant,\n  setErrorMessage,\n  setIsCreatingPlant,\n  setIsDeletingPlant,\n  setIsFetchingPlant,\n  setIsFetchingPlants,\n  setIsUpdatingPlant,\n  setPlant,\n  setPlantChanges,\n  setPlants,\n  updatePlant,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant, PlantId, UploadImageData } from \"../typeDefinitions\";\n\ninterface PlantMethods {\n  createPlant: Function;\n  fetchPlant: Function;\n  fetchPlants: Function;\n  updatePlant: Function;\n  deletePlant: Function;\n  searchPlant: Function;\n}\n\nexport const usePlant = (): PlantMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    createPlant: (\n      { name, description, size, location, price }: any,\n      { imageUrl, imagePublicId }: UploadImageData,\n      callbackFunction: Function\n    ): void => {\n      const newPlant: Plant = {\n        name: name.value,\n        description: description.value,\n        size: size.value,\n        imageUrl,\n        imagePublicId,\n        location: location.value,\n        price: price.value,\n      };\n      dispatch(setIsCreatingPlant(true));\n      dispatch(createPlant(newPlant))\n        .unwrap()\n        .then((plant: Plant): void => {\n          dispatch(addPlant(plant));\n          callbackFunction();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    fetchPlant: (plantId: PlantId, callbackFunction: Function): void => {\n      dispatch(setIsFetchingPlant(true));\n      dispatch(fetchPlant(plantId))\n        .unwrap()\n        .then((plant: Plant): void => {\n          dispatch(setPlant(plant));\n          callbackFunction();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    fetchPlants: (callbackFunction?: Function): void => {\n      dispatch(setIsFetchingPlants(true));\n      dispatch(fetchAllPlants())\n        .unwrap()\n        .then((plants: Plant[]): void => {\n          dispatch(setPlants(plants));\n          if (typeof callbackFunction !== \"undefined\") {\n            callbackFunction();\n          }\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    updatePlant: (\n      {\n        _id,\n        name,\n        description,\n        size,\n        imageUrl,\n        imagePublicId,\n        location,\n        price,\n      }: Plant,\n      callbackFunction: Function\n    ): void => {\n      const updatedPlant: Plant = {\n        name,\n        description,\n        size,\n        imageUrl,\n        imagePublicId,\n        location,\n        price,\n      };\n      dispatch(setIsUpdatingPlant(true));\n      dispatch(updatePlant({ plantId: _id as PlantId, updatedPlant }))\n        .unwrap()\n        .then((updatedPlant): void => {\n          dispatch(setPlantChanges(updatedPlant));\n          callbackFunction();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    deletePlant: (plantId: PlantId, callbackFunction: Function): void => {\n      dispatch(setIsDeletingPlant(true));\n      dispatch(deletePlant(plantId))\n        .unwrap()\n        .then((): void => {\n          dispatch(removePlant(plantId));\n          callbackFunction();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    searchPlant: (query: string): void => {\n      dispatch(setIsFetchingPlants(true));\n      dispatch(fetchQueryPlants(query))\n        .unwrap()\n        .then((plants: Plant[]): void => {\n          dispatch(setPlants(plants));\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n  };\n};\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import { useTranslation } from \"react-i18next\";\nimport plantsImage from \"../../images/JungleSwap_Home.png\";\nimport plantPotIcon from \"../../images/JungleSwap_Icon.png\";\n\nconst HomeAbout = (): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"[ home-about ] [ container pt-5 ]\">\n      <div className=\"row\">\n        <div className=\"[ home-about__image ] [ col-sm-6 col-md-6 col-lg-6 ]\">\n          <img\n            src={plantsImage}\n            loading=\"eager\"\n            alt=\"plants\"\n            className=\"w-100 h-100\"\n          />\n        </div>\n        <br />\n        <div className=\"col-sm-6 col-md-6 col-lg-6 px-5\">\n          <article className=\"mt-4\">\n            <header>\n              <h4 className=\"home-about__headline\">\n                {t(\"texts.home.about.headline\")}\n              </h4>\n              <h5 className=\"home-about__subheadline\">\n                {t(\"texts.home.about.subheadline\")}\n              </h5>\n            </header>\n            <p className=\"home-about__paragraph\">\n              {t(\"texts.home.about.paragraph.line1\")}\n              <br />\n              {t(\"texts.home.about.paragraph.line2\")}\n              <br />\n              {t(\"texts.home.about.paragraph.line3\")}\n              <br />\n              {t(\"texts.home.about.paragraph.line4\")}\n              <br />\n              {t(\"texts.home.about.paragraph.line5\")}\n              <br />\n              {t(\"texts.home.about.paragraph.line6\")}\n            </p>\n            <div className=\"home-about__icon\">\n              <img\n                src={plantPotIcon}\n                loading=\"lazy\"\n                alt=\"plant pot\"\n                className=\"w-100 h-100\"\n              />\n            </div>\n          </article>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HomeAbout;\n","const WaitSpinner = (): JSX.Element => {\n  return (\n    <div className=\"d-flex align-items-center justify-content-center\">\n      <div role=\"status\" className=\"[ wait-spinner ] [ spinner-border m-3 ]\" />\n    </div>\n  );\n};\n\nexport default WaitSpinner;\n","import { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport { selectPlants, setFilteredPlants } from \"../../reducer/jungleSwapSlice\";\nimport { Plant } from \"../../app/typeDefinitions\";\nimport { MultiSelect } from \"react-multi-select-component\";\n\ninterface DropdownOption {\n  label: string;\n  value: string;\n  disabled?: boolean;\n}\n\nconst PlantSearch = (): JSX.Element => {\n  const [query, setQuery] = useState<string>(\"\");\n  const [selectedOptions, setSelectedOptions] = useState<DropdownOption[]>([]);\n  const plants = useAppSelector(selectPlants);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n  const { searchPlant, fetchPlants } = usePlant();\n\n  useEffect(() => {\n    const fetchPlantQueryByName = (query: string): void => {\n      if (query) {\n        searchPlant(query);\n      } else {\n        fetchPlants();\n      }\n    };\n\n    fetchPlantQueryByName(query);\n  }, [query]);\n\n  useEffect(() => {\n    const filterPlantsByLocation = (\n      selectedOptions: DropdownOption[],\n      plants: Plant[]\n    ): void => {\n      const selectedLocations = selectedOptions.map(\n        (option: DropdownOption): string => option.value\n      );\n      const filteredPlants = plants.filter(({ location }: Plant): boolean => {\n        const matchedLocation = selectedLocations.filter(\n          (selectedLocation: string): boolean => selectedLocation === location\n        );\n        return matchedLocation.length !== 0 ? true : false;\n      });\n      dispatch(setFilteredPlants(filteredPlants));\n    };\n\n    filterPlantsByLocation(selectedOptions, plants);\n  }, [selectedOptions]);\n\n  const optionsChoice: DropdownOption[] = [\n    {\n      label: t(\"multiSelect.location.sun\"),\n      value: \"sun\",\n    },\n    {\n      label: t(\"multiSelect.location.shade\"),\n      value: \"shade\",\n    },\n    {\n      label: t(\"multiSelect.location.sunAndShade\"),\n      value: \"sun and shade\",\n    },\n  ];\n\n  const localizationTexts: any = {\n    allItemsAreSelected: `${t(\"multiSelect.localization.allItemsAreSelected\")}`,\n    clearSearch: t(\"multiSelect.localization.clearSearch\"),\n    noOptions: t(\"multiSelect.localization.noOptions\"),\n    search: t(\"multiSelect.localization.search\"),\n    selectAll: t(\"multiSelect.localization.selectAll\"),\n    selectAllFiltered: t(\"multiSelect.localization.selectAllFiltered\"),\n    selectSomeItems: t(\"multiSelect.localization.selectSomeItems\"),\n    create: t(\"multiSelect.localization.create\"),\n  };\n\n  return (\n    <div className=\"mb-4\">\n      <hr className=\"[ horizontal-ruler ] [ pb-5 ]\" />\n      <h4 className=\"mb-4\">{t(\"texts.home.searchPlant.headline\")}</h4>\n      <div className=\"[ plant-search ] [ d-flex flex-row ]\">\n        <input\n          type=\"text\"\n          placeholder={t(\"texts.home.searchPlant.namePlaceholder\")}\n          value={query}\n          className=\"[ plant-search__field ] [ form-control ]\"\n          onChange={({\n            target: { value },\n          }: React.ChangeEvent<HTMLInputElement>): void => {\n            setQuery(value);\n          }}\n        />\n        <MultiSelect\n          labelledBy=\"location-select\"\n          options={optionsChoice}\n          value={selectedOptions}\n          overrideStrings={localizationTexts}\n          onChange={(options: DropdownOption[]): void => {\n            setSelectedOptions(options);\n          }}\n          disableSearch={true}\n          className=\"[ plant-search__location-filter plant-search__location-filter--no-border ] [ form-control p-0 ml-4  ] \"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default PlantSearch;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { Plant } from \"../../app/typeDefinitions\";\n\ninterface PlantThumbnailProps {\n  plant: Plant;\n}\n\nconst PlantThumbnail = ({\n  plant: { _id, name, imageUrl, price },\n}: PlantThumbnailProps): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"col mb-5\">\n      <div className=\"card h-100 text-center mx-auto\">\n        <img\n          src={imageUrl}\n          loading=\"lazy\"\n          alt={name}\n          className=\"[ image image--size-large ] [ card-img-top ]\"\n        />\n        <div className=\"card-body mb-5\">\n          <h5 className=\"plant-thumbnail__body-headline\">{name}</h5>\n          <p>\n            {price} {t(\"texts.plants.plantThumbnail.currency\")}\n          </p>\n          <Link to={`/plants/fetch/${_id}`} className=\"navigation-link\">\n            <button className=\"[ button--width-small ] [ btn form-control px-3 ]\">\n              {t(\"link.details\")}\n            </button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlantThumbnail;\n","import { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport {\n  selectfFilteredPlants,\n  selectNumberOfVisibleEntries,\n  setNumberOfVisibleEntries,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant } from \"../../app/typeDefinitions\";\nimport PlantThumbnail from \"./PlantThumbnail\";\n\nconst PlantsCollection = (): JSX.Element => {\n  const filteredPlants = useAppSelector(selectfFilteredPlants);\n  const numberOfVisibleEntries = useAppSelector(selectNumberOfVisibleEntries);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n\n  const handleClickButton = (): void => {\n    dispatch(setNumberOfVisibleEntries(numberOfVisibleEntries + 6));\n  };\n\n  return (\n    <div>\n      <div\n        className={`\n          row\n          row-cols-1\n          row-cols-md-1\n          row-cols-lg-2\n          row-cols-xl-3\n          row-cols-xxl-3\n        `}\n      >\n        {filteredPlants.map(\n          (plant: Plant, index: number): JSX.Element | null => {\n            const { _id } = plant;\n            return index < numberOfVisibleEntries ? (\n              <PlantThumbnail plant={plant} key={_id} />\n            ) : null;\n          }\n        )}\n      </div>\n      {numberOfVisibleEntries < filteredPlants.length && (\n        <div className=\"text-center\">\n          <button\n            type=\"button\"\n            className={`\n              [ \n                button \n                button--width-small \n              ] \n              [ \n                btn \n                btn-sm \n                form-control \n                px-4 \n              ]\n            `}\n            onClick={handleClickButton}\n          >\n            {t(\"button.more\")}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PlantsCollection;\n","import { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { selectIsFetchingPlants } from \"../../reducer/jungleSwapSlice\";\nimport WaitSpinner from \"../spinners/WaitSpinner\";\nimport PlantSearch from \"./PlantSearch\";\nimport PlantsCollection from \"./PlantsCollection\";\n\nconst PlantsCockpit = (): JSX.Element => {\n  const isFetchingPlants = useAppSelector(selectIsFetchingPlants);\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"container mt-5\">\n      <div>\n        <h2>{t(\"texts.home.allPlants.headline\")}</h2>\n      </div>\n      <PlantSearch />\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsCollection />}\n    </div>\n  );\n};\n\nexport default PlantsCockpit;\n","import { Link } from \"react-router-dom\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { scrollToAbout } from \"../../reducer/jungleSwapSlice\";\nimport { useTranslation } from \"react-i18next\";\n\nconst HomeTitle = (): JSX.Element => {\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"[ home-title ] [ row pt-5 my-5 ]\">\n      <div className=\"col-6 offset-3 pt-5 my-5\">\n        <h2 className=\"home-title__headline mb-2\">\n          {t(\"texts.home.title.headline\")}\n        </h2>\n        <h5 className=\"[ home-title__subheadline ] [ mt-3 mb-5 ]\">\n          {t(\"texts.home.title.subheadline\")}\n        </h5>\n        <div className=\"mb-5\">\n          <Link\n            to={\"/\"}\n            className=\"home-title__link\"\n            onClick={(): void => {\n              dispatch(scrollToAbout());\n            }}\n          >\n            {t(\"link.tryIt\")}\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HomeTitle;\n","import { useEffect, useRef } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport {\n  setTitleSectionHeight,\n  setAboutSectionHeight,\n  setFilteredPlants,\n  selectPlants,\n} from \"../../reducer/jungleSwapSlice\";\nimport HomeAbout from \"../../components/home/HomeAbout\";\nimport PlantsCockpit from \"../../components/plants/PlantsCockpit\";\nimport HomeTitle from \"../../components/home/HomeTitle\";\n\nconst Home = (): JSX.Element => {\n  const plants = useAppSelector(selectPlants);\n  const dispatch = useAppDispatch();\n  const elementRef = useRef<HTMLElement[]>([]);\n  const { fetchPlants } = usePlant();\n\n  useEffect(() => {\n    const elementHeight = (elementRef: HTMLElement): number => {\n      return Math.round(elementRef.getBoundingClientRect().height);\n    };\n\n    fetchPlants((): void => {\n      const titleSectionHeight = elementHeight(elementRef.current[0]);\n      dispatch(setTitleSectionHeight(titleSectionHeight));\n      const aboutSectionHeight = elementHeight(elementRef.current[1]);\n      dispatch(setAboutSectionHeight(aboutSectionHeight));\n    });\n  }, []);\n\n  useEffect(() => {\n    dispatch(setFilteredPlants(plants));\n  }, [plants]);\n\n  return (\n    <div>\n      <section\n        ref={(titleSection: HTMLElement): void => {\n          (elementRef.current[0] as HTMLElement | null) = titleSection;\n        }}\n        className=\"[ home ] [ text-center pt-5 pb-5 ]\"\n      >\n        <HomeTitle />\n      </section>\n\n      <section\n        ref={(aboutSection: HTMLElement): void => {\n          (elementRef.current[1] as HTMLElement | null) = aboutSection;\n        }}\n      >\n        <HomeAbout />\n      </section>\n\n      <section>\n        <PlantsCockpit />\n      </section>\n    </div>\n  );\n};\n\nexport default Home;\n","import { useAppDispatch } from \"../hooks\";\nimport {\n  setErrorMessage,\n  setLoggedInUser,\n  signIn,\n  signUp,\n  logOut,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User } from \"../typeDefinitions\";\n\ninterface AuthMethods {\n  signIn: Function;\n  signUp: Function;\n  logOut: Function;\n  updateUserRequestsReplies: Function;\n}\n\nexport const useAuthentification = (): AuthMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    signIn: (user: User, callbackFunction: Function): void => {\n      dispatch(signIn(user))\n        .unwrap()\n        .then((user: User): void => {\n          dispatch(setLoggedInUser(user));\n          callbackFunction();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    signUp: (newUser: User, callbackFunction: Function): void => {\n      dispatch(signUp(newUser))\n        .unwrap()\n        .then((user: User): void => {\n          dispatch(setLoggedInUser(user));\n          callbackFunction();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    logOut: (loggedInUser: User, callbackFunction: Function): void => {\n      dispatch(logOut(loggedInUser))\n        .unwrap()\n        .then((): void => {\n          dispatch(setLoggedInUser(null));\n          callbackFunction();\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    updateUserRequestsReplies: (\n      loggedInUser: User,\n      amountOfRequests: number,\n      amountOfReplies: number\n    ): User => {\n      const clonedUser: User = JSON.parse(JSON.stringify(loggedInUser));\n      clonedUser.amountOfRequests = amountOfRequests;\n      clonedUser.amountOfReplies = amountOfReplies;\n      dispatch(setLoggedInUser(clonedUser));\n      return clonedUser;\n    },\n  };\n};\n","interface ErrorMessageProps {\n  message: string | null;\n  outputFunction: Function;\n}\n\nconst ErrorMessage = ({\n  message,\n  outputFunction,\n}: ErrorMessageProps): JSX.Element | null => {\n  if (!message || !message.includes(\"Form\")) {\n    return null;\n  }\n\n  return (\n    <>\n      <span className=\"d-block text-danger font-weight-bold\">\n        {outputFunction(message)}\n      </span>\n    </>\n  );\n};\n\nexport default ErrorMessage;\n","import { useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\nimport {\n  setIsUserChange,\n  setErrorMessage,\n  selectErrorMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User } from \"../../app/typeDefinitions\";\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\n\nconst SignUp = (): JSX.Element => {\n  const errorMessage = useAppSelector(selectErrorMessage);\n  const dispatch = useAppDispatch();\n  const { push } = useHistory();\n  const { t } = useTranslation();\n  const { signUp } = useAuthentification();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    dispatch(setErrorMessage(null));\n    scrollToTop();\n  }, []);\n\n  const handleSignUp = (event: React.FormEvent<HTMLFormElement>): void => {\n    const {\n      target: { username, email, password },\n    } = event as any;\n    const newUser: User = {\n      username: username.value,\n      email: email.value.toLowerCase(),\n      password: password.value,\n    };\n    event.preventDefault();\n    signUp(newUser, (): void => {\n      dispatch(setIsUserChange(true));\n      push(\"/\");\n    });\n  };\n\n  const convertErrorMessage = (errorMessage: string): string => {\n    switch (errorMessage) {\n      case \"Form: Username missing\":\n        return t(\"errorTexts.auth.signUp.form.usernameMissing\");\n      case \"Form: Email missing\":\n        return t(\"errorTexts.auth.signUp.form.emailMissing\");\n      case \"Form: Password missing\":\n        return t(\"errorTexts.auth.signUp.form.passwordMissing\");\n      case \"Form: Email format invalid\":\n        return t(\"errorTexts.auth.signUp.form.emailFormatInvalid\");\n      case \"Form: Password invalid\":\n        return t(\"errorTexts.auth.signUp.form.passwordInvalid\");\n      case \"Form: Username or email already exists\":\n        return t(\"errorTexts.auth.signUp.form.userAlreadyExists\");\n      default:\n        return t(\"errorTexts.general\");\n    }\n  };\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2 className=\"mb-5\">{t(\"texts.auth.signUp.headline\")}</h2>\n        <form className=\"form-style\" onSubmit={handleSignUp}>\n          <div className=\"form-group\">\n            <label htmlFor=\"InputUsername\">\n              {t(\"texts.auth.signUp.username\")}\n            </label>\n            <input\n              type=\"text\"\n              id=\"InputUsername\"\n              name=\"username\"\n              placeholder={t(\"texts.auth.signUp.enterPlaceholder\")}\n              className=\"form-control w-100\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"InputEmail\">{t(\"texts.auth.signUp.email\")}</label>\n            <input\n              type=\"email\"\n              id=\"InputEmail\"\n              name=\"email\"\n              placeholder={t(\"texts.auth.signUp.enterPlaceholder\")}\n              className=\"form-control w-100\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"InputPassword\">\n              {t(\"texts.auth.signUp.password\")}\n            </label>\n            <input\n              type=\"password\"\n              id=\"InputPassword\"\n              name=\"password\"\n              placeholder={t(\"texts.auth.signUp.enterPlaceholder\")}\n              className=\"form-control w-100\"\n            />\n          </div>\n          <ErrorMessage\n            message={errorMessage}\n            outputFunction={convertErrorMessage}\n          />\n          <button\n            type=\"submit\"\n            formNoValidate\n            className={`\n              [\n                button\n                button--width-small\n              ]\n              [\n                btn\n                btn-sm\n                form-control\n                px-4\n                ml-0\n                mt-4\n              ]\n            `}\n          >\n            {t(\"button.signUp\")}\n          </button>\n          <p className=\"pt-1\">{t(\"texts.auth.signUp.alreadyAccountCreated\")}</p>\n          <div className=\"text-right\">\n            <Link to={\"/auth/sign-in\"} className=\"navigation-link\">\n              <button\n                className={`\n                [\n                  button\n                  button--width-small\n                ]\n                [\n                  btn\n                  btn-sm\n                  form-control\n                  px-4\n                  mt-0\n                  mr-0\n                ]\n                `}\n              >\n                {t(\"button.signIn\")}\n              </button>\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUp;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\nimport {\n  setIsUserChange,\n  setAmountOfRequests,\n  setAmountOfReplies,\n  setErrorMessage,\n  selectErrorMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User } from \"../../app/typeDefinitions\";\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\n\nconst SignIn = (): JSX.Element => {\n  const errorMessage = useAppSelector(selectErrorMessage);\n  const dispatch = useAppDispatch();\n  const { push } = useHistory();\n  const { t } = useTranslation();\n  const { signIn } = useAuthentification();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    dispatch(setErrorMessage(null));\n    scrollToTop();\n  }, []);\n\n  const handleSignIn = (event: React.FormEvent<HTMLFormElement>): void => {\n    const {\n      target: { email, password },\n    } = event as any;\n    const user: User = {\n      email: email.value,\n      password: password.value,\n    };\n    event.preventDefault();\n    signIn(user, (): void => {\n      dispatch(setIsUserChange(true));\n      const { amountOfRequests, amountOfReplies } = user;\n      dispatch(setAmountOfRequests(amountOfRequests as number));\n      dispatch(setAmountOfReplies(amountOfReplies as number));\n      push(\"/\");\n    });\n  };\n\n  const convertErrorMessage = (errorMessage: string): string => {\n    switch (errorMessage) {\n      case \"Form: Email missing\":\n        return t(\"errorTexts.auth.signIn.form.emailMissing\");\n      case \"Form: Password missing\":\n        return t(\"errorTexts.auth.signIn.form.passwordMissing\");\n      case \"Form: Email format invalid\":\n        return t(\"errorTexts.auth.signIn.form.emailFormatInvalid\");\n      case \"Form: Passwords don't match\":\n        return t(\"errorTexts.auth.signIn.form.noMatchPasswords\");\n      default:\n        return t(\"errorTexts.general\");\n    }\n  };\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2 className=\"mb-5\">{t(\"texts.auth.signIn.headline\")}</h2>\n        <form className=\"form-style\" onSubmit={handleSignIn}>\n          <div className=\"form-group\">\n            <label htmlFor=\"InputEmail\">{t(\"texts.auth.signIn.email\")}</label>\n            <input\n              type=\"email\"\n              id=\"InputEmail\"\n              name=\"email\"\n              placeholder={t(\"texts.auth.signIn.enterPlaceholder\")}\n              className=\"form-control w-100\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"InputPassword\">\n              {t(\"texts.auth.signIn.password\")}\n            </label>\n            <input\n              type=\"password\"\n              id=\"InputPassword\"\n              name=\"password\"\n              placeholder={t(\"texts.auth.signIn.enterPlaceholder\")}\n              className=\"form-control w-100\"\n            />\n          </div>\n          <ErrorMessage\n            message={errorMessage}\n            outputFunction={convertErrorMessage}\n          />\n          <button\n            type=\"submit\"\n            formNoValidate\n            className={`\n              [ \n                button--width-small \n              ] \n              [ \n                btn \n                btn-sm \n                form-control \n                px-4 \n                mt-4 \n                ml-0 \n              ]\n            `}\n          >\n            {t(\"button.signIn\")}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\nimport { useIntervalCounter } from \"../../app/custom-hooks/useIntervalCounter\";\nimport {\n  setIsNewRequest,\n  setAmountOfRequests,\n  setAmountOfReplies,\n  selectLoggedInUser,\n  selectIntervalId,\n  selectAmountOfRequests,\n  selectAmountOfReplies,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User } from \"../../app/typeDefinitions\";\n\nconst LogOut = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const intervalId = useAppSelector(selectIntervalId);\n  const amountOfRequests = useAppSelector(selectAmountOfRequests);\n  const amountOfReplies = useAppSelector(selectAmountOfReplies);\n  const dispatch = useAppDispatch();\n  const { push } = useHistory();\n  const { logOut, updateUserRequestsReplies } = useAuthentification();\n  const { stopCounter } = useIntervalCounter();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    const updatedUser = updateUserRequestsReplies(\n      loggedInUser as User,\n      amountOfRequests,\n      amountOfReplies\n    );\n    logOut(updatedUser, (): void => {\n      stopCounter(intervalId as NodeJS.Timeout);\n      dispatch(setIsNewRequest(false));\n      dispatch(setAmountOfRequests(0));\n      dispatch(setAmountOfReplies(0));\n      push(\"/\");\n      scrollToTop();\n    });\n  }, []);\n\n  return <div />;\n};\n\nexport default LogOut;\n","import { useAppDispatch } from \"../hooks\";\nimport {\n  checkUserLoggedIn,\n  setErrorMessage,\n  setLoggedInUser,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User } from \"../../app/typeDefinitions\";\n\ninterface RoutingMethods {\n  protectRoute: Function;\n}\n\nexport const useRouting = (): RoutingMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    protectRoute: (callbackFunction: Function): void => {\n      dispatch(checkUserLoggedIn())\n        .unwrap()\n        .then((user: User): void => {\n          dispatch(setLoggedInUser(user));\n          callbackFunction();\n        })\n        .catch((rejectedValue: any): void => {\n          if (rejectedValue.message !== \"Unauthorized user\") {\n            dispatch(setErrorMessage(rejectedValue.message));\n          }\n        });\n    },\n  };\n};\n","import { useAppDispatch } from \"../hooks\";\nimport {\n  deletePlantImage,\n  setErrorMessage,\n  setIsDeletingPlantImage,\n  setIsUploadingPlantImage,\n  uploadPlantImage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { DestroyImageData, UploadImageData } from \"../typeDefinitions\";\n\ninterface PlantImageMethods {\n  createImage: Function;\n  deleteImage: Function;\n}\n\nexport const usePlantImage = (): PlantImageMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    createImage: (uploadForm: any, callbackFunction: Function): void => {\n      dispatch(setIsUploadingPlantImage(true));\n      dispatch(uploadPlantImage(uploadForm))\n        .unwrap()\n        .then((uploadImageData: UploadImageData): void => {\n          callbackFunction(uploadImageData);\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n\n    deleteImage: (destroyImageData: DestroyImageData): void => {\n      dispatch(setIsDeletingPlantImage(true));\n      dispatch(deletePlantImage(destroyImageData))\n        .unwrap()\n        .then((): void => {\n          return;\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n  };\n};\n","import { MouseEventHandler } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface GoBackButtonProps {\n  clickHandler: MouseEventHandler;\n}\n\nconst GoBackButton = ({ clickHandler }: GoBackButtonProps): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"text-right\">\n      <button\n        className={`\n          [ \n            button \n            button--width-small \n          ] \n          [ \n            btn \n            btn-sm \n            form-control \n            px-4 mt-4 \n          ]\n        `}\n        onClick={clickHandler}\n      >\n        {t(\"button.goBack\")}\n      </button>\n    </div>\n  );\n};\n\nexport default GoBackButton;\n","import { useEffect, useMemo } from \"react\";\nimport { Redirect, useHistory } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { usePlantImage } from \"../../app/custom-hooks/usePlantImage\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport {\n  selectErrorMessage,\n  selectIsCreatingPlant,\n  selectIsUploadingPlantImage,\n  selectLoggedInUser,\n  setErrorMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { UploadImageData } from \"../../app/typeDefinitions\";\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst PlantCreateForm = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isUploadingPlantImage = useAppSelector(selectIsUploadingPlantImage);\n  const isCreatingPlant = useAppSelector(selectIsCreatingPlant);\n  const errorMessage = useAppSelector(selectErrorMessage);\n  const dispatch = useAppDispatch();\n  const { push, goBack } = useHistory();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { createImage } = usePlantImage();\n  const { createPlant } = usePlant();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      dispatch(setErrorMessage(null));\n      scrollToTop();\n    });\n  }, []);\n\n  const buttonState = useMemo(\n    (): boolean => (isUploadingPlantImage || isCreatingPlant ? true : false),\n    [isUploadingPlantImage, isCreatingPlant]\n  );\n\n  const handleUploadPlantImage = (\n    event: React.FormEvent<HTMLFormElement>\n  ): void => {\n    const { target } = event as any;\n    const { plantImage } = target as any;\n    const image = plantImage.files[0];\n    event.preventDefault();\n    const uploadForm = new FormData();\n    uploadForm.append(\"image\", image);\n    createImage(\n      uploadForm,\n      ({ imageUrl, imagePublicId }: UploadImageData): void => {\n        createPlant(target, { imageUrl, imagePublicId }, (): void => {\n          push(\"/plants/my-own\");\n        });\n      }\n    );\n  };\n\n  const convertErrorMessage = (errorMessage: string): string => {\n    switch (errorMessage) {\n      case \"Form: Name missing\":\n        return t(\"errorTexts.plants.createPlant.form.nameMissing\");\n      case \"Form: Description missing\":\n        return t(\"errorTexts.plants.createPlant.form.descriptionMissing\");\n      case \"Form: Size missing\":\n        return t(\"errorTexts.plants.createPlant.form.sizeMissing\");\n      case \"Form: Location missing\":\n        return t(\"errorTexts.plants.createPlant.form.locationMissing\");\n      case \"Form: Price missing\":\n        return t(\"errorTexts.plants.createPlant.form.priceMissing\");\n      case \"Form: Image missing\":\n        return t(\"errorTexts.plants.createPlant.form.imageMissing\");\n      default:\n        return t(\"errorTexts.general\");\n    }\n  };\n\n  const handleGoBack = (): void => {\n    goBack();\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-12 col-md-6 offset-md-4 mt-5\">\n        <h2 className=\"text-left mb-5\">\n          {t(\"texts.plants.createPlant.form.headline\")}\n        </h2>\n        <form className=\"form-style\" onSubmit={handleUploadPlantImage}>\n          <label htmlFor=\"enterName\">\n            {t(\"texts.plants.createPlant.form.name\")}\n          </label>\n          <input\n            type=\"text\"\n            id=\"enterName\"\n            name=\"name\"\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\n            className=\"form-control w-100 mb-4\"\n          />\n          <label htmlFor=\"enterDescription\">\n            {t(\"texts.plants.createPlant.form.description\")}\n          </label>\n          <input\n            type=\"text\"\n            id=\"enterDescription\"\n            name=\"description\"\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\n            className=\"form-control w-100 mb-4\"\n          />\n          <label htmlFor=\"enterSize\">\n            {t(\"texts.plants.createPlant.form.size\")}\n          </label>\n          <input\n            type=\"number\"\n            id=\"enterSize\"\n            name=\"size\"\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\n            min=\"1\"\n            className=\"form-control w-100 mb-4\"\n          />\n          <label htmlFor=\"enterLocation\">\n            {t(\"texts.plants.createPlant.form.location\")}\n          </label>\n          <select\n            id=\"enterLocation\"\n            name=\"location\"\n            className=\"form-control p-2 mb-4\"\n          >\n            <option>{t(\"select.location.title\")}</option>\n            <option value=\"sun\">{t(\"select.location.sun\")}</option>\n            <option value=\"shade\">{t(\"select.location.shade\")}</option>\n            <option value=\"sun and shade\">\n              {t(\"select.location.sunAndShade\")}\n            </option>\n          </select>\n          <label htmlFor=\"enterPrice\">\n            {t(\"texts.plants.createPlant.form.price\")}\n          </label>\n          <input\n            type=\"number\"\n            id=\"enterPrice\"\n            name=\"price\"\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\n            min=\"1\"\n            className=\"form-control w-100 mb-4\"\n          />\n          <label htmlFor=\"enterImage\">\n            {t(\"texts.plants.createPlant.form.image\")}\n          </label>\n          <input\n            type=\"file\"\n            id=\"enterImage\"\n            name=\"plantImage\"\n            className=\"form-control w-100 mb-4\"\n          />\n          <ErrorMessage\n            message={errorMessage}\n            outputFunction={convertErrorMessage}\n          />\n          <div className=\"col-12 text-right pr-0\">\n            <button\n              type=\"submit\"\n              disabled={buttonState}\n              className={`\n                [\n                  button\n                  button--width-small\n                ]\n                [\n                  btn\n                  btn-sm\n                  form-control\n                  px-4\n                  mr-0\n                  mb-2\n                ]\n              `}\n            >\n              {t(\"button.create\")}\n            </button>\n            <GoBackButton clickHandler={handleGoBack} />\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default PlantCreateForm;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nconst PlantDetailsBuyerItems = (): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <div>\n      <Link to=\"/plants/checkout\" className=\"navigation-link\">\n        <button\n          className={`\n            [ \n              button \n              button--width-small \n            ]\n            [ \n              btn\n              btn-sm\n              form-control\n              px-4\n              mx-2\n              mb-2 \n            ]          \n          `}\n        >\n          {t(\"button.buy\")}\n        </button>\n      </Link>\n      <Link to=\"/messages/create\" className=\"navigation-link\">\n        <button\n          className={`\n            [ \n              button \n              button--width-small \n            ]\n            [ \n              btn\n              btn-sm\n              form-control\n              px-4\n              mr-0\n              mb-2 \n            ]   \n          `}\n        >\n          {t(\"button.swap\")}\n        </button>\n      </Link>\n    </div>\n  );\n};\n\nexport default PlantDetailsBuyerItems;\n","import { useMemo } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport { usePlantImage } from \"../../app/custom-hooks/usePlantImage\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport {\n  selectIsDeletingMessage,\n  selectIsDeletingPlant,\n  selectIsDeletingPlantImage,\n  selectMessages,\n  selectPlant,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant } from \"../../app/typeDefinitions\";\n\nconst PlantDetailsCreatorChoice = (): JSX.Element => {\n  const plant = useAppSelector(selectPlant);\n  const isDeletingPlant = useAppSelector(selectIsDeletingPlant);\n  const isDeletingPlantImage = useAppSelector(selectIsDeletingPlantImage);\n  const messages = useAppSelector(selectMessages);\n  const isDeletingMessage = useAppSelector(selectIsDeletingMessage);\n  const { goBack } = useHistory();\n  const { t } = useTranslation();\n  const { deleteRemainingMessages } = useMessage();\n  const { deleteImage } = usePlantImage();\n  const { deletePlant } = usePlant();\n  const { _id, imagePublicId } = plant as Plant;\n\n  const buttonState = useMemo(\n    (): boolean =>\n      isDeletingMessage || isDeletingPlantImage || isDeletingPlant\n        ? true\n        : false,\n    [isDeletingMessage, isDeletingPlantImage, isDeletingPlant]\n  );\n\n  const handleDeletePlant = (): void => {\n    deleteRemainingMessages(messages, _id);\n    deleteImage({ imagePublicId });\n    deletePlant(_id, (): void => {\n      goBack();\n    });\n  };\n\n  return (\n    <div className=\"p-0\">\n      <Link to={\"/plants/update\"} className=\"navigation-link\">\n        <button\n          className={`\n            [ \n              button \n              button--width-small \n            ]\n            [ \n              btn\n              btn-sm\n              form-control\n              px-4\n              mx-2\n              mb-2 \n            ]   \n          `}\n        >\n          {t(\"button.update\")}\n        </button>\n      </Link>\n      <button\n        disabled={buttonState}\n        className={`\n          [ \n            button \n            button--width-small \n          ]\n          [ \n            btn\n            btn-sm\n            form-control\n            px-4\n            mr-0\n            mb-2 \n          ]    \n        `}\n        onClick={handleDeletePlant}\n      >\n        {t(\"button.delete\")}\n      </button>\n    </div>\n  );\n};\n\nexport default PlantDetailsCreatorChoice;\n","import PlantDetailsBuyerChoice from \"./PlantDetailsBuyerChoice\";\nimport PlantDetailsCreatorChoice from \"./PlantDetailsCreatorChoice\";\n\ninterface PlantDetailsUserChoiceProps {\n  isCreator: boolean;\n}\n\nconst PlantDetailsUserChoice = ({\n  isCreator,\n}: PlantDetailsUserChoiceProps): JSX.Element => {\n  if (isCreator) {\n    return <PlantDetailsCreatorChoice />;\n  }\n  return <PlantDetailsBuyerChoice />;\n};\n\nexport default PlantDetailsUserChoice;\n","interface PlantItemProps {\n  keyword: string;\n  description: string | undefined;\n}\n\nconst PlantItem = ({ keyword, description }: PlantItemProps): JSX.Element => {\n  return (\n    <div className=\"ml-2 mt-2\">\n      <span className=\"font-weight-bold\">{keyword}</span> {description}\n    </div>\n  );\n};\n\nexport default PlantItem;\n","import { useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { selectLoggedInUser } from \"../../reducer/jungleSwapSlice\";\nimport { Plant, User } from \"../../app/typeDefinitions\";\nimport PlantDetailsUserChoice from \"./PlantDetailsUserChoice\";\nimport PlantItem from \"./PlantItem\";\nimport GoBackButton from \"../helpers/GoBackButton\";\n\ninterface PlantItemsProps {\n  plant: Plant;\n}\n\nconst PlantItems = ({\n  plant: { name, description, size, imageUrl, location, price, creator },\n}: PlantItemsProps): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const { t } = useTranslation();\n  const { goBack } = useHistory();\n  const { _id } = loggedInUser as User;\n\n  const handleGoBack = (): void => {\n    goBack();\n  };\n\n  return (\n    <div className=\"col\">\n      <div className=\"[ thumbnail-card thumbnail-card--width-large ] [ card ]\">\n        <img\n          src={imageUrl}\n          loading=\"lazy\"\n          alt={name}\n          className=\"[ thumbnail-card thumbnail-card--width-large ] [ card-img-top ]\"\n        />\n        <PlantItem\n          keyword={t(\"texts.plants.plantDetails.name\")}\n          description={name}\n        />\n        <PlantItem\n          keyword={t(\"texts.plants.plantDetails.description\")}\n          description={description}\n        />\n        <PlantItem\n          keyword={t(\"texts.plants.plantDetails.size\")}\n          description={`${size} ${t(\"texts.plants.plantDetails.sizeUnit\")}`}\n        />\n        <PlantItem\n          keyword={t(\"texts.plants.plantDetails.likes\")}\n          description={location}\n        />\n        <div className=\"ml-2 mt-2\">\n          <span className=\"font-weight-bold\"></span>{\" \"}\n        </div>\n        <PlantItem\n          keyword={t(\"texts.plants.plantDetails.price\")}\n          description={`${price} ${t(\"texts.plants.plantDetails.currency\")}`}\n        />\n        <div className=\"col justify-content-center ml-2 mt-2\">\n          <div className=\"row-2 justify-content-center\">\n            <div className=\"card-body text-right pt-0\">\n              <PlantDetailsUserChoice\n                isCreator={(creator as User)._id === _id}\n              />\n              <GoBackButton clickHandler={handleGoBack} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlantItems;\n","import { useEffect } from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport {\n  selectIsFetchingPlant,\n  selectLoggedInUser,\n  selectPlant,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant, PlantId } from \"../../app/typeDefinitions\";\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\nimport PlantItems from \"../../components/plants/PlantItems\";\n\nconst PlantDetails = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const plant = useAppSelector(selectPlant);\n  const isFetchingPlant = useAppSelector(selectIsFetchingPlant);\n  const { plantId } = useParams<{ plantId: PlantId }>();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { fetchPlant } = usePlant();\n  const { scrollToTop } = scroll;\n  const { creator } = plant as Plant;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      fetchPlant(plantId, (): void => {\n        scrollToTop();\n      });\n    });\n  }, []);\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/sign-up\"} />;\n  }\n\n  return (\n    <div className=\"container row row-md-10 offset-md-4 mt-5\">\n      <div className=\"container pt-4 mt-4 mb-3\">\n        <h2>{t(\"texts.plants.plantDetails.headline\")}</h2>\n      </div>\n      {isFetchingPlant || !creator ? (\n        <WaitSpinner />\n      ) : (\n        <PlantItems plant={plant} />\n      )}\n    </div>\n  );\n};\n\nexport default PlantDetails;\n","import { useEffect, useMemo, useRef } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { usePlantImage } from \"../../app/custom-hooks/usePlantImage\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport {\n  setPlant,\n  setDestroyImageData,\n  selectLoggedInUser,\n  selectIsUploadingPlantImage,\n  selectIsDeletingPlantImage,\n  selectDestroyImageData,\n  selectPlant,\n  selectIsUpdatingPlant,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant, UploadImageData } from \"../../app/typeDefinitions\";\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\n\nconst PlantUpdateForm = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isUploadingPlantImage = useAppSelector(selectIsUploadingPlantImage);\n  const isDeletingPlantImage = useAppSelector(selectIsDeletingPlantImage);\n  const destroyImageData = useAppSelector(selectDestroyImageData);\n  const plant = useAppSelector(selectPlant);\n  const isUpdatingPlant = useAppSelector(selectIsUpdatingPlant);\n  const dispatch = useAppDispatch();\n  const selectElementRef = useRef<HTMLSelectElement | null>(null);\n  const { t } = useTranslation();\n  const { goBack } = useHistory();\n  const { protectRoute } = useRouting();\n  const { createImage, deleteImage } = usePlantImage();\n  const { updatePlant } = usePlant();\n  const { scrollToTop } = scroll;\n  const { name, description, size, imageUrl, price } = plant as Plant;\n\n  useEffect(() => {\n    const setPlantLocation = ({ location }: Plant): void => {\n      if (location) {\n        (selectElementRef.current as HTMLSelectElement).value = location;\n      }\n    };\n\n    protectRoute((): void => {\n      setPlantLocation(plant);\n      scrollToTop();\n    });\n  }, []);\n\n  const buttonState = useMemo(\n    (): boolean =>\n      isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant\n        ? true\n        : false,\n    [isUploadingPlantImage, isDeletingPlantImage, isUpdatingPlant]\n  );\n\n  const handlePlantEntryChange = (\n    {\n      target: { name, value },\n    }: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n    plant: Plant\n  ): void => {\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\n    switch (name) {\n      case \"name\":\n        clonedPlant.name = value;\n        break;\n      case \"description\":\n        clonedPlant.description = value;\n        break;\n      case \"size\":\n        clonedPlant.size = Number(value);\n        break;\n      case \"location\":\n        clonedPlant.location = value;\n        break;\n      case \"price\":\n        clonedPlant.price = Number(value);\n    }\n    dispatch(setPlant(clonedPlant));\n  };\n\n  const handlePlantImageChange = (\n    { target }: React.ChangeEvent<HTMLInputElement>,\n    { imagePublicId }: Plant\n  ): void => {\n    const image = (target.files as any)[0];\n    dispatch(setDestroyImageData({ imagePublicId }));\n    const uploadForm = new FormData();\n    uploadForm.append(\"image\", image);\n    createImage(\n      uploadForm,\n      ({ imageUrl, imagePublicId }: UploadImageData): void => {\n        const clonedPlant = JSON.parse(JSON.stringify(plant));\n        clonedPlant.imagePublicId = imagePublicId;\n        clonedPlant.imageUrl = imageUrl;\n        dispatch(setPlant(clonedPlant));\n      }\n    );\n  };\n\n  const handleUpdatePlant = () => {\n    if (destroyImageData) {\n      deleteImage(destroyImageData);\n    }\n    updatePlant(plant, (): void => {\n      goBack();\n    });\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5 \">\n      <div className=\"col-12 col-md-6 offset-md-6 mt-2\">\n        <h2 className=\"text-left mt-5 mb-4 \">\n          {t(\"texts.plants.updatePlant.form.headline\")}\n        </h2>\n        <div className=\"[ thumbnail-card thumbnail-card--width-large ] [ card mb-5 ]\">\n          {isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant ? (\n            <WaitSpinner />\n          ) : (\n            <img\n              src={imageUrl}\n              loading=\"lazy\"\n              alt={name}\n              className=\"[ image image--size-medium ] [ mb-2 ]\"\n            />\n          )}\n          <div className=\"card-body\">\n            <label htmlFor=\"updateName\">\n              {t(\"texts.plants.updatePlant.form.name\")}\n            </label>\n            <input\n              type=\"text\"\n              id=\"updateName\"\n              name=\"name\"\n              value={name}\n              className=\"form-control mb-4\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n                handlePlantEntryChange(event, plant);\n              }}\n            />\n            <label htmlFor=\"updateDescription\">\n              {t(\"texts.plants.updatePlant.form.description\")}\n            </label>\n            <input\n              type=\"text\"\n              id=\"updateDescription\"\n              name=\"description\"\n              value={description}\n              className=\"form-control mb-4\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n                handlePlantEntryChange(event, plant);\n              }}\n            />\n            <label htmlFor=\"updateSize\">\n              {t(\"texts.plants.updatePlant.form.size\")}\n            </label>\n            <input\n              type=\"number\"\n              id=\"updateSize\"\n              name=\"size\"\n              value={size}\n              min=\"1\"\n              className=\"form-control mb-4\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n                handlePlantEntryChange(event, plant);\n              }}\n            />\n            <label htmlFor=\"updateLocation\">\n              {t(\"texts.plants.updatePlant.form.location\")}\n            </label>\n            <select\n              ref={selectElementRef}\n              id=\"updateLocation\"\n              name=\"location\"\n              className=\"form-control px-2 mb-4\"\n              onChange={(event: React.ChangeEvent<HTMLSelectElement>): void => {\n                handlePlantEntryChange(event, plant);\n              }}\n            >\n              <option value=\"sun\">{t(\"select.location.sun\")}</option>\n              <option value=\"shade\">{t(\"select.location.shade\")}</option>\n              <option value=\"sun and shade\">\n                {t(\"select.location.sunAndShade\")}\n              </option>\n            </select>\n            <label htmlFor=\"updatePrice\">\n              {t(\"texts.plants.updatePlant.form.price\")}\n            </label>\n            <input\n              type=\"number\"\n              id=\"updatePrice\"\n              name=\"price\"\n              value={price}\n              min=\"1\"\n              className=\"form-control mb-4\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n                handlePlantEntryChange(event, plant);\n              }}\n            />\n            <label htmlFor=\"updateImage\">\n              {t(\"texts.plants.updatePlant.form.image\")}\n            </label>\n            <input\n              type=\"file\"\n              id=\"updateImage\"\n              name=\"plantImage\"\n              className=\"form-control mb-4\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n                handlePlantImageChange(event, plant);\n              }}\n            />\n            <div className=\"col-12 text-right pr-0\">\n              <button\n                disabled={buttonState}\n                className={`\n                  [\n                    button \n                    button--width-small\n                  ]\n                  [\n                    btn\n                    btn-sm\n                    form-control\n                    px-4\n                    mr-0\n                    mb-2\n                  ]\n                `}\n                onClick={handleUpdatePlant}\n              >\n                {t(\"button.save\")}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlantUpdateForm;\n","import { useHistory } from \"react-router\";\nimport { animateScroll as scroll } from \"react-scroll\";\n\ninterface NavigationMethods {\n  goToHome: Function;\n  goToRequests: Function;\n  goToReplies: Function;\n}\n\nexport const useNavigation = (): NavigationMethods => {\n  const { push } = useHistory();\n  const { scrollToTop } = scroll;\n\n  return {\n    goToHome: (): void => {\n      push(\"/\");\n      scrollToTop();\n    },\n\n    goToRequests: (): void => {\n      push(\"/requests/fetch-all\");\n      scrollToTop();\n    },\n\n    goToReplies: (): void => {\n      push(\"/replies/fetch-all\");\n      scrollToTop();\n    },\n  };\n};\n","interface PaymentErrorMessageProps {\n  errorMessage: string;\n}\n\nconst PaymentErrorMessage = ({\n  errorMessage,\n}: PaymentErrorMessageProps): JSX.Element | null => {\n  if (!errorMessage) {\n    return null;\n  }\n\n  return (\n    <div role=\"alert\" className=\"card-error\">\n      {errorMessage}\n    </div>\n  );\n};\n\nexport default PaymentErrorMessage;\n","import { useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { usePayment } from \"../../app/custom-hooks/usePayment\";\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport {\n  scrollToPlants,\n  selectClientSecret,\n  selectPlant,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant } from \"../../app/typeDefinitions\";\nimport { Stripe } from \"@stripe/stripe-js\";\nimport PaymentErrorMessage from \"./PaymentErrorMessage\";\nimport GoBackButton from \"../helpers/GoBackButton\";\n\ninterface CardStyle {\n  style: {\n    base: {\n      color: string;\n      fontFamily: string;\n      fontSmoothing: string;\n      fontSize: string;\n      \"::placeholder\": { color: string };\n    };\n    invalid: {\n      color: string;\n      iconColor: string;\n    };\n  };\n}\n\nconst PaymentCheckoutForm = (): JSX.Element => {\n  const [isSucceeded, setIsSucceeded] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [paymentError, setPaymentError] = useState(\"\");\n  const clientSecret = useAppSelector(selectClientSecret);\n  const plant = useAppSelector(selectPlant);\n  const dispatch = useAppDispatch();\n  const { push } = useHistory();\n  const stripe = useStripe();\n  const elements = useElements();\n  const { initializePayment } = usePayment();\n  const { t } = useTranslation();\n  const { goToHome } = useNavigation();\n  const { _id, name, price } = plant as Plant;\n  const cardStyle: CardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": { color: \"#32325d\" },\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\",\n      },\n    },\n  };\n\n  useEffect(() => {\n    initializePayment(plant);\n\n    return (): void => {\n      push(\"/\");\n      dispatch(scrollToPlants());\n    };\n  }, []);\n\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\n    event.preventDefault();\n    // Stripe.js has not yet been loaded\n    if (!stripe || !elements) {\n      return;\n    }\n    setIsProcessing(true);\n    const payload = await (stripe as Stripe).confirmCardPayment(clientSecret, {\n      payment_method: { card: elements.getElement(CardElement) } as any,\n    });\n    if (payload.error) {\n      setPaymentError(`Payment failed ${payload.error.message}`);\n      setIsProcessing(false);\n    } else {\n      setPaymentError(\"\");\n      setIsProcessing(false);\n      setIsSucceeded(true);\n    }\n  };\n\n  const handleInputChanges = async ({ empty, error }: any): Promise<void> => {\n    setIsDisabled(empty);\n    setPaymentError(error ? error.message : \"\");\n  };\n\n  const processingState = (): JSX.Element | string =>\n    isProcessing ? (\n      <div id=\"spinner\" className=\"spinner font-weight-bold\" />\n    ) : (\n      t(\"texts.plants.checkout.form.payNow\")\n    );\n\n  const messageVisibility = (): string =>\n    isSucceeded ? \"result-message text-center\" : \"result-message--hidden\";\n\n  const handleGoBack = (): void => {\n    goToHome();\n  };\n\n  return (\n    <div className=\"container col-md-9 col-sm-12\">\n      <h2 className=\"[ payment-checkout-form__headline ] [ text-break mb-4 ]\">\n        {name}\n      </h2>\n      <h3 className=\"mb-4\">\n        {t(\"texts.plants.checkout.form.price\")} {price}{\" \"}\n        {t(\"texts.plants.checkout.form.currency\")}\n      </h3>\n      <form\n        id=\"payment-form\"\n        className=\"[ payment-checkout-form ] [ mt-5 ]\"\n        onSubmit={handleSubmitPayment}\n      >\n        <CardElement\n          id=\"card-element\"\n          options={cardStyle}\n          className=\"p-2\"\n          onChange={handleInputChanges}\n        />\n        <div className=\"row justify-content-center\">\n          <button\n            type=\"submit\"\n            id=\"submit\"\n            disabled={isProcessing || isDisabled || isSucceeded}\n            className=\"btn btn-sm card-button mt-5 mb-4\"\n          >\n            <span id=\"button-text\">{processingState()}</span>\n          </button>\n        </div>\n        {/* Show any error that happens when processing the payment */}\n        <PaymentErrorMessage errorMessage={paymentError} />\n        {/* Show success message upon completion */}\n        <p className={messageVisibility()}>\n          {t(\"texts.plants.checkout.form.paymentSuccessful\")}\n        </p>\n      </form>\n      <div className=\"row justify-content-center\">\n        <GoBackButton clickHandler={handleGoBack} />\n      </div>\n    </div>\n  );\n};\n\nexport default PaymentCheckoutForm;\n","import { useAppDispatch } from \"../hooks\";\nimport {\n  createPayment,\n  setClientSecret,\n  setErrorMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant } from \"../typeDefinitions\";\n\ninterface PaymentMethods {\n  initializePayment: Function;\n}\n\nexport const usePayment = (): PaymentMethods => {\n  const dispatch = useAppDispatch();\n\n  return {\n    initializePayment: (plant: Plant): void => {\n      dispatch(createPayment(plant))\n        .unwrap()\n        .then((payment: any): void => {\n          dispatch(setClientSecret(payment.clientSecret));\n        })\n        .catch((rejectedValue: any): void => {\n          dispatch(setErrorMessage(rejectedValue.message));\n        });\n    },\n  };\n};\n","import { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { selectLoggedInUser } from \"../../reducer/jungleSwapSlice\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport PaymentCheckoutForm from \"../../components/apis/PaymentCheckoutForm\";\n\nconst PaymentCheckoutView = (): JSX.Element => {\n  const [stripePromise] = useState(() =>\n    loadStripe(\n      \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\n    )\n  );\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const { protectRoute } = useRouting();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      scrollToTop();\n    });\n  }, []);\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-11 col-md-6 offset-1 offset-md-5 mt-5\">\n        <Elements stripe={stripePromise}>\n          <PaymentCheckoutForm />\n        </Elements>\n      </div>\n    </div>\n  );\n};\n\nexport default PaymentCheckoutView;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { User, Message, Plant } from \"../../app/typeDefinitions\";\n\ninterface RequestThumbnailProps {\n  message: Message;\n}\n\nconst RequestTile = ({\n  message: { _id, buyer, plant },\n}: RequestThumbnailProps): JSX.Element => {\n  const { t } = useTranslation();\n  const { name } = (plant as Plant) || {};\n  const { username } = buyer as User;\n\n  return (\n    <div className=\"card p-3 mt-4\">\n      <h4>\n        {t(\"texts.requests.requestTile.headline\")} {name}\n      </h4>\n      <h5>\n        {t(\"texts.requests.requestTile.subheadline\")} {username}\n      </h5>\n      <div className=\"text-center\">\n        <Link to={`/requests/fetch/${_id}`} className=\"navigation-link\">\n          <button className=\"[ button button--width-small ] [ btn form-control ]\">\n            {t(\"link.details\")}\n          </button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default RequestTile;\n","import { useAppSelector } from \"../../app/hooks\";\nimport {\n  selectLoggedInUser,\n  selectMessages,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Message, User } from \"../../app/typeDefinitions\";\nimport RequestTile from \"./RequestTile\";\n\nconst RequestsCollection = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const messages = useAppSelector(selectMessages);\n\n  return (\n    <div>\n      {messages.map((message: Message): JSX.Element | null => {\n        const { _id, seller, messageState } = message;\n        return (seller as User)._id === (loggedInUser as User)._id &&\n          messageState === true ? (\n          <RequestTile message={message} key={_id} />\n        ) : null;\n      })}\n    </div>\n  );\n};\n\nexport default RequestsCollection;\n","import { useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\nimport {\n  selectAmountOfRequests,\n  selectiIsFetchingMessages,\n  selectIsUserChange,\n  selectLoggedInUser,\n  setIsNewRequest,\n  setStartAmountOfRequests,\n} from \"../../reducer/jungleSwapSlice\";\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\nimport RequestsCollection from \"../../components/requests/RequestsCollection\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst RequestsView = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isUserChange = useAppSelector(selectIsUserChange);\n  const isFetchingMessages = useAppSelector(selectiIsFetchingMessages);\n  const amountOfRequests = useAppSelector(selectAmountOfRequests);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { fetchMessages } = useMessage();\n  const { goToHome } = useNavigation();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    const resetRequestVariableAndScrollToTop = (): void => {\n      dispatch(setIsNewRequest(false));\n      scrollToTop();\n    };\n\n    protectRoute((): void => {\n      fetchMessages((): void => {\n        isUserChange && dispatch(setStartAmountOfRequests());\n        resetRequestVariableAndScrollToTop();\n      });\n    });\n    return () => {\n      resetRequestVariableAndScrollToTop();\n    };\n  }, []);\n\n  const handleGoBack = (): void => {\n    goToHome();\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2>{t(\"texts.requests.overview.headline\")}</h2>\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\n        <GoBackButton clickHandler={handleGoBack} />\n        {isFetchingMessages ? <WaitSpinner /> : <RequestsCollection />}\n        {amountOfRequests !== 0 && <GoBackButton clickHandler={handleGoBack} />}\n      </div>\n    </div>\n  );\n};\n\nexport default RequestsView;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { User, Plant, Message } from \"../../app/typeDefinitions\";\n\ninterface ReplyThumbnailProps {\n  message: Message;\n}\n\nconst ReplyThumbnail = ({\n  message: { _id, seller, plant },\n}: ReplyThumbnailProps): JSX.Element => {\n  const { name } = plant as Plant;\n  const { username } = seller as User;\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"card p-3 mt-4 \">\n      <h4>\n        {t(\"texts.replies.replyTile.headline\")} \"{name}\"\n      </h4>\n      <h5>\n        {t(\"texts.replies.replyTile.subheadline\")} {username}\n      </h5>\n      <div className=\"text-center\">\n        <Link to={`/replies/fetch/${_id}`} className=\"navigation-link\">\n          <button className=\"[ button button--width-small ] [ btn form-control ]\">\n            {t(\"link.details\")}\n          </button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default ReplyThumbnail;\n","import { useAppSelector } from \"../../app/hooks\";\nimport {\n  selectLoggedInUser,\n  selectMessages,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Message, User } from \"../../app/typeDefinitions\";\nimport ReplyTile from \"./ReplyTile\";\n\nconst RepliesCollection = (): JSX.Element | null => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const messages = useAppSelector(selectMessages);\n\n  return (\n    <div>\n      {messages.map((message: Message): JSX.Element | null => {\n        const { _id, buyer, reply } = message;\n        return (buyer as User)._id === (loggedInUser as User)._id &&\n          reply !== \"\" ? (\n          <ReplyTile message={message} key={_id} />\n        ) : null;\n      })}\n    </div>\n  );\n};\n\nexport default RepliesCollection;\n","import { useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\nimport {\n  selectAmountOfReplies,\n  selectiIsFetchingMessages,\n  selectIsUserChange,\n  selectLoggedInUser,\n  setIsNewReply,\n  setStartAmountOfReplies,\n} from \"../../reducer/jungleSwapSlice\";\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\nimport RepliesCollection from \"../../components/replies/RepliesCollection\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst RepliesView = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isUserChange = useAppSelector(selectIsUserChange);\n  const isFetchingMessages = useAppSelector(selectiIsFetchingMessages);\n  const amountOfReplies = useAppSelector(selectAmountOfReplies);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { fetchMessages } = useMessage();\n  const { goToHome } = useNavigation();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    const resetReplyVariableAndScrollToTop = (): void => {\n      dispatch(setIsNewReply(false));\n      scrollToTop();\n    };\n\n    protectRoute((): void => {\n      fetchMessages((): void => {\n        isUserChange && dispatch(setStartAmountOfReplies());\n        resetReplyVariableAndScrollToTop();\n      });\n    });\n\n    return () => {\n      resetReplyVariableAndScrollToTop();\n    };\n  }, []);\n\n  const handleGoBack = (): void => {\n    goToHome();\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2>{t(\"texts.replies.overview.headline\")}</h2>\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\n        <GoBackButton clickHandler={handleGoBack} />\n        {isFetchingMessages ? <WaitSpinner /> : <RepliesCollection />}\n        {amountOfReplies !== 0 && <GoBackButton clickHandler={handleGoBack} />}\n      </div>\n    </div>\n  );\n};\n\nexport default RepliesView;\n","import { useEffect, useMemo } from \"react\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport {\n  selectErrorMessage,\n  selectIsCreatingMessage,\n  selectLoggedInUser,\n  selectPlant,\n  setErrorMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User, Plant, Message } from \"../../app/typeDefinitions\";\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst RequestCreateForm = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const plant = useAppSelector(selectPlant);\n  const isCreatingMessage = useAppSelector(selectIsCreatingMessage);\n  const errorMessage = useAppSelector(selectErrorMessage);\n  const dispatch = useAppDispatch();\n  const { goBack } = useHistory();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { createMessage } = useMessage();\n  const { scrollToTop } = scroll;\n  const { name } = plant as Plant;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      dispatch(setErrorMessage(null));\n      scrollToTop();\n    });\n  }, []);\n\n  const buttonState = useMemo(\n    (): boolean => (isCreatingMessage ? true : false),\n    [isCreatingMessage]\n  );\n\n  const handleCreateMessageForRequest = (\n    event: React.FormEvent<HTMLFormElement>,\n    { _id, creator }: Plant\n  ): void => {\n    const {\n      target: {\n        request: { value },\n      },\n    } = event as any;\n    const newMessage: Message = {\n      seller: (creator as User)._id,\n      plant: _id,\n      request: value,\n    };\n    event.preventDefault();\n    createMessage(newMessage, (): void => {\n      goBack();\n    });\n  };\n\n  const convertErrorMessage = (errorMessage: string): string => {\n    switch (errorMessage) {\n      case \"Form: Request text missing\":\n        return t(\"errorTexts.messages.createRequest.form.requestTextMissing\");\n      default:\n        return t(\"errorTexts.general\");\n    }\n  };\n\n  const handleGoBack = (): void => {\n    goBack();\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2 className=\"mb-4\">\n          {t(\"texts.requests.createRequest.form.headline\")}\n        </h2>\n        <h3 className=\"mb-4\">\n          {t(\"texts.requests.createRequest.form.subheadline\")} \"{name}\"\n        </h3>\n        <form\n          className=\"request-create-form pl-0\"\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\n            handleCreateMessageForRequest(event, plant);\n          }}\n        >\n          <div>\n            <textarea\n              name=\"request\"\n              cols={35}\n              rows={7}\n              className=\"form-control w-100 mb-4\"\n            />\n          </div>\n          <ErrorMessage\n            message={errorMessage}\n            outputFunction={convertErrorMessage}\n          />\n          <div className=\"text-right\">\n            <button\n              type=\"submit\"\n              disabled={buttonState}\n              className={`\n                [ \n                  button\n                  button--width-small \n                ] \n                [ \n                  btn \n                  btn-sm \n                  form-control \n                  px-4 \n                  mr-0 \n                  mb-4 \n                ]\n              `}\n            >\n              {t(\"button.send\")}\n            </button>\n            <GoBackButton clickHandler={handleGoBack} />\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default RequestCreateForm;\n","import WaitSpinner from \"./WaitSpinner\";\n\ninterface WaitSpinnerTextProps {\n  text: string;\n}\n\nconst WaitSpinnerText = ({ text }: WaitSpinnerTextProps): JSX.Element => {\n  return (\n    <div className=\"container d-flex align-items-center justify-content-center mt-5\">\n      <WaitSpinner />\n      <span className=\"font-weight-bold\">{text}</span>\n    </div>\n  );\n};\n\nexport default WaitSpinnerText;\n","interface ReplyProps {\n  headline: string;\n  text: string | undefined;\n}\n\nconst Reply = ({ headline, text }: ReplyProps): JSX.Element | null => {\n  if (!text) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h5>{headline}</h5>\n      <p className=\"text-field p-3 mb-4\">{text}</p>\n    </div>\n  );\n};\n\nexport default Reply;\n","import { useEffect } from \"react\";\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\nimport {\n  setMessage,\n  decreaseAmountOfRequests,\n  selectLoggedInUser,\n  selectIsFetchingMessage,\n  selectMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User, Plant, Message, MessageId } from \"../../app/typeDefinitions\";\nimport WaitSpinnerText from \"../../components/spinners/WaitSpinnerText\";\nimport Reply from \"../../components/replies/Reply\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst RequestDetails = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isFetchingMessage = useAppSelector(selectIsFetchingMessage);\n  const message = useAppSelector(selectMessage);\n  const { messageId } = useParams<{ messageId: MessageId }>();\n  const dispatch = useAppDispatch();\n  const { goBack } = useHistory();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { fetchMessage, updateMessage } = useMessage();\n  const { goToRequests } = useNavigation();\n  const { scrollToTop } = scroll;\n  const { _id, buyer, plant, request, reply } = message as Message;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      fetchMessage(messageId, (): void => {\n        scrollToTop();\n      });\n    });\n  }, []);\n\n  const handleChangeMessageState = (message: Message): void => {\n    const setBuyerMessageInactive = (message: Message): Message => {\n      const clonedMessage: Message = JSON.parse(JSON.stringify(message));\n      clonedMessage.messageState = false;\n      dispatch(setMessage(clonedMessage));\n      return clonedMessage;\n    };\n\n    const updateBuyerMessage = (updatedMessage: Message) => {\n      updateMessage(updatedMessage, (): void => {\n        dispatch(decreaseAmountOfRequests());\n        goBack();\n      });\n    };\n\n    const updatedMessage = setBuyerMessageInactive(message);\n    updateBuyerMessage(updatedMessage);\n  };\n\n  const handleGoBack = (): void => {\n    goToRequests();\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  if (isFetchingMessage || !buyer || !plant) {\n    return <WaitSpinnerText text={\"Loading request\"} />;\n  }\n  const { name } = plant as Plant;\n  const { username } = buyer as User;\n\n  return (\n    <div className=\"container row mt-5 \">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2 className=\"mb-5\">\n          {t(\"texts.requests.requestDetails.headline\")} {name}\n        </h2>\n        <h5>\n          {t(\"texts.requests.requestDetails.subheadline\")} {username}\n        </h5>\n        <p className=\"[ text-field ] [ p-3 mb-4 ]\">{request}</p>\n        <Reply\n          headline={t(\"texts.requests.requestDetails.yourReply\")}\n          text={reply}\n        />\n        <div className=\"text-right px-3\">\n          {!reply && (\n            <Link to={`/messages/update/${_id}`} className=\"navigation-link\">\n              <button\n                className={`\n                  [ \n                    button\n                    button--width-small \n                  ] \n                  [ \n                    btn \n                    btn-sm \n                    form-control \n                    px-4 \n                    mx-2 \n                    mb-1 \n                  ]\n                `}\n              >\n                {t(\"button.reply\")}\n              </button>\n            </Link>\n          )}\n          <button\n            className={`\n              [ \n                button\n                button--width-small \n              ] \n              [ \n                btn \n                btn-sm \n                form-control \n                px-4\n                ml-2 \n                mr-0 \n                mb-1 \n              ]\n            `}\n            onClick={(): void => {\n              handleChangeMessageState(message);\n            }}\n          >\n            {t(\"button.done\")}\n          </button>\n        </div>\n        <div className=\"text-right px-3\">\n          <GoBackButton clickHandler={handleGoBack} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RequestDetails;\n","import { useEffect, useMemo } from \"react\";\nimport { useParams, useHistory, Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport { useNavigation } from \"../../app/custom-hooks/useNavigation\";\nimport {\n  decreaseAmountOfReplies,\n  selectIsDeletingMessage,\n  selectIsFetchingMessage,\n  selectLoggedInUser,\n  selectMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { User, Plant, Message, MessageId } from \"../../app/typeDefinitions\";\nimport WaitSpinnerText from \"../../components/spinners/WaitSpinnerText\";\nimport Reply from \"../../components/replies/Reply\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst ReplyDetails = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const message = useAppSelector(selectMessage);\n  const isFetchingMessage = useAppSelector(selectIsFetchingMessage);\n  const isDeletingMessage = useAppSelector(selectIsDeletingMessage);\n  const { messageId } = useParams<{ messageId: MessageId }>();\n  const dispatch = useAppDispatch();\n  const { goBack } = useHistory();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { fetchMessage, deleteMessage } = useMessage();\n  const { goToReplies } = useNavigation();\n  const { scrollToTop } = scroll;\n  const { _id, seller, plant, request, reply } = message as Message;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      fetchMessage(messageId, (): void => {\n        scrollToTop();\n      });\n    });\n  }, []);\n\n  const buttonState = useMemo(\n    (): boolean => (isDeletingMessage ? true : false),\n    [isDeletingMessage]\n  );\n\n  const handleDeleteMessage = (messageId: MessageId): void => {\n    deleteMessage(messageId, (): void => {\n      dispatch(decreaseAmountOfReplies());\n      goBack();\n    });\n  };\n\n  const handleGoBack = (): void => {\n    goToReplies();\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  if (isFetchingMessage || !seller || !plant) {\n    return <WaitSpinnerText text={\"Loading reply\"} />;\n  }\n  const { name } = plant as Plant;\n  const { username } = seller as User;\n\n  return (\n    <div className=\"container row mt-5 \">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-5\">\n        <h2 className=\"mb-5\">\n          {t(\"texts.replies.replyDetails.headline\")} {name}\n        </h2>\n        <p className=\"[ text-field ] [ p-3 mb-4 ]\">{request}</p>\n        <Reply\n          headline={`${t(\"texts.replies.replyDetails.replyBy\")} ${username}`}\n          text={reply}\n        />\n        <div className=\"text-right px-3\">\n          <button\n            disabled={buttonState}\n            className={`\n              [\n                button \n                button--width-small\n              ]\n              [\n                btn\n                btn-sm\n                form-control\n                px-4\n                mr-0\n                mb-1\n              ]\n            `}\n            onClick={(): void => {\n              handleDeleteMessage(_id as MessageId);\n            }}\n          >\n            {t(\"button.delete\")}\n          </button>\n        </div>\n        <div className=\"text-right px-3\">\n          <GoBackButton clickHandler={handleGoBack} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReplyDetails;\n","import { useEffect, useMemo } from \"react\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { useMessage } from \"../../app/custom-hooks/useMessage\";\nimport {\n  selectErrorMessage,\n  selectIsUpdatingMessage,\n  selectLoggedInUser,\n  selectMessage,\n  setMessage,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Message } from \"../../app/typeDefinitions\";\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\n\nconst RequestUpdateForm = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const message = useAppSelector(selectMessage);\n  const isUpdatingMessage = useAppSelector(selectIsUpdatingMessage);\n  const errorMessage = useAppSelector(selectErrorMessage);\n  const dispatch = useAppDispatch();\n  const { goBack } = useHistory();\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { updateMessage } = useMessage();\n  const { scrollToTop } = scroll;\n  const { request } = message as Message;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      scrollToTop();\n    });\n  }, []);\n\n  const buttonState = useMemo(\n    (): boolean => (isUpdatingMessage ? true : false),\n    [isUpdatingMessage]\n  );\n\n  const handleCreateReply = (\n    { target: { value } }: React.ChangeEvent<HTMLTextAreaElement>,\n    message: Message\n  ): void => {\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\n    clonedMessage.reply = value;\n    dispatch(setMessage(clonedMessage));\n  };\n\n  const handleUpdateMessage = (updatedMessage: Message): void => {\n    updateMessage(updatedMessage, (): void => {\n      goBack();\n    });\n  };\n\n  const handleGoBack = () => {\n    goBack();\n  };\n\n  const convertErrorMessage = (errorMessage: string): string => {\n    switch (errorMessage) {\n      case \"Form: Reply text missing\":\n        return t(\"errorTexts.messages.updateRequest.form.replyTextMissing\");\n      default:\n        return t(\"errorTexts.general\");\n    }\n  };\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container row mt-5 \">\n      <div className=\"col-11 col-md-5 offset-1 offset-md-5 mt-2\">\n        <h2 className=\"mt-5 mb-4\">\n          {t(\"texts.requests.updateRequest.form.headline\")}\n        </h2>\n        <div className=\"[ thumbnail-card thumbnail-card--width-small ] [ card mb-5 ]\">\n          <div className=\"card-body\">\n            <p>{request}</p>\n            <textarea\n              name=\"reply\"\n              placeholder={t(\n                \"texts.requests.updateRequest.form.replyPlaceholder\"\n              )}\n              cols={31}\n              rows={6}\n              className=\"form-control w-100 mb-4\"\n              onChange={(\n                event: React.ChangeEvent<HTMLTextAreaElement>\n              ): void => {\n                handleCreateReply(event, message);\n              }}\n            />\n            <ErrorMessage\n              message={errorMessage}\n              outputFunction={convertErrorMessage}\n            />\n            <div className=\"text-right px-3\">\n              <button\n                disabled={buttonState}\n                className={`\n                  [\n                    button\n                    button--width-small\n                  ]\n                  [\n                    btn \n                    btn-sm \n                    form-control \n                    px-4\n                    mr-0\n                    mb-2\n                  ]                \n                `}\n                onClick={(): void => {\n                  handleUpdateMessage(message);\n                }}\n              >\n                {t(\"button.submit\")}\n              </button>\n              <GoBackButton clickHandler={handleGoBack} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RequestUpdateForm;\n","import { useTranslation } from \"react-i18next\";\n\nconst Unauthorized = (): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <div\n      className={`\n        [\n          unauthorized\n        ]\n        [\n          position-absolute \n          d-flex \n          justify-content-center \n          align-items-center \n          w-100  \n          overflow-hidden\n          text-center\n        ]\n      `}\n    >\n      <div>\n        <h1 className=\"unauthorized__headline\">\n          {t(\"texts.unauthorized.headline\")}\n        </h1>\n        <h2 className=\"[ unauthorized__subheadline1 ] [ mb-4 ]\">\n          {t(\"texts.unauthorized.subheadline1\")}\n        </h2>\n        <h3 className=\"[ unauthorized__subheadline2 ] [ text-uppercase ]\">\n          {t(\"texts.unauthorized.subheadline2\")}\n        </h3>\n      </div>\n    </div>\n  );\n};\n\nexport default Unauthorized;\n","import { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nconst NotFound = (): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <div\n      className={`\n        [\n          not-found \n        ]\n        [\n          position-absolute \n          d-flex \n          justify-content-center \n          align-items-center \n          w-100  \n          overflow-hidden\n          text-center\n        ]\n      `}\n    >\n      <div>\n        <h1 className=\"not-found__headline\">{t(\"texts.notFound.headline\")}</h1>\n        <h2 className=\"[ not-found__subheadline1 ] [ mb-4 }\">\n          {t(\"texts.notFound.subheadline1\")}\n        </h2>\n        <h3 className=\"[ not-found__subheadline2 ] [ text-uppercase mb-4 ]\">\n          {t(\"texts.notFound.subheadline2\")}\n        </h3>\n        <Link to={\"/\"} className=\"navigation-link\">\n          <button\n            className={`\n              [ \n                button \n                button--width-small \n              ] \n              [ \n                btn \n                btn-sm \n                form-control \n                px-3 \n              ]\n            `}\n          >\n            {t(\"button.takeMeHome\")}\n          </button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import { useEffect } from \"react\";\nimport { useChat } from \"../../app/custom-hooks/useChat\";\n\nconst KommunicateChat = (): JSX.Element => {\n  const { createLauncherIcon } = useChat();\n\n  useEffect(() => {\n    createLauncherIcon(document, (window as any).kommunicate ?? {});\n  }, []);\n\n  return <div />;\n};\n\nexport default KommunicateChat;\n","interface ChatMethods {\n  createLauncherIcon: Function;\n}\n\ninterface KommunicateSettings {\n  appId: string;\n  popupWidget: boolean;\n  automaticChatOpenOnNavigation: boolean;\n}\n\nexport const useChat = (): ChatMethods => {\n  return {\n    createLauncherIcon: (htmlDocument: Document, method: any): void => {\n      const kommunicateSettings: KommunicateSettings = {\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\n        popupWidget: true,\n        automaticChatOpenOnNavigation: true,\n      };\n      const scriptElement = htmlDocument.createElement(\"script\");\n      scriptElement.type = \"text/javascript\";\n      scriptElement.async = true;\n      scriptElement.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\n      const headElement = htmlDocument.getElementsByTagName(\"head\")[0];\n      headElement.appendChild(scriptElement);\n      (window as any).kommunicate = method;\n      method._globals = kommunicateSettings;\n    },\n  };\n};\n","import { useAppSelector } from \"../../app/hooks\";\nimport {\n  selectLoggedInUser,\n  selectPlants,\n} from \"../../reducer/jungleSwapSlice\";\nimport { Plant, User } from \"../../app/typeDefinitions\";\nimport PlantThumbnail from \"./PlantThumbnail\";\n\nconst PlantsCreatedCollection = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const plants = useAppSelector(selectPlants);\n\n  return (\n    <div\n      className={`\n        row\n        row-cols-1\n        row-cols-md-2\n        row-cols-lg-2\n        row-cols-xl-3\n        row-cols-xxl-3\n      `}\n    >\n      {plants.map((plant: Plant): JSX.Element | null => {\n        const { _id, creator } = plant;\n        return (creator as User)._id === (loggedInUser as User)._id ? (\n          <PlantThumbnail plant={plant} key={_id} />\n        ) : null;\n      })}\n    </div>\n  );\n};\n\nexport default PlantsCreatedCollection;\n","import { useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\nimport { usePlant } from \"../../app/custom-hooks/usePlant\";\nimport {\n  selectIsFetchingPlants,\n  selectLoggedInUser,\n} from \"../../reducer/jungleSwapSlice\";\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\nimport PlantsCreatedCollection from \"../../components/plants/PlantsCreatedCollection\";\n\nconst PlantsCreatedView = (): JSX.Element => {\n  const loggedInUser = useAppSelector(selectLoggedInUser);\n  const isFetchingPlants = useAppSelector(selectIsFetchingPlants);\n  const { t } = useTranslation();\n  const { protectRoute } = useRouting();\n  const { fetchPlants } = usePlant();\n  const { scrollToTop } = scroll;\n\n  useEffect(() => {\n    protectRoute((): void => {\n      fetchPlants((): void => {\n        scrollToTop();\n      });\n    });\n  }, []);\n\n  if (!loggedInUser) {\n    return <Redirect to={\"/auth/unauthorized\"} />;\n  }\n\n  return (\n    <div className=\"container mt-5\">\n      <div className=\"mt-5 mb-5\">\n        <h2 className=\"plants-created-view__headline\">\n          {t(\"texts.plants.myPlants.headline\")}\n        </h2>\n      </div>\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsCreatedCollection />}\n    </div>\n  );\n};\n\nexport default PlantsCreatedView;\n","import { useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { setErrorMessage } from \"../../reducer/jungleSwapSlice\";\n\ninterface ModalBodyProps {\n  headline: string;\n  subheadline: string;\n  text: string;\n  isClose: boolean;\n}\n\nconst ModalBody = ({\n  headline,\n  subheadline,\n  text,\n  isClose,\n}: ModalBodyProps): JSX.Element => {\n  const divElementRef = useRef<HTMLDivElement | null>(null);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n\n  const handleCloseModal = (): void => {\n    dispatch(setErrorMessage(null));\n  };\n\n  const handleClickOutside = ({ target }: any): void => {\n    if (divElementRef.current === target && isClose) {\n      handleCloseModal();\n    }\n  };\n\n  return (\n    <div\n      ref={divElementRef}\n      className={`\n        [ modal-body ]\n        [ \n          fixed-top\n          w-100\n          h-100\n          d-flex\n          justify-content-center\n          align-items-center\n          flex-col\n        ]\n      `}\n      onClick={handleClickOutside}\n    >\n      <div className=\"[ modal-body__box ] [ text-center ]\">\n        <h1 className=\"[ modal-body__box__headline ] [ mt-3 mb-4 ]\">\n          {headline}\n        </h1>\n        <h2 className=\"[ modal-body__box__subheadline ] [ mb-5 ]\">\n          {subheadline}\n        </h2>\n        <h3 className=\"[ modal-body__box__text ] [ text-uppercase mb-5 ]\">\n          {text}\n        </h3>\n        {isClose && (\n          <button\n            className={`\n              [ \n                button \n                button--width-small \n              ] \n              [ \n                btn \n                form-control \n                mt-4 \n                mb-3 \n              ]\n            `}\n            onClick={handleCloseModal}\n          >\n            {t(\"button.proceed\")}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ModalBody;\n","import { useTranslation } from \"react-i18next\";\nimport ModalBody from \"./ModalBody\";\n\ninterface ErrorModalProps {\n  message: string | null;\n}\n\nconst ErrorModal = ({ message }: ErrorModalProps): JSX.Element | null => {\n  const { t } = useTranslation();\n\n  const convertErrorMessage = (message: string): string => {\n    switch (message) {\n      // Authentification\n      case \"Error while creating user\":\n        return t(\"errorTexts.auth.signUp.errorWhileCreatingUser\");\n      case \"User does not exist\":\n        return t(\"errorTexts.auth.signIn.userUnknown\");\n      case \"Could not update user\":\n        return t(\"errorTexts.auth.logOut.noUserUpdate\");\n      // Plants\n      case \"Create plant failed\":\n        return t(\"errorTexts.plants.createPlantFailed\");\n      case \"Fetch plant failed\":\n        return t(\"errorTexts.plants.fetchPlantFailed\");\n      case \"Fetch all plants failed\":\n        return t(\"errorTexts.plants.techAllPlantsFailed\");\n      case \"Search plant failed\":\n        return t(\"errorTexts.plants.searchPlantFailed\");\n      case \"Update plant failed\":\n        return t(\"errorTexts.plants.updatePlantFailed\");\n      case \"Delete plant failed\":\n        return t(\"errorTexts.plants.deletePlantFailed\");\n      // Messages\n      case \"Create message failed\":\n        return t(\"errorTexts.messages.createMessageFailed\");\n      case \"Fetch message failed\":\n        return t(\"errorTexts.messages.fetchMessageFailed\");\n      case \"Fetch all messages failed\":\n        return t(\"errorTexts.messages.fetchAllMessagesFailed\");\n      case \"Update message failed\":\n        return t(\"errorTexts.updateMessageFailed\");\n      case \"Delete message failed\":\n        return t(\"errorTexts.deleteMessageFailed\");\n      default:\n        return t(\"errorTexts.general\");\n    }\n  };\n\n  if (!message || message.includes(\"Form\")) {\n    return null;\n  }\n\n  return (\n    <ModalBody\n      headline={t(\"texts.errorModal.headline\")}\n      subheadline={t(\"texts.errorModal.subheadline\")}\n      text={convertErrorMessage(message)}\n      isClose={true}\n    />\n  );\n};\n\nexport default ErrorModal;\n","import { useTranslation } from \"react-i18next\";\nimport ModalBody from \"./ModalBody\";\n\ninterface OfflineModalProps {\n  isOnline: boolean;\n}\n\nconst OfflineModal = ({ isOnline }: OfflineModalProps): JSX.Element | null => {\n  const { t } = useTranslation();\n\n  if (isOnline) {\n    return null;\n  }\n\n  return (\n    <ModalBody\n      headline={t(\"texts.offlineModal.headline\")}\n      subheadline={t(\"texts.offlineModal.subheadline\")}\n      text={t(\"errorTexts.offline\")}\n      isClose={false}\n    />\n  );\n};\n\nexport default OfflineModal;\n","import { useAppSelector } from \"../../app/hooks\";\nimport { useOnlineStatus } from \"../../app/custom-hooks/useOnlineStatus\";\nimport ErrorModal from \"./ErrorModal\";\nimport OfflineModal from \"./OfflineModal\";\nimport { selectErrorMessage } from \"../../reducer/jungleSwapSlice\";\n\nconst Modals = (): JSX.Element => {\n  const errorMessage = useAppSelector(selectErrorMessage);\n  const isOnline = useOnlineStatus();\n\n  if (isOnline) {\n    return <ErrorModal message={errorMessage} />;\n  }\n  return <OfflineModal isOnline={isOnline} />;\n};\n\nexport default Modals;\n","import { useState, useEffect } from \"react\";\n\nexport const useOnlineStatus = (): boolean => {\n  const [isOnline, setIsOnline] = useState<boolean>(true);\n\n  useEffect(() => {\n    const handleOfflineEventCallback = (): void => {\n      setIsOnline(false);\n    };\n\n    const handleOnlineEventCallback = (): void => {\n      setIsOnline(true);\n    };\n\n    window.addEventListener(\"offline\", handleOfflineEventCallback);\n    window.addEventListener(\"online\", handleOnlineEventCallback);\n\n    return () => {\n      window.removeEventListener(\"offline\", handleOfflineEventCallback);\n      window.removeEventListener(\"online\", handleOnlineEventCallback);\n    };\n  }, []);\n\n  return isOnline;\n};\n","import { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { selectIsLanguageChange } from \"../../reducer/jungleSwapSlice\";\n\ninterface AccordionItemProps {\n  header: String;\n  body: String;\n}\n\nconst AccordionItem = ({ header, body }: AccordionItemProps): JSX.Element => {\n  const isLanguageChange = useAppSelector(selectIsLanguageChange);\n  const [isBodyVisible, setIsBodyVisible] = useState<boolean>(false);\n  const divBodyRef = useRef<HTMLDivElement>(null);\n\n  useEffect((): void => {\n    const accordionItemBody = divBodyRef.current;\n\n    if (accordionItemBody) {\n      if (isBodyVisible) {\n        accordionItemBody.style.height = `${accordionItemBody.scrollHeight}px`;\n      } else {\n        accordionItemBody.style.height = \"0\";\n      }\n    }\n  }, [isBodyVisible]);\n\n  useEffect((): void => {\n    const accordionItemBody = divBodyRef.current;\n\n    if (isBodyVisible && accordionItemBody) {\n      accordionItemBody.style.height = \"auto\";\n      accordionItemBody.style.height = `${accordionItemBody.scrollHeight}px`;\n    }\n  }, [isLanguageChange]);\n\n  const headerState = useMemo(\n    (): string => (isBodyVisible ? \"accordion-item__header--is-active\" : \"\"),\n    [isBodyVisible]\n  );\n\n  const imageState = useMemo(\n    (): string =>\n      isBodyVisible ? \"accordion-item__header__imagebox__image--is-active\" : \"\",\n    [isBodyVisible]\n  );\n\n  const handleClickButton = () => {\n    setIsBodyVisible(!isBodyVisible);\n  };\n\n  return (\n    <div className=\"accordion-item\">\n      <div className={`accordion-item__header ${headerState}`}>\n        <button\n          type=\"button\"\n          className={`\n            [ \n              accordion-item__header__button \n            ] \n            [ \n              d-flex \n              flex-row \n              justify-content-between \n              align-items-start \n              w-100 \n              text-left \n              p-2 \n              border-0 \n            ]\n          `}\n          onClick={handleClickButton}\n        >\n          <h4 className=\"[ accordion-item__header__text ] [ mx-0 mt-1 mb-1 ]\">\n            {header}\n          </h4>\n          <div className=\"[ accordion-item__header__imagebox ] [ mx-2 mt-1 ]\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 512 412\"\n              className={`[ accordion-item__header__imagebox__image ${imageState} ] [ w-full h-100 ]`}\n            >\n              <path d=\"M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z\" />\n            </svg>\n          </div>\n        </button>\n      </div>\n      <div\n        ref={divBodyRef}\n        className={`\n          [ \n            accordion-item__body \n          ] \n          [ \n            pt-0 \n            pt-1 \n            px-1 \n            overflow-hidden \n          ]\n        `}\n      >\n        <div className=\"pb-1\">\n          <div className=\"px-1 py-1\">\n            <p>{body}</p>\n          </div>\n        </div>\n      </div>\n      <hr className=\"mx-1 my-0\" />\n    </div>\n  );\n};\n\nexport default AccordionItem;\n","import { AccordionItemData } from \"../../app/typeDefinitions\";\nimport AccordionItem from \"./AccordionItem\";\n\ninterface AccordionProps {\n  data: AccordionItemData[];\n}\n\nconst Accordion = ({ data }: AccordionProps): JSX.Element => {\n  return (\n    <div className=\"mb-5\">\n      {data.map(({ headerText, bodyText }) => (\n        <AccordionItem header={headerText} body={bodyText} />\n      ))}\n    </div>\n  );\n};\n\nexport default Accordion;\n","import { useTranslation } from \"react-i18next\";\nimport { useFaqData } from \"../../app/custom-hooks/useFaqData\";\nimport Accordion from \"../../components/faq/Accordion\";\n\nconst FaqView = () => {\n  const { t } = useTranslation();\n  const faqData = useFaqData();\n\n  return (\n    <div className=\"container row mt-5\">\n      <div className=\"col-12 col-md-6 offset-md-4 mt-5\">\n        <h2 className=\"text-left mb-5\">{t(\"texts.faq.overview.headline\")}</h2>\n      </div>\n      <div className=\"col-12 col-md-6 offset-md-4\">\n        <Accordion data={faqData} />\n      </div>\n    </div>\n  );\n};\n\nexport default FaqView;\n","import { useTranslation } from \"react-i18next\";\nimport { AccordionItemData } from \"../typeDefinitions\";\n\nexport const useFaqData = (): AccordionItemData[] => {\n  const { t } = useTranslation();\n\n  return [\n    {\n      headerText: t(\"texts.faq.item1.header\"),\n      bodyText: t(\"texts.faq.item1.body\"),\n    },\n    {\n      headerText: t(\"texts.faq.item2.header\"),\n      bodyText: t(\"texts.faq.item2.body\"),\n    },\n    {\n      headerText: t(\"texts.faq.item3.header\"),\n      bodyText: t(\"texts.faq.item3.body\"),\n    },\n    {\n      headerText: t(\"texts.faq.item4.header\"),\n      bodyText: t(\"texts.faq.item4.body\"),\n    },\n  ];\n};\n","import { Route, Switch, withRouter } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport NavBar from \"./components/navigation/NavBar\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./views/home/Home\";\nimport SignUp from \"./views/auth/SignUp\";\nimport SignIn from \"./views/auth/SignIn\";\nimport LogOut from \"./components/auth/LogOut\";\nimport PlantCreateForm from \"./views/plants/PlantCreateForm\";\nimport PlantDetails from \"./views/plants/PlantDetails\";\nimport PlantUpdateForm from \"./views/plants/PlantUpdateForm\";\nimport PaymentCheckoutView from \"./views/apis/PaymentCheckoutView\";\nimport RequestsView from \"./views/requests/RequestsView\";\nimport RepliesView from \"./views/replies/RepliesView\";\nimport RequestCreateForm from \"./views/requests/RequestCreateForm\";\nimport RequestDetails from \"./views/requests/RequestDetails\";\nimport ReplyDetails from \"./views/replies/ReplyDetails\";\nimport RequestUpdateForm from \"./views/requests/RequestUpdateForm\";\nimport Unauthorized from \"./views/auth/Unauthorized\";\nimport NotFound from \"./views/errors/NotFound\";\nimport KommunicateChat from \"./components/apis/KommunicateChat\";\nimport PlantsCreatedView from \"./views/plants/PlantsCreatedView\";\nimport Modals from \"./components/modals/Modals\";\nimport FaqView from \"./views/faq/FaqView\";\n\nconst App = (): JSX.Element => {\n  return (\n    <div>\n      <NavBar />\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n\n        {/* Authentification */}\n        <Route path=\"/auth/sign-up\">\n          <SignUp />\n        </Route>\n        <Route path=\"/auth/sign-in\">\n          <SignIn />\n        </Route>\n        <Route path=\"/auth/log-out\">\n          <LogOut />\n        </Route>\n        <Route path=\"/auth/unauthorized\">\n          <Unauthorized />\n        </Route>\n\n        {/* Plants */}\n        <Route path=\"/plants/create\">\n          <PlantCreateForm />\n        </Route>\n        <Route path=\"/plants/fetch/:plantId\">\n          <PlantDetails />\n        </Route>\n        <Route path=\"/plants/update\">\n          <PlantUpdateForm />\n        </Route>\n        <Route path=\"/plants/checkout\">\n          <PaymentCheckoutView />\n        </Route>\n        <Route path=\"/plants/my-own\">\n          <PlantsCreatedView />\n        </Route>\n\n        {/* Messages */}\n        <Route path=\"/messages/create\">\n          <RequestCreateForm />\n        </Route>\n        <Route path=\"/messages/update\">\n          <RequestUpdateForm />\n        </Route>\n\n        {/* Requests */}\n        <Route path=\"/requests/fetch-all\">\n          <RequestsView />\n        </Route>\n        <Route path=\"/requests/fetch/:messageId\">\n          <RequestDetails />\n        </Route>\n\n        {/* Replies */}\n        <Route path=\"/replies/fetch-all\">\n          <RepliesView />\n        </Route>\n        <Route path=\"/replies/fetch/:messageId\">\n          <ReplyDetails />\n        </Route>\n\n        {/* FAQ */}\n        <Route path=\"/faq\">\n          <FaqView />\n        </Route>\n        <Route path=\"/replies/fetch/:messageId\">\n          <ReplyDetails />\n        </Route>\n\n        <Route component={NotFound} />\n      </Switch>\n      <KommunicateChat />\n      <Modals />\n      <Footer />\n    </div>\n  );\n};\n\nexport default withRouter(App);\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    fallbackLng: \"en\",\n    ns: [\"translation\"],\n    defaultNS: \"translation\",\n    backend: {\n      loadPath: \"/locales/{{lng}}/{{ns}}.json\",\n    },\n    debug: false,\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\nimport App from \"./App\";\nimport \"./app/i18next.config\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <Suspense fallback=\"loading\">\n          <App />\n        </Suspense>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}