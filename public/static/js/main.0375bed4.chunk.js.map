{"version":3,"sources":["hooks.ts","reducer/jungleSwapSlice.ts","config.ts","components/NavBar.tsx","components/Footer.tsx","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/About.tsx","components/PlantThumbnail.tsx","components/AllPlants.tsx","components/Title.tsx","screens/Home.tsx","screens/SignUp.tsx","screens/SignIn.tsx","components/LogOut.tsx","screens/CreatePlantForm.tsx","screens/PlantDetails.tsx","screens/UpdatePlantForm.tsx","components/CheckoutForm.tsx","screens/CheckoutPage.tsx","components/RequestTile.tsx","screens/RequestsPage.tsx","components/ReplyTile.tsx","screens/RepliesPage.tsx","screens/CreateRequestForm.tsx","screens/RequestDetails.tsx","screens/ReplyDetails.tsx","screens/UpdateRequestForm.tsx","screens/Unauthorized.tsx","screens/NotFound.tsx","components/Chat.tsx","App.tsx","store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","apiPath","process","rejectWithValue","data","Error","fetchAllPlants","createAsyncThunk","a","axios","get","response","error","fetchQueryPlants","query","uploadPlantImage","uploadForm","post","createPlant","newPlant","withCredentials","readPlant","plantId","updatePlant","updatedPlant","patch","deletePlantImage","destroyImageData","deletePlant","delete","createPayment","plant","price","payPlant","fetchAllMessages","createMessage","newMessage","readMessage","messageId","updateMessage","updatedMessage","deleteMessage","readUser","signUp","newUser","signIn","user","logOut","jungleSwapSlice","createSlice","name","initialState","isFetchingUser","loggedInUser","isUserChange","plants","messages","message","amountOfRequests","amountOfReplies","isNewRequest","isNewReply","intervalId","delayCounter","headerContainerHeight","aboutContainerHeight","clientSecret","reducers","setUser","state","action","payload","setPlants","setPlant","addPlant","push","setPlantChanges","_id","description","size","imageUrl","imagePublicId","location","map","singlePlant","removePlant","filter","setClientSecret","setMessages","setMessage","addMessage","setMessageChanges","buyer","seller","request","reply","messageState","singleMessage","removeMessage","setStartAmountOfRequests","setStartAmountOfReplies","setAmountOfRequests","setAmountOfReplies","setIsNewRequest","setIsNewReply","setIntervalId","setDelayCounter","increaseDelayCounter","decreaseAmountOfRequests","decreaseAmountOfReplies","setLoggedInUser","setIsFetchingUser","setIsUserChange","setError","setHeaderContainerHeight","setAboutContainerHeight","scrollToAbout","scroll","scrollTo","scrollToPlants","actions","NavBar","jungleSwap","dispatch","useEffect","clearInterval","unwrap","then","setInterval","catch","rejectedValue","console","log","currentAmountOfRequests","length","currentAmountOfReplies","Navbar","className","variant","expand","fixed","Brand","to","onClick","scrollToTop","Toggle","aria-controls","icon","faBell","Collapse","id","Nav","title","username","Footer","About","src","image","alt","PlantThumbnail","AllPlants","useState","setQuery","type","placeholder","value","onChange","event","target","index","Title","Home","elementRef","useRef","headerElementHeight","Math","round","current","getBoundingClientRect","height","aboutElementHeight","role","ref","headerElement","aboutElement","SignUp","history","useHistory","onSubmit","preventDefault","email","password","toLowerCase","handleSignUp","htmlFor","formNoValidate","SignIn","handleSignIn","LogOut","clonedUser","JSON","parse","stringify","CreatePlantForm","plantImage","files","FormData","append","scrollToBottom","handleCreatePlant","min","PlantDetails","useParams","creator","forEach","handleDeletePlant","UpdatePlantForm","handlePlantEntryChange","itemNumber","clonedPlant","handleImageChange","handleUpdatePlant","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","payment","handleChange","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","disabled","promise","loadStripe","CheckoutPage","RequestThumbnail","RequestsPage","handleResetAll","RequestTile","ReplyThumbnail","RepliesPage","ReplyTile","CreateRequestForm","handleCreateMessage","cols","rows","RequestDetails","clonedMessage","handleSetMessageInactive","ReplyDetails","UpdateRequestForm","handleCreateReply","handleUpdateMessage","Unauthorized","NotFound","KommunicateChat","d","m","s","document","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","withRouter","exact","path","component","store","configureStore","reducer","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.0375bed4.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\nexport interface User {\r\n  _id?: string;\r\n  username?: string;\r\n  email: string;\r\n  password: string;\r\n  amountOfRequests?: number;\r\n  amountOfReplies?: number;\r\n}\r\n\r\nexport interface MessageCounters {\r\n  amountOfRequests?: number;\r\n  amountOfReplies?: number;\r\n}\r\n\r\nexport interface Plant {\r\n  _id?: string;\r\n  name?: string;\r\n  description?: string;\r\n  size?: number;\r\n  imageUrl?: string;\r\n  imagePublicId?: string;\r\n  location?: string;\r\n  price?: number;\r\n  creator?: string | User | undefined;\r\n}\r\n\r\nexport interface Message {\r\n  _id?: string;\r\n  buyer?: string | User | undefined;\r\n  seller?: string | User | undefined;\r\n  plant?: string | Plant | undefined;\r\n  request?: string;\r\n  reply?: string;\r\n  messageState?: boolean;\r\n}\r\n\r\nexport interface DestroyImageData {\r\n  imagePublicId: ImagePublicId;\r\n}\r\n\r\nexport type LoggedInUser = User | null;\r\nexport type IntervalId = NodeJS.Timer | null;\r\nexport type Error = string | null;\r\nexport type PlantId = string | undefined;\r\nexport type ImagePublicId = string | undefined;\r\ntype MessageId = string | undefined;\r\n\r\ninterface SliceState {\r\n  isFetchingUser: boolean;\r\n  loggedInUser: LoggedInUser;\r\n  isUserChange: boolean;\r\n  plants: Plant[];\r\n  plant: Plant | {};\r\n  messages: Message[];\r\n  message: Message | {};\r\n  amountOfRequests: number;\r\n  amountOfReplies: number;\r\n  isNewRequest: boolean;\r\n  isNewReply: boolean;\r\n  intervalId: IntervalId;\r\n  delayCounter: number;\r\n  headerContainerHeight: number;\r\n  aboutContainerHeight: number;\r\n  clientSecret: string;\r\n  error: Error;\r\n}\r\n\r\nconst initialState: SliceState = {\r\n  isFetchingUser: true,\r\n  loggedInUser: null,\r\n  isUserChange: false,\r\n  plants: [],\r\n  plant: {},\r\n  messages: [],\r\n  message: {},\r\n  amountOfRequests: 0,\r\n  amountOfReplies: 0,\r\n  isNewRequest: false,\r\n  isNewReply: false,\r\n  intervalId: null,\r\n  delayCounter: 0,\r\n  headerContainerHeight: 0,\r\n  aboutContainerHeight: 0,\r\n  clientSecret: \"\",\r\n  error: null,\r\n};\r\n\r\nconst rejectWithValue = (data: any): void | PromiseLike<void> => {\r\n  throw new Error(data);\r\n};\r\n\r\n// --------- Plants ---------\r\n// Fetch all plants\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async () => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch query plants\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query: string) => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Upload plant image\r\nexport const uploadPlantImage = createAsyncThunk(\r\n  \"jungleSwap/uploadPlantImage\",\r\n  async (uploadForm: FormData) => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/upload`, uploadForm);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async (newPlant: Plant) => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/plants/create`, newPlant, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Read plant\r\nexport const readPlant = createAsyncThunk(\r\n  \"jungleSwap/readPlant\",\r\n  async (plantId: PlantId) => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/read/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Update plant\r\ninterface UpdatePlantParameters {\r\n  plantId: PlantId;\r\n  updatedPlant: Plant;\r\n}\r\n\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async ({ plantId, updatedPlant }: UpdatePlantParameters) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete plant image\r\nexport const deletePlantImage = createAsyncThunk(\r\n  \"jungleSwap/deletePlantImage\",\r\n  async (destroyImageData: DestroyImageData) => {\r\n    try {\r\n      await axios.post(`${apiPath}/destroy`, destroyImageData);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete Plant\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (plantId: PlantId) => {\r\n    try {\r\n      await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant payment\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant: Plant) => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/create-payment-intent`, {\r\n        price: plant.price,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Pay plant\r\nexport const payPlant = createAsyncThunk(\r\n  \"jungleSwap/payPlant\",\r\n  async (): Promise<void> => {\r\n    try {\r\n      await axios.post(\r\n        `${apiPath}/create-payment-intent`,\r\n        {},\r\n        { withCredentials: true }\r\n      );\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// --------- Messages ----------\r\n// Fetch all messages\r\nexport const fetchAllMessages = createAsyncThunk(\r\n  \"jungleSwap/fetchAllMessages\",\r\n  async () => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/messages/fetch`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Create messages\r\nexport const createMessage = createAsyncThunk(\r\n  \"jungleSwap/createMessage\",\r\n  async (newMessage: Message) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/messages/create`,\r\n        newMessage,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Read message\r\nexport const readMessage = createAsyncThunk(\r\n  \"jungleSwap/readMessage\",\r\n  async (messageId: string) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${apiPath}/messages/read/${messageId}`,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Update message\r\ninterface UpdateMessageParameters {\r\n  messageId: string | undefined;\r\n  updatedMessage: Message;\r\n}\r\n\r\nexport const updateMessage = createAsyncThunk(\r\n  \"jungleSwap/updateMessage\",\r\n  async ({ messageId, updatedMessage }: UpdateMessageParameters) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/messages/update/${messageId}`,\r\n        updatedMessage\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete message\r\nexport const deleteMessage = createAsyncThunk(\r\n  \"jungleSwap/deleteMessage\",\r\n  async (messageId: MessageId) => {\r\n    try {\r\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ---------- User authentification ----------\r\n// Read user\r\nexport const readUser = createAsyncThunk(\r\n  \"jungleSwap/readUserData\",\r\n  async () => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/user`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Sign up\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (newUser: User) => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/signup`, newUser);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Sign in\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async (user: User) => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/signin`, user, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// LogOut\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (user: User) => {\r\n    try {\r\n      await axios.post(`${apiPath}/logout`, user, { withCredentials: true });\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n  // ---------- Reducers -----------\r\n  reducers: {\r\n    // --------- User -----------\r\n    setUser: (state, action: PayloadAction<User>) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n\r\n    // --------- Plants ----------\r\n    setPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.plants = action.payload;\r\n    },\r\n    setPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plant = action.payload;\r\n    },\r\n    addPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plants.push(action.payload);\r\n    },\r\n    setPlantChanges: (state, action: PayloadAction<Plant>) => {\r\n      const {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      } = action.payload;\r\n      state.plants = state.plants.map((singlePlant: Plant) => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, action: PayloadAction<string | undefined>) => {\r\n      state.plants = state.plants.filter(\r\n        (plant: Plant) => plant._id !== action.payload\r\n      );\r\n    },\r\n    setClientSecret: (state, action: PayloadAction<string>) => {\r\n      state.clientSecret = action.payload;\r\n    },\r\n\r\n    // ---------- Messages ----------\r\n    setMessages: (state, action: PayloadAction<Message[]>) => {\r\n      state.messages = action.payload;\r\n    },\r\n    setMessage: (state, action: PayloadAction<Message>) => {\r\n      state.message = action.payload;\r\n    },\r\n    addMessage: (state, action: PayloadAction<Message>) => {\r\n      state.messages.push(action.payload);\r\n    },\r\n    setMessageChanges: (state, action: PayloadAction<Message>) => {\r\n      const { _id, buyer, seller, plant, request, reply, messageState } =\r\n        action.payload;\r\n      state.messages = state.messages.map((singleMessage) => {\r\n        if (singleMessage._id === _id) {\r\n          singleMessage.buyer = buyer;\r\n          singleMessage.seller = seller;\r\n          singleMessage.plant = plant;\r\n          singleMessage.request = request;\r\n          singleMessage.reply = reply;\r\n          singleMessage.messageState = messageState;\r\n        }\r\n        return singleMessage;\r\n      });\r\n    },\r\n    removeMessage: (state, action: PayloadAction<string | undefined>) => {\r\n      state.messages = state.messages.filter((message: Message) => {\r\n        return message._id !== action.payload;\r\n      });\r\n    },\r\n    setStartAmountOfRequests: (state) => {\r\n      state.loggedInUser &&\r\n        (state.amountOfRequests = (state.loggedInUser as any).amountOfRequests);\r\n    },\r\n    setStartAmountOfReplies: (state) => {\r\n      state.loggedInUser &&\r\n        (state.amountOfReplies = (state.loggedInUser as any).amountOfReplies);\r\n    },\r\n    setAmountOfRequests: (state, action: PayloadAction<number>) => {\r\n      state.amountOfRequests = action.payload;\r\n    },\r\n    setAmountOfReplies: (state, action: PayloadAction<number>) => {\r\n      state.amountOfReplies = action.payload;\r\n    },\r\n    setIsNewRequest: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewRequest = action.payload;\r\n    },\r\n    setIsNewReply: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewReply = action.payload;\r\n    },\r\n    setIntervalId: (state, action: PayloadAction<IntervalId>) => {\r\n      state.intervalId = action.payload;\r\n    },\r\n    setDelayCounter: (state, action: PayloadAction<number>) => {\r\n      state.delayCounter = action.payload;\r\n    },\r\n    increaseDelayCounter: (state) => {\r\n      state.delayCounter += 1;\r\n    },\r\n    decreaseAmountOfRequests: (state) => {\r\n      state.amountOfRequests && (state.amountOfRequests -= 1);\r\n    },\r\n    decreaseAmountOfReplies: (state) => {\r\n      state.amountOfReplies && (state.amountOfReplies -= 1);\r\n    },\r\n\r\n    // ---------- User authentification ----------\r\n    setLoggedInUser: (state, action: PayloadAction<LoggedInUser>) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n    setIsFetchingUser: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingUser = action.payload;\r\n    },\r\n    setIsUserChange: (state, action: PayloadAction<boolean>) => {\r\n      state.isUserChange = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<Error>) => {\r\n      state.error = action.payload;\r\n    },\r\n\r\n    // ---------- Pages handling ----------\r\n    setHeaderContainerHeight: (state, action: PayloadAction<number>) => {\r\n      state.headerContainerHeight = action.payload;\r\n    },\r\n    setAboutContainerHeight: (state, action: PayloadAction<number>) => {\r\n      state.aboutContainerHeight = action.payload;\r\n    },\r\n    scrollToAbout: (state) => {\r\n      scroll.scrollTo(state.headerContainerHeight);\r\n    },\r\n    scrollToPlants: (state) => {\r\n      scroll.scrollTo(state.headerContainerHeight + state.aboutContainerHeight);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  // ----------- User -----------\r\n  setUser,\r\n\r\n  // ----------- Plants ----------\r\n  setPlants,\r\n  setPlant,\r\n  addPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n  setClientSecret,\r\n\r\n  // ---------- Requests ----------\r\n  setMessages,\r\n  setMessage,\r\n  addMessage,\r\n  setMessageChanges,\r\n  removeMessage,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setIntervalId,\r\n  setDelayCounter,\r\n  increaseDelayCounter,\r\n  decreaseAmountOfRequests,\r\n  decreaseAmountOfReplies,\r\n\r\n  // ---------- User authentification ----------\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n  setIsUserChange,\r\n  setError,\r\n\r\n  // ---------- Pages handling ----------\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  fetchAllMessages,\r\n  setIsUserChange,\r\n  setIntervalId,\r\n  increaseDelayCounter,\r\n  setDelayCounter,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  scrollToPlants,\r\n  User,\r\n  Message,\r\n  setMessages,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NavBar = () => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  // const messages = useAppSelector(\r\n  //   (state: RootState) => state.jungleSwap.messages\r\n  // );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const delayCounter = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.delayCounter\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Stop interval at cleanup\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n        dispatch(setIntervalId(null));\r\n        dispatch(setDelayCounter(0));\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Start request/reply check if user changes\r\n  useEffect(() => {\r\n    if (isUserChange) {\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages) => {\r\n          dispatch(setMessages(messages));\r\n          isUserChange && dispatch(setStartAmountOfRequests());\r\n          isUserChange && dispatch(setStartAmountOfReplies());\r\n          dispatch(setIsUserChange(false));\r\n          dispatch(\r\n            setIntervalId(\r\n              setInterval(\r\n                () => {\r\n                  dispatch(increaseDelayCounter());\r\n                },\r\n                1000 // every second\r\n              )\r\n            )\r\n          );\r\n          dispatch(increaseDelayCounter());\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    }\r\n  }, [isUserChange]);\r\n\r\n  // Check new requests/replies for logged in user every second\r\n  useEffect(() => {\r\n    if (loggedInUser) {\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages) => {\r\n          dispatch(setMessages(messages));\r\n          isUserChange && dispatch(setStartAmountOfRequests());\r\n          isUserChange && dispatch(setStartAmountOfReplies());\r\n          const currentAmountOfRequests = messages.filter(\r\n            (message: Message) => {\r\n              const { seller, messageState } = message;\r\n              return (\r\n                (seller as User)._id === loggedInUser._id &&\r\n                messageState === true\r\n              );\r\n            }\r\n          ).length;\r\n          if (amountOfRequests < currentAmountOfRequests) {\r\n            dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n            dispatch(setIsNewRequest(true));\r\n          } else if (amountOfRequests > currentAmountOfRequests) {\r\n            dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n          }\r\n          const currentAmountOfReplies = messages.filter((message: Message) => {\r\n            const { buyer, reply } = message;\r\n            return (buyer as User)._id === loggedInUser._id && reply;\r\n          }).length;\r\n          if (amountOfReplies < currentAmountOfReplies) {\r\n            dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n            dispatch(setIsNewReply(true));\r\n          }\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    }\r\n  }, [delayCounter]);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar className=\"pl-5\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" onClick={scroll.scrollToTop}>\r\n            JungleSwap\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\r\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\r\n        </Navbar.Toggle>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <>\r\n              <Link\r\n                to=\"/\"\r\n                className=\"p-2\"\r\n                onClick={() => {\r\n                  dispatch(scrollToPlants());\r\n                }}\r\n              >\r\n                All Plants\r\n              </Link>\r\n            </>\r\n            {loggedInUser && (\r\n              <>\r\n                <Link className=\"p-2\" to=\"/plants/create\">\r\n                  Create Plant\r\n                </Link>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/requests/fetch\"\r\n                  title={isNewRequest ? \"new request\" : \"\"}\r\n                >\r\n                  {isNewRequest && <FontAwesomeIcon icon={faBell} />}\r\n                  Requests\r\n                </Link>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/replies/fetch\"\r\n                  title={isNewReply ? \"new reply\" : \"\"}\r\n                >\r\n                  {isNewReply && <FontAwesomeIcon icon={faBell} />}\r\n                  Replies\r\n                </Link>\r\n              </>\r\n            )}\r\n            {loggedInUser ? (\r\n              <>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/logout\"\r\n                  title={loggedInUser.username}\r\n                >\r\n                  Log out\r\n                </Link>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Link className=\"p-2\" to=\"/signin\">\r\n                  Sign in\r\n                </Link>\r\n                <Link className=\"p-2\" to=\"/signup\">\r\n                  Sign up\r\n                </Link>\r\n              </>\r\n            )}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst Footer = (): JSX.Element => {\r\n  return (\r\n    <div className=\"footer-row\">\r\n      <footer>\r\n        © 2021\r\n        <Link to={\"https://www.linkedin.com/in/christian-gerbig/\"}>\r\n          Christian Gerbig\r\n        </Link>\r\n        &amp;\r\n        <Link to={\"https://www.linkedin.com/in/lisa-montebaur/\"}>\r\n          Lisa Montebaur\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import image from \"../images/JungleSwap_Home.png\";\r\nimport icon from \"../images/JungleSwap_Icon.png\";\r\n\r\nconst About = (): JSX.Element => {\r\n  return (\r\n    <div className=\"about centered container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n          <img className=\"image\" src={image} alt=\"plants\" />\r\n        </div>\r\n        <br />\r\n        <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 noOverflow\">\r\n          <h4> Welcome to JungleSwap! </h4>\r\n          <h5> Add green to your Home </h5>\r\n          <p>\r\n            It\"s easy-peasy. <br />\r\n            Share your plant offshoots. <br />\r\n            Make money! <br />\r\n            Or swap them for another plant. <br />\r\n            Don\"t have any baby plants? <br />\r\n            You can simply shop and give a plant a new home.\r\n          </p>\r\n          <img className=\"icon\" src={icon} alt=\"icon\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import { Link } from \"react-router-dom\";\r\nimport { Plant } from \"../reducer/jungleSwapSlice\";\r\n\r\ntype PlantThumbnailProps = {\r\n  plant: Plant;\r\n};\r\n\r\nconst PlantThumbnail = ({ plant }: PlantThumbnailProps): JSX.Element => {\r\n  const { _id, name, imageUrl, price } = plant;\r\n  return (\r\n    <div className=\"col mb-5\" key={_id}>\r\n      <div className=\"card card-medium-width text-center h-100\">\r\n        <img className=\"card-img-top mediumPicSize\" src={imageUrl} alt={name} />\r\n        <div className=\"card-body mb-5\">\r\n          <h5> {name} </h5>\r\n          <p> {price} € </p>\r\n          <Link\r\n            className=\"btn form-control smallWidth\"\r\n            to={`/plants/read/${_id}`}\r\n          >\r\n            Details\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantThumbnail;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  fetchAllPlants,\r\n  fetchQueryPlants,\r\n  Plant,\r\n  setPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport PlantThumbnail from \"../components/PlantThumbnail\";\r\n\r\nconst AllPlants = () => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Handle plant search result if user types in a query\r\n  useEffect(() => {\r\n    if (query) {\r\n      dispatch(fetchQueryPlants(query))\r\n        .unwrap()\r\n        .then((plants: Plant[]) => {\r\n          dispatch(setPlants(plants));\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    } else {\r\n      dispatch(fetchAllPlants())\r\n        .unwrap()\r\n        .then((plants: Plant[]) => {\r\n          dispatch(setPlants(plants));\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    }\r\n  }, [query]);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-3\">\r\n        <h2> Plants </h2>\r\n        <hr />\r\n        <h4> Search a plant </h4>\r\n      </div>\r\n      <div className=\"mb-4\">\r\n        <input\r\n          className=\"smallWidth form-control\"\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          value={query}\r\n          onChange={(event) => {\r\n            setQuery(event.target.value);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n        {plants &&\r\n          plants.map((plant: Plant, index: number): JSX.Element => {\r\n            return <PlantThumbnail plant={plant} key={index} />;\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllPlants;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport { scrollToAbout } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst Title = (): JSX.Element => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <div className=\"row my-5\">\r\n      <div className=\"col-6 offset-3 my-5 borderAround\">\r\n        <h2 className=\"title mb-2\"> JungleSwap </h2>\r\n        <h5 className=\"mt-3 mb-5\"> Share your green heart </h5>\r\n        <div className=\"mb-5\">\r\n          <Link\r\n            to={\"/\"}\r\n            className=\"biggerFontSize\"\r\n            onClick={() => {\r\n              dispatch(scrollToAbout());\r\n            }}\r\n          >\r\n            Try it!\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  fetchAllPlants,\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  setPlants,\r\n  Plant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nimport About from \"../components/About\";\r\nimport AllPlants from \"../components/AllPlants\";\r\nimport Title from \"../components/Title\";\r\n\r\nconst Home = (): JSX.Element => {\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n  const elementRef = useRef([]);\r\n\r\n  // Load plants and user data as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(fetchAllPlants())\r\n      .unwrap()\r\n      .then((plants: Plant[]) => {\r\n        dispatch(setPlants(plants));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n    const headerElementHeight = Math.round(\r\n      (elementRef.current[0] as any).getBoundingClientRect().height\r\n    );\r\n    dispatch(setHeaderContainerHeight(headerElementHeight));\r\n    const aboutElementHeight = Math.round(\r\n      (elementRef.current[1] as any).getBoundingClientRect().height\r\n    );\r\n    dispatch(setAboutContainerHeight(aboutElementHeight));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {!plants && (\r\n        <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span className=\"visually-hidden\">\r\n            <br /> <br /> Loading plants...\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      {/* {isFetchingUser && (\r\n        <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span className=\"visually-hidden\">\r\n            <br /> <br /> Loading user data...\r\n          </span>\r\n        </div>\r\n      )} */}\r\n\r\n      <header\r\n        className=\"text-center pt-5 pb-5 headerImg\"\r\n        ref={(headerElement) => {\r\n          (elementRef.current[0] as any) = headerElement;\r\n        }}\r\n      >\r\n        <Title />\r\n      </header>\r\n\r\n      <section\r\n        ref={(aboutElement) => {\r\n          (elementRef.current[1] as any) = aboutElement;\r\n        }}\r\n      >\r\n        <About />\r\n      </section>\r\n\r\n      <section>\r\n        <AllPlants />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setError,\r\n  setIsFetchingUser,\r\n  setIsNewRequest,\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n  signUp,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignUp = (): JSX.Element => {\r\n  const error = useAppSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign up\r\n  const handleSignUp = (event: any): void => {\r\n    event.preventDefault();\r\n    const { username, email, password } = event.target;\r\n    const newUser = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    dispatch(signUp(newUser))\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingUser(false));\r\n        dispatch(setIsUserChange(true));\r\n        history.push(\"/\");\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setIsFetchingUser(false));\r\n        dispatch(setError(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign Up </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleSignUp(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\"> Username </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n            formNoValidate\r\n          >\r\n            Sign up\r\n          </button>\r\n          <p className=\"padding\"> Already have an account? </p>\r\n          <div className=\"text-right\">\r\n            <Link to={\"/signin\"}>\r\n              <button className=\"btn btn-sm ml-4 smallWidth form-control mt-0 mb-2\">\r\n                Sign In\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setError,\r\n  setIsFetchingUser,\r\n  setIsNewRequest,\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n  signIn,\r\n  User,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignIn = (): JSX.Element => {\r\n  const error = useAppSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign in\r\n  const handleSignIn = (event: any, history: any): void => {\r\n    event.preventDefault();\r\n    const { email, password } = event.target;\r\n    const user: User = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    dispatch(signIn(user))\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingUser(false));\r\n        const { amountOfRequests, amountOfReplies } = user;\r\n        dispatch(setAmountOfRequests(amountOfRequests));\r\n        dispatch(setAmountOfReplies(amountOfReplies));\r\n        dispatch(setIsUserChange(true));\r\n        history.push(\"/\");\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setIsFetchingUser(false));\r\n        dispatch(setError(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign In </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleSignIn(event, history);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n            formNoValidate\r\n          >\r\n            Sign in\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  logOut,\r\n  setDelayCounter,\r\n  setIntervalId,\r\n  setIsNewRequest,\r\n  setLoggedInUser,\r\n  setUser,\r\n  User,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst LogOut = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const intervalId: any = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Update user and log out as soon as page loads\r\n  useEffect(() => {\r\n    const clonedUser: User = JSON.parse(JSON.stringify(loggedInUser));\r\n    clonedUser.amountOfRequests = amountOfRequests;\r\n    clonedUser.amountOfReplies = amountOfReplies;\r\n    dispatch(setUser(clonedUser));\r\n    dispatch(logOut(clonedUser))\r\n      .unwrap()\r\n      .then(() => {\r\n        dispatch(setLoggedInUser(null));\r\n        clearInterval(intervalId);\r\n        dispatch(setIntervalId(null));\r\n        dispatch(setDelayCounter(0));\r\n        dispatch(setIsNewRequest(false));\r\n        history.push(\"/\");\r\n        scroll.scrollToTop();\r\n      });\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  addPlant,\r\n  createPlant,\r\n  Plant,\r\n  readUser,\r\n  setError,\r\n  setIsFetchingUser,\r\n  setLoggedInUser,\r\n  uploadPlantImage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst CreatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const error = useAppSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads and scroll to plants section during cleanup\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    scroll.scrollToTop();\r\n    dispatch(readUser())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingUser(false));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setIsFetchingUser(false));\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/unauthorized\"} />;\r\n  }\r\n\r\n  // Create plant\r\n  const handleCreatePlant = (event: any) => {\r\n    event.preventDefault();\r\n    const { name, description, size, plantImage, location, price } =\r\n      event.target;\r\n    const image = plantImage.files[0];\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    dispatch(uploadPlantImage(uploadForm))\r\n      .unwrap()\r\n      .then(({ imageUrl, imagePublicId }: any) => {\r\n        const newPlant: Plant = {\r\n          name: name.value,\r\n          description: description.value,\r\n          size: size.value,\r\n          imageUrl,\r\n          imagePublicId,\r\n          location: location.value,\r\n          price: price.value,\r\n        };\r\n        dispatch(createPlant(newPlant))\r\n          .unwrap()\r\n          .then((plant: Plant) => {\r\n            dispatch(addPlant(plant));\r\n            history.push(\"/\");\r\n            scroll.scrollToBottom();\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/signup\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mb-5 text-left\"> Create a plant </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleCreatePlant(event);\r\n          }}\r\n        >\r\n          <label htmlFor=\"enterName\"> Name </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterName\"\r\n          />\r\n          <label htmlFor=\"enterDescription\"> Description </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"description\"\r\n            type=\"text\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterDescription\"\r\n          />\r\n          <label htmlFor=\"enterSize\"> Size (cm) </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"size\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterSize\"\r\n          />\r\n          <label htmlFor=\"enterLocation\"> Location </label>\r\n          <select\r\n            className=\"mb-4 form-control p-2\"\r\n            name=\"location\"\r\n            id=\"enterLocation\"\r\n          >\r\n            <option> Select location </option>\r\n            <option value=\"sun\"> sun </option>\r\n            <option value=\"shade\"> shade </option>\r\n            <option value=\"sun and shade\"> sun and shade </option>\r\n          </select>\r\n          <label htmlFor=\"enterPrice\"> Price (EUR) </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"price\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterPrice\"\r\n          />\r\n          <label htmlFor=\"enterImage\"> Image </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"plantImage\"\r\n            type=\"file\"\r\n            id=\"enterImage\"\r\n          />\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <div className=\"col-12 text-right pr-0\">\r\n            <button\r\n              className=\"btn btn-sm form-control smallWidth ml-4 mb-2\"\r\n              type=\"submit\"\r\n            >\r\n              Create\r\n            </button>\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm form-control smallWidth ml-4 mb-2\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePlantForm;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  readPlant,\r\n  deletePlant,\r\n  deleteMessage,\r\n  scrollToPlants,\r\n  User,\r\n  Message,\r\n  Plant,\r\n  setPlant,\r\n  deletePlantImage,\r\n  removePlant,\r\n  PlantId,\r\n  ImagePublicId,\r\n  DestroyImageData,\r\n  removeMessage,\r\n  decreaseAmountOfReplies,\r\n  readUser,\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst PlantDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const { plantId }: any = useParams();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read plant data and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readUser())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingUser(false));\r\n        dispatch(readPlant(plantId))\r\n          .unwrap()\r\n          .then((plant: Plant) => {\r\n            dispatch(setPlant(plant));\r\n            scroll.scrollToTop();\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setIsFetchingUser(false));\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  // Delete plant\r\n  const handleDeletePlant = (\r\n    imagePublicId: ImagePublicId,\r\n    plantId: PlantId,\r\n    messages: Message[]\r\n  ) => {\r\n    messages.forEach((message: Message) => {\r\n      const { _id, plant }: any = message;\r\n      if (plant._id === plantId) {\r\n        dispatch(deleteMessage(_id))\r\n          .unwrap()\r\n          .then(() => {\r\n            dispatch(removeMessage(_id));\r\n            dispatch(decreaseAmountOfReplies());\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      }\r\n    });\r\n    const destroyImageData: DestroyImageData = {\r\n      imagePublicId,\r\n    };\r\n    dispatch(deletePlantImage(destroyImageData))\r\n      .unwrap()\r\n      .then(() => {\r\n        dispatch(deletePlant(plantId))\r\n          .unwrap()\r\n          .then(() => {\r\n            dispatch(removePlant(plantId));\r\n            history.push(\"/\");\r\n            dispatch(scrollToPlants());\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/signup\"} />;\r\n  }\r\n\r\n  const {\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n    creator,\r\n  } = plant as Plant;\r\n  if (!creator) {\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading plant details...\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2> Plant details </h2>\r\n      </div>\r\n      <div className=\"col\">\r\n        <div className=\"card cardMediumWidth\">\r\n          {imageUrl && (\r\n            <img\r\n              className=\"card-img-top mediumPicSize\"\r\n              src={imageUrl}\r\n              alt={name}\r\n            />\r\n          )}\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Name: </span> {name}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Description: </span> {description}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Size: </span> {size} cm\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Likes: </span> {location}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Price: </span> {price} €\r\n          </div>\r\n          <div className=\"ml-2 mt-2 col justify-content-center\">\r\n            <div className=\"row-2 justify-content-center\">\r\n              <div className=\"card-body text-right pt-0\">\r\n                {loggedInUser._id === (creator as User)._id ? (\r\n                  <div className=\"p-0\">\r\n                    <Link to={\"/plants/update\"}>\r\n                      <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                        Update\r\n                      </button>\r\n                    </Link>\r\n                    <button\r\n                      className=\"btn btn-sm ml-2 form-control smallWidth mb-2\"\r\n                      onClick={() => {\r\n                        handleDeletePlant(imagePublicId, _id, messages);\r\n                      }}\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <Link to=\"/plants/checkout\">\r\n                      <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                        Buy\r\n                      </button>\r\n                    </Link>\r\n                    <Link to=\"/messages/create\">\r\n                      <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                        Swap\r\n                      </button>\r\n                    </Link>\r\n                  </div>\r\n                )}\r\n                <Link\r\n                  to={\"/\"}\r\n                  onClick={() => {\r\n                    dispatch(scrollToPlants());\r\n                  }}\r\n                >\r\n                  <button className=\"btn btn-sm ml-2 form-control smallWidth mb-3\">\r\n                    Go back\r\n                  </button>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  updatePlant,\r\n  setPlant,\r\n  Plant,\r\n  deletePlantImage,\r\n  uploadPlantImage,\r\n  setPlantChanges,\r\n  scrollToPlants,\r\n  readUser,\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst UpdatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    scroll.scrollToTop();\r\n    dispatch(readUser())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingUser(false));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setIsFetchingUser(false));\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  // Check which plant values changed\r\n  const handlePlantEntryChange = (\r\n    { target }: any,\r\n    plant: Plant,\r\n    itemNumber: number\r\n  ): void => {\r\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\r\n    // eslint-disable-next-line default-case\r\n    switch (itemNumber) {\r\n      case 0:\r\n        clonedPlant.name = target.value;\r\n        break;\r\n      case 1:\r\n        clonedPlant.description = target.value;\r\n        break;\r\n      case 2:\r\n        clonedPlant.size = target.value;\r\n        break;\r\n      case 3:\r\n        clonedPlant.location = target.value;\r\n        break;\r\n      case 4:\r\n        clonedPlant.price = target.value;\r\n    }\r\n    dispatch(setPlant(clonedPlant));\r\n  };\r\n\r\n  // Plant image changed\r\n  const handleImageChange = ({ target }: any, plant: Plant): void => {\r\n    const image = target.files[0];\r\n    const { imagePublicId } = plant as Plant;\r\n    const destroyImageData = {\r\n      imagePublicId,\r\n    };\r\n    dispatch(deletePlantImage(destroyImageData))\r\n      .unwrap()\r\n      .then(() => {\r\n        const uploadForm = new FormData();\r\n        uploadForm.append(\"image\", image);\r\n        dispatch(uploadPlantImage(uploadForm))\r\n          .unwrap()\r\n          .then(({ imageUrl, imagePublicId }: any) => {\r\n            const clonedPlant = JSON.parse(JSON.stringify(plant));\r\n            clonedPlant.imagePublicId = imagePublicId;\r\n            clonedPlant.imageUrl = imageUrl;\r\n            dispatch(setPlant(clonedPlant));\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      });\r\n  };\r\n\r\n  const handleUpdatePlant = ({\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n  }: Plant): void => {\r\n    const updatedPlant: Plant = {\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    };\r\n    dispatch(updatePlant({ plantId: _id, updatedPlant }))\r\n      .unwrap()\r\n      .then((updatedPlant) => {\r\n        dispatch(setPlantChanges(updatedPlant));\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, name, description, size, imageUrl, price } = plant as Plant;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mt-5 mb-4 text-left\"> Update your plant </h2>\r\n        <div className=\"card cardMediumWidth mb-5\">\r\n          <img className=\"mb-2 smallPicSize\" src={imageUrl} alt={name} />\r\n          <div className=\"card-body\">\r\n            <label htmlFor=\"updateName\"> Name </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"text\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 0);\r\n              }}\r\n              value={name}\r\n              id=\"updateName\"\r\n            />\r\n            <label htmlFor=\"updateDescription\"> Description </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"text\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 1);\r\n              }}\r\n              value={description}\r\n              id=\"updateDescription\"\r\n            />\r\n            <label htmlFor=\"updateSize\"> Size (cm) </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 2);\r\n              }}\r\n              value={size}\r\n              id=\"updateSize\"\r\n            />\r\n            <label htmlFor=\"updateLocation\"> Location </label>\r\n            <select\r\n              className=\"mb-4 form-control px-2\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 3);\r\n              }}\r\n              name=\"location\"\r\n              placeholder=\"Select\"\r\n              id=\"updateLocation\"\r\n            >\r\n              <option value=\"sun\"> sun </option>\r\n              <option value=\"shade\"> shade </option>\r\n              <option value=\"sun and shade\"> sun and shade </option>\r\n            </select>\r\n            <label htmlFor=\"updatePrice\"> Price (EUR) </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              name=\"price\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 4);\r\n              }}\r\n              value={price}\r\n              id=\"updatePrice\"\r\n            />\r\n            <label htmlFor=\"updateImage\"> Image </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event) => {\r\n                handleImageChange(event, plant);\r\n              }}\r\n              type=\"file\"\r\n              id=\"updateImage\"\r\n            />\r\n            <div className=\"col-12 text-right pr-0\">\r\n              <button\r\n                className=\"btn btn-sm ml-4 form-control smallWidth mb-2\"\r\n                onClick={() => {\r\n                  handleUpdatePlant(plant);\r\n                }}\r\n              >\r\n                Save\r\n              </button>\r\n              <Link to={`/plants/read/${_id}`}>\r\n                <button className=\"btn btn-sm ml-4 smallWidth form-control mb-2\">\r\n                  Go back\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdatePlantForm;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport {\r\n  payPlant,\r\n  createPayment,\r\n  scrollToPlants,\r\n  Plant,\r\n  setClientSecret,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\ninterface CardStyle {\r\n  style: {\r\n    base: {\r\n      color: string;\r\n      fontFamily: string;\r\n      fontSmoothing: string;\r\n      fontSize: string;\r\n      \"::placeholder\": { color: string };\r\n    };\r\n    invalid: {\r\n      color: string;\r\n      iconColor: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst CheckoutForm = (): JSX.Element => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(\"\");\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const clientSecret = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.clientSecret\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Create payment as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(createPayment(plant))\r\n      .unwrap()\r\n      .then((payment: any) => {\r\n        dispatch(setClientSecret(payment.clientSecret));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n    return () => {\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    };\r\n  }, []);\r\n\r\n  // Card styling\r\n  const cardStyle: CardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n  // Listen for changes in Card element and display any errors as customer types card details\r\n  const handleChange = async (event: any): Promise<void> => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  // Submit payment\r\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    setIsProcessing(true);\r\n    const payload = await (stripe as any).confirmCardPayment(clientSecret, {\r\n      payment_method: { card: (elements as any).getElement(CardElement) },\r\n    });\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    } else {\r\n      setPaymentError(\"\");\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n\r\n  // Pay plant\r\n  const handlePayPlant = () => {\r\n    dispatch(payPlant())\r\n      .unwrap()\r\n      .then(() => {\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  const { _id, name, price } = plant as Plant;\r\n  return (\r\n    <div className=\"container col-9\">\r\n      <form\r\n        className=\"checkoutForm mt-5\"\r\n        id=\"payment-form\"\r\n        onSubmit={handleSubmitPayment}\r\n      >\r\n        <h2 className=\"text-left mb-2 p-2\"> {name} </h2>\r\n        <h3 className=\"text-left mb-4 p-2\"> Price: {price} € </h3>\r\n        <CardElement\r\n          className=\"p-2\"\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            onClick={handlePayPlant}\r\n            className=\"btn btn-sm mt-5 mb-4\"\r\n            disabled={isProcessing || isDisabled || isSucceeded}\r\n            id=\"submit\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isProcessing ? (\r\n                <div className=\"spinner\" id=\"spinner\" />\r\n              ) : (\r\n                \"Pay now\"\r\n              )}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {\r\n          /* Show any error that happens when processing the payment */\r\n          paymentError && (\r\n            <div className=\"card-error\" role=\"alert\">\r\n              {paymentError}\r\n            </div>\r\n          )\r\n          /* Show success message upon completion */\r\n        }\r\n        <p\r\n          className={\r\n            isSucceeded\r\n              ? \"result-message text-center\"\r\n              : \"result-message hidden text-center\"\r\n          }\r\n        >\r\n          Payment succeeded.\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {isSucceeded ? (\r\n          <Link\r\n            to={\"/\"}\r\n            onClick={() => {\r\n              dispatch(scrollToPlants());\r\n            }}\r\n          >\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        ) : (\r\n          <Link to={`/plants/read/${_id}`}>\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"../components/CheckoutForm\";\r\nimport { readUser, setIsFetchingUser, setLoggedInUser } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst promise = loadStripe(\r\n  \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n);\r\n\r\nconst CheckoutPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    scroll.scrollToTop();\r\n    dispatch(readUser())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingUser(false));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setIsFetchingUser(false));\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5 App\">\r\n        <Elements stripe={promise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutPage;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { Message, Plant, User } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\ntype RequestThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst RequestThumbnail = ({ message }: RequestThumbnailProps) => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const { _id, buyer, seller, plant, messageState } = message;\r\n\r\n  return (\r\n    <>\r\n      {loggedInUser &&\r\n        (seller as User)._id === loggedInUser._id &&\r\n        messageState === true && (\r\n          <div className=\"card p-3 mt-4\" key={_id}>\r\n            <h4> Request for {(plant as Plant).name} </h4>\r\n            <h5> by {(buyer as User).username} </h5>\r\n            <div className=\"text-center\">\r\n              <Link\r\n                className=\"btn smallWidth form-control\"\r\n                to={`/requests/read/${_id}`}\r\n              >\r\n                Details\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RequestThumbnail;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  fetchAllMessages,\r\n  setIsNewRequest,\r\n  Message,\r\n  setMessages,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  readUser,\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport RequestTile from \"../components/RequestTile\";\r\n\r\nconst RequestsPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Fetch all messages and reset values as soon as page loads and reset values during cleanup\r\n  useEffect(() => {\r\n    const handleResetAll = (): void => {\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    dispatch(readUser())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingUser(false));\r\n        dispatch(fetchAllMessages())\r\n          .unwrap()\r\n          .then((messages) => {\r\n            dispatch(setMessages(messages));\r\n            isUserChange && dispatch(setStartAmountOfRequests());\r\n            isUserChange && dispatch(setStartAmountOfReplies());\r\n            handleResetAll();\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setIsFetchingUser(false));\r\n        console.log(rejectedValue.message);\r\n      });\r\n    return () => {\r\n      handleResetAll();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/unauthorized\"} />;\r\n  }\r\n\r\n  if (!messages) {\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading requests...\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Requests for your plants </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {messages.map((message: Message, index: number) => {\r\n          return <RequestTile message={message} key={index} />;\r\n        })}\r\n        {amountOfRequests !== 0 && (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsPage;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { Message, Plant, User } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\ntype ReplyThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst ReplyThumbnail = ({ message }: ReplyThumbnailProps) => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const { _id, buyer, seller, plant, reply } = message;\r\n\r\n  return (\r\n    <>\r\n      {loggedInUser && (buyer as User)._id === loggedInUser._id && reply && (\r\n        <div className=\"card p-3 mt-4 \" key={_id}>\r\n          <h4> Reply for {(plant as Plant).name} </h4>\r\n          <h5> by {(seller as User).username} </h5>\r\n          <div className=\"text-center\">\r\n            <Link\r\n              className=\"btn smallWidth form-control\"\r\n              to={`/replies/read/${_id}`}\r\n            >\r\n              Details\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReplyThumbnail;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  fetchAllMessages,\r\n  setIsNewReply,\r\n  Message,\r\n  setMessages,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  readUser,\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport ReplyTile from \"../components/ReplyTile\";\r\n\r\nconst RepliesPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Fetch all requests and reset values as soon as page loads and reset values during cleanup\r\n  useEffect(() => {\r\n    const handleResetAll = (): void => {\r\n      dispatch(setIsNewReply(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    dispatch(readUser())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingUser(false));\r\n        dispatch(fetchAllMessages())\r\n          .unwrap()\r\n          .then((messages) => {\r\n            dispatch(setMessages(messages));\r\n            isUserChange && dispatch(setStartAmountOfRequests());\r\n            isUserChange && dispatch(setStartAmountOfReplies());\r\n            handleResetAll();\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setIsFetchingUser(false));\r\n        console.log(rejectedValue.message);\r\n      });\r\n    return () => {\r\n      handleResetAll();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/unauthorized\"} />;\r\n  }\r\n\r\n  if (!messages) {\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading replies...\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Replies for your requests </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {messages.map((message: Message, index: number) => {\r\n          return <ReplyTile message={message} key={index} />;\r\n        })}\r\n        {amountOfReplies !== 0 && (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesPage;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  createMessage,\r\n  setError,\r\n  Plant,\r\n  Message,\r\n  User,\r\n  addMessage,\r\n  readUser,\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst CreateRequestForm = () => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const error = useAppSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Set variable and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    scroll.scrollToTop();\r\n    dispatch(readUser())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingUser(false));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setIsFetchingUser(false));\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/unauthorized\"} />;\r\n  }\r\n\r\n  // Create request\r\n  const handleCreateMessage = (event: any, plant: Plant) => {\r\n    event.preventDefault();\r\n    const { request } = event.target;\r\n    const { _id, creator } = plant;\r\n    const newMessage: Message = {\r\n      seller: (creator as User)._id,\r\n      plant: _id,\r\n      request: request.value,\r\n    };\r\n    dispatch(createMessage(newMessage))\r\n      .unwrap()\r\n      .then((newMessage) => {\r\n        dispatch(addMessage(newMessage));\r\n        history.push(`/plants/read/${newMessage.plant}`);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setError(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  const { _id, name } = plant as Plant;\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\"> Your message </h2>\r\n        <h3 className=\"mb-4\"> for {name} </h3>\r\n        <form\r\n          className=\"pl-0\"\r\n          onSubmit={(event) => {\r\n            handleCreateMessage(event, plant);\r\n          }}\r\n        >\r\n          <div>\r\n            <textarea\r\n              className=\"mb-4 form-control\"\r\n              name=\"request\"\r\n              cols={35}\r\n              rows={7}\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <div className=\"text-right\">\r\n            <button\r\n              className=\"btn btn-sm mx-2 form-control smallWidth\"\r\n              type=\"submit\"\r\n            >\r\n              Send\r\n            </button>\r\n            <Link to={`/plants/read/${_id}`}>\r\n              <button className=\"btn btn-sm mx-2 form-control smallWidth\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRequestForm;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  readMessage,\r\n  User,\r\n  Plant,\r\n  Message,\r\n  setMessage,\r\n  updateMessage,\r\n  decreaseAmountOfRequests,\r\n  setMessageChanges,\r\n  readUser,\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst RequestDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const { messageId }: any = useParams();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read message and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readUser())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingUser(false));\r\n        dispatch(readMessage(messageId))\r\n          .unwrap()\r\n          .then((message) => {\r\n            dispatch(setMessage(message));\r\n            scroll.scrollToTop();\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n        scroll.scrollToTop();\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setIsFetchingUser(false));\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  // Set message of the buyer inactive by the seller\r\n  const handleSetMessageInactive = (message: Message, history: any) => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.messageState = false;\r\n    dispatch(setMessage(clonedMessage));\r\n    const { _id, buyer, seller, plant, request, reply, messageState } =\r\n      clonedMessage;\r\n    const updatedMessage: Message = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    };\r\n    dispatch(updateMessage({ messageId: _id, updatedMessage }))\r\n      .unwrap()\r\n      .then((message) => {\r\n        dispatch(setMessageChanges(message));\r\n        dispatch(decreaseAmountOfRequests());\r\n        history.push(\"/requests/fetch\");\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, buyer, plant, request, reply } = message as Message;\r\n  if (!buyer || !plant) {\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading message...\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Request for {(plant as Plant).name} </h2>\r\n        <h5> by {(buyer as User).username} </h5>\r\n        <p className=\"textField p-3 mb-4\"> {request} </p>\r\n        {reply && (\r\n          <div>\r\n            <h5> Your reply </h5>\r\n            <p className=\"textField p-3 mb-4\"> {reply} </p>\r\n          </div>\r\n        )}\r\n        <div className=\"text-right px-3\">\r\n          {!reply && (\r\n            <Link to={`/messages/update/${_id}`}>\r\n              <button className=\"btn btn-sm ml-2 smallWidth form-control mb-1\">\r\n                Reply\r\n              </button>\r\n            </Link>\r\n          )}\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => {\r\n              handleSetMessageInactive(message, history);\r\n            }}\r\n          >\r\n            Done\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/requests/fetch\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  readMessage,\r\n  deleteMessage,\r\n  User,\r\n  Plant,\r\n  Message,\r\n  setMessage,\r\n  removeMessage,\r\n  decreaseAmountOfReplies,\r\n  readUser,\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst ReplyDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const { messageId }: any = useParams();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read message and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readUser())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingUser(false));\r\n        dispatch(readMessage(messageId))\r\n          .unwrap()\r\n          .then((message) => {\r\n            dispatch(setMessage(message));\r\n            scroll.scrollToTop();\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setIsFetchingUser(false));\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, buyer, seller, plant, request, reply } = message as Message;\r\n  if (!buyer || !plant) {\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading replies...\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Your request for {(plant as Plant).name} </h2>\r\n        <p className=\"textField p-3 mb-4\"> {request} </p>\r\n        {reply && (\r\n          <div>\r\n            <h5> Reply by {(seller as User).username} </h5>\r\n            <p className=\"textField p-3 mb-4\"> {reply} </p>\r\n          </div>\r\n        )}\r\n        <div className=\"text-right px-3\">\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => {\r\n              dispatch(deleteMessage(_id))\r\n                .unwrap()\r\n                .then(() => {\r\n                  dispatch(removeMessage(_id));\r\n                  dispatch(decreaseAmountOfReplies());\r\n                  history && history.push(\"/replies/fetch\");\r\n                })\r\n                .catch((rejectedValue: any) => {\r\n                  console.log(rejectedValue.message);\r\n                });\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/replies/fetch\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setMessage,\r\n  updateMessage,\r\n  Message,\r\n  setMessageChanges,\r\n  readUser,\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst UpdateRequestForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    scroll.scrollToTop();\r\n    dispatch(readUser())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingUser(false));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setIsFetchingUser(false));\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  // Create reply\r\n  const handleCreateReply = ({ target }: any, message: Message): void => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.reply = target.value;\r\n    dispatch(setMessage(clonedMessage));\r\n  };\r\n\r\n  // Update message\r\n  const handleUpdateMessage = ({\r\n    _id,\r\n    buyer,\r\n    seller,\r\n    plant,\r\n    request,\r\n    reply,\r\n    messageState,\r\n  }: Message): void => {\r\n    const updatedMessage: Message = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    };\r\n    dispatch(updateMessage({ messageId: _id, updatedMessage }))\r\n      .unwrap()\r\n      .then((message) => {\r\n        dispatch(setMessageChanges(message));\r\n        history.push(`/requests/read/${_id}`);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, request } = message as Message;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> Reply your request </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <div className=\"card-body\">\r\n            <p> {request} </p>\r\n            <textarea\r\n              className=\"mb-4 form-control\"\r\n              name=\"reply\"\r\n              cols={31}\r\n              rows={6}\r\n              placeholder=\"Your reply\"\r\n              onChange={(event) => {\r\n                handleCreateReply(event, message);\r\n              }}\r\n            />\r\n            <div className=\"row justify-content-end px-3\">\r\n              <button\r\n                className=\"btn btn-sm smallWidth form-control mr-3 mb-2\"\r\n                onClick={() => {\r\n                  handleUpdateMessage(message);\r\n                }}\r\n              >\r\n                Submit\r\n              </button>\r\n              <Link to={`/requests/read/${_id}`}>\r\n                <button className=\"btn btn-sm form-control mb-2\">\r\n                  Go back\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateRequestForm;\r\n","const Unauthorized = (): JSX.Element => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 401 Unauthorized </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Unauthorized;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 404 Not Found </h3>\r\n        <Link to={\"/\"}>\r\n          <button className=\"btn btn-sm ml-2 smallWidth form-control\">\r\n            Take me home{\" \"}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useEffect } from \"react\";\r\n\r\nconst KommunicateChat = (): JSX.Element => {\r\n  // Create launcher icon as soon as page loads\r\n  useEffect(() => {\r\n    ((d, m) => {\r\n      const kommunicateSettings = {\r\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      const s = document.createElement(\"script\");\r\n      s.type = \"text/javascript\";\r\n      s.async = true;\r\n      s.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      const h = document.getElementsByTagName(\"head\")[0];\r\n      h.appendChild(s);\r\n      (window as any).kommunicate = m;\r\n      m._globals = kommunicateSettings;\r\n    })(document, (window as any).kommunicate || {});\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default KommunicateChat;\r\n","import { Route, Switch, withRouter } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./screens/Home\";\r\nimport SignUp from \"./screens/SignUp\";\r\nimport SignIn from \"./screens/SignIn\";\r\nimport LogOut from \"./components/LogOut\";\r\nimport CreatePlantForm from \"./screens/CreatePlantForm\";\r\nimport PlantDetails from \"./screens/PlantDetails\";\r\nimport UpdatePlantForm from \"./screens/UpdatePlantForm\";\r\nimport CheckoutPage from \"./screens/CheckoutPage\";\r\nimport RequestsPage from \"./screens/RequestsPage\";\r\nimport RepliesPage from \"./screens/RepliesPage\";\r\nimport CreateRequestForm from \"./screens/CreateRequestForm\";\r\nimport RequestDetails from \"./screens/RequestDetails\";\r\nimport ReplyDetails from \"./screens/ReplyDetails\";\r\nimport UpdateRequestForm from \"./screens/UpdateRequestForm\";\r\nimport Unauthorized from \"./screens/Unauthorized\";\r\nimport NotFound from \"./screens/NotFound\";\r\nimport KommunicateChat from \"./components/Chat\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <div className=\"main\">\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/read/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n\r\n        <Route path=\"/messages/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/messages/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch\">\r\n          <RequestsPage />\r\n        </Route>\r\n        <Route path=\"/requests/read/:messageId\">\r\n          <RequestDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/replies/fetch\">\r\n          <RepliesPage />\r\n        </Route>\r\n        <Route path=\"/replies/read/:messageId\">\r\n          <ReplyDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/signup\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/signin\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/logout\">\r\n          <LogOut />\r\n        </Route>\r\n\r\n        <Route path=\"/unauthorized\">\r\n          <Unauthorized />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"./reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}