{"version":3,"sources":["hooks.ts","reducer/jungleSwapSlice.ts","config.ts","components/NavBar.tsx","components/Footer.tsx","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/About.tsx","components/PlantThumbnail.tsx","components/AllPlants.tsx","components/Title.tsx","screens/Home.tsx","screens/SignUp.tsx","screens/SignIn.tsx","components/LogOut.tsx","screens/CreatePlantForm.tsx","screens/PlantDetails.tsx","screens/UpdatePlantForm.tsx","components/CheckoutForm.tsx","screens/CheckoutPage.tsx","components/RequestTile.tsx","screens/RequestsPage.tsx","components/ReplyTile.tsx","screens/RepliesPage.tsx","screens/CreateRequestForm.tsx","screens/RequestDetails.tsx","screens/ReplyDetails.tsx","screens/UpdateRequestForm.tsx","screens/NotFound.tsx","components/Chat.tsx","App.tsx","store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","apiPath","process","fetchAllPlants","createAsyncThunk","_options","a","dispatch","axios","get","response","setPlants","data","console","log","fetchQueryPlants","query","createPlant","uploadForm","plant","history","name","description","size","location","price","post","imageUrl","imagePublicId","newPlant","withCredentials","addPlant","push","scroll","scrollToBottom","setError","error","readPlant","plantId","setPlant","imageChange","destroyImageData","image","FormData","append","clonePlant","JSON","parse","stringify","updatePlant","updatedPlant","patch","setPlantChanges","scrollToPlants","deletePlant","delete","removePlant","createPayment","setClientSecret","clientSecret","payPlant","fetchAllMessages","isUserChange","setMessages","setStartAmountOfRequests","setStartAmountOfReplies","createMessage","newMessage","addMessage","readMessage","messageId","setMessage","updateMessage","updatedMessage","setMessageChanges","deleteMessage","removeMessage","decreaseAmountOfReplies","readUser","setLoggedInUser","setIsFetchingUser","signUp","newUser","setIsUserChange","signIn","user","loadedUser","setAmountOfRequests","amountOfRequests","setAmountOfReplies","amountOfReplies","logOut","intervalId","clearInterval","setIntervalId","setDelayCounter","setIsNewRequest","scrollToTop","jungleSwapSlice","createSlice","initialState","isFetchingUser","loggedInUser","plants","messages","message","isNewRequest","isNewReply","delayCounter","headerContainerHeight","aboutContainerHeight","reducers","setUser","state","action","payload","_id","map","singlePlant","filter","buyer","seller","request","reply","messageState","singleMessage","setIsNewReply","increaseDelayCounter","decreaseAmountOfRequests","setHeaderContainerHeight","setAboutContainerHeight","scrollToAbout","scrollTo","actions","NavBar","jungleSwap","useEffect","setInterval","currentAmountOfRequests","length","currentAmountOfReplies","Navbar","className","variant","expand","fixed","Brand","to","onClick","Toggle","aria-controls","icon","faBell","Collapse","id","Nav","title","username","Footer","About","src","alt","PlantThumbnail","AllPlants","useState","setQuery","type","placeholder","value","onChange","event","target","Title","Home","elementRef","useRef","headerElementHeight","Math","round","current","getBoundingClientRect","height","aboutElementHeight","role","ref","headerElement","aboutElement","SignUp","useHistory","onSubmit","preventDefault","email","password","toLowerCase","handleSignUp","htmlFor","formNoValidate","SignIn","handleSignIn","LogOut","clonedUser","CreatePlantForm","plantImage","files","handleCreatePlant","min","PlantDetails","useParams","creator","forEach","handleDeletePlant","UpdatePlantForm","handlePlantEntryChange","itemNumber","clonedPlant","handleImageChange","handleUpdatePlant","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","handleChange","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","disabled","promise","loadStripe","CheckoutPage","RequestThumbnail","RequestsPage","handleResetAll","RequestTile","ReplyThumbnail","RepliesPage","ReplyTile","CreateRequestForm","handleCreateMessage","cols","rows","RequestDetails","clonedMessage","handleSetMessageInactive","ReplyDetails","UpdateRequestForm","handleCreateReply","handleUpdateMessage","NotFound","KommunicateChat","d","m","s","document","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","withRouter","exact","path","component","store","configureStore","reducer","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.1b75e9ed.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\nexport interface User {\r\n  _id?: string;\r\n  username?: string;\r\n  email: string;\r\n  password: string;\r\n  amountOfRequests?: number;\r\n  amountOfReplies?: number;\r\n}\r\n\r\nexport interface MessageCounters {\r\n  amountOfRequests?: number;\r\n  amountOfReplies?: number;\r\n}\r\n\r\nexport interface Plant {\r\n  _id?: string;\r\n  name?: string;\r\n  description?: string;\r\n  size?: number;\r\n  imageUrl?: string;\r\n  imagePublicId?: string;\r\n  location?: string;\r\n  price?: number;\r\n  creator?: string | User | undefined;\r\n}\r\n\r\nexport interface Message {\r\n  _id?: string;\r\n  buyer?: string | User | undefined;\r\n  seller?: string | User | undefined;\r\n  plant?: string | Plant | undefined;\r\n  request?: string;\r\n  reply?: string;\r\n  messageState?: boolean;\r\n}\r\n\r\nexport type LoggedInUser = User | null;\r\nexport type IntervalId = NodeJS.Timer | null;\r\nexport type Error = string | null;\r\n\r\ninterface SliceState {\r\n  isFetchingUser: boolean;\r\n  loggedInUser: LoggedInUser;\r\n  isUserChange: boolean;\r\n  plants: Plant[];\r\n  plant: Plant | {};\r\n  messages: Message[];\r\n  message: Message | {};\r\n  amountOfRequests: number;\r\n  amountOfReplies: number;\r\n  isNewRequest: boolean;\r\n  isNewReply: boolean;\r\n  intervalId: IntervalId;\r\n  delayCounter: number;\r\n  headerContainerHeight: number;\r\n  aboutContainerHeight: number;\r\n  clientSecret: string;\r\n  error: Error;\r\n}\r\n\r\nconst initialState: SliceState = {\r\n  isFetchingUser: true,\r\n  loggedInUser: null,\r\n  isUserChange: false,\r\n  plants: [],\r\n  plant: {},\r\n  messages: [],\r\n  message: {},\r\n  amountOfRequests: 0,\r\n  amountOfReplies: 0,\r\n  isNewRequest: false,\r\n  isNewReply: false,\r\n  intervalId: null,\r\n  delayCounter: 0,\r\n  headerContainerHeight: 0,\r\n  aboutContainerHeight: 0,\r\n  clientSecret: \"\",\r\n  error: null,\r\n};\r\n\r\n// --------- Plants ---------\r\n// Fetch all plants\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async (_options, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch`);\r\n      dispatch(setPlants(response.data));\r\n    } catch (err) {\r\n      console.log(\"Fetching plants failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch query plants\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query: string, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      dispatch(setPlants(response.data));\r\n    } catch (err) {\r\n      console.log(\"Fetching query plants failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant\r\ninterface CreatePlantParameters {\r\n  uploadForm: any;\r\n  plant: Plant;\r\n  history: any;\r\n}\r\n\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async (\r\n    { uploadForm, plant, history }: CreatePlantParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    const { name, description, size, location, price } = plant;\r\n    try {\r\n      const response = await axios.post(`${apiPath}/upload`, uploadForm);\r\n      const { imageUrl, imagePublicId } = response.data;\r\n      const newPlant: Plant = {\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      };\r\n      try {\r\n        const response = await axios.post(\r\n          `${apiPath}/plants/create`,\r\n          newPlant,\r\n          { withCredentials: true }\r\n        );\r\n        dispatch(addPlant(response.data));\r\n        history.push(\"/\");\r\n        scroll.scrollToBottom();\r\n      } catch (err: any) {\r\n        dispatch(setError(err.response.data.error));\r\n      }\r\n    } catch (err: any) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Read plant\r\nexport const readPlant = createAsyncThunk(\r\n  \"jungleSwap/readPlant\",\r\n  async (plantId: string, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/read/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      dispatch(setPlant(response.data));\r\n    } catch (err) {\r\n      console.log(\"Read plant failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Plant image change\r\ninterface DestroyImageData {\r\n  imagePublicId: string | undefined;\r\n}\r\n\r\ninterface ImageChangeParameters {\r\n  destroyImageData: DestroyImageData;\r\n  image: string;\r\n  plant: Plant;\r\n}\r\n\r\nexport const imageChange = createAsyncThunk(\r\n  \"jungleSwap/imageChange\",\r\n  async (\r\n    { destroyImageData, image, plant }: ImageChangeParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      await axios.post(`${apiPath}/destroy`, destroyImageData);\r\n      try {\r\n        const uploadForm = new FormData();\r\n        uploadForm.append(\"image\", image);\r\n        const response = await axios.post(`${apiPath}/upload`, uploadForm);\r\n        const { imagePublicId, imageUrl } = response.data;\r\n        const clonePlant = JSON.parse(JSON.stringify(plant));\r\n        clonePlant.imagePublicId = imagePublicId;\r\n        clonePlant.imageUrl = imageUrl;\r\n        dispatch(setPlant(clonePlant));\r\n      } catch (err) {\r\n        console.log(\"Image upload failed\", err);\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Delete old image failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Update plant\r\ninterface UpdatePlantParameters {\r\n  plantId: string | undefined;\r\n  updatedPlant: Plant;\r\n  history: any;\r\n}\r\n\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async (\r\n    { plantId, updatedPlant, history }: UpdatePlantParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      dispatch(setPlantChanges(response.data));\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    } catch (err) {\r\n      console.log(\"Update plant failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete Plant\r\ninterface DeletePlantParameters {\r\n  imagePublicId: string | undefined;\r\n  plantId: string | undefined;\r\n  history: any;\r\n}\r\n\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (\r\n    { imagePublicId, plantId, history }: DeletePlantParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      const destroyImageData = {\r\n        imagePublicId,\r\n      };\r\n      await axios.post(`${apiPath}/destroy`, destroyImageData);\r\n      try {\r\n        await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n        dispatch(removePlant(plantId));\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      } catch (err) {\r\n        console.log(\"Delete plant failed\", err);\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Delete image failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant payment\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant: Plant, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/create-payment-intent`, {\r\n        price: plant.price,\r\n      });\r\n      dispatch(setClientSecret(response.data.clientSecret));\r\n    } catch (err) {\r\n      console.log(\"Create payment failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Pay plant\r\nexport const payPlant = createAsyncThunk(\r\n  \"jungleSwap/payPlant\",\r\n  async (history: any, { dispatch }): Promise<void> => {\r\n    try {\r\n      await axios.post(\r\n        `${apiPath}/create-payment-intent`,\r\n        {},\r\n        { withCredentials: true }\r\n      );\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    } catch (err) {\r\n      console.log(\"Checkout failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// --------- Messages ----------\r\n// Fetch all messages\r\nexport const fetchAllMessages = createAsyncThunk(\r\n  \"jungleSwap/fetchAllMessages\",\r\n  async (isUserChange: boolean, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/messages/fetch`);\r\n      dispatch(setMessages(response.data));\r\n      isUserChange && dispatch(setStartAmountOfRequests());\r\n      isUserChange && dispatch(setStartAmountOfReplies());\r\n    } catch (err) {\r\n      console.log(\"Fetching messages failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create messages\r\ninterface CreateMessageParameters {\r\n  newMessage: Message;\r\n  history: any;\r\n}\r\n\r\nexport const createMessage = createAsyncThunk(\r\n  \"jungleSwap/createMessage\",\r\n  async (\r\n    { newMessage, history }: CreateMessageParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/messages/create`,\r\n        newMessage,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(addMessage(response.data));\r\n      history.push(`/plants/read/${response.data.plant}`);\r\n    } catch (err: any) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Read message\r\nexport const readMessage = createAsyncThunk(\r\n  \"jungleSwap/readMessage\",\r\n  async (messageId: string, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${apiPath}/messages/read/${messageId}`,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setMessage(response.data));\r\n    } catch (err) {\r\n      console.log(\"Read message failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Update message\r\ninterface UpdateMessageParameters {\r\n  messageId: string | undefined;\r\n  updatedMessage: Message;\r\n}\r\n\r\nexport const updateMessage = createAsyncThunk(\r\n  \"jungleSwap/updateMessage\",\r\n  async (\r\n    { messageId, updatedMessage }: UpdateMessageParameters,\r\n    { dispatch }\r\n  ) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/messages/update/${messageId}`,\r\n        updatedMessage\r\n      );\r\n      dispatch(setMessageChanges(response.data));\r\n    } catch (err) {\r\n      console.log(\"Update message failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete message\r\ninterface DeleteMessageParameters {\r\n  messageId: string | undefined;\r\n  history: any;\r\n}\r\n\r\nexport const deleteMessage = createAsyncThunk(\r\n  \"jungleSwap/deleteMessage\",\r\n  async (\r\n    { messageId, history }: DeleteMessageParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\r\n      dispatch(removeMessage(messageId));\r\n      dispatch(decreaseAmountOfReplies());\r\n      history && history.push(\"/replies/fetch\");\r\n    } catch (err) {\r\n      console.log(\"Delete message failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// ---------- User authentification ----------\r\n// Read user\r\nexport const readUser = createAsyncThunk(\r\n  \"jungleSwap/readUserData\",\r\n  async (_options, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/user`, {\r\n        withCredentials: true,\r\n      });\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsFetchingUser(false));\r\n    } catch (err) {\r\n      console.log(\"Initializing fetching failed\", err);\r\n      dispatch(setIsFetchingUser(false));\r\n    }\r\n  }\r\n);\r\n\r\n// Sign up\r\ninterface SignUpParameters {\r\n  newUser: User;\r\n  history: any;\r\n}\r\n\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (\r\n    { newUser, history }: SignUpParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/signup`, newUser);\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    } catch (err: any) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Sign in\r\ninterface SignInParameters {\r\n  user: User;\r\n  history: any;\r\n}\r\n\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async ({ user, history }: SignInParameters, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/signin`, user, {\r\n        withCredentials: true,\r\n      });\r\n      const loadedUser = response.data;\r\n      dispatch(setLoggedInUser(loadedUser));\r\n      dispatch(setAmountOfRequests(loadedUser.amountOfRequests));\r\n      dispatch(setAmountOfReplies(loadedUser.amountOfReplies));\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    } catch (err: any) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// LogOut\r\ninterface LogOutParameters {\r\n  user: User | null;\r\n  intervalId: NodeJS.Timer;\r\n  history: any;\r\n}\r\n\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (\r\n    { user, intervalId, history }: LogOutParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      await axios.post(`${apiPath}/logout`, user, { withCredentials: true });\r\n      dispatch(setLoggedInUser(null));\r\n      clearInterval(intervalId);\r\n      dispatch(setIntervalId(null));\r\n      dispatch(setDelayCounter(0));\r\n      dispatch(setIsNewRequest(false));\r\n      history.push(\"/\");\r\n      scroll.scrollToTop();\r\n    } catch (err) {\r\n      console.log(\"Logout failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n  // ---------- Reducers -----------\r\n  reducers: {\r\n    // --------- User -----------\r\n    setUser: (state, action: PayloadAction<User>) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n\r\n    // --------- Plants ----------\r\n    setPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.plants = action.payload;\r\n    },\r\n    setPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plant = action.payload;\r\n    },\r\n    addPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plants.push(action.payload);\r\n    },\r\n    setPlantChanges: (state, action: PayloadAction<Plant>) => {\r\n      const {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      } = action.payload;\r\n      state.plants = state.plants.map((singlePlant: Plant) => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, action: PayloadAction<string | undefined>) => {\r\n      state.plants = state.plants.filter(\r\n        (plant: Plant) => plant._id !== action.payload\r\n      );\r\n    },\r\n    setClientSecret: (state, action: PayloadAction<string>) => {\r\n      state.clientSecret = action.payload;\r\n    },\r\n\r\n    // ---------- Messages ----------\r\n    setMessages: (state, action: PayloadAction<Message[]>) => {\r\n      state.messages = action.payload;\r\n    },\r\n    setMessage: (state, action: PayloadAction<Message>) => {\r\n      state.message = action.payload;\r\n    },\r\n    addMessage: (state, action: PayloadAction<Message>) => {\r\n      state.messages.push(action.payload);\r\n    },\r\n    setMessageChanges: (state, action: PayloadAction<Message>) => {\r\n      const { _id, buyer, seller, plant, request, reply, messageState } =\r\n        action.payload;\r\n      state.messages = state.messages.map((singleMessage) => {\r\n        if (singleMessage._id === _id) {\r\n          singleMessage.buyer = buyer;\r\n          singleMessage.seller = seller;\r\n          singleMessage.plant = plant;\r\n          singleMessage.request = request;\r\n          singleMessage.reply = reply;\r\n          singleMessage.messageState = messageState;\r\n        }\r\n        return singleMessage;\r\n      });\r\n    },\r\n    removeMessage: (state, action: PayloadAction<string | undefined>) => {\r\n      state.messages = state.messages.filter((message: Message) => {\r\n        return message._id !== action.payload;\r\n      });\r\n    },\r\n    setStartAmountOfRequests: (state) => {\r\n      state.loggedInUser && (state.amountOfRequests = (state.loggedInUser as any).amountOfRequests);\r\n    },\r\n    setStartAmountOfReplies: (state) => {\r\n      state.loggedInUser && (state.amountOfReplies = (state.loggedInUser as any).amountOfReplies);\r\n    },\r\n    setAmountOfRequests: (state, action: PayloadAction<number>) => {\r\n      state.amountOfRequests = action.payload;\r\n    },\r\n    setAmountOfReplies: (state, action: PayloadAction<number>) => {\r\n      state.amountOfReplies = action.payload;\r\n    },\r\n    setIsNewRequest: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewRequest = action.payload;\r\n    },\r\n    setIsNewReply: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewReply = action.payload;\r\n    },\r\n    setIntervalId: (state, action: PayloadAction<IntervalId>) => {\r\n      state.intervalId = action.payload;\r\n    },\r\n    setDelayCounter: (state, action: PayloadAction<number>) => {\r\n      state.delayCounter = action.payload;\r\n    },\r\n    increaseDelayCounter: (state) => {\r\n      state.delayCounter += 1;\r\n    },\r\n    decreaseAmountOfRequests: (state) => {\r\n      state.amountOfRequests && (state.amountOfRequests -= 1);\r\n    },\r\n    decreaseAmountOfReplies: (state) => {\r\n      state.amountOfReplies && (state.amountOfReplies -= 1);\r\n    },\r\n\r\n    // ---------- User authentification ----------\r\n    setLoggedInUser: (state, action: PayloadAction<LoggedInUser>) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n    setIsFetchingUser: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingUser = action.payload;\r\n    },\r\n    setIsUserChange: (state, action: PayloadAction<boolean>) => {\r\n      state.isUserChange = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<Error>) => {\r\n      state.error = action.payload;\r\n    },\r\n\r\n    // ---------- Pages handling ----------\r\n    setHeaderContainerHeight: (state, action: PayloadAction<number>) => {\r\n      state.headerContainerHeight = action.payload;\r\n    },\r\n    setAboutContainerHeight: (state, action: PayloadAction<number>) => {\r\n      state.aboutContainerHeight = action.payload;\r\n    },\r\n    scrollToAbout: (state) => {\r\n      scroll.scrollTo(state.headerContainerHeight);\r\n    },\r\n    scrollToPlants: (state) => {\r\n      scroll.scrollTo(state.headerContainerHeight + state.aboutContainerHeight);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  // ----------- User -----------\r\n  setUser,\r\n\r\n  // ----------- Plants ----------\r\n  setPlants,\r\n  setPlant,\r\n  addPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n  setClientSecret,\r\n\r\n  // ---------- Requests ----------\r\n  setMessages,\r\n  setMessage,\r\n  addMessage,\r\n  setMessageChanges,\r\n  removeMessage,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setIntervalId,\r\n  setDelayCounter,\r\n  increaseDelayCounter,\r\n  decreaseAmountOfRequests,\r\n  decreaseAmountOfReplies,\r\n\r\n  // ---------- User authentification ----------\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n  setIsUserChange,\r\n  setError,\r\n\r\n  // ---------- Pages handling ----------\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  fetchAllMessages,\r\n  setIsUserChange,\r\n  setIntervalId,\r\n  increaseDelayCounter,\r\n  setDelayCounter,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  scrollToPlants,\r\n  User,\r\n  Message,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NavBar = () => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const messages = useAppSelector((state: RootState) => state.jungleSwap.messages);\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const delayCounter = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.delayCounter\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Stop interval at cleanup\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n        dispatch(setIntervalId(null));\r\n        dispatch(setDelayCounter(0));\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Start request/reply check if user changes\r\n  useEffect(() => {\r\n    if (isUserChange) {\r\n      dispatch(fetchAllMessages(isUserChange));\r\n      dispatch(setIsUserChange(false));\r\n      dispatch(\r\n        setIntervalId(\r\n          setInterval(\r\n            () => {\r\n              dispatch(increaseDelayCounter());\r\n            },\r\n            1000 // every second\r\n          )\r\n        )\r\n      );\r\n      dispatch(increaseDelayCounter());\r\n    }\r\n  }, [isUserChange]);\r\n\r\n  // Check new requests/replies for logged in user every second\r\n  useEffect(() => {\r\n    if (loggedInUser) {\r\n      dispatch(fetchAllMessages(isUserChange));\r\n      const currentAmountOfRequests = messages.filter((message: Message) => {\r\n        const { seller, messageState } = message;\r\n        return (\r\n          (seller as User)._id === loggedInUser._id && messageState === true\r\n        );\r\n      }).length;\r\n      if (amountOfRequests < currentAmountOfRequests) {\r\n        dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n        dispatch(setIsNewRequest(true));\r\n      } else if (amountOfRequests > currentAmountOfRequests) {\r\n        dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n      }\r\n      const currentAmountOfReplies = messages.filter((message: Message) => {\r\n        const { buyer, reply } = message;\r\n        return (buyer as User)._id === loggedInUser._id && reply;\r\n      }).length;\r\n      if (amountOfReplies < currentAmountOfReplies) {\r\n        dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n        dispatch(setIsNewReply(true));\r\n      }\r\n    }\r\n  }, [delayCounter]);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar className=\"pl-5\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" onClick={scroll.scrollToTop}>\r\n            JungleSwap\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\r\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\r\n        </Navbar.Toggle>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <>\r\n              <Link\r\n                to=\"/\"\r\n                className=\"p-2\"\r\n                onClick={() => {\r\n                  dispatch(scrollToPlants());\r\n                }}\r\n              >\r\n                All Plants\r\n              </Link>\r\n            </>\r\n            {loggedInUser && (\r\n              <>\r\n                <Link className=\"p-2\" to=\"/plants/create\">\r\n                  Create Plant\r\n                </Link>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/requests/fetch\"\r\n                  title={isNewRequest ? \"new request\" : \"\"}\r\n                >\r\n                  {isNewRequest && <FontAwesomeIcon icon={faBell} />}\r\n                  Requests\r\n                </Link>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/replies/fetch\"\r\n                  title={isNewReply ? \"new reply\" : \"\"}\r\n                >\r\n                  {isNewReply && <FontAwesomeIcon icon={faBell} />}\r\n                  Replies\r\n                </Link>\r\n              </>\r\n            )}\r\n            {loggedInUser ? (\r\n              <>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/logout\"\r\n                  title={loggedInUser.username}\r\n                >\r\n                  Log out\r\n                </Link>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Link className=\"p-2\" to=\"/signin\">\r\n                  Sign in\r\n                </Link>\r\n                <Link className=\"p-2\" to=\"/signup\">\r\n                  Sign up\r\n                </Link>\r\n              </>\r\n            )}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst Footer = (): JSX.Element => {\r\n  return (\r\n    <div className=\"footer-row\">\r\n      <footer>\r\n        © 2021\r\n        <Link to={\"https://www.linkedin.com/in/christian-gerbig/\"}>\r\n          Christian Gerbig\r\n        </Link>\r\n        &amp;\r\n        <Link to={\"https://www.linkedin.com/in/lisa-montebaur/\"}>\r\n          Lisa Montebaur\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import image from \"../images/JungleSwap_Home.png\";\r\nimport icon from \"../images/JungleSwap_Icon.png\";\r\n\r\nconst About = ():JSX.Element => {\r\n  return (\r\n    <div className=\"about centered container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n          <img className=\"image\" src={image} alt=\"plants\" />\r\n        </div>\r\n        <br />\r\n        <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 noOverflow\">\r\n          <h4> Welcome to JungleSwap! </h4>\r\n          <h5> Add green to your Home </h5>\r\n          <p>\r\n            It\"s easy-peasy. <br />\r\n            Share your plant offshoots. <br />\r\n            Make money! <br />\r\n            Or swap them for another plant. <br />\r\n            Don\"t have any baby plants? <br />\r\n            You can simply shop and give a plant a new home.\r\n          </p>\r\n          <img className=\"icon\" src={icon} alt=\"icon\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import { Link } from \"react-router-dom\";\r\nimport { Plant } from \"../reducer/jungleSwapSlice\";\r\n\r\ntype PlantThumbnailProps = {\r\n  plant: Plant;\r\n};\r\n\r\nconst PlantThumbnail = ({ plant }: PlantThumbnailProps): JSX.Element => {\r\n  const { _id, name, imageUrl, price } = plant;\r\n  return (\r\n    <div className=\"col mb-5\" key={_id}>\r\n      <div className=\"card card-medium-width text-center h-100\">\r\n        <img className=\"card-img-top mediumPicSize\" src={imageUrl} alt={name} />\r\n        <div className=\"card-body mb-5\">\r\n          <h5> {name} </h5>\r\n          <p> {price} € </p>\r\n          <Link\r\n            className=\"btn form-control smallWidth\"\r\n            to={`/plants/read/${_id}`}\r\n          >\r\n            Details\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantThumbnail;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  fetchAllPlants,\r\n  fetchQueryPlants,\r\n  Plant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport PlantThumbnail from \"../components/PlantThumbnail\";\r\n\r\nconst AllPlants = () => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Handle plant search result if user types in query\r\n  useEffect(() => {\r\n    query ? dispatch(fetchQueryPlants(query)) : dispatch(fetchAllPlants());\r\n  }, [query]);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-3\">\r\n        <h2> Plants </h2>\r\n        <hr />\r\n        <h4> Search a plant </h4>\r\n      </div>\r\n      <div className=\"mb-4\">\r\n        <input\r\n          className=\"smallWidth form-control\"\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          value={query}\r\n          onChange={(event) => {\r\n            setQuery(event.target.value);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n        {plants &&\r\n          plants.map((plant: Plant): JSX.Element => {\r\n            return <PlantThumbnail plant={plant} />;\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllPlants;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport { scrollToAbout } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst Title = (): JSX.Element => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <div className=\"row my-5\">\r\n      <div className=\"col-6 offset-3 my-5 borderAround\">\r\n        <h2 className=\"title mb-2\"> JungleSwap </h2>\r\n        <h5 className=\"mt-3 mb-5\"> Share your green heart </h5>\r\n        <div className=\"mb-5\">\r\n          <Link\r\n            to={\"/\"}\r\n            className=\"biggerFontSize\"\r\n            onClick={() => {\r\n              dispatch(scrollToAbout());\r\n            }}\r\n          >\r\n            Try it!\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  fetchAllPlants,\r\n  readUser,\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nimport About from \"../components/About\";\r\nimport AllPlants from \"../components/AllPlants\";\r\nimport Title from \"../components/Title\";\r\n\r\nconst Home = (): JSX.Element => {\r\n  const isFetchingUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingUser\r\n  );\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n  const elementRef = useRef([]);\r\n\r\n  // Load plants and user data as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(fetchAllPlants());\r\n    !loggedInUser && dispatch(readUser());\r\n    const headerElementHeight = Math.round(\r\n      (elementRef.current[0] as any).getBoundingClientRect().height\r\n    );\r\n    dispatch(setHeaderContainerHeight(headerElementHeight));\r\n    const aboutElementHeight = Math.round(\r\n      (elementRef.current[1] as any).getBoundingClientRect().height\r\n    );\r\n    dispatch(setAboutContainerHeight(aboutElementHeight));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {!plants && (\r\n        <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span className=\"visually-hidden\">\r\n            <br /> <br /> Loading plants...\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      {isFetchingUser && (\r\n        <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span className=\"visually-hidden\">\r\n            <br /> <br /> Loading user data...\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      <header\r\n        className=\"text-center pt-5 pb-5 headerImg\"\r\n        ref={(headerElement) => {\r\n          (elementRef.current[0] as any) = headerElement;\r\n        }}\r\n      >\r\n        <Title />\r\n      </header>\r\n\r\n      <section\r\n        ref={(aboutElement) => {\r\n          (elementRef.current[1] as any) = aboutElement;\r\n        }}\r\n      >\r\n        <About />\r\n      </section>\r\n\r\n      <section>\r\n        <AllPlants />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { setError, setIsNewRequest, signUp } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignUp = (): JSX.Element => {\r\n  const error = useAppSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign up\r\n  const handleSignUp = (event: any, history: any): void => {\r\n    event.preventDefault();\r\n    const { username, email, password } = event.target;\r\n    const newUser = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    dispatch(signUp({ newUser, history }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign Up </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleSignUp(event, history);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\"> Username </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n            formNoValidate\r\n          >\r\n            Sign up\r\n          </button>\r\n          <p className=\"padding\"> Already have an account? </p>\r\n          <div className=\"text-right\">\r\n            <Link to={\"/signin\"}>\r\n              <button className=\"btn btn-sm ml-4 smallWidth form-control mt-0 mb-2\">\r\n                Sign In\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setError,\r\n  setIsNewRequest,\r\n  signIn,\r\n  User,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignIn = (): JSX.Element => {\r\n  const error = useAppSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign in\r\n  const handleSignIn = (event: any, history: any): void => {\r\n    event.preventDefault();\r\n    const { email, password } = event.target;\r\n    const user: User = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    dispatch(signIn({ user, history }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign In </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleSignIn(event, history);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n            formNoValidate\r\n          >\r\n            Sign in\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { logOut, setUser, User } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst LogOut = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector((state: RootState) => state.jungleSwap.loggedInUser);\r\n  const intervalId: any = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n// Update user and log out as soon as page loads\r\n  useEffect(() => {\r\n    const clonedUser: User = JSON.parse(JSON.stringify(loggedInUser));\r\n    clonedUser.amountOfRequests = amountOfRequests;\r\n    clonedUser.amountOfReplies = amountOfReplies;\r\n    dispatch(setUser(clonedUser));\r\n    dispatch(logOut({ user: clonedUser, intervalId, history }));\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { createPlant, Plant, setError } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst CreatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const error = useAppSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads and scroll to plants section during cleanup\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Create plant\r\n  const handleCreatePlant = (event: any, history: any) => {\r\n    event.preventDefault();\r\n    const { name, description, size, plantImage, location, price } =\r\n      event.target;\r\n    const image = plantImage.files[0];\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    const plant: Plant = {\r\n      name: name.value,\r\n      description: description.value,\r\n      size: size.value,\r\n      location: location.value,\r\n      price: price.value,\r\n    };\r\n    dispatch(createPlant({ uploadForm, plant, history }));\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/signup\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mb-5 text-left\"> Create a plant </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleCreatePlant(event, history);\r\n          }}\r\n        >\r\n          <label htmlFor=\"enterName\"> Name </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterName\"\r\n          />\r\n          <label htmlFor=\"enterDescription\"> Description </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"description\"\r\n            type=\"text\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterDescription\"\r\n          />\r\n          <label htmlFor=\"enterSize\"> Size (cm) </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"size\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterSize\"\r\n          />\r\n          <label htmlFor=\"enterLocation\"> Location </label>\r\n          <select\r\n            className=\"mb-4 form-control p-2\"\r\n            name=\"location\"\r\n            id=\"enterLocation\"\r\n          >\r\n            <option> Select location </option>\r\n            <option value=\"sun\"> sun </option>\r\n            <option value=\"shade\"> shade </option>\r\n            <option value=\"sun and shade\"> sun and shade </option>\r\n          </select>\r\n          <label htmlFor=\"enterPrice\"> Price (EUR) </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"price\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterPrice\"\r\n          />\r\n          <label htmlFor=\"enterImage\"> Image </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"plantImage\"\r\n            type=\"file\"\r\n            id=\"enterImage\"\r\n          />\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <div className=\"col-12 text-right pr-0\">\r\n            <button\r\n              className=\"btn btn-sm form-control smallWidth ml-4 mb-2\"\r\n              type=\"submit\"\r\n            >\r\n              Create\r\n            </button>\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm form-control smallWidth ml-4 mb-2\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePlantForm;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  readPlant,\r\n  deletePlant,\r\n  deleteMessage,\r\n  scrollToPlants,\r\n  User,\r\n  Message,\r\n  Plant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst PlantDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const { plantId }: any = useParams();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read plant data and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readPlant(plantId));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Delete plant\r\n  const handleDeletePlant = (\r\n    imagePublicId: string | undefined,\r\n    plantId: string | undefined,\r\n    history: any,\r\n    messages: Message[]\r\n  ) => {\r\n    messages.forEach((message: Message) => {\r\n      const { plant }: any = message;\r\n      if (plant._id === plantId) {\r\n        dispatch(deleteMessage({ messageId: message._id, history: null }));\r\n      }\r\n    });\r\n    dispatch(deletePlant({ imagePublicId, plantId, history }));\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/signup\"} />;\r\n  }\r\n\r\n  const {\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n    creator,\r\n  } = plant as Plant;\r\n  if (!creator) {\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading plant details...\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2> Plant details </h2>\r\n      </div>\r\n      <div className=\"col\">\r\n        <div className=\"card cardMediumWidth\">\r\n          {imageUrl && (\r\n            <img\r\n              className=\"card-img-top mediumPicSize\"\r\n              src={imageUrl}\r\n              alt={name}\r\n            />\r\n          )}\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Name: </span> {name}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Description: </span> {description}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Size: </span> {size} cm\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Likes: </span> {location}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Price: </span> {price} €\r\n          </div>\r\n          <div className=\"ml-2 mt-2 col justify-content-center\">\r\n            <div className=\"row-2 justify-content-center\">\r\n              <div className=\"card-body text-right pt-0\">\r\n                {loggedInUser._id === (creator as User)._id ? (\r\n                  <div className=\"p-0\">\r\n                    <Link to={\"/plants/update\"}>\r\n                      <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                        Update\r\n                      </button>\r\n                    </Link>\r\n                    <button\r\n                      className=\"btn btn-sm ml-2 form-control smallWidth mb-2\"\r\n                      onClick={() => {\r\n                        handleDeletePlant(\r\n                          imagePublicId,\r\n                          _id,\r\n                          history,\r\n                          messages\r\n                        );\r\n                      }}\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <Link to=\"/plants/checkout\">\r\n                      <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                        Buy\r\n                      </button>\r\n                    </Link>\r\n                    <Link to=\"/messages/create\">\r\n                      <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                        Swap\r\n                      </button>\r\n                    </Link>\r\n                  </div>\r\n                )}\r\n                <Link\r\n                  to={\"/\"}\r\n                  onClick={() => {\r\n                    dispatch(scrollToPlants());\r\n                  }}\r\n                >\r\n                  <button className=\"btn btn-sm ml-2 form-control smallWidth mb-3\">\r\n                    Go back\r\n                  </button>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  imageChange,\r\n  updatePlant,\r\n  setPlant,\r\n  Plant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst UpdatePlantForm = (): JSX.Element => {\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Check which plant values changed\r\n  const handlePlantEntryChange = (\r\n    { target }: any,\r\n    plant: Plant,\r\n    itemNumber: number\r\n  ): void => {\r\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\r\n    // eslint-disable-next-line default-case\r\n    switch (itemNumber) {\r\n      case 0:\r\n        clonedPlant.name = target.value;\r\n        break;\r\n      case 1:\r\n        clonedPlant.description = target.value;\r\n        break;\r\n      case 2:\r\n        clonedPlant.size = target.value;\r\n        break;\r\n      case 3:\r\n        clonedPlant.location = target.value;\r\n        break;\r\n      case 4:\r\n        clonedPlant.price = target.value;\r\n    }\r\n    dispatch(setPlant(clonedPlant));\r\n  };\r\n\r\n  // Plant image changed\r\n  const handleImageChange = ({ target }: any, plant: Plant): void => {\r\n    const image = target.files[0];\r\n    const { imagePublicId } = plant as Plant;\r\n    const destroyImageData = {\r\n      imagePublicId,\r\n    };\r\n    dispatch(imageChange({ destroyImageData, image, plant }));\r\n  };\r\n\r\n  const handleUpdatePlant = (\r\n    {\r\n      _id,\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    }: Plant,\r\n    history: any\r\n  ): void => {\r\n    const updatedPlant: Plant = {\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    };\r\n    dispatch(updatePlant({ plantId: _id, updatedPlant, history }));\r\n  };\r\n\r\n  const { _id, name, description, size, imageUrl, price } = plant as Plant;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mt-5 mb-4 text-left\"> Update your plant </h2>\r\n        <div className=\"card cardMediumWidth mb-5\">\r\n          <img className=\"mb-2 smallPicSize\" src={imageUrl} alt={name} />\r\n          <div className=\"card-body\">\r\n            <label htmlFor=\"updateName\"> Name </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"text\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 0);\r\n              }}\r\n              value={name}\r\n              id=\"updateName\"\r\n            />\r\n            <label htmlFor=\"updateDescription\"> Description </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"text\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 1);\r\n              }}\r\n              value={description}\r\n              id=\"updateDescription\"\r\n            />\r\n            <label htmlFor=\"updateSize\"> Size (cm) </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 2);\r\n              }}\r\n              value={size}\r\n              id=\"updateSize\"\r\n            />\r\n            <label htmlFor=\"updateLocation\"> Location </label>\r\n            <select\r\n              className=\"mb-4 form-control px-2\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 3);\r\n              }}\r\n              name=\"location\"\r\n              placeholder=\"Select\"\r\n              id=\"updateLocation\"\r\n            >\r\n              <option value=\"sun\"> sun </option>\r\n              <option value=\"shade\"> shade </option>\r\n              <option value=\"sun and shade\"> sun and shade </option>\r\n            </select>\r\n            <label htmlFor=\"updatePrice\"> Price (EUR) </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              name=\"price\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 4);\r\n              }}\r\n              value={price}\r\n              id=\"updatePrice\"\r\n            />\r\n            <label htmlFor=\"updateImage\"> Image </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event) => {\r\n                handleImageChange(event, plant);\r\n              }}\r\n              type=\"file\"\r\n              id=\"updateImage\"\r\n            />\r\n            <div className=\"col-12 text-right pr-0\">\r\n              <button\r\n                className=\"btn btn-sm ml-4 form-control smallWidth mb-2\"\r\n                onClick={() => {\r\n                  handleUpdatePlant(plant, history);\r\n                }}\r\n              >\r\n                Save\r\n              </button>\r\n              <Link to={`/plants/read/${_id}`}>\r\n                <button className=\"btn btn-sm ml-4 smallWidth form-control mb-2\">\r\n                  Go back\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdatePlantForm;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport {\r\n  payPlant,\r\n  createPayment,\r\n  scrollToPlants,\r\n  Plant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\ninterface CardStyle {\r\n  style: {\r\n    base: {\r\n      color: string;\r\n      fontFamily: string;\r\n      fontSmoothing: string;\r\n      fontSize: string;\r\n      \"::placeholder\": { color: string };\r\n    };\r\n    invalid: {\r\n      color: string;\r\n      iconColor: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst CheckoutForm = (): JSX.Element => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(\"\");\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const clientSecret = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.clientSecret\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Create payment as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(createPayment(plant));\r\n    return () => {\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    };\r\n  }, []);\r\n\r\n  // Card styling\r\n  const cardStyle: CardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n  // Listen for changes in Card element and display any errors as customer types card details\r\n  const handleChange = async (event: any): Promise<void> => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  // Submit payment\r\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    setIsProcessing(true);\r\n    const payload = await (stripe as any).confirmCardPayment(clientSecret, {\r\n      payment_method: { card: (elements as any).getElement(CardElement) },\r\n    });\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    } else {\r\n      setPaymentError(\"\");\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n\r\n  const { _id, name, price } = plant as Plant;\r\n  return (\r\n    <div className=\"container col-9\">\r\n      <form\r\n        className=\"checkoutForm mt-5\"\r\n        id=\"payment-form\"\r\n        onSubmit={handleSubmitPayment}\r\n      >\r\n        <h2 className=\"text-left mb-2 p-2\"> {name} </h2>\r\n        <h3 className=\"text-left mb-4 p-2\"> Price: {price} € </h3>\r\n        <CardElement\r\n          className=\"p-2\"\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            onClick={() => {\r\n              dispatch(payPlant(history));\r\n            }}\r\n            className=\"btn btn-sm mt-5 mb-4\"\r\n            disabled={isProcessing || isDisabled || isSucceeded}\r\n            id=\"submit\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isProcessing ? (\r\n                <div className=\"spinner\" id=\"spinner\" />\r\n              ) : (\r\n                \"Pay now\"\r\n              )}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {\r\n          /* Show any error that happens when processing the payment */\r\n          paymentError && (\r\n            <div className=\"card-error\" role=\"alert\">\r\n              {paymentError}\r\n            </div>\r\n          )\r\n          /* Show success message upon completion */\r\n        }\r\n        <p\r\n          className={\r\n            isSucceeded\r\n              ? \"result-message text-center\"\r\n              : \"result-message hidden text-center\"\r\n          }\r\n        >\r\n          Payment succeeded.\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {isSucceeded ? (\r\n          <Link\r\n            to={\"/\"}\r\n            onClick={() => {\r\n              dispatch(scrollToPlants());\r\n            }}\r\n          >\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        ) : (\r\n          <Link to={`/plants/read/${_id}`}>\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n","import { useEffect } from \"react\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"../components/CheckoutForm\";\r\n\r\nconst promise = loadStripe(\r\n  \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n);\r\n\r\nconst CheckoutPage = (): JSX.Element => {\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5 App\">\r\n        <Elements stripe={promise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutPage;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { Message, Plant, User } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\ntype RequestThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst RequestThumbnail = ({ message }: RequestThumbnailProps) => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const { _id, buyer, seller, plant, messageState } = message;\r\n\r\n  return (\r\n    <>\r\n      {loggedInUser &&\r\n        (seller as User)._id === loggedInUser._id &&\r\n        messageState === true && (\r\n          <div className=\"card p-3 mt-4\" key={_id}>\r\n            <h4> Request for {(plant as Plant).name} </h4>\r\n            <h5> by {(buyer as User).username} </h5>\r\n            <div className=\"text-center\">\r\n              <Link\r\n                className=\"btn smallWidth form-control\"\r\n                to={`/requests/read/${_id}`}\r\n              >\r\n                Details\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RequestThumbnail;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  fetchAllMessages,\r\n  setIsNewRequest,\r\n  Message,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport RequestTile from \"../components/RequestTile\";\r\n\r\nconst RequestsPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Fetch all messages and reset values as soon as page loads and reset values during cleanup\r\n  useEffect(() => {\r\n    const handleResetAll = (): void => {\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    dispatch(fetchAllMessages(isUserChange));\r\n    handleResetAll();\r\n    return () => {\r\n      handleResetAll();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/signup\"} />;\r\n  }\r\n\r\n  if (!messages) {\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading requests...\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Requests for your plants </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {messages.map((message: Message) => {\r\n          return <RequestTile message={message} />;\r\n        })}\r\n        {amountOfRequests !== 0 && (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsPage;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { Message, Plant, User } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\ntype ReplyThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst ReplyThumbnail = ({ message }: ReplyThumbnailProps) => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const { _id, buyer, seller, plant, reply } = message;\r\n\r\n  return (\r\n    <>\r\n      {loggedInUser && (buyer as User)._id === loggedInUser._id && reply && (\r\n        <div className=\"card p-3 mt-4 \" key={_id}>\r\n          <h4> Reply for {(plant as Plant).name} </h4>\r\n          <h5> by {(seller as User).username} </h5>\r\n          <div className=\"text-center\">\r\n            <Link\r\n              className=\"btn smallWidth form-control\"\r\n              to={`/replies/read/${_id}`}\r\n            >\r\n              Details\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReplyThumbnail;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  fetchAllMessages,\r\n  setIsNewReply,\r\n  Message,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport ReplyTile from \"../components/ReplyTile\";\r\n\r\nconst RepliesPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Fetch all requests and reset values as soon as page loads and reset values during cleanup\r\n  useEffect(() => {\r\n    const handleResetAll = (): void => {\r\n      dispatch(setIsNewReply(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    dispatch(fetchAllMessages(isUserChange));\r\n    handleResetAll();\r\n    return () => {\r\n      handleResetAll();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/signup\"} />;\r\n  }\r\n\r\n  if (!messages) {\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading replies...\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Replies for your requests </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {messages.map((message: Message) => {\r\n          return <ReplyTile message={message} />;\r\n        })}\r\n        {amountOfReplies !== 0 && (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesPage;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  createMessage,\r\n  setError,\r\n  Plant,\r\n  Message,\r\n  User,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst CreateRequestForm = () => {\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const error = useAppSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Set variable and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Create request\r\n  const handleCreateMessage = (event: any, plant: Plant, history: any) => {\r\n    event.preventDefault();\r\n    const { request } = event.target;\r\n    const { _id, creator } = plant;\r\n    const newMessage: Message = {\r\n      seller: (creator as User)._id,\r\n      plant: _id,\r\n      request: request.value,\r\n    };\r\n    dispatch(createMessage({ newMessage, history }));\r\n  };\r\n\r\n  const { _id, name } = plant as Plant;\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\"> Your message </h2>\r\n        <h3 className=\"mb-4\"> for {name} </h3>\r\n        <form\r\n          className=\"pl-0\"\r\n          onSubmit={(event) => {\r\n            handleCreateMessage(event, plant, history);\r\n          }}\r\n        >\r\n          <div>\r\n            <textarea\r\n              className=\"mb-4 form-control\"\r\n              name=\"request\"\r\n              cols={35}\r\n              rows={7}\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <div className=\"text-right\">\r\n            <button\r\n              className=\"btn btn-sm mx-2 form-control smallWidth\"\r\n              type=\"submit\"\r\n            >\r\n              Send\r\n            </button>\r\n            <Link to={`/plants/read/${_id}`}>\r\n              <button className=\"btn btn-sm mx-2 form-control smallWidth\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRequestForm;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  readMessage,\r\n  User,\r\n  Plant,\r\n  Message,\r\n  setMessage,\r\n  updateMessage,\r\n  decreaseAmountOfRequests,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst RequestDetails = (): JSX.Element => {\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const { messageId }: any = useParams();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read message and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readMessage(messageId));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const { _id, buyer, plant, request, reply } = message as Message;\r\n  if (!buyer || !plant) {\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading message...\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Set message of the buyer inactive by the seller\r\n  const handleSetMessageInactive = (message: Message, history: any) => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.messageState = false;\r\n    dispatch(setMessage(clonedMessage));\r\n    const { _id, buyer, seller, plant, request, reply, messageState } =\r\n      clonedMessage;\r\n    const updatedMessage: Message = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    };\r\n    dispatch(updateMessage({ messageId: _id, updatedMessage }));\r\n    dispatch(decreaseAmountOfRequests());\r\n    history.push(\"/requests/fetch\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Request for {(plant as Plant).name} </h2>\r\n        <h5> by {(buyer as User).username} </h5>\r\n        <p className=\"textField p-3 mb-4\"> {request} </p>\r\n        {reply && (\r\n          <div>\r\n            <h5> Your reply </h5>\r\n            <p className=\"textField p-3 mb-4\"> {reply} </p>\r\n          </div>\r\n        )}\r\n        <div className=\"text-right px-3\">\r\n          {!reply && (\r\n            <Link to={`/messages/update/${_id}`}>\r\n              <button className=\"btn btn-sm ml-2 smallWidth form-control mb-1\">\r\n                Reply\r\n              </button>\r\n            </Link>\r\n          )}\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => {\r\n              handleSetMessageInactive(message, history);\r\n            }}\r\n          >\r\n            Done\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/requests/fetch\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  readMessage,\r\n  deleteMessage,\r\n  User,\r\n  Plant,\r\n  Message,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst ReplyDetails = (): JSX.Element => {\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const { messageId }: any = useParams();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read message and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readMessage(messageId));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const { _id, buyer, seller, plant, request, reply } = message as Message;\r\n  if (!buyer || !plant) {\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading replies...\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Your request for {(plant as Plant).name} </h2>\r\n        <p className=\"textField p-3 mb-4\"> {request} </p>\r\n        {reply && (\r\n          <div>\r\n            <h5> Reply by {(seller as User).username} </h5>\r\n            <p className=\"textField p-3 mb-4\"> {reply} </p>\r\n          </div>\r\n        )}\r\n        <div className=\"text-right px-3\">\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => {\r\n              dispatch(deleteMessage({ messageId: _id, history }));\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/replies/fetch\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { setMessage, updateMessage, Message } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst UpdateRequestForm = (): JSX.Element => {\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Create reply\r\n  const handleCreateReply = ({ target }: any, message: Message): void => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.reply = target.value;\r\n    dispatch(setMessage(clonedMessage));\r\n  };\r\n\r\n  // Update message\r\n  const handleUpdateMessage = (\r\n    { _id, buyer, seller, plant, request, reply, messageState }: Message,\r\n    history: any\r\n  ): void => {\r\n    const updatedMessage: Message = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    };\r\n    dispatch(updateMessage({ messageId: _id, updatedMessage }));\r\n    history.push(`/requests/read/${_id}`);\r\n  };\r\n\r\n  const { _id, request } = message as Message;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> Reply your request </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <div className=\"card-body\">\r\n            <p> {request} </p>\r\n            <textarea\r\n              className=\"mb-4 form-control\"\r\n              name=\"reply\"\r\n              cols={31}\r\n              rows={6}\r\n              placeholder=\"Your reply\"\r\n              onChange={(event) => {\r\n                handleCreateReply(event, message);\r\n              }}\r\n            />\r\n            <div className=\"row justify-content-end px-3\">\r\n              <button\r\n                className=\"btn btn-sm smallWidth form-control mr-3 mb-2\"\r\n                onClick={() => {\r\n                  handleUpdateMessage(message, history);\r\n                }}\r\n              >\r\n                Submit\r\n              </button>\r\n              <Link to={`/requests/read/${_id}`}>\r\n                <button className=\"btn btn-sm form-control mb-2\">\r\n                  Go back\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateRequestForm;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 404 Not Found </h3>\r\n        <Link to={\"/\"}>\r\n          <button className=\"btn btn-sm ml-2 smallWidth form-control\">\r\n            Take me home{\" \"}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useEffect } from \"react\";\r\n\r\nconst KommunicateChat = (): JSX.Element => {\r\n  // Create launcher icon as soon as page loads\r\n  useEffect(() => {\r\n    ((d, m) => {\r\n      const kommunicateSettings = {\r\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      const s = document.createElement(\"script\");\r\n      s.type = \"text/javascript\";\r\n      s.async = true;\r\n      s.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      const h = document.getElementsByTagName(\"head\")[0];\r\n      h.appendChild(s);\r\n      (window as any).kommunicate = m;\r\n      m._globals = kommunicateSettings;\r\n    })(document, (window as any).kommunicate || {});\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default KommunicateChat;\r\n","import { Route, Switch, withRouter } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./screens/Home\";\r\nimport SignUp from \"./screens/SignUp\";\r\nimport SignIn from \"./screens/SignIn\";\r\nimport LogOut from \"./components/LogOut\";\r\nimport CreatePlantForm from \"./screens/CreatePlantForm\";\r\nimport PlantDetails from \"./screens/PlantDetails\";\r\nimport UpdatePlantForm from \"./screens/UpdatePlantForm\";\r\nimport CheckoutPage from \"./screens/CheckoutPage\";\r\nimport RequestsPage from \"./screens/RequestsPage\";\r\nimport RepliesPage from \"./screens/RepliesPage\";\r\nimport CreateRequestForm from \"./screens/CreateRequestForm\";\r\nimport RequestDetails from \"./screens/RequestDetails\";\r\nimport ReplyDetails from \"./screens/ReplyDetails\";\r\nimport UpdateRequestForm from \"./screens/UpdateRequestForm\";\r\nimport NotFound from \"./screens/NotFound\";\r\nimport KommunicateChat from \"./components/Chat\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <div className=\"main\">\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/read/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n\r\n        <Route path=\"/messages/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/messages/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch\">\r\n          <RequestsPage />\r\n        </Route>\r\n        <Route path=\"/requests/read/:messageId\">\r\n          <RequestDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/replies/fetch\">\r\n          <RepliesPage />\r\n        </Route>\r\n        <Route path=\"/replies/read/:messageId\">\r\n          <ReplyDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/signup\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/signin\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/logout\">\r\n          <LogOut />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"./reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}