{"version":3,"sources":["reducer/jungleSwapSlice.ts","config.ts","components/NavBar.tsx","components/Footer.tsx","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","screens/Home.tsx","screens/SignUp.tsx","screens/SignIn.tsx","components/LogOut.tsx","screens/CreatePlantForm.tsx","screens/PlantDetails.tsx","screens/UpdatePlantForm.tsx","components/CheckoutForm.tsx","screens/CheckoutPage.tsx","screens/RequestsPage.tsx","screens/RepliesPage.tsx","screens/CreateRequestForm.tsx","screens/RequestDetails.tsx","screens/ReplyDetails.tsx","screens/UpdateRequestForm.tsx","screens/NotFound.tsx","components/Chat.tsx","App.tsx","store.ts","index.tsx"],"names":["apiPath","process","fetchAllPlants","createAsyncThunk","_options","a","dispatch","axios","get","response","setPlants","data","console","log","fetchQueryPlants","query","createPlant","uploadForm","plant","history","name","description","size","location","price","post","imageUrl","imagePublicId","newPlant","withCredentials","addPlant","push","scroll","scrollToBottom","setError","error","readPlant","plantId","setPlant","imageChange","destroyImageData","image","FormData","append","clonePlant","JSON","parse","stringify","updatePlant","updatedPlant","patch","setPlantChanges","scrollToPlants","deletePlant","delete","removePlant","createPayment","setClientSecret","clientSecret","payPlant","fetchAllMessages","isUserChange","setMessages","setStartAmountOfRequests","setStartAmountOfReplies","createMessage","newMessage","addMessage","_id","readMessage","messageId","setMessage","updateMessage","updatedMessage","setMessageChanges","deleteMessage","removeMessage","decreaseAmountOfReplies","readUser","setLoggedInUser","setIsFetchingUser","signUp","newUser","setIsUserChange","signIn","user","logOut","intervalId","clearInterval","setIntervalId","setMinutesCounter","setIsNewRequest","scrollToTop","jungleSwapSlice","createSlice","initialState","isFetchingUser","loggedInUser","plants","messages","message","amountOfRequests","amountOfReplies","isNewRequest","isNewReply","minutesCounter","headerContainerHeight","aboutContainerHeight","reducers","state","action","payload","map","singlePlant","filter","buyer","seller","request","reply","messageState","singleMessage","length","setAmountOfRequests","setAmountOfReplies","setIsNewReply","increaseMinutesCounter","decreaseAmountOfRequests","setHeaderContainerHeight","setAboutContainerHeight","scrollToAbout","scrollTo","actions","NavBar","useSelector","jungleSwap","useDispatch","useEffect","setInterval","currentAmountOfRequests","currentAmountOfReplies","Navbar","className","variant","expand","fixed","Brand","to","onClick","Toggle","aria-controls","icon","faBell","Collapse","id","Nav","title","username","Footer","Home","useState","setQuery","elementRef","useRef","headerElementHeight","Math","round","current","getBoundingClientRect","height","aboutElementHeight","role","ref","element","src","alt","type","placeholder","value","onChange","event","target","SignUp","useHistory","onSubmit","preventDefault","email","password","toLowerCase","handleSignUp","htmlFor","formNoValidate","SignIn","handleSignIn","LogOut","CreatePlantForm","plantImage","files","handleCreatePlant","min","PlantDetails","useParams","creator","forEach","handleDeletePlant","UpdatePlantForm","handlePlantEntryChange","itemNumber","clonedPlant","handleImageChange","handleUpdatePlant","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","handleChange","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","disabled","promise","loadStripe","CheckoutPage","RequestsPage","handleResetAll","RepliesPage","CreateRequestForm","handleCreateMessage","cols","rows","RequestDetails","clonedMessage","handleSetMessageInactive","ReplyDetails","UpdateRequestForm","handleCreateReply","handleUpdateMessage","NotFound","KommunicateChat","d","m","s","document","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","withRouter","exact","path","component","store","configureStore","reducer","ReactDOM","render","StrictMode","querySelector"],"mappings":"+SAKMA,EAAO,UCLaC,mCDKb,QA6EAC,EAAiBC,YAC5B,4BAD4C,uCAE5C,WAAOC,EAAP,oBAAAC,EAAA,6DAAmBC,EAAnB,EAAmBA,SAAnB,kBAE2BC,IAAMC,IAAN,UAAaR,EAAb,kBAF3B,OAEUS,EAFV,OAGIH,EAASI,EAAUD,EAASE,OAHhC,gDAKIC,QAAQC,IAAI,yBAAZ,MALJ,yDAF4C,yDAajCC,EAAmBX,YAC9B,8BAD8C,uCAE9C,WAAOY,EAAP,oBAAAV,EAAA,6DAAwBC,EAAxB,EAAwBA,SAAxB,kBAE2BC,IAAMC,IAAN,UAAaR,EAAb,4BAAwCe,IAFnE,OAEUN,EAFV,OAGIH,EAASI,EAAUD,EAASE,OAHhC,gDAKIC,QAAQC,IAAI,+BAAZ,MALJ,yDAF8C,yDAmBnCG,EAAcb,YACzB,yBADyC,uCAEzC,2DAAAE,EAAA,6DACIY,EADJ,EACIA,WAAYC,EADhB,EACgBA,MAAOC,EADvB,EACuBA,QACnBb,EAFJ,EAEIA,SAEMc,EAA6CF,EAA7CE,KAAMC,EAAuCH,EAAvCG,YAAaC,EAA0BJ,EAA1BI,KAAMC,EAAoBL,EAApBK,SAAUC,EAAUN,EAAVM,MAJ7C,kBAM2BjB,IAAMkB,KAAN,UAAczB,EAAd,WAAgCiB,GAN3D,cAMUR,EANV,SAOwCA,EAASE,KAArCe,EAPZ,EAOYA,SAAUC,EAPtB,EAOsBA,cACZC,EAAkB,CACtBR,OACAC,cACAC,OACAI,WACAC,gBACAJ,WACAC,SAfN,mBAkB6BjB,IAAMkB,KAAN,UAClBzB,EADkB,kBAErB4B,EACA,CAAEC,iBAAiB,IArB3B,QAkBYpB,EAlBZ,OAuBMH,EAASwB,EAASrB,EAASE,OAC3BQ,EAAQY,KAAK,KACbC,gBAAOC,iBAzBb,kDA2BM3B,EAAS4B,GAAS,KAAIzB,SAASE,KAAKwB,QA3B1C,0DA8BI7B,EAAS4B,GAAS,KAAIzB,SAASE,KAAKwB,QA9BxC,iEAFyC,yDAsC9BC,EAAYjC,YACvB,uBADuC,uCAEvC,WAAOkC,EAAP,oBAAAhC,EAAA,6DAA0BC,EAA1B,EAA0BA,SAA1B,kBAE2BC,IAAMC,IAAN,UAAaR,EAAb,wBAAoCqC,GAAW,CACpER,iBAAiB,IAHvB,OAEUpB,EAFV,OAKIH,EAASgC,EAAS7B,EAASE,OAL/B,gDAOIC,QAAQC,IAAI,qBAPhB,yDAFuC,yDAyB5B0B,EAAcpC,YACzB,yBADyC,uCAEzC,iDAAAE,EAAA,6DACImC,EADJ,EACIA,iBAAkBC,EADtB,EACsBA,MAAOvB,EAD7B,EAC6BA,MACzBZ,EAFJ,EAEIA,SAFJ,kBAKUC,IAAMkB,KAAN,UAAczB,EAAd,YAAiCwC,GAL3C,wBAOYvB,EAAa,IAAIyB,UACZC,OAAO,QAASF,GARjC,UAS6BlC,IAAMkB,KAAN,UAAczB,EAAd,WAAgCiB,GAT7D,QASYR,EATZ,SAU0CA,EAASE,KAArCgB,EAVd,EAUcA,cAAeD,EAV7B,EAU6BA,UACjBkB,EAAaC,KAAKC,MAAMD,KAAKE,UAAU7B,KAClCS,cAAgBA,EAC3BiB,EAAWlB,SAAWA,EACtBpB,EAASgC,EAASM,IAdxB,kDAgBMhC,QAAQC,IAAI,sBAAZ,MAhBN,0DAmBID,QAAQC,IAAI,0BAAZ,MAnBJ,iEAFyC,yDAiC9BmC,EAAc7C,YACzB,yBADyC,uCAEzC,uCAAAE,EAAA,6DACIgC,EADJ,EACIA,QAASY,EADb,EACaA,aAAc9B,EAD3B,EAC2BA,QACvBb,EAFJ,EAEIA,SAFJ,kBAK2BC,IAAM2C,MAAN,UAClBlD,EADkB,0BACOqC,GAC5BY,GAPN,OAKUxC,EALV,OASIH,EAAS6C,EAAgB1C,EAASE,OAClCQ,EAAQY,KAAK,KACbzB,EAAS8C,MAXb,kDAaIxC,QAAQC,IAAI,sBAAZ,MAbJ,0DAFyC,yDA2B9BwC,EAAclD,YACzB,yBADyC,uCAEzC,uCAAAE,EAAA,6DACIsB,EADJ,EACIA,cAAeU,EADnB,EACmBA,QAASlB,EAD5B,EAC4BA,QACxBb,EAFJ,EAEIA,SAFJ,SAKUkC,EAAmB,CACvBb,iBANN,SAQUpB,IAAMkB,KAAN,UAAczB,EAAd,YAAiCwC,GAR3C,gCAUYjC,IAAM+C,OAAN,UAAgBtD,EAAhB,0BAAyCqC,IAVrD,OAWM/B,EAASiD,EAAYlB,IACrBlB,EAAQY,KAAK,KACbzB,EAAS8C,MAbf,kDAeMxC,QAAQC,IAAI,sBAAZ,MAfN,0DAkBID,QAAQC,IAAI,sBAAZ,MAlBJ,iEAFyC,yDA0B9B2C,EAAgBrD,YAC3B,2BAD2C,uCAE3C,WAAOe,EAAP,oBAAAb,EAAA,6DAAuBC,EAAvB,EAAuBA,SAAvB,kBAE2BC,IAAMkB,KAAN,UAAczB,EAAd,0BAA+C,CACpEwB,MAAON,EAAMM,QAHnB,OAEUf,EAFV,OAKIH,EAASmD,EAAgBhD,EAASE,KAAK+C,eAL3C,gDAOI9C,QAAQC,IAAI,wBAAZ,MAPJ,yDAF2C,yDAehC8C,EAAWxD,YACtB,sBADsC,uCAEtC,WAAOgB,EAAP,kBAAAd,EAAA,6DAAuBC,EAAvB,EAAuBA,SAAvB,kBAEUC,IAAMkB,KAAN,UACDzB,EADC,0BAEJ,GACA,CAAE6B,iBAAiB,IALzB,OAOIV,EAAQY,KAAK,KACbzB,EAAS8C,MARb,gDAUIxC,QAAQC,IAAI,kBAAZ,MAVJ,yDAFsC,yDAmB3B+C,EAAmBzD,YAC9B,8BAD8C,uCAE9C,WAAO0D,EAAP,oBAAAxD,EAAA,6DAAgCC,EAAhC,EAAgCA,SAAhC,kBAE2BC,IAAMC,IAAN,UAAaR,EAAb,oBAF3B,OAEUS,EAFV,OAGIH,EAASwD,EAAYrD,EAASE,OAC9BkD,GAAgBvD,EAASyD,KACzBF,GAAgBvD,EAAS0D,KAL7B,kDAOIpD,QAAQC,IAAI,2BAAZ,MAPJ,0DAF8C,yDAoBnCoD,EAAgB9D,YAC3B,2BAD2C,uCAE3C,qCAAAE,EAAA,6DACI6D,EADJ,EACIA,WAAY/C,EADhB,EACgBA,QACZb,EAFJ,EAEIA,SAFJ,kBAK2BC,IAAMkB,KAAN,UAClBzB,EADkB,oBAErBkE,EACA,CAAErC,iBAAiB,IARzB,OAKUpB,EALV,OAUIH,EAAS6D,EAAW1D,EAASE,OAC7BQ,EAAQY,KAAR,uBAA6BtB,EAASE,KAAKO,MAAMkD,MAXrD,kDAaI9D,EAAS4B,GAAS,KAAIzB,SAASE,KAAKwB,QAbxC,0DAF2C,yDAqBhCkC,EAAclE,YACzB,yBADyC,uCAEzC,WAAOmE,EAAP,oBAAAjE,EAAA,6DAA4BC,EAA5B,EAA4BA,SAA5B,kBAE2BC,IAAMC,IAAN,UAClBR,EADkB,0BACOsE,GAC5B,CAAEzC,iBAAiB,IAJzB,OAEUpB,EAFV,OAMIH,EAASiE,EAAW9D,EAASE,OANjC,gDAQIC,QAAQC,IAAI,uBARhB,yDAFyC,yDAqB9B2D,EAAgBrE,YAC3B,2BAD2C,uCAE3C,qCAAAE,EAAA,6DACIiE,EADJ,EACIA,UAAWG,EADf,EACeA,eACXnE,EAFJ,EAEIA,SAFJ,kBAK2BC,IAAM2C,MAAN,UAClBlD,EADkB,4BACSsE,GAC9BG,GAPN,OAKUhE,EALV,OASIH,EAASoE,EAAkBjE,EAASE,OATxC,gDAWIC,QAAQC,IAAI,wBAAZ,MAXJ,yDAF2C,yDAwBhC8D,EAAgBxE,YAC3B,2BAD2C,uCAE3C,mCAAAE,EAAA,6DACIiE,EADJ,EACIA,UAAWnD,EADf,EACeA,QACXb,EAFJ,EAEIA,SAFJ,kBAKUC,IAAM+C,OAAN,UAAgBtD,EAAhB,4BAA2CsE,IALrD,OAMIhE,EAASsE,EAAcN,IACvBhE,EAASuE,MACT1D,GAAWA,EAAQY,KAAK,kBAR5B,kDAUInB,QAAQC,IAAI,wBAAZ,MAVJ,0DAF2C,yDAmBhCiE,EAAW3E,YACtB,0BADsC,uCAEtC,WAAOC,EAAP,oBAAAC,EAAA,6DAAmBC,EAAnB,EAAmBA,SAAnB,kBAE2BC,IAAMC,IAAN,UAAaR,EAAb,SAA6B,CAClD6B,iBAAiB,IAHvB,OAEUpB,EAFV,OAKIH,EAASyE,GAAgBtE,EAASE,OAClCL,EAAS0E,IAAkB,IAN/B,gDAQIpE,QAAQC,IAAI,+BAAZ,MACAP,EAAS0E,IAAkB,IAT/B,yDAFsC,yDAsB3BC,EAAS9E,YACpB,oBADoC,uCAEpC,qCAAAE,EAAA,6DACI6E,EADJ,EACIA,QAAS/D,EADb,EACaA,QACTb,EAFJ,EAEIA,SAFJ,kBAK2BC,IAAMkB,KAAN,UAAczB,EAAd,WAAgCkF,GAL3D,OAKUzE,EALV,OAMIH,EAASyE,GAAgBtE,EAASE,OAClCL,EAAS6E,IAAgB,IACzBhE,EAAQY,KAAK,KARjB,kDAUIzB,EAAS4B,GAAS,KAAIzB,SAASE,KAAKwB,QAVxC,0DAFoC,yDAuBzBiD,EAASjF,YACpB,oBADoC,uCAEpC,qCAAAE,EAAA,6DAASgF,EAAT,EAASA,KAAMlE,EAAf,EAAeA,QAA+Bb,EAA9C,EAA8CA,SAA9C,kBAE2BC,IAAMkB,KAAN,UAAczB,EAAd,WAAgCqF,EAAM,CAC3DxD,iBAAiB,IAHvB,OAEUpB,EAFV,OAKIH,EAASyE,GAAgBtE,EAASE,OAClCL,EAAS6E,IAAgB,IACzBhE,EAAQY,KAAK,KAPjB,kDASIzB,EAAS4B,GAAS,KAAIzB,SAASE,KAAKwB,QATxC,0DAFoC,yDAsBzBmD,EAASnF,YACpB,oBADoC,uCAEpC,mCAAAE,EAAA,6DACIkF,EADJ,EACIA,WAAYpE,EADhB,EACgBA,QACZb,EAFJ,EAEIA,SAFJ,kBAKUC,IAAMkB,KAAN,UAAczB,EAAd,WAAgC,GAAI,CAAE6B,iBAAiB,IALjE,OAMIvB,EAASyE,GAAgB,OACzBS,cAAcD,GACdjF,EAASmF,GAAc,OACvBnF,EAASoF,GAAkB,IAC3BpF,EAASqF,IAAgB,IACzBxE,EAAQY,KAAK,KACbC,gBAAO4D,cAZX,kDAcIhF,QAAQC,IAAI,gBAAZ,MAdJ,0DAFoC,yDAqBzBgF,EAAkBC,YAAY,CACzC1E,KAAM,aACN2E,aAhb+B,CAC/BC,gBAAgB,EAChBC,aAAc,KACdpC,cAAc,EACdqC,OAAQ,GACRhF,MAAO,GACPiF,SAAU,GACVC,QAAS,GACTC,iBAAkB,EAClBC,gBAAiB,EACjBC,cAAc,EACdC,YAAY,EACZjB,WAAY,KACZkB,eAAgB,EAChBC,sBAAuB,EACvBC,qBAAsB,EACtBjD,aAAc,GACdvB,MAAO,MAiaPyE,SAAU,CAERlG,UAAW,SAACmG,EAAOC,GACjBD,EAAMX,OAASY,EAAOC,SAExBzE,SAAU,SAACuE,EAAOC,GAChBD,EAAM3F,MAAQ4F,EAAOC,SAEvBjF,SAAU,SAAC+E,EAAOC,GAChBD,EAAMX,OAAOnE,KAAK+E,EAAOC,UAE3B5D,gBAAiB,SAAC0D,EAAOC,GAAkC,IAAD,EAUpDA,EAAOC,QART3C,EAFsD,EAEtDA,IACAhD,EAHsD,EAGtDA,KACAC,EAJsD,EAItDA,YACAC,EALsD,EAKtDA,KACAI,EANsD,EAMtDA,SACAC,EAPsD,EAOtDA,cACAJ,EARsD,EAQtDA,SACAC,EATsD,EAStDA,MAEFqF,EAAMX,OAASW,EAAMX,OAAOc,KAAI,SAACC,GAU/B,OATIA,EAAY7C,MAAQA,IACtB6C,EAAY7F,KAAOA,EACnB6F,EAAY5F,YAAcA,EAC1B4F,EAAY3F,KAAOA,EACnB2F,EAAYvF,SAAWA,EACvBuF,EAAYtF,cAAgBA,EAC5BsF,EAAY1F,SAAWA,EACvB0F,EAAYzF,MAAQA,GAEfyF,MAGX1D,YAAa,SAACsD,EAAOC,GACnBD,EAAMX,OAASW,EAAMX,OAAOgB,QAC1B,SAAChG,GAAD,OAAkBA,EAAMkD,MAAQ0C,EAAOC,YAG3CtD,gBAAiB,SAACoD,EAAOC,GACvBD,EAAMnD,aAAeoD,EAAOC,SAI9BjD,YAAa,SAAC+C,EAAOC,GACnBD,EAAMV,SAAWW,EAAOC,SAE1BxC,WAAY,SAACsC,EAAOC,GAClBD,EAAMT,QAAUU,EAAOC,SAEzB5C,WAAY,SAAC0C,EAAOC,GAClBD,EAAMV,SAASpE,KAAK+E,EAAOC,UAE7BrC,kBAAmB,SAACmC,EAAOC,GAAoC,IAAD,EAE1DA,EAAOC,QADD3C,EADoD,EACpDA,IAAK+C,EAD+C,EAC/CA,MAAOC,EADwC,EACxCA,OAAQlG,EADgC,EAChCA,MAAOmG,EADyB,EACzBA,QAASC,EADgB,EAChBA,MAAOC,EADS,EACTA,aAEnDV,EAAMV,SAAWU,EAAMV,SAASa,KAAI,SAACQ,GASnC,OARIA,EAAcpD,MAAQA,IACxBoD,EAAcL,MAAQA,EACtBK,EAAcJ,OAASA,EACvBI,EAActG,MAAQA,EACtBsG,EAAcH,QAAUA,EACxBG,EAAcF,MAAQA,EACtBE,EAAcD,aAAeA,GAExBC,MAGX5C,cAAe,SAACiC,EAAOC,GACrBD,EAAMV,SAAWU,EAAMV,SAASe,QAAO,SAACd,GACtC,OAAOA,EAAQhC,MAAQ0C,EAAOC,YAGlChD,yBAA0B,SAAC8C,GACzBA,EAAMR,iBAAmBQ,EAAMV,SAASe,QAAO,SAACd,GAAsB,IAC5DgB,EAAyBhB,EAAzBgB,OAAQG,EAAiBnB,EAAjBmB,aAChB,OACEV,EAAMZ,cACLmB,EAAgBhD,MAAQyC,EAAMZ,aAAa7B,MAC3B,IAAjBmD,KAEDE,QAELzD,wBAAyB,SAAC6C,GACxBA,EAAMP,gBAAkBO,EAAMV,SAASe,QAAO,SAACd,GAAsB,IAC3De,EAAiBf,EAAjBe,MAAOG,EAAUlB,EAAVkB,MACf,OACET,EAAMZ,cACLkB,EAAe/C,MAAQyC,EAAMZ,aAAa7B,KAC3CkD,KAEDG,QAELC,oBAAqB,SAACb,EAAOC,GAC3BD,EAAMR,iBAAmBS,EAAOC,SAElCY,mBAAoB,SAACd,EAAOC,GAC1BD,EAAMP,gBAAkBQ,EAAOC,SAEjCpB,gBAAiB,SAACkB,EAAOC,GACvBD,EAAMN,aAAeO,EAAOC,SAE9Ba,cAAe,SAACf,EAAOC,GACrBD,EAAML,WAAaM,EAAOC,SAE5BtB,cAAe,SAACoB,EAAOC,GACrBD,EAAMtB,WAAauB,EAAOC,SAE5BrB,kBAAmB,SAACmB,EAAOC,GACzBD,EAAMJ,eAAiBK,EAAOC,SAEhCc,uBAAwB,SAAChB,GACvBA,EAAMJ,gBAAkB,GAE1BqB,yBAA0B,SAACjB,GACzBA,EAAMR,kBAAoB,GAE5BxB,wBAAyB,SAACgC,GACxBA,EAAMP,iBAAmB,GAI3BvB,gBAAiB,SAAC8B,EAAOC,GACvBD,EAAMZ,aAAea,EAAOC,SAE9B/B,kBAAmB,SAAC6B,EAAOC,GACzBD,EAAMb,eAAiBc,EAAOC,SAEhC5B,gBAAiB,SAAC0B,EAAOC,GACvBD,EAAMhD,aAAeiD,EAAOC,SAE9B7E,SAAU,SAAC2E,EAAOC,GAChBD,EAAM1E,MAAQ2E,EAAOC,SAIvBgB,yBAA0B,SAAClB,EAAOC,GAChCD,EAAMH,sBAAwBI,EAAOC,SAEvCiB,wBAAyB,SAACnB,EAAOC,GAC/BD,EAAMF,qBAAuBG,EAAOC,SAEtCkB,cAAe,SAACpB,GACd7E,gBAAOkG,SAASrB,EAAMH,wBAExBtD,eAAgB,SAACyD,GACf7E,gBAAOkG,SAASrB,EAAMH,sBAAwBG,EAAMF,0B,EA2CtDd,EAAgBsC,QApClBzH,E,EAAAA,UACA4B,E,EAAAA,SACAR,E,EAAAA,SACAqB,E,EAAAA,gBACAI,E,EAAAA,YACAE,E,EAAAA,gBAGAK,E,EAAAA,YACAS,E,EAAAA,WACAJ,E,EAAAA,WACAO,E,EAAAA,kBACAE,E,EAAAA,cACAb,E,EAAAA,yBACAC,E,EAAAA,wBACA0D,E,EAAAA,oBACAC,G,EAAAA,mBACAhC,G,EAAAA,gBACAiC,G,EAAAA,cACAnC,G,EAAAA,cACAC,G,EAAAA,kBACAmC,G,EAAAA,uBACAC,G,EAAAA,yBACAjD,G,EAAAA,wBAGAE,G,EAAAA,gBACAC,G,EAAAA,kBACAG,G,EAAAA,gBACAjD,G,EAAAA,SAGA6F,G,EAAAA,yBACAC,G,EAAAA,wBACAC,G,EAAAA,cACA7E,G,EAAAA,eAGayC,KAAf,Q,0BE9feuC,GAzJA,WACb,IAAMnC,EAAeoC,aACnB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWrC,gBAEnCpC,EAAewE,aACnB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWzE,gBAEnCsC,EAAWkC,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWnC,YAC9DZ,EAAa8C,aACjB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAW/C,cAEnCkB,EAAiB4B,aACrB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAW7B,kBAEnCJ,EAAmBgC,aACvB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWjC,oBAEnCC,EAAkB+B,aACtB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWhC,mBAEnCC,EAAe8B,aACnB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAW/B,gBAEnCC,EAAa6B,aACjB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAW9B,cAEnClG,EAAWiI,cA0DjB,OAvDAC,qBAAU,WACR,OAAO,WACDjD,IACFC,cAAcD,GACdjF,EAASmF,GAAc,OACvBnF,EAASoF,GAAkB,QAG9B,IAGH8C,qBAAU,WACJ3E,IACFvD,EAASsD,EAAiBC,IAC1BvD,EAAS6E,IAAgB,IACzB7E,EACEmF,GACEgD,aACE,kBAAMnI,EAASuH,QACf,UAKP,CAAChE,IAGJ2E,qBAAU,WACR,GAAIvC,EAAc,CAChB3F,EAASsD,EAAiBC,IAC1B,IAAM6E,EAA0BvC,EAASe,QACvC,SAACd,GAAsB,IACbgB,EAAyBhB,EAAzBgB,OAAQG,EAAiBnB,EAAjBmB,aAChB,OACGH,EAAgBhD,MAAQ6B,EAAa7B,MAAwB,IAAjBmD,KAGjDE,OACEpB,EAAmBqC,IACrBpI,EAASoH,EAAoBgB,IAC7BpI,EAASqF,IAAgB,KAE3B,IAAMgD,EAAyBxC,EAASe,QACtC,SAACd,GAAsB,IACbe,EAAiBf,EAAjBe,MAAOG,EAAUlB,EAAVkB,MACf,OAAQH,EAAe/C,MAAQ6B,EAAa7B,KAAOkD,KAErDG,OACEnB,EAAkBqC,IACpBrI,EAASqH,GAAmBgB,IAC5BrI,EAASsH,IAAc,QAG1B,CAACnB,IAGF,+BACE,gBAACmC,EAAA,EAAD,CAAQC,UAAU,OAAOC,QAAQ,OAAOC,OAAO,KAAKC,MAAM,MAA1D,UACE,eAACJ,EAAA,EAAOK,MAAR,UACE,eAAC,IAAD,CAAMC,GAAG,IAAIC,QAASnH,gBAAO4D,YAA7B,0BAIF,eAACgD,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,mBAA7B,UACI9C,GAAgBC,IAAe,eAAC,KAAD,CAAiB8C,KAAMC,SAE1D,eAACX,EAAA,EAAOY,SAAR,CAAiBC,GAAG,mBAApB,SACE,gBAACC,EAAA,EAAD,CAAKb,UAAU,UAAf,UACE,qCACE,eAAC,IAAD,CACEK,GAAG,IACHL,UAAU,MACVM,QAAS,kBAAM7I,EAAS8C,OAH1B,0BAQD6C,GACC,uCACE,gBAAC,IAAD,CACE4C,UAAU,MACVK,GAAG,kBACHS,MAAOpD,EAAe,cAAgB,GAHxC,UAKGA,GAAgB,eAAC,KAAD,CAAiB+C,KAAMC,OAL1C,cAQA,gBAAC,IAAD,CACEV,UAAU,MACVK,GAAG,iBACHS,MAAOnD,EAAa,YAAc,GAHpC,UAKGA,GAAc,eAAC,KAAD,CAAiB8C,KAAMC,OALxC,gBAUHtD,EACC,qCACE,eAAC,IAAD,CACE4C,UAAU,MACVK,GAAG,UACHS,MAAO1D,EAAa2D,SAHtB,uBASF,uCACE,eAAC,IAAD,CAAMf,UAAU,MAAMK,GAAG,UAAzB,qBAGA,eAAC,IAAD,CAAML,UAAU,MAAMK,GAAG,UAAzB,mCCjJDW,GAjBA,WACb,OACE,sBAAKhB,UAAU,aAAf,SACE,gDAEE,eAAC,IAAD,CAAMK,GAAI,gDAAV,8BAFF,IAME,eAAC,IAAD,CAAMA,GAAI,8CAAV,kC,SCXO,OAA0B,4CCA1B,OAA0B,4CC+J1BY,GA/IF,WACX,IAAM9D,EAAiBqC,aACrB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWtC,kBAEnCC,EAAeoC,aACnB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWrC,gBAEnCC,EAASmC,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWpC,UAPpC,EAQJ6D,mBAAS,IARL,oBAQvBhJ,EARuB,KAQhBiJ,EARgB,KASxB1J,EAAWiI,cACX0B,EAAaC,iBAAO,IAqB1B,OAlBA1B,qBAAU,WACRlI,EAASJ,MACR+F,GAAgB3F,EAASwE,KAC1B,IAAMqF,EAAsBC,KAAKC,MAC9BJ,EAAWK,QAAQ,GAAWC,wBAAwBC,QAEzDlK,EAASyH,GAAyBoC,IAClC,IAAMM,EAAqBL,KAAKC,MAC7BJ,EAAWK,QAAQ,GAAWC,wBAAwBC,QAEzDlK,EAAS0H,GAAwByC,MAChC,IAGHjC,qBAAU,WACAlI,EAARS,EAAiBD,EAAiBC,GAAmBb,OACpD,CAACa,IAGF,kCACImF,GACA,sBAAK2C,UAAU,gCAAgC6B,KAAK,SAApD,SACE,wBAAM7B,UAAU,kBAAhB,UACE,wBADF,IACS,wBADT,0BAMH7C,GACC,sBAAK6C,UAAU,gCAAgC6B,KAAK,SAApD,SACE,wBAAM7B,UAAU,kBAAhB,UACE,wBADF,IACS,wBADT,6BAMJ,yBACEA,UAAU,kCACV8B,IAAK,SAACC,GAAD,OAAeX,EAAWK,QAAQ,GAAaM,GAFtD,SAIE,sBAAK/B,UAAU,WAAf,SACE,uBAAKA,UAAU,mCAAf,UACE,qBAAIA,UAAU,aAAd,0BACA,qBAAIA,UAAU,YAAd,sCACA,sBAAKA,UAAU,OAAf,SACE,eAAC,IAAD,CACEA,UAAU,iBACVM,QAAS,kBAAM7I,EAAS2H,OACxBiB,GAAI,GAHN,8BAYR,0BAASyB,IAAK,SAACC,GAAD,OAAeX,EAAWK,QAAQ,GAAaM,GAA7D,SACE,sBAAK/B,UAAU,2BAAf,SACE,uBAAKA,UAAU,MAAf,UACE,sBAAKA,UAAU,6BAAf,SACE,sBAAKA,UAAU,QAAQgC,IAAKpI,GAAOqI,IAAI,aAEzC,wBACA,uBAAKjC,UAAU,mDAAf,UACE,2DACA,2DACA,mDACmB,wBADnB,+BAE8B,wBAF9B,eAGc,wBAHd,mCAIkC,wBAJlC,+BAK8B,wBAL9B,sDAQA,sBAAKA,UAAU,OAAOgC,IAAKvB,GAAMwB,IAAI,mBAM7C,mCACE,uBAAKjC,UAAU,iBAAf,UACE,uBAAKA,UAAU,YAAf,UACE,2CACA,wBACA,sDAEF,sBAAKA,UAAU,OAAf,SACE,wBACEA,UAAU,0BACVkC,KAAK,OACLC,YAAY,YACZC,MAAOlK,EACPmK,SAAU,SAACC,GAAD,OAAWnB,EAASmB,EAAMC,OAAOH,YAG/C,sBAAKpC,UAAU,mCAAf,SACG3C,GACCA,EAAOc,KAAI,SAAC9F,GAA+B,IACjCkD,EAA+BlD,EAA/BkD,IAAKhD,EAA0BF,EAA1BE,KAAMM,EAAoBR,EAApBQ,SAAUF,EAAUN,EAAVM,MAC7B,OACE,sBAAKqH,UAAU,WAAf,SACE,uBAAKA,UAAU,2CAAf,UACE,sBACEA,UAAU,6BACVgC,IAAKnJ,EACLoJ,IAAK1J,IAEP,uBAAKyH,UAAU,iBAAf,UACE,oCAAMzH,EAAN,OACA,mCAAKI,EAAL,cACA,eAAC,IAAD,CACEqH,UAAU,8BACVK,GAAE,uBAAkB9E,GAFtB,4BAVyBA,iBC3ClCiH,GAjFA,WACb,IAAMlJ,EAAQkG,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWnG,SAC3D7B,EAAWiI,cACXpH,EAAUmK,cAGhB9C,qBAAU,WACRlI,EAAS4B,GAAS,OAClB5B,EAASqF,IAAgB,IACzB3D,gBAAO4D,gBACN,IAcH,OACE,sBAAKiD,UAAU,qBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,qBAAIA,UAAU,OAAd,uBACA,wBAAM0C,SAAU,SAACJ,GAAD,OAfD,SAACA,EAAYhK,GAChCgK,EAAMK,iBADiD,MAEjBL,EAAMC,OAApCxB,EAF+C,EAE/CA,SAAU6B,EAFqC,EAErCA,MAAOC,EAF8B,EAE9BA,SACnBxG,EAAU,CACd0E,SAAUA,EAASqB,MACnBQ,MAAOA,EAAMR,MAAMU,cACnBD,SAAUA,EAAST,OAErB3K,EAAS2E,EAAO,CAAEC,UAAS/D,aAOIyK,CAAaT,EAAOhK,IAA/C,UACE,uBAAK0H,UAAU,aAAf,UACE,wBAAOgD,QAAQ,gBAAf,wBACA,wBACEd,KAAK,OACLlC,UAAU,eACVY,GAAG,gBACHrI,KAAK,WACL4J,YAAY,aAGhB,uBAAKnC,UAAU,aAAf,UACE,wBAAOgD,QAAQ,aAAf,6BACA,wBACEd,KAAK,QACLlC,UAAU,eACVY,GAAG,aACHrI,KAAK,QACL4J,YAAY,aAGhB,uBAAKnC,UAAU,aAAf,UACE,wBAAOgD,QAAQ,gBAAf,wBACA,wBACEzK,KAAK,WACL2J,KAAK,WACLlC,UAAU,eACVY,GAAG,gBACHuB,YAAY,aAGf7I,GAAS,qBAAG0G,UAAU,eAAb,cAA8B1G,EAA9B,OACV,yBACE4I,KAAK,SACLlC,UAAU,0CACViD,gBAAc,EAHhB,qBAOA,oBAAGjD,UAAU,UAAb,wCACA,sBAAKA,UAAU,aAAf,SACE,eAAC,IAAD,CAAMK,GAAI,UAAV,SACE,yBAAQL,UAAU,oDAAlB,kCCHCkD,GA9DA,WACb,IAAM5J,EAAQkG,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWnG,SAC3D7B,EAAWiI,cACXpH,EAAUmK,cAGhB9C,qBAAU,WACRlI,EAAS4B,GAAS,OAClB5B,EAASqF,IAAgB,IACzB3D,gBAAO4D,gBACN,IAaH,OACE,sBAAKiD,UAAU,uCAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,qBAAIA,UAAU,OAAd,uBACA,wBAAM0C,SAAU,SAACJ,GAAD,OAdD,SAACA,EAAYhK,GAChCgK,EAAMK,iBADiD,MAE3BL,EAAMC,OAA1BK,EAF+C,EAE/CA,MAAOC,EAFwC,EAExCA,SACTrG,EAAa,CACjBoG,MAAOA,EAAMR,MACbS,SAAUA,EAAST,OAErB3K,EAAS8E,EAAO,CAAEC,OAAMlE,aAOO6K,CAAab,EAAOhK,IAA/C,UACE,uBAAK0H,UAAU,aAAf,UACE,wBAAOgD,QAAQ,aAAf,6BACA,wBACEd,KAAK,QACLlC,UAAU,eACVY,GAAG,aACHrI,KAAK,QACL4J,YAAY,aAGhB,uBAAKnC,UAAU,aAAf,UACE,wBAAOgD,QAAQ,gBAAf,wBACA,wBACEzK,KAAK,WACL2J,KAAK,WACLlC,UAAU,eACVY,GAAG,gBACHuB,YAAY,aAGf7I,GAAS,qBAAG0G,UAAU,eAAb,cAA8B1G,EAA9B,OACV,yBACE4I,KAAK,SACLlC,UAAU,0CACViD,gBAAc,EAHhB,8BCxCKG,GAfA,WACb,IAAM1G,EAAkB8C,aACtB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAW/C,cAEnCjF,EAAWiI,cACXpH,EAAUmK,cAOhB,OAJA9C,qBAAU,WACRlI,EAASgF,EAAO,CAAEC,aAAYpE,eAC7B,IAEI,0BCqGM+K,GAhHS,WACtB,IAAMjG,EAAeoC,aACnB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWrC,gBAEnC9D,EAAQkG,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWnG,SAC3D7B,EAAWiI,cACXpH,EAAUmK,cAGhB9C,qBAAU,WACRlI,EAAS4B,GAAS,OAClBF,gBAAO4D,gBACN,IAoBH,OAAKK,EAGH,sBAAK4C,UAAU,gCAAf,SACE,uBAAKA,UAAU,mCAAf,UACE,qBAAIA,UAAU,iBAAd,8BACA,wBAAM0C,SAAU,SAACJ,GAAD,OAvBI,SAACA,EAAYhK,GACrCgK,EAAMK,iBADgD,MAGpDL,EAAMC,OADAhK,EAF8C,EAE9CA,KAAMC,EAFwC,EAExCA,YAAaC,EAF2B,EAE3BA,KAAM6K,EAFqB,EAErBA,WAAY5K,EAFS,EAETA,SAAUC,EAFD,EAECA,MAEjDiB,EAAQ0J,EAAWC,MAAM,GACzBnL,EAAa,IAAIyB,SACvBzB,EAAW0B,OAAO,QAASF,GAC3B,IAAMvB,EAAe,CACnBE,KAAMA,EAAK6J,MACX5J,YAAaA,EAAY4J,MACzB3J,KAAMA,EAAK2J,MACX1J,SAAUA,EAAS0J,MACnBzJ,MAAOA,EAAMyJ,OAEf3K,EAASU,EAAY,CAAEC,aAAYC,QAAOC,aASXkL,CAAkBlB,EAAOhK,IAApD,UACE,wBAAO0K,QAAQ,YAAf,oBACA,wBACEhD,UAAU,oBACVzH,KAAK,OACL2J,KAAK,OACLC,YAAY,QACZvB,GAAG,cAEL,wBAAOoC,QAAQ,mBAAf,2BACA,wBACEhD,UAAU,oBACVzH,KAAK,cACL2J,KAAK,OACLC,YAAY,QACZvB,GAAG,qBAEL,wBAAOoC,QAAQ,YAAf,yBACA,wBACEhD,UAAU,oBACVzH,KAAK,OACL2J,KAAK,SACLuB,IAAI,IACJtB,YAAY,QACZvB,GAAG,cAEL,wBAAOoC,QAAQ,gBAAf,wBACA,0BACEhD,UAAU,wBACVzH,KAAK,WACLqI,GAAG,gBAHL,UAKE,wDACA,yBAAQwB,MAAM,MAAd,mBACA,yBAAQA,MAAM,QAAd,qBACA,yBAAQA,MAAM,gBAAd,gCAEF,wBAAOY,QAAQ,aAAf,2BACA,wBACEhD,UAAU,oBACVzH,KAAK,QACL2J,KAAK,SACLuB,IAAI,IACJtB,YAAY,QACZvB,GAAG,eAEL,wBAAOoC,QAAQ,aAAf,qBACA,wBACEhD,UAAU,oBACVzH,KAAK,aACL2J,KAAK,OACLtB,GAAG,eAEJtH,GAAS,qBAAG0G,UAAU,eAAb,cAA8B1G,EAA9B,OACV,uBAAK0G,UAAU,yBAAf,UACE,yBACEA,UAAU,+CACVkC,KAAK,SAFP,oBAMA,eAAC,IAAD,CAAM7B,GAAI,IAAV,SACE,0BAAQL,UAAU,+CAAlB,UACG,IADH,UAEU,oBAtEI,eAAC,IAAD,CAAUK,GAAI,aC2G3BqD,GAnIM,WACnB,IAAMtG,EAAeoC,aACnB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWrC,gBAEnCE,EAAWkC,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWnC,YAC9DjF,EAAQmH,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWpH,SACzDmB,EAAiBmK,cAAjBnK,QACF/B,EAAWiI,cACXpH,EAAUmK,cAGhB9C,qBAAU,WACRlI,EAAS8B,EAAUC,IACnBL,gBAAO4D,gBACN,IAkBH,IAAKK,EAAc,OAAO,eAAC,IAAD,CAAUiD,GAAI,YAhCF,MA4ClChI,EATFkD,EAnCoC,EAmCpCA,IACAhD,EApCoC,EAoCpCA,KACAC,EArCoC,EAqCpCA,YACAC,EAtCoC,EAsCpCA,KACAI,EAvCoC,EAuCpCA,SACAC,EAxCoC,EAwCpCA,cACAJ,EAzCoC,EAyCpCA,SACAC,EA1CoC,EA0CpCA,MACAiL,EA3CoC,EA2CpCA,QAEF,OAAKA,EAUH,uBAAK5D,UAAU,2CAAf,UACE,sBAAKA,UAAU,2BAAf,SACE,oDAEF,sBAAKA,UAAU,MAAf,SACE,uBAAKA,UAAU,uBAAf,UACGnH,GACC,sBACEmH,UAAU,6BACVgC,IAAKnJ,EACLoJ,IAAK1J,IAGT,uBAAKyH,UAAU,YAAf,UACE,4CADF,IACwBzH,KAExB,uBAAKyH,UAAU,YAAf,UACE,mDADF,IAC+BxH,KAE/B,uBAAKwH,UAAU,YAAf,UACE,4CADF,IACwBvH,EADxB,SAGA,uBAAKuH,UAAU,YAAf,UACE,6CADF,IACyBtH,KAEzB,uBAAKsH,UAAU,YAAf,UACE,6CADF,IACyBrH,EADzB,aAGA,sBAAKqH,UAAU,uCAAf,SACE,sBAAKA,UAAU,+BAAf,SACE,uBAAKA,UAAU,4BAAf,UACG5C,EAAa7B,MAASqI,EAAiBrI,IACtC,uBAAKyE,UAAU,MAAf,UACE,eAAC,IAAD,CAAMK,GAAI,iBAAV,SACE,yBAAQL,UAAU,+CAAlB,sBAIF,yBACEA,UAAU,+CACVM,QAAS,kBA9EH,SACxBxH,EACAU,EACAlB,EACAgF,GAEAA,EAASuG,SAAQ,SAACtG,GACOA,EAAflF,MACEkD,MAAQ/B,GAChB/B,EAASqE,EAAc,CAAEL,UAAW8B,EAAQhC,IAAKjD,QAAS,WAG9Db,EAAS+C,EAAY,CAAE1B,gBAAeU,UAASlB,aAmE3BwL,CAAkBhL,EAAeyC,EAAKjD,EAASgF,IAHnD,uBAUF,iCACE,eAAC,IAAD,CAAM+C,GAAG,mBAAT,SACE,yBAAQL,UAAU,+CAAlB,mBAIF,eAAC,IAAD,CAAMK,GAAG,mBAAT,SACE,yBAAQL,UAAU,+CAAlB,uBAMN,eAAC,IAAD,CAAMK,GAAI,IAAKC,QAAS,kBAAM7I,EAAS8C,OAAvC,SACE,0BAAQyF,UAAU,+CAAlB,UACG,IADH,UAEU,wBAxEtB,sBAAKA,UAAU,gCAAgC6B,KAAK,SAApD,SACE,wBAAM7B,UAAU,kBAAhB,UACE,wBADF,IACS,wBADT,kCCoGO+D,GAvJS,WACtB,IAAM1L,EAAQmH,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWpH,SAC3DZ,EAAWiI,cACXpH,EAAUmK,cAGhB9C,qBAAU,kBAAMxG,gBAAO4D,gBAAe,IAGtC,IAAMiH,EAAyB,SAAC,EAE9B3L,EACA4L,GACU,IAHR1B,EAGO,EAHPA,OAII2B,EAAqBlK,KAAKC,MAAMD,KAAKE,UAAU7B,IAErD,OAAQ4L,GACN,KAAK,EACHC,EAAY3L,KAAOgK,EAAOH,MAC1B,MACF,KAAK,EACH8B,EAAY1L,YAAc+J,EAAOH,MACjC,MACF,KAAK,EACH8B,EAAYzL,KAAO8J,EAAOH,MAC1B,MACF,KAAK,EACH8B,EAAYxL,SAAW6J,EAAOH,MAC9B,MACF,KAAK,EACH8B,EAAYvL,MAAQ4J,EAAOH,MAE/B3K,EAASgC,EAASyK,KAhCqB,EAsEiB7L,EAAlDkD,EAtEiC,EAsEjCA,IAAKhD,EAtE4B,EAsE5BA,KAAMC,EAtEsB,EAsEtBA,YAAaC,EAtES,EAsETA,KAAMI,EAtEG,EAsEHA,SAAUF,EAtEP,EAsEOA,MAChD,OACE,sBAAKqH,UAAU,sBAAf,SACE,uBAAKA,UAAU,mCAAf,UACE,qBAAIA,UAAU,sBAAd,iCACA,uBAAKA,UAAU,4BAAf,UACE,sBAAKA,UAAU,oBAAoBgC,IAAKnJ,EAAUoJ,IAAK1J,IACvD,uBAAKyH,UAAU,YAAf,UACE,wBAAOgD,QAAQ,aAAf,oBACA,wBACEhD,UAAU,oBACVkC,KAAK,OACLG,SAAU,SAACC,GAAD,OAAW0B,EAAuB1B,EAAOjK,EAAO,IAC1D+J,MAAO7J,EACPqI,GAAG,eAEL,wBAAOoC,QAAQ,oBAAf,2BACA,wBACEhD,UAAU,oBACVkC,KAAK,OACLG,SAAU,SAACC,GAAD,OAAW0B,EAAuB1B,EAAOjK,EAAO,IAC1D+J,MAAO5J,EACPoI,GAAG,sBAEL,wBAAOoC,QAAQ,aAAf,yBACA,wBACEhD,UAAU,oBACVkC,KAAK,SACLG,SAAU,SAACC,GAAD,OAAW0B,EAAuB1B,EAAOjK,EAAO,IAC1D+J,MAAO3J,EACPmI,GAAG,eAEL,wBAAOoC,QAAQ,iBAAf,wBACA,0BACEhD,UAAU,yBACVqC,SAAU,SAACC,GAAD,OAAW0B,EAAuB1B,EAAOjK,EAAO,IAC1DE,KAAK,WACL4J,YAAY,SACZvB,GAAG,iBALL,UAOE,yBAAQwB,MAAM,MAAd,mBACA,yBAAQA,MAAM,QAAd,qBACA,yBAAQA,MAAM,gBAAd,gCAEF,wBAAOY,QAAQ,cAAf,2BACA,wBACEhD,UAAU,oBACVzH,KAAK,QACL2J,KAAK,SACLuB,IAAI,IACJpB,SAAU,SAACC,GAAD,OAAW0B,EAAuB1B,EAAOjK,EAAO,IAC1D+J,MAAOzJ,EACPiI,GAAG,gBAEL,wBAAOoC,QAAQ,cAAf,qBACA,wBACEhD,UAAU,oBACVqC,SAAU,SAACC,GAAD,OA3FI,SAAC,EAAiBjK,GAAwB,IAC5DuB,EAD2D,EAAtC2I,OACNgB,MAAM,GACnBzK,EAAkBT,EAAlBS,cAIRrB,EAASiC,EAAY,CAAEC,iBAHE,CACvBb,iBAEuCc,QAAOvB,WAqFjB8L,CAAkB7B,EAAOjK,IAC9C6J,KAAK,OACLtB,GAAG,gBAEL,uBAAKZ,UAAU,yBAAf,UACE,yBACEA,UAAU,+CACVM,QAAS,kBAzFG,SAAC,EAWzBhI,GACU,IAVRiD,EAUO,EAVPA,IACAhD,EASO,EATPA,KACAC,EAQO,EARPA,YACAC,EAOO,EAPPA,KACAI,EAMO,EANPA,SACAC,EAKO,EALPA,cACAJ,EAIO,EAJPA,SACAC,EAGO,EAHPA,MAaFlB,EAAS0C,EAAY,CAAEX,QAAS+B,EAAKnB,aATT,CAC1B7B,OACAC,cACAC,OACAI,WACAC,gBACAJ,WACAC,SAEiDL,aAmExB8L,CAAkB/L,EAAOC,IAF1C,kBAMA,eAAC,IAAD,CAAM+H,GAAE,uBAAkB9E,GAA1B,SACE,yBAAQyE,UAAU,+CAAlB,sC,kBCMDqE,GAjIM,WAAoB,IAAD,EACAnD,oBAAS,GADT,oBAC/BoD,EAD+B,KAClBC,EADkB,OAEErD,oBAAS,GAFX,oBAE/BsD,EAF+B,KAEjBC,EAFiB,OAGFvD,oBAAS,GAHP,oBAG/BwD,EAH+B,KAGnBC,EAHmB,OAIEzD,mBAAS,IAJX,oBAI/B0D,EAJ+B,KAIjBC,EAJiB,KAKhCC,EAASC,uBACTC,EAAWC,yBACXpK,EAAe2E,aACnB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAW5E,gBAEnCxC,EAAQmH,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWpH,SAC3DZ,EAAWiI,cACXpH,EAAUmK,cAGhB9C,qBAAU,WAER,OADAlI,EAASkD,EAActC,IAChB,WACLC,EAAQY,KAAK,KACbzB,EAAS8C,SAEV,IAGH,IAiBM2K,EAAY,uCAAG,WAAO5C,GAAP,SAAA9K,EAAA,sDACnBmN,EAAcrC,EAAM6C,OACpBN,EAAgBvC,EAAMhJ,MAAQgJ,EAAMhJ,MAAMiE,QAAU,IAFjC,2CAAH,sDAMZ6H,EAAmB,uCAAG,WAAO9C,GAAP,eAAA9K,EAAA,6DAC1B8K,EAAMK,iBACN8B,GAAgB,GAFU,SAGHK,EAAeO,mBAAmBxK,EAAc,CACrEyK,eAAgB,CAAEC,KAAOP,EAAiBQ,WAAWC,mBAJ7B,QAGpBvH,EAHoB,QAMd5E,OACVuL,EAAgB,kBAAD,OAAmB3G,EAAQ5E,MAAMiE,UAChDkH,GAAgB,KAEhBI,EAAgB,IAChBJ,GAAgB,GAChBF,GAAe,IAZS,2CAAH,sDA/Ca,EA+DTlM,EAArBkD,EA/D8B,EA+D9BA,IAAKhD,EA/DyB,EA+DzBA,KAAMI,EA/DmB,EA+DnBA,MACnB,OACE,uBAAKqH,UAAU,kBAAf,UACE,wBACEA,UAAU,oBACVY,GAAG,eACH8B,SAAU0C,EAHZ,UAKE,sBAAIpF,UAAU,qBAAd,cAAqCzH,EAArC,OACA,sBAAIyH,UAAU,qBAAd,qBAA4CrH,EAA5C,cACA,eAAC,eAAD,CACEqH,UAAU,MACVY,GAAG,eACH8E,QApDqB,CAC3BC,MAAO,CACLC,KAAM,CACJC,MAAO,UACPC,WAAY,oBACZC,cAAe,cACfC,SAAU,OACV,gBAAiB,CAAEH,MAAO,YAE5BI,QAAS,CACPJ,MAAO,UACPK,UAAW,aA0CT7D,SAAU6C,IAEZ,sBAAKlF,UAAU,6BAAf,SACE,yBACEM,QAAS,kBAAM7I,EAASqD,EAASxC,KACjC0H,UAAU,uBACVmG,SAAU3B,GAAgBE,GAAcJ,EACxC1D,GAAG,SAJL,SAME,uBAAMA,GAAG,cAAT,SACG4D,EACC,sBAAKxE,UAAU,UAAUY,GAAG,YAE5B,gBAONgE,GACE,sBAAK5E,UAAU,aAAa6B,KAAK,QAAjC,SACG+C,IAKP,oBACE5E,UACEsE,EACI,6BACA,oCAJR,mCAUF,sBAAKtE,UAAU,6BAAf,SACGsE,EACC,eAAC,IAAD,CAAMjE,GAAI,IAAKC,QAAS,kBAAM7I,EAAS8C,OAAvC,SACE,yBAAQyF,UAAU,0BAAlB,yBAGF,eAAC,IAAD,CAAMK,GAAE,uBAAkB9E,GAA1B,SACE,yBAAQyE,UAAU,0BAAlB,+BC/INoG,GAAUC,aACd,+GAkBaC,GAfM,WAInB,OAFA3G,qBAAU,kBAAMxG,gBAAO4D,gBAAe,IAGpC,sBAAKiD,UAAU,qBAAf,SACE,sBAAKA,UAAU,gDAAf,SACE,eAAC,YAAD,CAAU8E,OAAQsB,GAAlB,SACE,eAAC,GAAD,WC8EKG,GAnFM,WACnB,IAAMnJ,EAAeoC,aACnB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWrC,gBAEnCpC,EAAewE,aACnB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWzE,gBAEnCsC,EAAWkC,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWnC,YAC9DE,EAAmBgC,aACvB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWjC,oBAEnC/F,EAAWiI,cAcjB,OAXAC,qBAAU,WACR,IAAM6G,EAAiB,WACrB/O,EAASqF,IAAgB,IACzB3D,gBAAO4D,eAKT,OAFAtF,EAASsD,EAAiBC,IAC1BwL,IACO,kBAAMA,OACZ,IAEEpJ,EAEAE,EAUH,sBAAK0C,UAAU,qBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,6DACA,sBAAIA,UAAU,OAAd,eAAwBxC,EAAxB,QACA,sBAAKwC,UAAU,kBAAf,SACE,eAAC,IAAD,CAAMK,GAAI,IAAV,SACE,yBAAQL,UAAU,0CAAlB,yBAKH1C,EAASa,KACR,YAA2D,IAAxD5C,EAAuD,EAAvDA,IAAK+C,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,OAAQlG,EAAmC,EAAnCA,MAAOqG,EAA4B,EAA5BA,aAC5B,OACGH,EAAgBhD,MAAQ6B,EAAa7B,MACrB,IAAjBmD,GACE,uBAAKsB,UAAU,iBAAf,UACE,gDAAmB3H,EAAgBE,KAAnC,OACA,uCAAU+F,EAAeyC,SAAzB,OACA,sBAAKf,UAAU,cAAf,SACE,eAAC,IAAD,CACEA,UAAU,8BACVK,GAAE,yBAAoB9E,GAFxB,yBAJiCA,MAgBvB,IAArBiC,GACC,sBAAKwC,UAAU,uBAAf,SACE,eAAC,IAAD,CAAMK,GAAI,IAAV,SACE,yBAAQL,UAAU,0CAAlB,8BA3CR,sBAAKA,UAAU,gCAAgC6B,KAAK,SAApD,SACE,wBAAM7B,UAAU,kBAAhB,UACE,wBADF,IACS,wBADT,4BALoB,eAAC,IAAD,CAAUK,GAAI,aCwD3BoG,GAjFK,WAClB,IAAMrJ,EAAeoC,aACnB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWrC,gBAEnCpC,EAAewE,aACnB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWzE,gBAEnCsC,EAAWkC,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWnC,YAC9DG,EAAkB+B,aACtB,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWhC,mBAEnChG,EAAWiI,cAcjB,OAXAC,qBAAU,WACR,IAAM6G,EAAiB,WACrB/O,EAASsH,IAAc,IACvB5F,gBAAO4D,eAKT,OAFAtF,EAASsD,EAAiBC,IAC1BwL,IACO,kBAAMA,OACZ,IAEEpJ,EAEAE,EAUH,sBAAK0C,UAAU,qBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,8DACA,sBAAIA,UAAU,OAAd,eAAwBvC,EAAxB,QACA,sBAAKuC,UAAU,kBAAf,SACE,eAAC,IAAD,CAAMK,GAAI,IAAV,SACE,yBAAQL,UAAU,0CAAlB,yBAKH1C,EAASa,KAAI,YAAoD,IAAjD5C,EAAgD,EAAhDA,IAAK+C,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,OAAQlG,EAA4B,EAA5BA,MAAOoG,EAAqB,EAArBA,MAC1C,OACGH,EAAe/C,MAAQ6B,EAAa7B,KACrCkD,GACE,uBAAKuB,UAAU,iBAAf,UACE,8CAAiB3H,EAAgBE,KAAjC,OACA,uCAAUgG,EAAgBwC,SAA1B,OACA,sBAAKf,UAAU,cAAf,SACE,eAAC,IAAD,CACEA,UAAU,8BACVK,GAAE,wBAAmB9E,GAFvB,yBAJiCA,MAetB,IAApBkC,GACC,sBAAKuC,UAAU,uBAAf,SACE,eAAC,IAAD,CAAMK,GAAI,IAAV,SACE,yBAAQL,UAAU,0CAAlB,8BAzCR,sBAAKA,UAAU,gCAAgC6B,KAAK,SAApD,SACE,wBAAM7B,UAAU,kBAAhB,UACE,wBADF,IACS,wBADT,2BALoB,eAAC,IAAD,CAAUK,GAAI,aCmC3BqG,GA5DW,WACxB,IAAMrO,EAAQmH,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWpH,SAC3DiB,EAAQkG,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWnG,SAC3D7B,EAAWiI,cACXpH,EAAUmK,cAGhB9C,qBAAU,WACRlI,EAAS4B,GAAS,OAClBF,gBAAO4D,gBACN,IAGH,IAb8B,EAyBR1E,EAAdkD,EAzBsB,EAyBtBA,IAAKhD,EAzBiB,EAyBjBA,KACb,OACE,sBAAKyH,UAAU,qBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,qBAAIA,UAAU,OAAd,4BACA,sBAAIA,UAAU,OAAd,mBAA4BzH,EAA5B,OACA,wBAAMmK,SAAU,SAACJ,GAAD,OAlBM,SAACA,EAAYjK,EAAcC,GACrDgK,EAAMK,iBADgE,IAE9DnE,EAAY8D,EAAMC,OAAlB/D,QAEFnD,EAAsB,CAC1BkD,OAFkBlG,EAAZuL,QAEoBrI,IAC1BlD,MAAOA,EAAMkD,IACbiD,QAASA,EAAQ4D,OAEnB3K,EAAS2D,EAAc,CAAEC,aAAY/C,aASNqO,CAAoBrE,EAAOjK,EAAOC,IAA7D,UACE,+BACE,2BACE0H,UAAU,oBACVzH,KAAK,UACLqO,KAAM,GACNC,KAAM,MAGTvN,GAAS,qBAAG0G,UAAU,eAAb,cAA8B1G,EAA9B,OACV,uBAAK0G,UAAU,aAAf,UACE,yBACEA,UAAU,0CACVkC,KAAK,SAFP,kBAMA,eAAC,IAAD,CAAM7B,GAAE,uBAAkB9E,GAA1B,SACE,yBAAQyE,UAAU,0CAAlB,mCCkCC8G,GAjFQ,WACrB,IAAMvJ,EAAUiC,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWlC,WAC3D9B,EAAmBkI,cAAnBlI,UACFhE,EAAWiI,cACXpH,EAAUmK,cAGhB9C,qBAAU,WACRlI,EAAS+D,EAAYC,IACrBtC,gBAAO4D,gBACN,IAVqC,MAYMQ,EAAtChC,EAZgC,EAYhCA,IAAK+C,EAZ2B,EAY3BA,MAAOjG,EAZoB,EAYpBA,MAAOmG,EAZa,EAYbA,QAASC,EAZI,EAYJA,MACpC,IAAKH,IAAUjG,EACb,OACE,sBAAK2H,UAAU,gCAAgC6B,KAAK,SAApD,SACE,wBAAM7B,UAAU,kBAAhB,UACE,wBADF,IACS,wBADT,2BA0BN,OACE,sBAAKA,UAAU,sBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,sBAAIA,UAAU,OAAd,0BAAoC3H,EAAgBE,KAApD,OACA,uCAAU+F,EAAeyC,SAAzB,OACA,qBAAGf,UAAU,eAAb,cAA8BxB,EAA9B,OACCC,GACC,iCACE,+CACA,qBAAGuB,UAAU,eAAb,cAA8BvB,EAA9B,UAGJ,uBAAKuB,UAAU,kBAAf,WACIvB,GACA,eAAC,IAAD,CAAM4B,GAAE,2BAAsB9E,GAA9B,SACE,yBAAQyE,UAAU,+CAAlB,qBAKJ,yBACEA,UAAU,+CACVM,QAAS,kBAzCc,SAAC/C,EAAkBjF,GAClD,IAAMyO,EAAyB/M,KAAKC,MAAMD,KAAKE,UAAUqD,IACzDwJ,EAAcrI,cAAe,EAC7BjH,EAASiE,EAAWqL,IAH+C,IAI3DxL,EACNwL,EADMxL,IAAK+C,EACXyI,EADWzI,MAAOC,EAClBwI,EADkBxI,OAAQlG,EAC1B0O,EAD0B1O,MAAOmG,EACjCuI,EADiCvI,QAASC,EAC1CsI,EAD0CtI,MAAOC,EACjDqI,EADiDrI,aAUnDjH,EAASkE,EAAc,CAAEF,UAAWF,EAAKK,eART,CAC9B0C,QACAC,SACAlG,QACAmG,UACAC,QACAC,mBAGFjH,EAASwH,MACT3G,EAAQY,KAAK,mBAyBU8N,CAAyBzJ,EAASjF,IAFnD,qBAOF,sBAAK0H,UAAU,kBAAf,SACE,eAAC,IAAD,CAAMK,GAAI,kBAAmBC,QAASnH,gBAAO4D,YAA7C,SACE,yBAAQiD,UAAU,0CAAlB,+BCpBGiH,GArDM,WACnB,IAAM1J,EAAUiC,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWlC,WAC3D9B,EAAmBkI,cAAnBlI,UACFhE,EAAWiI,cACXpH,EAAUmK,cAGhB9C,qBAAU,WACRlI,EAAS+D,EAAYC,IACrBtC,gBAAO4D,gBACN,IAVmC,MAYgBQ,EAAzCe,GAZyB,EAY9B/C,IAZ8B,EAYzB+C,OAAOC,EAZkB,EAYlBA,OAAQlG,EAZU,EAYVA,MAAOmG,EAZG,EAYHA,QAASC,EAZN,EAYMA,MAC5C,OAAKH,GAAUjG,EAUb,sBAAK2H,UAAU,sBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,sBAAIA,UAAU,OAAd,+BAAyC3H,EAAgBE,KAAzD,OACA,qBAAGyH,UAAU,eAAb,cAA8BxB,EAA9B,OACCC,GACC,iCACE,6CAAgBF,EAAgBwC,SAAhC,OACA,qBAAGf,UAAU,eAAb,cAA8BvB,EAA9B,UAGJ,sBAAKuB,UAAU,kBAAf,SACE,yBACEA,UAAU,+CACVM,QAAS,kBAAM7I,EAASqE,EAAc,CAAEL,YAAWnD,cAFrD,sBAOF,sBAAK0H,UAAU,kBAAf,SACE,eAAC,IAAD,CAAMK,GAAI,iBAAkBC,QAASnH,gBAAO4D,YAA5C,SACE,yBAAQiD,UAAU,0CAAlB,8BA5BN,sBAAKA,UAAU,gCAAgC6B,KAAK,SAApD,SACE,wBAAM7B,UAAU,kBAAhB,UACE,wBADF,IACS,wBADT,4BC8COkH,GApEW,WACxB,IAAM3J,EAAUiC,aAAY,SAACxB,GAAD,OAAsBA,EAAMyB,WAAWlC,WAC7D9F,EAAWiI,cACXpH,EAAUmK,cAGhB9C,qBAAU,kBAAMxG,gBAAO4D,gBAAe,IAGtC,IAT2C,EAgClBQ,EAAjBhC,EAhCmC,EAgCnCA,IAAKiD,EAhC8B,EAgC9BA,QACb,OACE,sBAAKwB,UAAU,sBAAf,SACE,uBAAKA,UAAU,4CAAf,UACE,qBAAIA,UAAU,YAAd,kCACA,sBAAKA,UAAU,2BAAf,SACE,uBAAKA,UAAU,YAAf,UACE,mCAAKxB,EAAL,OACA,2BACEwB,UAAU,oBACVzH,KAAK,QACLqO,KAAM,GACNC,KAAM,EACN1E,YAAY,aACZE,SAAU,SAACC,GAAD,OArCI,SAAC,EAAiB/E,GAA4B,IAA3CgF,EAA0C,EAA1CA,OACrBwE,EAAyB/M,KAAKC,MAAMD,KAAKE,UAAUqD,IACzDwJ,EAActI,MAAQ8D,EAAOH,MAC7B3K,EAASiE,EAAWqL,IAkCWI,CAAkB7E,EAAO/E,MAEhD,uBAAKyC,UAAU,+BAAf,UACE,yBACEA,UAAU,+CACVM,QAAS,kBAnCK,SAAC,EAE3BhI,GACU,IAFRiD,EAEO,EAFPA,IAAK+C,EAEE,EAFFA,MAAOC,EAEL,EAFKA,OAAQlG,EAEb,EAFaA,MAAOmG,EAEpB,EAFoBA,QAASC,EAE7B,EAF6BA,MAAOC,EAEpC,EAFoCA,aAW7CjH,EAASkE,EAAc,CAAEF,UAAWF,EAAKK,eART,CAC9B0C,QACAC,SACAlG,QACAmG,UACAC,QACAC,mBAGFpG,EAAQY,KAAR,yBAA+B,CAAEuC,UAAWF,KAsBjB6L,CAAoB7J,EAASjF,IAF9C,oBAMA,eAAC,IAAD,CAAM+H,GAAE,yBAAoB9E,GAA5B,SACE,yBAAQyE,UAAU,+BAAlB,qCC1CDqH,GAnBE,WACf,OACE,sBAAKrH,UAAU,WAAf,SACE,iCACE,0CACS,wBADT,IACgB,wBADhB,0CAIA,kDACA,eAAC,IAAD,CAAMK,GAAI,IAAV,SACE,0BAAQL,UAAU,0CAAlB,yBACe,eCYVsH,GAvBS,WAoBtB,OAlBA3H,qBAAU,YACR,SAAE4H,EAAGC,GACH,IAKMC,EAAIC,SAASC,cAAc,UACjCF,EAAEvF,KAAO,kBACTuF,EAAEG,OAAQ,EACVH,EAAEzF,IAAM,mDACE0F,SAASG,qBAAqB,QAAQ,GAC9CC,YAAYL,GACbM,OAAeC,YAAcR,EAC9BA,EAAES,SAZ0B,CAC1BC,MAAO,kCACPC,aAAa,EACbC,+BAA+B,GAJnC,CAcGV,SAAWK,OAAeC,aAAe,MAC3C,IAEI,0BC8DMK,gBA5DH,WACV,OACE,uBAAKrI,UAAU,OAAf,UACE,eAAC,GAAD,IACA,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOsI,OAAK,EAACC,KAAK,IAAlB,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,iBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,wBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,iBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,mBAAZ,SACE,eAAC,GAAD,MAGF,eAAC,IAAD,CAAOA,KAAK,mBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,mBAAZ,SACE,eAAC,GAAD,MAGF,eAAC,IAAD,CAAOA,KAAK,kBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,4BAAZ,SACE,eAAC,GAAD,MAGF,eAAC,IAAD,CAAOA,KAAK,iBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,2BAAZ,SACE,eAAC,GAAD,MAGF,eAAC,IAAD,CAAOA,KAAK,UAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,UAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,UAAZ,SACE,eAAC,GAAD,MAGF,eAAC,IAAD,CAAOC,UAAWnB,QAEpB,eAAC,GAAD,IACA,eAAC,GAAD,UC5EOoB,GAAQC,YAAe,CAClCC,QAAS,CAAElJ,WAAYzC,M,OCKzB4L,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUL,MAAOA,GAAjB,SACE,eAAC,IAAD,UACE,eAAC,GAAD,UAINf,SAASqB,cAAc,W","file":"static/js/main.117740da.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\nexport interface User {\r\n  _id?: string;\r\n  username?: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface Plant {\r\n  _id?: string;\r\n  name?: string;\r\n  description?: string;\r\n  size?: number;\r\n  imageUrl?: string;\r\n  imagePublicId?: string;\r\n  location?: string;\r\n  price?: number;\r\n  creator?: string | User | undefined;\r\n}\r\n\r\nexport interface Message {\r\n  _id?: string;\r\n  buyer?: string | User | undefined;\r\n  seller?: string | User | undefined;\r\n  plant?: string | Plant | undefined;\r\n  request?: string;\r\n  reply?: string;\r\n  messageState?: boolean;\r\n}\r\n\r\nexport type LoggedInUser = User | null;\r\nexport type IntervalId = NodeJS.Timer | null;\r\nexport type Error = string | null;\r\n\r\ninterface SliceState {\r\n  isFetchingUser: boolean;\r\n  loggedInUser: LoggedInUser;\r\n  isUserChange: boolean;\r\n  plants: Plant[];\r\n  plant: Plant | {};\r\n  messages: Message[];\r\n  message: Message | {};\r\n  amountOfRequests: number;\r\n  amountOfReplies: number;\r\n  isNewRequest: boolean;\r\n  isNewReply: boolean;\r\n  intervalId: IntervalId;\r\n  minutesCounter: number;\r\n  headerContainerHeight: number;\r\n  aboutContainerHeight: number;\r\n  clientSecret: string;\r\n  error: Error;\r\n}\r\n\r\nconst initialState: SliceState = {\r\n  isFetchingUser: true,\r\n  loggedInUser: null,\r\n  isUserChange: false,\r\n  plants: [],\r\n  plant: {},\r\n  messages: [],\r\n  message: {},\r\n  amountOfRequests: 0,\r\n  amountOfReplies: 0,\r\n  isNewRequest: false,\r\n  isNewReply: false,\r\n  intervalId: null,\r\n  minutesCounter: 0,\r\n  headerContainerHeight: 0,\r\n  aboutContainerHeight: 0,\r\n  clientSecret: \"\",\r\n  error: null,\r\n};\r\n\r\n// --------- Plants ---------\r\n// Fetch all plants\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async (_options, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch`);\r\n      dispatch(setPlants(response.data));\r\n    } catch (err) {\r\n      console.log(\"Fetching plants failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch query plants\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query: string, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      dispatch(setPlants(response.data));\r\n    } catch (err) {\r\n      console.log(\"Fetching query plants failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant\r\ninterface CreatePlantParameters {\r\n  uploadForm: any;\r\n  plant: Plant;\r\n  history: any;\r\n}\r\n\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async (\r\n    { uploadForm, plant, history }: CreatePlantParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    const { name, description, size, location, price } = plant;\r\n    try {\r\n      const response = await axios.post(`${apiPath}/upload`, uploadForm);\r\n      const { imageUrl, imagePublicId } = response.data;\r\n      const newPlant: Plant = {\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      };\r\n      try {\r\n        const response = await axios.post(\r\n          `${apiPath}/plants/create`,\r\n          newPlant,\r\n          { withCredentials: true }\r\n        );\r\n        dispatch(addPlant(response.data));\r\n        history.push(\"/\");\r\n        scroll.scrollToBottom();\r\n      } catch (err: any) {\r\n        dispatch(setError(err.response.data.error));\r\n      }\r\n    } catch (err: any) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Read plant\r\nexport const readPlant = createAsyncThunk(\r\n  \"jungleSwap/readPlant\",\r\n  async (plantId: string, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/read/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      dispatch(setPlant(response.data));\r\n    } catch {\r\n      console.log(\"Read plant failed\");\r\n    }\r\n  }\r\n);\r\n\r\n// Plant image change\r\ninterface DestroyImageData {\r\n  imagePublicId: string | undefined;\r\n}\r\n\r\ninterface ImageChangeParameters {\r\n  destroyImageData: DestroyImageData;\r\n  image: string;\r\n  plant: Plant;\r\n}\r\n\r\nexport const imageChange = createAsyncThunk(\r\n  \"jungleSwap/imageChange\",\r\n  async (\r\n    { destroyImageData, image, plant }: ImageChangeParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      await axios.post(`${apiPath}/destroy`, destroyImageData);\r\n      try {\r\n        const uploadForm = new FormData();\r\n        uploadForm.append(\"image\", image);\r\n        const response = await axios.post(`${apiPath}/upload`, uploadForm);\r\n        const { imagePublicId, imageUrl } = response.data;\r\n        const clonePlant = JSON.parse(JSON.stringify(plant));\r\n        clonePlant.imagePublicId = imagePublicId;\r\n        clonePlant.imageUrl = imageUrl;\r\n        dispatch(setPlant(clonePlant));\r\n      } catch (err) {\r\n        console.log(\"Image upload failed\", err);\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Delete old image failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Update plant\r\ninterface UpdatePlantParameters {\r\n  plantId: string | undefined;\r\n  updatedPlant: Plant;\r\n  history: any;\r\n}\r\n\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async (\r\n    { plantId, updatedPlant, history }: UpdatePlantParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      dispatch(setPlantChanges(response.data));\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    } catch (err) {\r\n      console.log(\"Update plant failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete Plant\r\ninterface DeletePlantParameters {\r\n  imagePublicId: string | undefined;\r\n  plantId: string | undefined;\r\n  history: any;\r\n}\r\n\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (\r\n    { imagePublicId, plantId, history }: DeletePlantParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      const destroyImageData = {\r\n        imagePublicId,\r\n      };\r\n      await axios.post(`${apiPath}/destroy`, destroyImageData);\r\n      try {\r\n        await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n        dispatch(removePlant(plantId));\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      } catch (err) {\r\n        console.log(\"Delete plant failed\", err);\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Delete image failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant payment\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant: Plant, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/create-payment-intent`, {\r\n        price: plant.price,\r\n      });\r\n      dispatch(setClientSecret(response.data.clientSecret));\r\n    } catch (err) {\r\n      console.log(\"Create payment failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Pay plant\r\nexport const payPlant = createAsyncThunk(\r\n  \"jungleSwap/payPlant\",\r\n  async (history: any, { dispatch }): Promise<void> => {\r\n    try {\r\n      await axios.post(\r\n        `${apiPath}/create-payment-intent`,\r\n        {},\r\n        { withCredentials: true }\r\n      );\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    } catch (err) {\r\n      console.log(\"Checkout failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// --------- Messages ----------\r\n// Fetch all messages\r\nexport const fetchAllMessages = createAsyncThunk(\r\n  \"jungleSwap/fetchAllMessages\",\r\n  async (isUserChange: boolean, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/messages/fetch`);\r\n      dispatch(setMessages(response.data));\r\n      isUserChange && dispatch(setStartAmountOfRequests());\r\n      isUserChange && dispatch(setStartAmountOfReplies());\r\n    } catch (err) {\r\n      console.log(\"Fetching messages failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create messages\r\ninterface CreateMessageParameters {\r\n  newMessage: Message;\r\n  history: any;\r\n}\r\n\r\nexport const createMessage = createAsyncThunk(\r\n  \"jungleSwap/createMessage\",\r\n  async (\r\n    { newMessage, history }: CreateMessageParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/messages/create`,\r\n        newMessage,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(addMessage(response.data));\r\n      history.push(`/plants/read/${response.data.plant._id}`);\r\n    } catch (err: any) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Read message\r\nexport const readMessage = createAsyncThunk(\r\n  \"jungleSwap/readMessage\",\r\n  async (messageId: string, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${apiPath}/messages/read/${messageId}`,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setMessage(response.data));\r\n    } catch {\r\n      console.log(\"Read message failed\");\r\n    }\r\n  }\r\n);\r\n\r\n// Update message\r\ninterface UpdateMessageParameters {\r\n  messageId: string | undefined;\r\n  updatedMessage: Message;\r\n}\r\n\r\nexport const updateMessage = createAsyncThunk(\r\n  \"jungleSwap/updateMessage\",\r\n  async (\r\n    { messageId, updatedMessage }: UpdateMessageParameters,\r\n    { dispatch }\r\n  ) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/messages/update/${messageId}`,\r\n        updatedMessage\r\n      );\r\n      dispatch(setMessageChanges(response.data));\r\n    } catch (err) {\r\n      console.log(\"Update message failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete message\r\ninterface DeleteMessageParameters {\r\n  messageId: string | undefined;\r\n  history: any;\r\n}\r\n\r\nexport const deleteMessage = createAsyncThunk(\r\n  \"jungleSwap/deleteMessage\",\r\n  async (\r\n    { messageId, history }: DeleteMessageParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\r\n      dispatch(removeMessage(messageId));\r\n      dispatch(decreaseAmountOfReplies());\r\n      history && history.push(\"/replies/fetch\");\r\n    } catch (err) {\r\n      console.log(\"Delete message failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// ---------- User authentification ----------\r\n// Read user\r\nexport const readUser = createAsyncThunk(\r\n  \"jungleSwap/readUserData\",\r\n  async (_options, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/user`, {\r\n        withCredentials: true,\r\n      });\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsFetchingUser(false));\r\n    } catch (err) {\r\n      console.log(\"Initializing fetching failed\", err);\r\n      dispatch(setIsFetchingUser(false));\r\n    }\r\n  }\r\n);\r\n\r\n// Sign up\r\ninterface SignUpParameters {\r\n  newUser: User;\r\n  history: any;\r\n}\r\n\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (\r\n    { newUser, history }: SignUpParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/signup`, newUser);\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    } catch (err: any) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Sign in\r\ninterface SignInParameters {\r\n  user: User;\r\n  history: any;\r\n}\r\n\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async ({ user, history }: SignInParameters, { dispatch }): Promise<void> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/signin`, user, {\r\n        withCredentials: true,\r\n      });\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    } catch (err: any) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// LogOut\r\ninterface LogOutParameters {\r\n  intervalId: NodeJS.Timer;\r\n  history: any;\r\n}\r\n\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (\r\n    { intervalId, history }: LogOutParameters,\r\n    { dispatch }\r\n  ): Promise<void> => {\r\n    try {\r\n      await axios.post(`${apiPath}/logout`, {}, { withCredentials: true });\r\n      dispatch(setLoggedInUser(null));\r\n      clearInterval(intervalId);\r\n      dispatch(setIntervalId(null));\r\n      dispatch(setMinutesCounter(0));\r\n      dispatch(setIsNewRequest(false));\r\n      history.push(\"/\");\r\n      scroll.scrollToTop();\r\n    } catch (err) {\r\n      console.log(\"Logout failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n  // ---------- Reducers -----------\r\n  reducers: {\r\n    // --------- Plants ----------\r\n    setPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.plants = action.payload;\r\n    },\r\n    setPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plant = action.payload;\r\n    },\r\n    addPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plants.push(action.payload);\r\n    },\r\n    setPlantChanges: (state, action: PayloadAction<Plant>) => {\r\n      const {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      } = action.payload;\r\n      state.plants = state.plants.map((singlePlant: Plant) => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, action: PayloadAction<string | undefined>) => {\r\n      state.plants = state.plants.filter(\r\n        (plant: Plant) => plant._id !== action.payload\r\n      );\r\n    },\r\n    setClientSecret: (state, action: PayloadAction<string>) => {\r\n      state.clientSecret = action.payload;\r\n    },\r\n\r\n    // ---------- Messages ----------\r\n    setMessages: (state, action: PayloadAction<Message[]>) => {\r\n      state.messages = action.payload;\r\n    },\r\n    setMessage: (state, action: PayloadAction<Message>) => {\r\n      state.message = action.payload;\r\n    },\r\n    addMessage: (state, action: PayloadAction<Message>) => {\r\n      state.messages.push(action.payload);\r\n    },\r\n    setMessageChanges: (state, action: PayloadAction<Message>) => {\r\n      const { _id, buyer, seller, plant, request, reply, messageState } =\r\n        action.payload;\r\n      state.messages = state.messages.map((singleMessage) => {\r\n        if (singleMessage._id === _id) {\r\n          singleMessage.buyer = buyer;\r\n          singleMessage.seller = seller;\r\n          singleMessage.plant = plant;\r\n          singleMessage.request = request;\r\n          singleMessage.reply = reply;\r\n          singleMessage.messageState = messageState;\r\n        }\r\n        return singleMessage;\r\n      });\r\n    },\r\n    removeMessage: (state, action: PayloadAction<string | undefined>) => {\r\n      state.messages = state.messages.filter((message: Message) => {\r\n        return message._id !== action.payload;\r\n      });\r\n    },\r\n    setStartAmountOfRequests: (state) => {\r\n      state.amountOfRequests = state.messages.filter((message: Message) => {\r\n        const { seller, messageState } = message;\r\n        return (\r\n          state.loggedInUser &&\r\n          (seller as User)._id === state.loggedInUser._id &&\r\n          messageState === true\r\n        );\r\n      }).length;\r\n    },\r\n    setStartAmountOfReplies: (state) => {\r\n      state.amountOfReplies = state.messages.filter((message: Message) => {\r\n        const { buyer, reply } = message;\r\n        return (\r\n          state.loggedInUser &&\r\n          (buyer as User)._id === state.loggedInUser._id &&\r\n          reply\r\n        );\r\n      }).length;\r\n    },\r\n    setAmountOfRequests: (state, action: PayloadAction<number>) => {\r\n      state.amountOfRequests = action.payload;\r\n    },\r\n    setAmountOfReplies: (state, action: PayloadAction<number>) => {\r\n      state.amountOfReplies = action.payload;\r\n    },\r\n    setIsNewRequest: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewRequest = action.payload;\r\n    },\r\n    setIsNewReply: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewReply = action.payload;\r\n    },\r\n    setIntervalId: (state, action: PayloadAction<IntervalId>) => {\r\n      state.intervalId = action.payload;\r\n    },\r\n    setMinutesCounter: (state, action: PayloadAction<number>) => {\r\n      state.minutesCounter = action.payload;\r\n    },\r\n    increaseMinutesCounter: (state) => {\r\n      state.minutesCounter += 1;\r\n    },\r\n    decreaseAmountOfRequests: (state) => {\r\n      state.amountOfRequests -= 1;\r\n    },\r\n    decreaseAmountOfReplies: (state) => {\r\n      state.amountOfReplies -= 1;\r\n    },\r\n\r\n    // ---------- User authentification ----------\r\n    setLoggedInUser: (state, action: PayloadAction<LoggedInUser>) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n    setIsFetchingUser: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingUser = action.payload;\r\n    },\r\n    setIsUserChange: (state, action: PayloadAction<boolean>) => {\r\n      state.isUserChange = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<Error>) => {\r\n      state.error = action.payload;\r\n    },\r\n\r\n    // ---------- Pages handling ----------\r\n    setHeaderContainerHeight: (state, action: PayloadAction<number>) => {\r\n      state.headerContainerHeight = action.payload;\r\n    },\r\n    setAboutContainerHeight: (state, action: PayloadAction<number>) => {\r\n      state.aboutContainerHeight = action.payload;\r\n    },\r\n    scrollToAbout: (state) => {\r\n      scroll.scrollTo(state.headerContainerHeight);\r\n    },\r\n    scrollToPlants: (state) => {\r\n      scroll.scrollTo(state.headerContainerHeight + state.aboutContainerHeight);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  // ----------- Plants ----------\r\n  setPlants,\r\n  setPlant,\r\n  addPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n  setClientSecret,\r\n\r\n  // ---------- Requests ----------\r\n  setMessages,\r\n  setMessage,\r\n  addMessage,\r\n  setMessageChanges,\r\n  removeMessage,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setIntervalId,\r\n  setMinutesCounter,\r\n  increaseMinutesCounter,\r\n  decreaseAmountOfRequests,\r\n  decreaseAmountOfReplies,\r\n\r\n  // ---------- User authentification ----------\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n  setIsUserChange,\r\n  setError,\r\n\r\n  // ---------- Pages handling ----------\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  fetchAllMessages,\r\n  setIsUserChange,\r\n  setIntervalId,\r\n  increaseMinutesCounter,\r\n  setMinutesCounter,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  scrollToPlants,\r\n  User,\r\n  Message,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NavBar = () => {\r\n  const loggedInUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const messages = useSelector((state: RootState) => state.jungleSwap.messages);\r\n  const intervalId = useSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const minutesCounter = useSelector(\r\n    (state: RootState) => state.jungleSwap.minutesCounter\r\n  );\r\n  const amountOfRequests = useSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const isNewRequest = useSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  // Stop interval at cleanup\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n        dispatch(setIntervalId(null));\r\n        dispatch(setMinutesCounter(0));\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Start request/reply check if user changes\r\n  useEffect(() => {\r\n    if (isUserChange) {\r\n      dispatch(fetchAllMessages(isUserChange));\r\n      dispatch(setIsUserChange(false));\r\n      dispatch(\r\n        setIntervalId(\r\n          setInterval(\r\n            () => dispatch(increaseMinutesCounter()),\r\n            10000 // every minute\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }, [isUserChange]);\r\n\r\n  // Check new requests/replies for logged in user every minute\r\n  useEffect(() => {\r\n    if (loggedInUser) {\r\n      dispatch(fetchAllMessages(isUserChange));\r\n      const currentAmountOfRequests = messages.filter(\r\n        (message: Message) => {\r\n          const { seller, messageState } = message;\r\n          return (\r\n            (seller as User)._id === loggedInUser._id && messageState === true\r\n          );\r\n        }\r\n      ).length;\r\n      if (amountOfRequests < currentAmountOfRequests) {\r\n        dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n        dispatch(setIsNewRequest(true));\r\n      }\r\n      const currentAmountOfReplies = messages.filter(\r\n        (message: Message) => {\r\n          const { buyer, reply } = message;\r\n          return (buyer as User)._id === loggedInUser._id && reply;\r\n        }\r\n      ).length;\r\n      if (amountOfReplies < currentAmountOfReplies) {\r\n        dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n        dispatch(setIsNewReply(true));\r\n      }\r\n    }\r\n  }, [minutesCounter]);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar className=\"pl-5\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" onClick={scroll.scrollToTop}>\r\n            JungleSwap\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\r\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\r\n        </Navbar.Toggle>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <>\r\n              <Link\r\n                to=\"/\"\r\n                className=\"p-2\"\r\n                onClick={() => dispatch(scrollToPlants())}\r\n              >\r\n                All Plants\r\n              </Link>\r\n            </>\r\n            {loggedInUser && (\r\n              <>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/requests/fetch\"\r\n                  title={isNewRequest ? \"new request\" : \"\"}\r\n                >\r\n                  {isNewRequest && <FontAwesomeIcon icon={faBell} />}\r\n                  Requests\r\n                </Link>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/replies/fetch\"\r\n                  title={isNewReply ? \"new reply\" : \"\"}\r\n                >\r\n                  {isNewReply && <FontAwesomeIcon icon={faBell} />}\r\n                  Replies\r\n                </Link>\r\n              </>\r\n            )}\r\n            {loggedInUser ? (\r\n              <>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/logout\"\r\n                  title={loggedInUser.username}\r\n                >\r\n                  Log out\r\n                </Link>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Link className=\"p-2\" to=\"/signin\">\r\n                  Sign in\r\n                </Link>\r\n                <Link className=\"p-2\" to=\"/signup\">\r\n                  Sign up\r\n                </Link>\r\n              </>\r\n            )}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst Footer = (): JSX.Element => {\r\n  return (\r\n    <div className=\"footer-row\">\r\n      <footer>\r\n        © 2021\r\n        <Link to={\"https://www.linkedin.com/in/christian-gerbig/\"}>\r\n          Christian Gerbig\r\n        </Link>\r\n        &amp;\r\n        <Link to={\"https://www.linkedin.com/in/lisa-montebaur/\"}>\r\n          Lisa Montebaur\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import { useEffect, useState, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  fetchAllPlants,\r\n  fetchQueryPlants,\r\n  readUser,\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  scrollToAbout,\r\n  Plant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport image from \"../images/JungleSwap_Home.png\";\r\nimport icon from \"../images/JungleSwap_Icon.png\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst Home = (): JSX.Element => {\r\n  const isFetchingUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingUser\r\n  );\r\n  const loggedInUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plants = useSelector((state: RootState) => state.jungleSwap.plants);\r\n  const [query, setQuery] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const elementRef = useRef([]);\r\n\r\n  // Load plants and user data as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(fetchAllPlants());\r\n    !loggedInUser && dispatch(readUser());\r\n    const headerElementHeight = Math.round(\r\n      (elementRef.current[0] as any).getBoundingClientRect().height\r\n    );\r\n    dispatch(setHeaderContainerHeight(headerElementHeight));\r\n    const aboutElementHeight = Math.round(\r\n      (elementRef.current[1] as any).getBoundingClientRect().height\r\n    );\r\n    dispatch(setAboutContainerHeight(aboutElementHeight));\r\n  }, []);\r\n\r\n  // Handle plant search result if user types in query\r\n  useEffect(() => {\r\n    query ? dispatch(fetchQueryPlants(query)) : dispatch(fetchAllPlants());\r\n  }, [query]);\r\n\r\n  return (\r\n    <div>\r\n      {!plants && (\r\n        <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span className=\"visually-hidden\">\r\n            <br /> <br /> Loading plants...\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      {isFetchingUser && (\r\n        <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span className=\"visually-hidden\">\r\n            <br /> <br /> Loading user data...\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      <header\r\n        className=\"text-center pt-5 pb-5 headerImg\"\r\n        ref={(element) => ((elementRef.current[0] as any) = element)}\r\n      >\r\n        <div className=\"row my-5\">\r\n          <div className=\"col-6 offset-3 my-5 borderAround\">\r\n            <h2 className=\"title mb-2\"> JungleSwap </h2>\r\n            <h5 className=\"mt-3 mb-5\"> Share your green heart </h5>\r\n            <div className=\"mb-5\">\r\n              <Link\r\n                className=\"biggerFontSize\"\r\n                onClick={() => dispatch(scrollToAbout())}\r\n                to={\"\"}\r\n              >\r\n                Try it!\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <section ref={(element) => ((elementRef.current[1] as any) = element)}>\r\n        <div className=\"about centered container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n              <img className=\"image\" src={image} alt=\"plants\" />\r\n            </div>\r\n            <br />\r\n            <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 noOverflow\">\r\n              <h4> Welcome to JungleSwap! </h4>\r\n              <h5> Add green to your Home </h5>\r\n              <p>\r\n                It\"s easy-peasy. <br />\r\n                Share your plant offshoots. <br />\r\n                Make money! <br />\r\n                Or swap them for another plant. <br />\r\n                Don\"t have any baby plants? <br />\r\n                You can simply shop and give a plant a new home.\r\n              </p>\r\n              <img className=\"icon\" src={icon} alt=\"icon\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section>\r\n        <div className=\"container mt-5\">\r\n          <div className=\"mt-5 mb-3\">\r\n            <h2> Plants </h2>\r\n            <hr />\r\n            <h4> Search a plant </h4>\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <input\r\n              className=\"smallWidth form-control\"\r\n              type=\"text\"\r\n              placeholder=\"Search...\"\r\n              value={query}\r\n              onChange={(event) => setQuery(event.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n            {plants &&\r\n              plants.map((plant: Plant): JSX.Element => {\r\n                const { _id, name, imageUrl, price } = plant;\r\n                return (\r\n                  <div className=\"col mb-5\" key={_id}>\r\n                    <div className=\"card card-medium-width text-center h-100\">\r\n                      <img\r\n                        className=\"card-img-top mediumPicSize\"\r\n                        src={imageUrl}\r\n                        alt={name}\r\n                      />\r\n                      <div className=\"card-body mb-5\">\r\n                        <h5> {name} </h5>\r\n                        <p> {price} € </p>\r\n                        <Link\r\n                          className=\"btn form-control smallWidth\"\r\n                          to={`/plants/read/${_id}`}\r\n                        >\r\n                          Details\r\n                        </Link>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { setError, setIsNewRequest, signUp } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignUp = (): JSX.Element => {\r\n  const error = useSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign up\r\n  const handleSignUp = (event: any, history: any): void => {\r\n    event.preventDefault();\r\n    const { username, email, password } = event.target;\r\n    const newUser = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    dispatch(signUp({ newUser, history }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign Up </h2>\r\n        <form onSubmit={(event) => handleSignUp(event, history)}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\"> Username </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n            formNoValidate\r\n          >\r\n            Sign up\r\n          </button>\r\n          <p className=\"padding\"> Already have an account? </p>\r\n          <div className=\"text-right\">\r\n            <Link to={\"/signin\"}>\r\n              <button className=\"btn btn-sm ml-4 smallWidth form-control mt-0 mb-2\">\r\n                Sign In\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  setError,\r\n  setIsNewRequest,\r\n  signIn,\r\n  User,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignIn = (): JSX.Element => {\r\n  const error = useSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign in\r\n  const handleSignIn = (event: any, history: any): void => {\r\n    event.preventDefault();\r\n    const { email, password } = event.target;\r\n    const user: User = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    dispatch(signIn({ user, history }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign In </h2>\r\n        <form onSubmit={(event) => handleSignIn(event, history)}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n            formNoValidate\r\n          >\r\n            Sign in\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { logOut } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst LogOut = (): JSX.Element => {\r\n  const intervalId: any = useSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Log out, stop interval, reset variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(logOut({ intervalId, history }));\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { createPlant, Plant, setError } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst CreatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const error = useSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads and scroll to plants section during cleanup\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Create plant\r\n  const handleCreatePlant = (event: any, history: any) => {\r\n    event.preventDefault();\r\n    const { name, description, size, plantImage, location, price } =\r\n      event.target;\r\n    const image = plantImage.files[0];\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    const plant: Plant = {\r\n      name: name.value,\r\n      description: description.value,\r\n      size: size.value,\r\n      location: location.value,\r\n      price: price.value,\r\n    };\r\n    dispatch(createPlant({ uploadForm, plant, history }));\r\n  };\r\n\r\n  if (!loggedInUser) return <Redirect to={\"/signup\"} />;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mb-5 text-left\"> Create a plant </h2>\r\n        <form onSubmit={(event) => handleCreatePlant(event, history)}>\r\n          <label htmlFor=\"enterName\"> Name </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterName\"\r\n          />\r\n          <label htmlFor=\"enterDescription\"> Description </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"description\"\r\n            type=\"text\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterDescription\"\r\n          />\r\n          <label htmlFor=\"enterSize\"> Size (cm) </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"size\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterSize\"\r\n          />\r\n          <label htmlFor=\"enterLocation\"> Location </label>\r\n          <select\r\n            className=\"mb-4 form-control p-2\"\r\n            name=\"location\"\r\n            id=\"enterLocation\"\r\n          >\r\n            <option> Select location </option>\r\n            <option value=\"sun\"> sun </option>\r\n            <option value=\"shade\"> shade </option>\r\n            <option value=\"sun and shade\"> sun and shade </option>\r\n          </select>\r\n          <label htmlFor=\"enterPrice\"> Price (EUR) </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"price\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterPrice\"\r\n          />\r\n          <label htmlFor=\"enterImage\"> Image </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"plantImage\"\r\n            type=\"file\"\r\n            id=\"enterImage\"\r\n          />\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <div className=\"col-12 text-right pr-0\">\r\n            <button\r\n              className=\"btn btn-sm form-control smallWidth ml-4 mb-2\"\r\n              type=\"submit\"\r\n            >\r\n              Create\r\n            </button>\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm form-control smallWidth ml-4 mb-2\">\r\n                {\" \"}\r\n                Go back{\" \"}\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePlantForm;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  readPlant,\r\n  deletePlant,\r\n  deleteMessage,\r\n  scrollToPlants,\r\n  User,\r\n  Message,\r\n  Plant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst PlantDetails = (): JSX.Element => {\r\n  const loggedInUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const messages = useSelector((state: RootState) => state.jungleSwap.messages);\r\n  const plant = useSelector((state: RootState) => state.jungleSwap.plant);\r\n  const { plantId }: any = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read plant data and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readPlant(plantId));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Delete plant\r\n  const handleDeletePlant = (\r\n    imagePublicId: string | undefined,\r\n    plantId: string | undefined,\r\n    history: any,\r\n    messages: Message[]\r\n  ) => {\r\n    messages.forEach((message: Message) => {\r\n      const { plant }: any = message;\r\n      if (plant._id === plantId) {\r\n        dispatch(deleteMessage({ messageId: message._id, history: null }));\r\n      }\r\n    });\r\n    dispatch(deletePlant({ imagePublicId, plantId, history }));\r\n  };\r\n\r\n  if (!loggedInUser) return <Redirect to={\"/signup\"} />;\r\n\r\n  const {\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n    creator,\r\n  } = plant as Plant;\r\n  if (!creator)\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading plant details...\r\n        </span>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2> Plant details </h2>\r\n      </div>\r\n      <div className=\"col\">\r\n        <div className=\"card cardMediumWidth\">\r\n          {imageUrl && (\r\n            <img\r\n              className=\"card-img-top mediumPicSize\"\r\n              src={imageUrl}\r\n              alt={name}\r\n            />\r\n          )}\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Name: </span> {name}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Description: </span> {description}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Size: </span> {size} cm\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Likes: </span> {location}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Price: </span> {price} €\r\n          </div>\r\n          <div className=\"ml-2 mt-2 col justify-content-center\">\r\n            <div className=\"row-2 justify-content-center\">\r\n              <div className=\"card-body text-right pt-0\">\r\n                {loggedInUser._id === (creator as User)._id ? (\r\n                  <div className=\"p-0\">\r\n                    <Link to={\"/plants/update\"}>\r\n                      <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                        Update\r\n                      </button>\r\n                    </Link>\r\n                    <button\r\n                      className=\"btn btn-sm ml-2 form-control smallWidth mb-2\"\r\n                      onClick={() =>\r\n                        handleDeletePlant(imagePublicId, _id, history, messages)\r\n                      }\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <Link to=\"/plants/checkout\">\r\n                      <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                        Buy\r\n                      </button>\r\n                    </Link>\r\n                    <Link to=\"/messages/create\">\r\n                      <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                        Swap\r\n                      </button>\r\n                    </Link>\r\n                  </div>\r\n                )}\r\n                <Link to={\"/\"} onClick={() => dispatch(scrollToPlants())}>\r\n                  <button className=\"btn btn-sm ml-2 form-control smallWidth mb-3\">\r\n                    {\" \"}\r\n                    Go back{\" \"}\r\n                  </button>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  imageChange,\r\n  updatePlant,\r\n  setPlant,\r\n  Plant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst UpdatePlantForm = (): JSX.Element => {\r\n  const plant = useSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => scroll.scrollToTop(), []);\r\n\r\n  // Check which plant values changed\r\n  const handlePlantEntryChange = (\r\n    { target }: any,\r\n    plant: Plant,\r\n    itemNumber: number\r\n  ): void => {\r\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\r\n    // eslint-disable-next-line default-case\r\n    switch (itemNumber) {\r\n      case 0:\r\n        clonedPlant.name = target.value;\r\n        break;\r\n      case 1:\r\n        clonedPlant.description = target.value;\r\n        break;\r\n      case 2:\r\n        clonedPlant.size = target.value;\r\n        break;\r\n      case 3:\r\n        clonedPlant.location = target.value;\r\n        break;\r\n      case 4:\r\n        clonedPlant.price = target.value;\r\n    }\r\n    dispatch(setPlant(clonedPlant));\r\n  };\r\n\r\n  // Plant image changed\r\n  const handleImageChange = ({ target }: any, plant: Plant): void => {\r\n    const image = target.files[0];\r\n    const { imagePublicId } = plant as Plant;\r\n    const destroyImageData = {\r\n      imagePublicId,\r\n    };\r\n    dispatch(imageChange({ destroyImageData, image, plant }));\r\n  };\r\n\r\n  const handleUpdatePlant = (\r\n    {\r\n      _id,\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    }: Plant,\r\n    history: any\r\n  ): void => {\r\n    const updatedPlant: Plant = {\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    };\r\n    dispatch(updatePlant({ plantId: _id, updatedPlant, history }));\r\n  };\r\n\r\n  const { _id, name, description, size, imageUrl, price } = plant as Plant;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mt-5 mb-4 text-left\"> Update your plant </h2>\r\n        <div className=\"card cardMediumWidth mb-5\">\r\n          <img className=\"mb-2 smallPicSize\" src={imageUrl} alt={name} />\r\n          <div className=\"card-body\">\r\n            <label htmlFor=\"updateName\"> Name </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"text\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 0)}\r\n              value={name}\r\n              id=\"updateName\"\r\n            />\r\n            <label htmlFor=\"updateDescription\"> Description </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"text\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 1)}\r\n              value={description}\r\n              id=\"updateDescription\"\r\n            />\r\n            <label htmlFor=\"updateSize\"> Size (cm) </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"number\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 2)}\r\n              value={size}\r\n              id=\"updateSize\"\r\n            />\r\n            <label htmlFor=\"updateLocation\"> Location </label>\r\n            <select\r\n              className=\"mb-4 form-control px-2\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 3)}\r\n              name=\"location\"\r\n              placeholder=\"Select\"\r\n              id=\"updateLocation\"\r\n            >\r\n              <option value=\"sun\"> sun </option>\r\n              <option value=\"shade\"> shade </option>\r\n              <option value=\"sun and shade\"> sun and shade </option>\r\n            </select>\r\n            <label htmlFor=\"updatePrice\"> Price (EUR) </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              name=\"price\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 4)}\r\n              value={price}\r\n              id=\"updatePrice\"\r\n            />\r\n            <label htmlFor=\"updateImage\"> Image </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event) => handleImageChange(event, plant)}\r\n              type=\"file\"\r\n              id=\"updateImage\"\r\n            />\r\n            <div className=\"col-12 text-right pr-0\">\r\n              <button\r\n                className=\"btn btn-sm ml-4 form-control smallWidth mb-2\"\r\n                onClick={() => handleUpdatePlant(plant, history)}\r\n              >\r\n                Save\r\n              </button>\r\n              <Link to={`/plants/read/${_id}`}>\r\n                <button className=\"btn btn-sm ml-4 smallWidth form-control mb-2\">\r\n                  Go back\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdatePlantForm;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport {\r\n  payPlant,\r\n  createPayment,\r\n  scrollToPlants,\r\n  Plant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\ninterface CardStyle {\r\n  style: {\r\n    base: {\r\n      color: string;\r\n      fontFamily: string;\r\n      fontSmoothing: string;\r\n      fontSize: string;\r\n      \"::placeholder\": { color: string };\r\n    };\r\n    invalid: {\r\n      color: string;\r\n      iconColor: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst CheckoutForm = (): JSX.Element => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(\"\");\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const clientSecret = useSelector(\r\n    (state: RootState) => state.jungleSwap.clientSecret\r\n  );\r\n  const plant = useSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Create payment as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(createPayment(plant));\r\n    return () => {\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    };\r\n  }, []);\r\n\r\n  // Card styling\r\n  const cardStyle: CardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n  // Listen for changes in Card element and display any errors as customer types card details\r\n  const handleChange = async (event: any): Promise<void> => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  // Submit payment\r\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    setIsProcessing(true);\r\n    const payload = await (stripe as any).confirmCardPayment(clientSecret, {\r\n      payment_method: { card: (elements as any).getElement(CardElement) },\r\n    });\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    } else {\r\n      setPaymentError(\"\");\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n\r\n  const { _id, name, price } = plant as Plant;\r\n  return (\r\n    <div className=\"container col-9\">\r\n      <form\r\n        className=\"checkoutForm mt-5\"\r\n        id=\"payment-form\"\r\n        onSubmit={handleSubmitPayment}\r\n      >\r\n        <h2 className=\"text-left mb-2 p-2\"> {name} </h2>\r\n        <h3 className=\"text-left mb-4 p-2\"> Price: {price} € </h3>\r\n        <CardElement\r\n          className=\"p-2\"\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            onClick={() => dispatch(payPlant(history))}\r\n            className=\"btn btn-sm mt-5 mb-4\"\r\n            disabled={isProcessing || isDisabled || isSucceeded}\r\n            id=\"submit\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isProcessing ? (\r\n                <div className=\"spinner\" id=\"spinner\" />\r\n              ) : (\r\n                \"Pay now\"\r\n              )}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {\r\n          /* Show any error that happens when processing the payment */\r\n          paymentError && (\r\n            <div className=\"card-error\" role=\"alert\">\r\n              {paymentError}\r\n            </div>\r\n          )\r\n          /* Show success message upon completion */\r\n        }\r\n        <p\r\n          className={\r\n            isSucceeded\r\n              ? \"result-message text-center\"\r\n              : \"result-message hidden text-center\"\r\n          }\r\n        >\r\n          Payment succeeded.\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {isSucceeded ? (\r\n          <Link to={\"/\"} onClick={() => dispatch(scrollToPlants())}>\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        ) : (\r\n          <Link to={`/plants/read/${_id}`}>\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n","import { useEffect } from \"react\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"../components/CheckoutForm\";\r\n\r\nconst promise = loadStripe(\r\n  \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n);\r\n\r\nconst CheckoutPage = (): JSX.Element => {\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => scroll.scrollToTop(), []);\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5 App\">\r\n        <Elements stripe={promise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutPage;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  fetchAllMessages,\r\n  setIsNewRequest,\r\n  User,\r\n  Plant,\r\n  Message,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst RequestsPage = (): JSX.Element => {\r\n  const loggedInUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const messages = useSelector((state: RootState) => state.jungleSwap.messages);\r\n  const amountOfRequests = useSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  // Fetch all messages and reset values as soon as page loads and reset values during cleanup\r\n  useEffect(() => {\r\n    const handleResetAll = (): void => {\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    dispatch(fetchAllMessages(isUserChange));\r\n    handleResetAll();\r\n    return () => handleResetAll();\r\n  }, []);\r\n\r\n  if (!loggedInUser) return <Redirect to={\"/signup\"} />;\r\n\r\n  if (!messages)\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading requests...\r\n        </span>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Requests for your plants </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {messages.map(\r\n          ({ _id, buyer, seller, plant, messageState }: Message) => {\r\n            return (\r\n              (seller as User)._id === loggedInUser._id &&\r\n              messageState === true && (\r\n                <div className=\"card p-3 mt-4 \" key={_id}>\r\n                  <h4> Request for {(plant as Plant).name} </h4>\r\n                  <h5> by {(buyer as User).username} </h5>\r\n                  <div className=\"text-center\">\r\n                    <Link\r\n                      className=\"btn smallWidth form-control\"\r\n                      to={`/requests/read/${_id}`}\r\n                    >\r\n                      Details\r\n                    </Link>\r\n                  </div>\r\n                </div>\r\n              )\r\n            );\r\n          }\r\n        )}\r\n        {amountOfRequests !== 0 && (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsPage;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  fetchAllMessages,\r\n  setIsNewReply,\r\n  User,\r\n  Plant,\r\n  Message,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst RepliesPage = (): JSX.Element => {\r\n  const loggedInUser = useSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const messages = useSelector((state: RootState) => state.jungleSwap.messages);\r\n  const amountOfReplies = useSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  // Fetch all requests and reset values as soon as page loads and reset values during cleanup\r\n  useEffect(() => {\r\n    const handleResetAll = (): void => {\r\n      dispatch(setIsNewReply(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    dispatch(fetchAllMessages(isUserChange));\r\n    handleResetAll();\r\n    return () => handleResetAll();\r\n  }, []);\r\n\r\n  if (!loggedInUser) return <Redirect to={\"/signup\"} />;\r\n\r\n  if (!messages)\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading replies...\r\n        </span>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Replies for your requests </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {messages.map(({ _id, buyer, seller, plant, reply }: Message) => {\r\n          return (\r\n            (buyer as User)._id === loggedInUser._id &&\r\n            reply && (\r\n              <div className=\"card p-3 mt-4 \" key={_id}>\r\n                <h4> Reply for {(plant as Plant).name} </h4>\r\n                <h5> by {(seller as User).username} </h5>\r\n                <div className=\"text-center\">\r\n                  <Link\r\n                    className=\"btn smallWidth form-control\"\r\n                    to={`/replies/read/${_id}`}\r\n                  >\r\n                    Details\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            )\r\n          );\r\n        })}\r\n        {amountOfReplies !== 0 && (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesPage;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  createMessage,\r\n  setError,\r\n  Plant,\r\n  Message,\r\n  User,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst CreateRequestForm = () => {\r\n  const plant = useSelector((state: RootState) => state.jungleSwap.plant);\r\n  const error = useSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Set variable and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Create request\r\n  const handleCreateMessage = (event: any, plant: Plant, history: any) => {\r\n    event.preventDefault();\r\n    const { request } = event.target;\r\n    const { creator } = plant;\r\n    const newMessage: Message = {\r\n      seller: (creator as User)._id,\r\n      plant: plant._id,\r\n      request: request.value,\r\n    };\r\n    dispatch(createMessage({ newMessage, history }));\r\n  };\r\n\r\n  const { _id, name } = plant as Plant;\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\"> Your message </h2>\r\n        <h3 className=\"mb-4\"> for: {name} </h3>\r\n        <form onSubmit={(event) => handleCreateMessage(event, plant, history)}>\r\n          <div>\r\n            <textarea\r\n              className=\"mb-4 form-control\"\r\n              name=\"request\"\r\n              cols={35}\r\n              rows={7}\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <div className=\"text-right\">\r\n            <button\r\n              className=\"btn btn-sm mx-2 form-control smallWidth\"\r\n              type=\"submit\"\r\n            >\r\n              Send\r\n            </button>\r\n            <Link to={`/plants/read/${_id}`}>\r\n              <button className=\"btn btn-sm mx-2 form-control smallWidth\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRequestForm;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  readMessage,\r\n  User,\r\n  Plant,\r\n  Message,\r\n  setMessage,\r\n  updateMessage,\r\n  decreaseAmountOfRequests,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst RequestDetails = (): JSX.Element => {\r\n  const message = useSelector((state: RootState) => state.jungleSwap.message);\r\n  const { messageId }: any = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read message and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readMessage(messageId));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const { _id, buyer, plant, request, reply } = message as Message;\r\n  if (!buyer || !plant)\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading message...\r\n        </span>\r\n      </div>\r\n    );\r\n\r\n  // Set message of the buyer inactive by the seller\r\n  const handleSetMessageInactive = (message: Message, history: any) => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.messageState = false;\r\n    dispatch(setMessage(clonedMessage));\r\n    const { _id, buyer, seller, plant, request, reply, messageState } =\r\n      clonedMessage;\r\n    const updatedMessage: Message = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    };\r\n    dispatch(updateMessage({ messageId: _id, updatedMessage }));\r\n    dispatch(decreaseAmountOfRequests());\r\n    history.push(\"/requests/fetch\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Request for {(plant as Plant).name} </h2>\r\n        <h5> by {(buyer as User).username} </h5>\r\n        <p className=\"form-control\"> {request} </p>\r\n        {reply && (\r\n          <div>\r\n            <h5> Your reply </h5>\r\n            <p className=\"form-control\"> {reply} </p>\r\n          </div>\r\n        )}\r\n        <div className=\"text-right px-3\">\r\n          {!reply && (\r\n            <Link to={`/messages/update/${_id}`}>\r\n              <button className=\"btn btn-sm ml-2 smallWidth form-control mb-1\">\r\n                Reply\r\n              </button>\r\n            </Link>\r\n          )}\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => handleSetMessageInactive(message, history)}\r\n          >\r\n            Done\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/requests/fetch\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  readMessage,\r\n  deleteMessage,\r\n  User,\r\n  Plant,\r\n  Message,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst ReplyDetails = (): JSX.Element => {\r\n  const message = useSelector((state: RootState) => state.jungleSwap.message);\r\n  const { messageId }: any = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read message and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readMessage(messageId));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const { _id, buyer, seller, plant, request, reply } = message as Message;\r\n  if (!buyer || !plant)\r\n    return (\r\n      <div className=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span className=\"visually-hidden\">\r\n          <br /> <br /> Loading replies...\r\n        </span>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Your request for {(plant as Plant).name} </h2>\r\n        <p className=\"form-control\"> {request} </p>\r\n        {reply && (\r\n          <div>\r\n            <h5> Reply by {(seller as User).username} </h5>\r\n            <p className=\"form-control\"> {reply} </p>\r\n          </div>\r\n        )}\r\n        <div className=\"text-right px-3\">\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => dispatch(deleteMessage({ messageId, history }))}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/replies/fetch\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { setMessage, updateMessage, Message } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst UpdateRequestForm = (): JSX.Element => {\r\n  const message = useSelector((state: RootState) => state.jungleSwap.message);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => scroll.scrollToTop(), []);\r\n\r\n  // Create reply\r\n  const handleCreateReply = ({ target }: any, message: Message): void => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.reply = target.value;\r\n    dispatch(setMessage(clonedMessage));\r\n  };\r\n\r\n  // Update message\r\n  const handleUpdateMessage = (\r\n    { _id, buyer, seller, plant, request, reply, messageState }: Message,\r\n    history: any\r\n  ): void => {\r\n    const updatedMessage: Message = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    };\r\n    dispatch(updateMessage({ messageId: _id, updatedMessage }));\r\n    history.push(`/requests/read/${{ messageId: _id }}`);\r\n  };\r\n\r\n  const { _id, request } = message as Message;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> Reply your request </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <div className=\"card-body\">\r\n            <p> {request} </p>\r\n            <textarea\r\n              className=\"mb-4 form-control\"\r\n              name=\"reply\"\r\n              cols={31}\r\n              rows={6}\r\n              placeholder=\"Your reply\"\r\n              onChange={(event) => handleCreateReply(event, message)}\r\n            />\r\n            <div className=\"row justify-content-end px-3\">\r\n              <button\r\n                className=\"btn btn-sm smallWidth form-control mr-3 mb-2\"\r\n                onClick={() => handleUpdateMessage(message, history)}\r\n              >\r\n                Submit\r\n              </button>\r\n              <Link to={`/requests/read/${_id}`}>\r\n                <button className=\"btn btn-sm form-control mb-2\">\r\n                  Go back\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateRequestForm;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 404 Not Found </h3>\r\n        <Link to={\"/\"}>\r\n          <button className=\"btn btn-sm ml-2 smallWidth form-control\">\r\n            Take me home{\" \"}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useEffect } from \"react\";\r\n\r\nconst KommunicateChat = (): JSX.Element => {\r\n  // Create launcher icon as soon as page loads\r\n  useEffect(() => {\r\n    ((d, m) => {\r\n      const kommunicateSettings = {\r\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      const s = document.createElement(\"script\");\r\n      s.type = \"text/javascript\";\r\n      s.async = true;\r\n      s.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      const h = document.getElementsByTagName(\"head\")[0];\r\n      h.appendChild(s);\r\n      (window as any).kommunicate = m;\r\n      m._globals = kommunicateSettings;\r\n    })(document, (window as any).kommunicate || {});\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default KommunicateChat;\r\n","import { Route, Switch, withRouter } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./screens/Home\";\r\nimport SignUp from \"./screens/SignUp\";\r\nimport SignIn from \"./screens/SignIn\";\r\nimport LogOut from \"./components/LogOut\";\r\nimport CreatePlantForm from \"./screens/CreatePlantForm\";\r\nimport PlantDetails from \"./screens/PlantDetails\";\r\nimport UpdatePlantForm from \"./screens/UpdatePlantForm\";\r\nimport CheckoutPage from \"./screens/CheckoutPage\";\r\nimport RequestsPage from \"./screens/RequestsPage\";\r\nimport RepliesPage from \"./screens/RepliesPage\";\r\nimport CreateRequestForm from \"./screens/CreateRequestForm\";\r\nimport RequestDetails from \"./screens/RequestDetails\";\r\nimport ReplyDetails from \"./screens/ReplyDetails\";\r\nimport UpdateRequestForm from \"./screens/UpdateRequestForm\";\r\nimport NotFound from \"./screens/NotFound\";\r\nimport KommunicateChat from \"./components/Chat\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <div className=\"main\">\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/read/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n\r\n        <Route path=\"/messages/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/messages/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch\">\r\n          <RequestsPage />\r\n        </Route>\r\n        <Route path=\"/requests/read/:messageId\">\r\n          <RequestDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/replies/fetch\">\r\n          <RepliesPage />\r\n        </Route>\r\n        <Route path=\"/replies/read/:messageId\">\r\n          <ReplyDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/signup\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/signin\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/logout\">\r\n          <LogOut />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"./reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}