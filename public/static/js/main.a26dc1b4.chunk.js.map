{"version":3,"sources":["hooks.ts","reducer/jungleSwapSlice.ts","config.ts","components/NavBar.tsx","components/Footer.tsx","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/About.tsx","components/PlantThumbnail.tsx","components/LoadingSpinner.tsx","components/AllPlants.tsx","components/Title.tsx","screens/Home.tsx","screens/SignUp.tsx","screens/SignIn.tsx","components/LogOut.tsx","screens/CreatePlantForm.tsx","screens/PlantDetails.tsx","screens/UpdatePlantForm.tsx","components/CheckoutForm.tsx","screens/CheckoutPage.tsx","components/RequestTile.tsx","screens/RequestsPage.tsx","components/ReplyTile.tsx","screens/RepliesPage.tsx","screens/CreateRequestForm.tsx","screens/RequestDetails.tsx","screens/ReplyDetails.tsx","screens/UpdateRequestForm.tsx","screens/Unauthorized.tsx","screens/NotFound.tsx","components/Chat.tsx","App.tsx","store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","apiPath","process","rejectWithValue","data","Error","fetchAllPlants","createAsyncThunk","a","axios","get","response","error","fetchQueryPlants","query","uploadPlantImage","uploadForm","post","createPlant","newPlant","withCredentials","readPlant","plantId","updatePlant","updatedPlant","patch","deletePlantImage","destroyImageData","deletePlant","delete","createPayment","plant","price","fetchAllMessages","createMessage","newMessage","readMessage","messageId","updateMessage","updatedMessage","deleteMessage","signUp","newUser","signIn","user","logOut","checkUserLoggedIn","jungleSwapSlice","createSlice","name","initialState","loggedInUser","isUserChange","isFetchingPlant","isFetchingPlants","isUploadingImage","plants","oldImagePublicId","isFetchingMessage","isFetchingMessages","messages","message","amountOfRequests","amountOfReplies","isNewRequest","isNewReply","intervalId","delayCounter","headerContainerHeight","aboutContainerHeight","clientSecret","reducers","setUser","state","action","payload","setIsFetchingPlants","setPlants","setIsFetchingPlant","setPlant","addPlant","push","setIsUploadingImage","setOldImagePublicId","setPlantChanges","_id","description","size","imageUrl","imagePublicId","location","map","singlePlant","removePlant","filter","setClientSecret","setIsFetchingMessages","setMessages","setIsFetchingMessage","setMessage","addMessage","setMessageChanges","buyer","seller","request","reply","messageState","singleMessage","removeMessage","setStartAmountOfRequests","setStartAmountOfReplies","setAmountOfRequests","setAmountOfReplies","setIsNewRequest","setIsNewReply","setIntervalId","setDelayCounter","increaseDelayCounter","decreaseAmountOfRequests","decreaseAmountOfReplies","setLoggedInUser","setIsUserChange","setError","setHeaderContainerHeight","setAboutContainerHeight","scrollToAbout","scroll","scrollTo","scrollToPlants","extraReducers","builder","addCase","fulfilled","rejected","actions","NavBar","jungleSwap","dispatch","useEffect","clearInterval","unwrap","then","setInterval","catch","rejectedValue","console","log","currentAmountOfRequests","length","currentAmountOfReplies","Navbar","className","variant","expand","fixed","Brand","to","onClick","scrollToTop","Toggle","aria-controls","icon","faBell","Collapse","id","Nav","title","username","Footer","About","src","image","alt","PlantThumbnail","LoadingSpinner","role","AllPlants","useState","setQuery","type","placeholder","value","onChange","event","target","index","Title","Home","elementRef","useRef","headerElementHeight","Math","round","current","getBoundingClientRect","height","aboutElementHeight","ref","headerElement","aboutElement","SignUp","history","useHistory","onSubmit","preventDefault","email","password","toLowerCase","handleSignUp","htmlFor","formNoValidate","SignIn","handleSignIn","LogOut","clonedUser","JSON","parse","stringify","CreatePlantForm","plantImage","files","FormData","append","scrollToBottom","handleCreatePlant","min","disabled","PlantDetails","useParams","creator","forEach","handleDeletePlant","UpdatePlantForm","handlePlantEntryChange","itemNumber","clonedPlant","handleImageChange","handleUpdatePlant","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","payment","handleChange","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","stripePromise","loadStripe","CheckoutPage","RequestThumbnail","RequestsPage","handleResetAll","RequestTile","ReplyThumbnail","RepliesPage","ReplyTile","CreateRequestForm","handleCreateMessage","cols","rows","RequestDetails","clonedMessage","handleSetMessageInactive","ReplyDetails","UpdateRequestForm","handleCreateReply","handleUpdateMessage","Unauthorized","NotFound","KommunicateChat","d","m","s","document","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","withRouter","exact","path","component","store","configureStore","reducer","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.a26dc1b4.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\nexport interface User {\r\n  _id?: string;\r\n  username?: string;\r\n  email: string;\r\n  password: string;\r\n  amountOfRequests?: number;\r\n  amountOfReplies?: number;\r\n}\r\n\r\nexport interface MessageCounters {\r\n  amountOfRequests?: number;\r\n  amountOfReplies?: number;\r\n}\r\n\r\nexport interface Plant {\r\n  _id?: string;\r\n  name?: string;\r\n  description?: string;\r\n  size?: number;\r\n  imageUrl?: string;\r\n  imagePublicId?: string;\r\n  location?: string;\r\n  price?: number;\r\n  creator?: string | User | undefined;\r\n}\r\n\r\nexport interface Message {\r\n  _id?: string;\r\n  buyer?: string | User | undefined;\r\n  seller?: string | User | undefined;\r\n  plant?: string | Plant | undefined;\r\n  request?: string;\r\n  reply?: string;\r\n  messageState?: boolean;\r\n}\r\n\r\nexport interface DestroyImageData {\r\n  imagePublicId?: ImagePublicId;\r\n}\r\n\r\nexport type LoggedInUser = User | null;\r\nexport type IntervalId = NodeJS.Timer | null;\r\nexport type Error = string | null;\r\nexport type PlantId = string | undefined;\r\nexport type ImagePublicId = string | undefined;\r\nexport type MessageId = string | undefined;\r\n\r\ninterface SliceState {\r\n  loggedInUser: LoggedInUser;\r\n  isUserChange: boolean;\r\n  isFetchingPlant: boolean;\r\n  isFetchingPlants: boolean;\r\n  isUploadingImage: boolean;\r\n  plants: Plant[];\r\n  plant: Plant | {};\r\n  oldImagePublicId: ImagePublicId;\r\n  isFetchingMessage: boolean;\r\n  isFetchingMessages: boolean;\r\n  messages: Message[];\r\n  message: Message | {};\r\n  amountOfRequests: number;\r\n  amountOfReplies: number;\r\n  isNewRequest: boolean;\r\n  isNewReply: boolean;\r\n  intervalId: IntervalId;\r\n  delayCounter: number;\r\n  headerContainerHeight: number;\r\n  aboutContainerHeight: number;\r\n  clientSecret: string;\r\n  error: Error;\r\n}\r\n\r\nconst initialState: SliceState = {\r\n  loggedInUser: null,\r\n  isUserChange: false,\r\n  isFetchingPlant: false,\r\n  isFetchingPlants: false,\r\n  isUploadingImage: false,\r\n  plants: [],\r\n  plant: {},\r\n  oldImagePublicId:\"\",\r\n  isFetchingMessage: false,\r\n  isFetchingMessages: false,\r\n  messages: [],\r\n  message: {},\r\n  amountOfRequests: 0,\r\n  amountOfReplies: 0,\r\n  isNewRequest: false,\r\n  isNewReply: false,\r\n  intervalId: null,\r\n  delayCounter: 0,\r\n  headerContainerHeight: 0,\r\n  aboutContainerHeight: 0,\r\n  clientSecret: \"\",\r\n  error: null,\r\n};\r\n\r\nconst rejectWithValue = (data: any): void | PromiseLike<void> => {\r\n  throw new Error(data);\r\n};\r\n\r\n// --------- Plants ---------\r\n// Fetch all plants\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async () => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch query plants\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query: string) => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Upload plant image\r\nexport const uploadPlantImage = createAsyncThunk(\r\n  \"jungleSwap/uploadPlantImage\",\r\n  async (uploadForm: FormData) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/cloudinary/upload`,\r\n        uploadForm\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async (newPlant: Plant) => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/plants/create`, newPlant, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Read plant\r\nexport const readPlant = createAsyncThunk(\r\n  \"jungleSwap/readPlant\",\r\n  async (plantId: PlantId) => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/read/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Update plant\r\ninterface UpdatePlantParameters {\r\n  plantId: PlantId;\r\n  updatedPlant: Plant;\r\n}\r\n\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async ({ plantId, updatedPlant }: UpdatePlantParameters) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete plant image\r\nexport const deletePlantImage = createAsyncThunk(\r\n  \"jungleSwap/deletePlantImage\",\r\n  async (destroyImageData: DestroyImageData) => {\r\n    try {\r\n      await axios.post(`${apiPath}/cloudinary/destroy`, destroyImageData);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete Plant\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (plantId: PlantId) => {\r\n    try {\r\n      await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant payment\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant: Plant) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/stripe/create-payment-intent`,\r\n        {\r\n          price: plant.price,\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// --------- Messages ----------\r\n// Fetch all messages\r\nexport const fetchAllMessages = createAsyncThunk(\r\n  \"jungleSwap/fetchAllMessages\",\r\n  async () => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/messages/fetch`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Create messages\r\nexport const createMessage = createAsyncThunk(\r\n  \"jungleSwap/createMessage\",\r\n  async (newMessage: Message) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/messages/create`,\r\n        newMessage,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Read message\r\nexport const readMessage = createAsyncThunk(\r\n  \"jungleSwap/readMessage\",\r\n  async (messageId: MessageId) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${apiPath}/messages/read/${messageId}`,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Update message\r\ninterface UpdateMessageParameters {\r\n  messageId: MessageId;\r\n  updatedMessage: Message;\r\n}\r\n\r\nexport const updateMessage = createAsyncThunk(\r\n  \"jungleSwap/updateMessage\",\r\n  async ({ messageId, updatedMessage }: UpdateMessageParameters) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/messages/update/${messageId}`,\r\n        updatedMessage\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete message\r\nexport const deleteMessage = createAsyncThunk(\r\n  \"jungleSwap/deleteMessage\",\r\n  async (messageId: MessageId) => {\r\n    try {\r\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ---------- User authentification ----------\r\n// Sign up\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (newUser: User) => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/signup`, newUser);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Sign in\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async (user: User) => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/signin`, user, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Log out\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (user: User) => {\r\n    try {\r\n      await axios.post(`${apiPath}/auth/logout`, user, {\r\n        withCredentials: true,\r\n      });\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Check if user is logged in\r\nexport const checkUserLoggedIn = createAsyncThunk(\r\n  \"jungleSwap/checkUserLoggedIn\",\r\n  async () => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/auth/checkuser`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ---------- Reducers ----------\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n  reducers: {\r\n    // --------- User -----------\r\n    setUser: (state, action: PayloadAction<User>) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n\r\n    // --------- Plants ----------\r\n    setIsFetchingPlants: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingPlants = action.payload;\r\n    },\r\n    setPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.plants = action.payload;\r\n    },\r\n    setIsFetchingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingPlant = action.payload;\r\n    },\r\n    setPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plant = action.payload;\r\n    },\r\n    addPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plants.push(action.payload);\r\n    },\r\n    setIsUploadingImage: (state, action: PayloadAction<boolean>) => {\r\n      state.isUploadingImage = action.payload;\r\n    },\r\n    setOldImagePublicId: (state, action: PayloadAction<string>) => {\r\n      state.oldImagePublicId = action.payload;\r\n    },\r\n    setPlantChanges: (state, action: PayloadAction<Plant>) => {\r\n      const {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      } = action.payload;\r\n      state.plants = state.plants.map((singlePlant: Plant) => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, action: PayloadAction<string | undefined>) => {\r\n      state.plants = state.plants.filter(\r\n        (plant: Plant) => plant._id !== action.payload\r\n      );\r\n    },\r\n    setClientSecret: (state, action: PayloadAction<string>) => {\r\n      state.clientSecret = action.payload;\r\n    },\r\n\r\n    // ---------- Messages ----------\r\n    setIsFetchingMessages: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingMessages = action.payload;\r\n    },\r\n    setMessages: (state, action: PayloadAction<Message[]>) => {\r\n      state.messages = action.payload;\r\n    },\r\n    setIsFetchingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingMessage = action.payload;\r\n    },\r\n    setMessage: (state, action: PayloadAction<Message>) => {\r\n      state.message = action.payload;\r\n    },\r\n    addMessage: (state, action: PayloadAction<Message>) => {\r\n      state.messages.push(action.payload);\r\n    },\r\n    setMessageChanges: (state, action: PayloadAction<Message>) => {\r\n      const { _id, buyer, seller, plant, request, reply, messageState } =\r\n        action.payload;\r\n      state.messages = state.messages.map((singleMessage) => {\r\n        if (singleMessage._id === _id) {\r\n          singleMessage.buyer = buyer;\r\n          singleMessage.seller = seller;\r\n          singleMessage.plant = plant;\r\n          singleMessage.request = request;\r\n          singleMessage.reply = reply;\r\n          singleMessage.messageState = messageState;\r\n        }\r\n        return singleMessage;\r\n      });\r\n    },\r\n    removeMessage: (state, action: PayloadAction<string | undefined>) => {\r\n      state.messages = state.messages.filter((message: Message) => {\r\n        return message._id !== action.payload;\r\n      });\r\n    },\r\n    setStartAmountOfRequests: (state) => {\r\n      state.loggedInUser &&\r\n        (state.amountOfRequests = (state.loggedInUser as any).amountOfRequests);\r\n    },\r\n    setStartAmountOfReplies: (state) => {\r\n      state.loggedInUser &&\r\n        (state.amountOfReplies = (state.loggedInUser as any).amountOfReplies);\r\n    },\r\n    setAmountOfRequests: (state, action: PayloadAction<number>) => {\r\n      state.amountOfRequests = action.payload;\r\n    },\r\n    setAmountOfReplies: (state, action: PayloadAction<number>) => {\r\n      state.amountOfReplies = action.payload;\r\n    },\r\n    setIsNewRequest: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewRequest = action.payload;\r\n    },\r\n    setIsNewReply: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewReply = action.payload;\r\n    },\r\n    setIntervalId: (state, action: PayloadAction<IntervalId>) => {\r\n      state.intervalId = action.payload;\r\n    },\r\n    setDelayCounter: (state, action: PayloadAction<number>) => {\r\n      state.delayCounter = action.payload;\r\n    },\r\n    increaseDelayCounter: (state) => {\r\n      state.delayCounter += 1;\r\n    },\r\n    decreaseAmountOfRequests: (state) => {\r\n      state.amountOfRequests && (state.amountOfRequests -= 1);\r\n    },\r\n    decreaseAmountOfReplies: (state) => {\r\n      state.amountOfReplies && (state.amountOfReplies -= 1);\r\n    },\r\n\r\n    // ---------- User ----------\r\n    setLoggedInUser: (state, action: PayloadAction<LoggedInUser>) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n    setIsUserChange: (state, action: PayloadAction<boolean>) => {\r\n      state.isUserChange = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<Error>) => {\r\n      state.error = action.payload;\r\n    },\r\n\r\n    // ---------- Pages handling ----------\r\n    setHeaderContainerHeight: (state, action: PayloadAction<number>) => {\r\n      state.headerContainerHeight = action.payload;\r\n    },\r\n    setAboutContainerHeight: (state, action: PayloadAction<number>) => {\r\n      state.aboutContainerHeight = action.payload;\r\n    },\r\n    scrollToAbout: (state) => {\r\n      scroll.scrollTo(state.headerContainerHeight);\r\n    },\r\n    scrollToPlants: (state) => {\r\n      scroll.scrollTo(state.headerContainerHeight + state.aboutContainerHeight);\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    // --------- Plants ----------\r\n    builder.addCase(fetchAllPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(readPlant.fulfilled, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(readPlant.rejected, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(uploadPlantImage.fulfilled, (state) => {\r\n      state.isUploadingImage = false;\r\n    });\r\n    builder.addCase(uploadPlantImage.rejected, (state) => {\r\n      state.isUploadingImage = false;\r\n    });\r\n\r\n    // ---------- Messages ----------\r\n    builder.addCase(fetchAllMessages.fulfilled, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.rejected, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(readMessage.fulfilled, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(readMessage.rejected, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n  },\r\n});\r\n\r\nexport const {\r\n  // ----------- User -----------\r\n  setUser,\r\n\r\n  // ----------- Plants ----------\r\n  setIsFetchingPlants,\r\n  setPlants,\r\n  setIsFetchingPlant,\r\n  setPlant,\r\n  addPlant,\r\n  setIsUploadingImage,\r\n  setOldImagePublicId,\r\n  setPlantChanges,\r\n  removePlant,\r\n  setClientSecret,\r\n\r\n  // ---------- Requests ----------\r\n  setIsFetchingMessages,\r\n  setMessages,\r\n  setIsFetchingMessage,\r\n  setMessage,\r\n  addMessage,\r\n  setMessageChanges,\r\n  removeMessage,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setIntervalId,\r\n  setDelayCounter,\r\n  increaseDelayCounter,\r\n  decreaseAmountOfRequests,\r\n  decreaseAmountOfReplies,\r\n\r\n  // ---------- User authentification ----------\r\n  setLoggedInUser,\r\n  setIsUserChange,\r\n  setError,\r\n\r\n  // ---------- Pages handling ----------\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  fetchAllMessages,\r\n  setIsUserChange,\r\n  setIntervalId,\r\n  increaseDelayCounter,\r\n  setDelayCounter,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  scrollToPlants,\r\n  User,\r\n  Message,\r\n  setMessages,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setIsFetchingMessages,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NavBar = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const delayCounter = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.delayCounter\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Stop interval at cleanup\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n        dispatch(setIntervalId(null));\r\n        dispatch(setDelayCounter(0));\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Start request/reply check if user changes\r\n  useEffect(() => {\r\n    if (isUserChange) {\r\n      dispatch(setIsFetchingMessages(true));\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages) => {\r\n          dispatch(setMessages(messages));\r\n          isUserChange && dispatch(setStartAmountOfRequests());\r\n          isUserChange && dispatch(setStartAmountOfReplies());\r\n          dispatch(setIsUserChange(false));\r\n          dispatch(\r\n            setIntervalId(\r\n              setInterval(\r\n                () => {\r\n                  dispatch(increaseDelayCounter());\r\n                },\r\n                1000 // every second\r\n              )\r\n            )\r\n          );\r\n          dispatch(increaseDelayCounter());\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    }\r\n  }, [isUserChange]);\r\n\r\n  // Check new requests/replies for logged in user every second\r\n  useEffect(() => {\r\n    if (loggedInUser) {\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages) => {\r\n          dispatch(setMessages(messages));\r\n          isUserChange && dispatch(setStartAmountOfRequests());\r\n          isUserChange && dispatch(setStartAmountOfReplies());\r\n          const currentAmountOfRequests = messages.filter(\r\n            (message: Message) => {\r\n              const { seller, messageState } = message;\r\n              return (\r\n                (seller as User)._id === loggedInUser._id &&\r\n                messageState === true\r\n              );\r\n            }\r\n          ).length;\r\n          if (amountOfRequests < currentAmountOfRequests) {\r\n            dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n            dispatch(setIsNewRequest(true));\r\n          } else if (amountOfRequests > currentAmountOfRequests) {\r\n            dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n          }\r\n          const currentAmountOfReplies = messages.filter((message: Message) => {\r\n            const { buyer, reply } = message;\r\n            return (buyer as User)._id === loggedInUser._id && reply;\r\n          }).length;\r\n          if (amountOfReplies < currentAmountOfReplies) {\r\n            dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n            dispatch(setIsNewReply(true));\r\n          }\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    }\r\n  }, [delayCounter]);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar className=\"pl-5\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" onClick={scroll.scrollToTop}>\r\n            JungleSwap\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\r\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\r\n        </Navbar.Toggle>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <>\r\n              <Link\r\n                to=\"/\"\r\n                className=\"p-2\"\r\n                onClick={() => {\r\n                  dispatch(scrollToPlants());\r\n                }}\r\n              >\r\n                All Plants\r\n              </Link>\r\n            </>\r\n            {loggedInUser && (\r\n              <>\r\n                <Link className=\"p-2\" to=\"/plants/create\">\r\n                  Create Plant\r\n                </Link>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/requests/fetch\"\r\n                  title={isNewRequest ? \"new request\" : \"\"}\r\n                >\r\n                  {isNewRequest && <FontAwesomeIcon icon={faBell} />}\r\n                  Requests\r\n                </Link>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/replies/fetch\"\r\n                  title={isNewReply ? \"new reply\" : \"\"}\r\n                >\r\n                  {isNewReply && <FontAwesomeIcon icon={faBell} />}\r\n                  Replies\r\n                </Link>\r\n              </>\r\n            )}\r\n            {loggedInUser ? (\r\n              <>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/auth/logout\"\r\n                  title={loggedInUser.username}\r\n                >\r\n                  Log out\r\n                </Link>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Link className=\"p-2\" to=\"/auth/signin\">\r\n                  Sign in\r\n                </Link>\r\n                <Link className=\"p-2\" to=\"/auth/signup\">\r\n                  Sign up\r\n                </Link>\r\n              </>\r\n            )}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst Footer = (): JSX.Element => {\r\n  return (\r\n    <div className=\"footer-row\">\r\n      <footer>\r\n        © 2021\r\n        <Link to={\"https://www.linkedin.com/in/christian-gerbig/\"}>\r\n          Christian Gerbig\r\n        </Link>\r\n        &amp;\r\n        <Link to={\"https://www.linkedin.com/in/lisa-montebaur/\"}>\r\n          Lisa Montebaur\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import image from \"../images/JungleSwap_Home.png\";\r\nimport icon from \"../images/JungleSwap_Icon.png\";\r\n\r\nconst About = (): JSX.Element => {\r\n  return (\r\n    <div className=\"about centered container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n          <img className=\"image\" src={image} alt=\"plants\" />\r\n        </div>\r\n        <br />\r\n        <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 noOverflow\">\r\n          <h4> Welcome to JungleSwap! </h4>\r\n          <h5> Add green to your Home </h5>\r\n          <p>\r\n            It\"s easy-peasy. <br />\r\n            Share your plant offshoots. <br />\r\n            Make money! <br />\r\n            Or swap them for another plant. <br />\r\n            Don\"t have any baby plants? <br />\r\n            You can simply shop and give a plant a new home.\r\n          </p>\r\n          <img className=\"icon\" src={icon} alt=\"icon\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import { Link } from \"react-router-dom\";\r\nimport { Plant } from \"../reducer/jungleSwapSlice\";\r\n\r\ntype PlantThumbnailProps = {\r\n  plant: Plant;\r\n};\r\n\r\nconst PlantThumbnail = ({ plant }: PlantThumbnailProps): JSX.Element => {\r\n  const { _id, name, imageUrl, price } = plant;\r\n  return (\r\n    <div className=\"col mb-5\" key={_id}>\r\n      <div className=\"card card-medium-width text-center h-100\">\r\n        <img className=\"card-img-top mediumPicSize\" src={imageUrl} alt={name} />\r\n        <div className=\"card-body mb-5\">\r\n          <h5> {name} </h5>\r\n          <p> {price} € </p>\r\n          <Link\r\n            className=\"btn form-control smallWidth\"\r\n            to={`/plants/read/${_id}`}\r\n          >\r\n            Details\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantThumbnail;\r\n","const LoadingSpinner = (): JSX.Element => {\r\n  return (\r\n    <div className=\"d-flex align-items-center justify-content-center\">\r\n      <div\r\n        className=\"spinner-border m-3\"\r\n        role=\"status\"\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  fetchAllPlants,\r\n  fetchQueryPlants,\r\n  Plant,\r\n  setIsFetchingPlants,\r\n  setPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport PlantThumbnail from \"../components/PlantThumbnail\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\n\r\nconst AllPlants = (): JSX.Element => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const isFetchingPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlants\r\n  );\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Handle plant search result if user types in a query\r\n  useEffect(() => {\r\n    if (query) {\r\n      dispatch(setIsFetchingPlants(true));\r\n      dispatch(fetchQueryPlants(query))\r\n        .unwrap()\r\n        .then((plants: Plant[]) => {\r\n          dispatch(setPlants(plants));\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    } else {\r\n      dispatch(setIsFetchingPlants(true));\r\n      dispatch(fetchAllPlants())\r\n        .unwrap()\r\n        .then((plants: Plant[]) => {\r\n          dispatch(setPlants(plants));\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    }\r\n  }, [query]);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-3\">\r\n        <h2> Plants </h2>\r\n        <hr />\r\n        <h4> Search a plant </h4>\r\n      </div>\r\n      <div className=\"mb-4\">\r\n        <input\r\n          className=\"smallWidth form-control\"\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          value={query}\r\n          onChange={(event) => {\r\n            setQuery(event.target.value);\r\n          }}\r\n        />\r\n      </div>\r\n      {isFetchingPlants ? (\r\n        <LoadingSpinner />\r\n      ) : (\r\n        <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n          {plants.map((plant: Plant, index: number): JSX.Element => {\r\n            return <PlantThumbnail plant={plant} key={index} />;\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllPlants;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport { scrollToAbout } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst Title = (): JSX.Element => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <div className=\"row my-5\">\r\n      <div className=\"col-6 offset-3 my-5 borderAround\">\r\n        <h2 className=\"title mb-2\"> JungleSwap </h2>\r\n        <h5 className=\"mt-3 mb-5\"> Share your green heart </h5>\r\n        <div className=\"mb-5\">\r\n          <Link\r\n            to={\"/\"}\r\n            className=\"biggerFontSize\"\r\n            onClick={() => {\r\n              dispatch(scrollToAbout());\r\n            }}\r\n          >\r\n            Try it!\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  fetchAllPlants,\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  setPlants,\r\n  Plant,\r\n  setIsFetchingPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport About from \"../components/About\";\r\nimport AllPlants from \"../components/AllPlants\";\r\nimport Title from \"../components/Title\";\r\n\r\nconst Home = (): JSX.Element => {\r\n  const dispatch = useAppDispatch();\r\n  const elementRef = useRef([]);\r\n\r\n  // Load plants and user data as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setIsFetchingPlants(true));\r\n    dispatch(fetchAllPlants())\r\n      .unwrap()\r\n      .then((plants: Plant[]) => {\r\n        dispatch(setPlants(plants));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n    const headerElementHeight = Math.round(\r\n      (elementRef.current[0] as any).getBoundingClientRect().height\r\n    );\r\n    dispatch(setHeaderContainerHeight(headerElementHeight));\r\n    const aboutElementHeight = Math.round(\r\n      (elementRef.current[1] as any).getBoundingClientRect().height\r\n    );\r\n    dispatch(setAboutContainerHeight(aboutElementHeight));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <header\r\n        className=\"text-center pt-5 pb-5 headerImg\"\r\n        ref={(headerElement) => {\r\n          (elementRef.current[0] as any) = headerElement;\r\n        }}\r\n      >\r\n        <Title />\r\n      </header>\r\n\r\n      <section\r\n        ref={(aboutElement) => {\r\n          (elementRef.current[1] as any) = aboutElement;\r\n        }}\r\n      >\r\n        <About />\r\n      </section>\r\n\r\n      <section>\r\n        <AllPlants />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setError,\r\n  setIsNewRequest,\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n  signUp,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignUp = (): JSX.Element => {\r\n  const error = useAppSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign up\r\n  const handleSignUp = (event: any): void => {\r\n    event.preventDefault();\r\n    const { username, email, password } = event.target;\r\n    const newUser = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    dispatch(signUp(newUser))\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsUserChange(true));\r\n        history.push(\"/\");\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setError(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign Up </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleSignUp(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\"> Username </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n            formNoValidate\r\n          >\r\n            Sign up\r\n          </button>\r\n          <p className=\"padding\"> Already have an account? </p>\r\n          <div className=\"text-right\">\r\n            <Link to={\"/auth/signin\"}>\r\n              <button className=\"btn btn-sm ml-4 smallWidth form-control mt-0 mb-2\">\r\n                Sign In\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setError,\r\n  setIsNewRequest,\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n  signIn,\r\n  User,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignIn = (): JSX.Element => {\r\n  const error = useAppSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign in\r\n  const handleSignIn = (event: any, history: any): void => {\r\n    event.preventDefault();\r\n    const { email, password } = event.target;\r\n    const user: User = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    dispatch(signIn(user))\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        const { amountOfRequests, amountOfReplies } = user;\r\n        dispatch(setAmountOfRequests(amountOfRequests));\r\n        dispatch(setAmountOfReplies(amountOfReplies));\r\n        dispatch(setIsUserChange(true));\r\n        history.push(\"/\");\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setError(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign In </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleSignIn(event, history);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n            formNoValidate\r\n          >\r\n            Sign in\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  IntervalId,\r\n  logOut,\r\n  setDelayCounter,\r\n  setIntervalId,\r\n  setIsNewRequest,\r\n  setLoggedInUser,\r\n  setUser,\r\n  User,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst LogOut = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Update user and log out as soon as page loads\r\n  useEffect(() => {\r\n    const clonedUser: User = JSON.parse(JSON.stringify(loggedInUser));\r\n    clonedUser.amountOfRequests = amountOfRequests;\r\n    clonedUser.amountOfReplies = amountOfReplies;\r\n    dispatch(setUser(clonedUser));\r\n    dispatch(logOut(clonedUser))\r\n      .unwrap()\r\n      .then(() => {\r\n        dispatch(setLoggedInUser(null));\r\n        if (intervalId) {\r\n          clearInterval(intervalId);\r\n          dispatch(setIntervalId(null));\r\n          dispatch(setDelayCounter(0));\r\n        }\r\n        dispatch(setIsNewRequest(false));\r\n        history.push(\"/\");\r\n        scroll.scrollToTop();\r\n      });\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  addPlant,\r\n  createPlant,\r\n  Plant,\r\n  checkUserLoggedIn,\r\n  setError,\r\n  setLoggedInUser,\r\n  uploadPlantImage,\r\n  setIsUploadingImage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst CreatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingImage\r\n  );\r\n  const error = useAppSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads and scroll to plants section during cleanup\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    scroll.scrollToTop();\r\n    dispatch(checkUserLoggedIn())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  // Create plant\r\n  const handleCreatePlant = (event: any) => {\r\n    event.preventDefault();\r\n    const { name, description, size, plantImage, location, price } =\r\n      event.target;\r\n    const image = plantImage.files[0];\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    dispatch(setIsUploadingImage(true));\r\n    dispatch(uploadPlantImage(uploadForm))\r\n      .unwrap()\r\n      .then(({ imageUrl, imagePublicId }: any) => {\r\n        const newPlant: Plant = {\r\n          name: name.value,\r\n          description: description.value,\r\n          size: size.value,\r\n          imageUrl,\r\n          imagePublicId,\r\n          location: location.value,\r\n          price: price.value,\r\n        };\r\n        dispatch(createPlant(newPlant))\r\n          .unwrap()\r\n          .then((plant: Plant) => {\r\n            dispatch(addPlant(plant));\r\n            history.push(\"/\");\r\n            scroll.scrollToBottom();\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            dispatch(setError(rejectedValue.message));\r\n          });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setError(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/signup\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mb-5 text-left\"> Create a plant </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleCreatePlant(event);\r\n          }}\r\n        >\r\n          <label htmlFor=\"enterName\"> Name </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterName\"\r\n          />\r\n          <label htmlFor=\"enterDescription\"> Description </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"description\"\r\n            type=\"text\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterDescription\"\r\n          />\r\n          <label htmlFor=\"enterSize\"> Size (cm) </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"size\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterSize\"\r\n          />\r\n          <label htmlFor=\"enterLocation\"> Location </label>\r\n          <select\r\n            className=\"mb-4 form-control p-2\"\r\n            name=\"location\"\r\n            id=\"enterLocation\"\r\n          >\r\n            <option> Select location </option>\r\n            <option value=\"sun\"> sun </option>\r\n            <option value=\"shade\"> shade </option>\r\n            <option value=\"sun and shade\"> sun and shade </option>\r\n          </select>\r\n          <label htmlFor=\"enterPrice\"> Price (EUR) </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"price\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterPrice\"\r\n          />\r\n          <label htmlFor=\"enterImage\"> Image </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"plantImage\"\r\n            type=\"file\"\r\n            id=\"enterImage\"\r\n          />\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <div className=\"col-12 text-right pr-0\">\r\n            <button\r\n              className=\"btn btn-sm form-control smallWidth ml-4 mb-2\"\r\n              type=\"submit\"\r\n              disabled={isUploadingImage ? true : false}\r\n            >\r\n              Create\r\n            </button>\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm form-control smallWidth ml-4 mb-2\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePlantForm;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  readPlant,\r\n  deletePlant,\r\n  deleteMessage,\r\n  scrollToPlants,\r\n  User,\r\n  Message,\r\n  Plant,\r\n  setPlant,\r\n  deletePlantImage,\r\n  removePlant,\r\n  PlantId,\r\n  ImagePublicId,\r\n  DestroyImageData,\r\n  removeMessage,\r\n  decreaseAmountOfReplies,\r\n  checkUserLoggedIn,\r\n  setLoggedInUser,\r\n  setIsFetchingPlant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst PlantDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isFetchingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlant\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const { plantId } = useParams<{ plantId: PlantId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read plant data and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(checkUserLoggedIn())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingPlant(true));\r\n        dispatch(readPlant(plantId))\r\n          .unwrap()\r\n          .then((plant: Plant) => {\r\n            dispatch(setPlant(plant));\r\n            scroll.scrollToTop();\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  // Delete plant\r\n  const handleDeletePlant = (\r\n    imagePublicId: ImagePublicId,\r\n    plantId: PlantId,\r\n    messages: Message[]\r\n  ) => {\r\n    messages.forEach((message: Message) => {\r\n      const { _id, plant }: any = message;\r\n      if (plant._id === plantId) {\r\n        dispatch(deleteMessage(_id))\r\n          .unwrap()\r\n          .then(() => {\r\n            dispatch(removeMessage(_id));\r\n            dispatch(decreaseAmountOfReplies());\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      }\r\n    });\r\n    const destroyImageData: DestroyImageData = {\r\n      imagePublicId,\r\n    };\r\n    dispatch(deletePlantImage(destroyImageData))\r\n      .unwrap()\r\n      .then(() => {\r\n        dispatch(deletePlant(plantId))\r\n          .unwrap()\r\n          .then(() => {\r\n            dispatch(removePlant(plantId));\r\n            history.push(\"/\");\r\n            dispatch(scrollToPlants());\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/signup\"} />;\r\n  }\r\n\r\n  const {\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n    creator,\r\n  } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2> Plant details </h2>\r\n      </div>\r\n      {isFetchingPlant || !creator ? (\r\n        <LoadingSpinner />\r\n      ) : (\r\n        <div className=\"col\">\r\n          <div className=\"card cardMediumWidth\">\r\n            {imageUrl && (\r\n              <img\r\n                className=\"card-img-top mediumPicSize\"\r\n                src={imageUrl}\r\n                alt={name}\r\n              />\r\n            )}\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Name: </span> {name}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Description: </span> {description}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Size: </span> {size} cm\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Likes: </span> {location}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Price: </span> {price} €\r\n            </div>\r\n            <div className=\"ml-2 mt-2 col justify-content-center\">\r\n              <div className=\"row-2 justify-content-center\">\r\n                <div className=\"card-body text-right pt-0\">\r\n                  {loggedInUser._id === (creator as User)._id ? (\r\n                    <div className=\"p-0\">\r\n                      <Link to={\"/plants/update\"}>\r\n                        <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                          Update\r\n                        </button>\r\n                      </Link>\r\n                      <button\r\n                        className=\"btn btn-sm ml-2 form-control smallWidth mb-2\"\r\n                        onClick={() => {\r\n                          handleDeletePlant(imagePublicId, _id, messages);\r\n                        }}\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    </div>\r\n                  ) : (\r\n                    <div>\r\n                      <Link to=\"/plants/checkout\">\r\n                        <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                          Buy\r\n                        </button>\r\n                      </Link>\r\n                      <Link to=\"/messages/create\">\r\n                        <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                          Swap\r\n                        </button>\r\n                      </Link>\r\n                    </div>\r\n                  )}\r\n                  <Link\r\n                    to={\"/\"}\r\n                    onClick={() => {\r\n                      dispatch(scrollToPlants());\r\n                    }}\r\n                  >\r\n                    <button className=\"btn btn-sm ml-2 form-control smallWidth mb-3\">\r\n                      Go back\r\n                    </button>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  updatePlant,\r\n  setPlant,\r\n  Plant,\r\n  deletePlantImage,\r\n  uploadPlantImage,\r\n  setPlantChanges,\r\n  scrollToPlants,\r\n  checkUserLoggedIn,\r\n  setLoggedInUser,\r\n  setIsUploadingImage,\r\n  ImagePublicId,\r\n  setOldImagePublicId,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst UpdatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingImage\r\n  );\r\n  const oldImagePublicId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.oldImagePublicId\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    scroll.scrollToTop();\r\n    dispatch(checkUserLoggedIn())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  // Check which plant values changed\r\n  const handlePlantEntryChange = (\r\n    { target }: any,\r\n    plant: Plant,\r\n    itemNumber: number\r\n  ): void => {\r\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\r\n    // eslint-disable-next-line default-case\r\n    switch (itemNumber) {\r\n      case 0:\r\n        clonedPlant.name = target.value;\r\n        break;\r\n      case 1:\r\n        clonedPlant.description = target.value;\r\n        break;\r\n      case 2:\r\n        clonedPlant.size = target.value;\r\n        break;\r\n      case 3:\r\n        clonedPlant.location = target.value;\r\n        break;\r\n      case 4:\r\n        clonedPlant.price = target.value;\r\n    }\r\n    dispatch(setPlant(clonedPlant));\r\n  };\r\n\r\n  // Plant image changed\r\n  const handleImageChange = ({ target }: any, plant: Plant): void => {\r\n    const image = target.files[0];\r\n    const { imagePublicId } = plant as Plant;\r\n    imagePublicId && dispatch(setOldImagePublicId(imagePublicId));\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    dispatch(setIsUploadingImage(true));\r\n    dispatch(uploadPlantImage(uploadForm))\r\n      .unwrap()\r\n      .then(({ imageUrl, imagePublicId }: any) => {\r\n        const clonedPlant = JSON.parse(JSON.stringify(plant));\r\n        clonedPlant.imagePublicId = imagePublicId;\r\n        clonedPlant.imageUrl = imageUrl;\r\n        dispatch(setPlant(clonedPlant));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  const handleUpdatePlant = (\r\n    oldImagePublicId: ImagePublicId,\r\n    {\r\n      _id,\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    }: Plant\r\n  ): void => {\r\n    const destroyImageData = {\r\n      imagePublicId: oldImagePublicId,\r\n    };\r\n    dispatch(deletePlantImage(destroyImageData))\r\n      .unwrap()\r\n      .then(() => {\r\n        const updatedPlant: Plant = {\r\n          name,\r\n          description,\r\n          size,\r\n          imageUrl,\r\n          imagePublicId,\r\n          location,\r\n          price,\r\n        };\r\n        dispatch(updatePlant({ plantId: _id, updatedPlant }))\r\n          .unwrap()\r\n          .then((updatedPlant) => {\r\n            dispatch(setPlantChanges(updatedPlant));\r\n            history.push(\"/\");\r\n            dispatch(scrollToPlants());\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  const { name, description, size, imageUrl, price } = plant as Plant;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mt-5 mb-4 text-left\"> Update your plant </h2>\r\n        <div className=\"card cardMediumWidth mb-5\">\r\n          {isUploadingImage ? (\r\n            <LoadingSpinner />\r\n          ) : (\r\n            <img className=\"mb-2 smallPicSize\" src={imageUrl} alt={name} />\r\n          )}\r\n          <div className=\"card-body\">\r\n            <label htmlFor=\"updateName\"> Name </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"text\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 0);\r\n              }}\r\n              value={name}\r\n              id=\"updateName\"\r\n            />\r\n            <label htmlFor=\"updateDescription\"> Description </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"text\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 1);\r\n              }}\r\n              value={description}\r\n              id=\"updateDescription\"\r\n            />\r\n            <label htmlFor=\"updateSize\"> Size (cm) </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 2);\r\n              }}\r\n              value={size}\r\n              id=\"updateSize\"\r\n            />\r\n            <label htmlFor=\"updateLocation\"> Location </label>\r\n            <select\r\n              className=\"mb-4 form-control px-2\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 3);\r\n              }}\r\n              name=\"location\"\r\n              placeholder=\"Select\"\r\n              id=\"updateLocation\"\r\n            >\r\n              <option value=\"sun\"> sun </option>\r\n              <option value=\"shade\"> shade </option>\r\n              <option value=\"sun and shade\"> sun and shade </option>\r\n            </select>\r\n            <label htmlFor=\"updatePrice\"> Price (EUR) </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              name=\"price\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 4);\r\n              }}\r\n              value={price}\r\n              id=\"updatePrice\"\r\n            />\r\n            <label htmlFor=\"updateImage\"> Image </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event) => {\r\n                handleImageChange(event, plant);\r\n              }}\r\n              type=\"file\"\r\n              id=\"updateImage\"\r\n            />\r\n            <div className=\"col-12 text-right pr-0\">\r\n              <button\r\n                className=\"btn btn-sm ml-4 form-control smallWidth mb-2\"\r\n                disabled={isUploadingImage ? true : false}\r\n                onClick={() => {\r\n                  handleUpdatePlant(oldImagePublicId, plant);\r\n                }}\r\n              >\r\n                Save\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdatePlantForm;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport {\r\n  createPayment,\r\n  scrollToPlants,\r\n  Plant,\r\n  setClientSecret,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\ninterface CardStyle {\r\n  style: {\r\n    base: {\r\n      color: string;\r\n      fontFamily: string;\r\n      fontSmoothing: string;\r\n      fontSize: string;\r\n      \"::placeholder\": { color: string };\r\n    };\r\n    invalid: {\r\n      color: string;\r\n      iconColor: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst CheckoutForm = (): JSX.Element => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(\"\");\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const clientSecret = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.clientSecret\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Create payment as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(createPayment(plant))\r\n      .unwrap()\r\n      .then((payment: any) => {\r\n        dispatch(setClientSecret(payment.clientSecret));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n    return () => {\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    };\r\n  }, []);\r\n\r\n  // Card styling\r\n  const cardStyle: CardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n  // Listen for changes in Card element and display any errors as customer types card details\r\n  const handleChange = async (event: any): Promise<void> => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  // Submit payment\r\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      return;\r\n    }\r\n    setIsProcessing(true);\r\n    const payload = await (stripe as any).confirmCardPayment(clientSecret, {\r\n      payment_method: { card: (elements as any).getElement(CardElement) },\r\n    });\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    } else {\r\n      setPaymentError(\"\");\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n\r\n  const { _id, name, price } = plant as Plant;\r\n  return (\r\n    <div className=\"container col-9\">\r\n      <form\r\n        className=\"checkoutForm mt-5\"\r\n        id=\"payment-form\"\r\n        onSubmit={handleSubmitPayment}\r\n      >\r\n        <h2 className=\"text-left mb-2 p-2\"> {name} </h2>\r\n        <h3 className=\"text-left mb-4 p-2\"> Price: {price} € </h3>\r\n        <CardElement\r\n          className=\"p-2\"\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            className=\"btn btn-sm mt-5 mb-4\"\r\n            type=\"submit\"\r\n            disabled={isProcessing || isDisabled || isSucceeded}\r\n            id=\"submit\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isProcessing ? (\r\n                <div className=\"spinner\" id=\"spinner\" />\r\n              ) : (\r\n                \"Pay now\"\r\n              )}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {\r\n          /* Show any error that happens when processing the payment */\r\n          paymentError && (\r\n            <div className=\"card-error\" role=\"alert\">\r\n              {paymentError}\r\n            </div>\r\n          )\r\n          /* Show success message upon completion */\r\n        }\r\n        <p\r\n          className={\r\n            isSucceeded\r\n              ? \"result-message text-center\"\r\n              : \"result-message hidden text-center\"\r\n          }\r\n        >\r\n          Payment succeeded.\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {isSucceeded ? (\r\n          <Link\r\n            to={\"/\"}\r\n            onClick={() => {\r\n              dispatch(scrollToPlants());\r\n            }}\r\n          >\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        ) : (\r\n          <Link to={`/plants/read/${_id}`}>\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport { checkUserLoggedIn, setLoggedInUser } from \"../reducer/jungleSwapSlice\";\r\nimport CheckoutForm from \"../components/CheckoutForm\";\r\n\r\nconst stripePromise = loadStripe(\r\n  \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n);\r\n\r\nconst CheckoutPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    scroll.scrollToTop();\r\n    dispatch(checkUserLoggedIn())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5 App\">\r\n        <Elements stripe={stripePromise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutPage;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { Message, Plant, User } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\ntype RequestThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst RequestThumbnail = ({ message }: RequestThumbnailProps): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const { _id, buyer, seller, plant, messageState } = message;\r\n\r\n  return (\r\n    <>\r\n      {loggedInUser &&\r\n        (seller as User)._id === loggedInUser._id &&\r\n        messageState === true && (\r\n          <div className=\"card p-3 mt-4\" key={_id}>\r\n            <h4> Request for {(plant as Plant).name} </h4>\r\n            <h5> by {(buyer as User).username} </h5>\r\n            <div className=\"text-center\">\r\n              <Link\r\n                className=\"btn smallWidth form-control\"\r\n                to={`/requests/read/${_id}`}\r\n              >\r\n                Details\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RequestThumbnail;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  fetchAllMessages,\r\n  setIsNewRequest,\r\n  Message,\r\n  setMessages,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  checkUserLoggedIn,\r\n  setLoggedInUser,\r\n  setIsFetchingMessages,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport RequestTile from \"../components/RequestTile\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\n\r\nconst RequestsPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Fetch all messages and reset values as soon as page loads and reset values during cleanup\r\n  useEffect(() => {\r\n    const handleResetAll = (): void => {\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    dispatch(checkUserLoggedIn())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingMessages(true));\r\n        dispatch(fetchAllMessages())\r\n          .unwrap()\r\n          .then((messages) => {\r\n            dispatch(setMessages(messages));\r\n            isUserChange && dispatch(setStartAmountOfRequests());\r\n            isUserChange && dispatch(setStartAmountOfReplies());\r\n            handleResetAll();\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n    return () => {\r\n      handleResetAll();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Requests for your plants </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {isFetchingMessages ? (\r\n          <LoadingSpinner />\r\n        ) : (\r\n          <div>\r\n            {messages.map((message: Message, index: number) => {\r\n              return <RequestTile message={message} key={index} />;\r\n            })}\r\n          </div>\r\n        )}\r\n        {amountOfRequests !== 0 && (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsPage;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { Message, Plant, User } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\ntype ReplyThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst ReplyThumbnail = ({ message }: ReplyThumbnailProps): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const { _id, buyer, seller, plant, reply } = message;\r\n\r\n  return (\r\n    <>\r\n      {loggedInUser && (buyer as User)._id === loggedInUser._id && reply && (\r\n        <div className=\"card p-3 mt-4 \" key={_id}>\r\n          <h4> Reply for {(plant as Plant).name} </h4>\r\n          <h5> by {(seller as User).username} </h5>\r\n          <div className=\"text-center\">\r\n            <Link\r\n              className=\"btn smallWidth form-control\"\r\n              to={`/replies/read/${_id}`}\r\n            >\r\n              Details\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReplyThumbnail;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  fetchAllMessages,\r\n  setIsNewReply,\r\n  Message,\r\n  setMessages,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  checkUserLoggedIn,\r\n  setLoggedInUser,\r\n  setIsFetchingMessages,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport ReplyTile from \"../components/ReplyTile\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\n\r\nconst RepliesPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Fetch all requests and reset values as soon as page loads and reset values during cleanup\r\n  useEffect(() => {\r\n    const handleResetAll = (): void => {\r\n      dispatch(setIsNewReply(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    dispatch(checkUserLoggedIn())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingMessages(true));\r\n        dispatch(fetchAllMessages())\r\n          .unwrap()\r\n          .then((messages) => {\r\n            dispatch(setMessages(messages));\r\n            isUserChange && dispatch(setStartAmountOfRequests());\r\n            isUserChange && dispatch(setStartAmountOfReplies());\r\n            handleResetAll();\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n    return () => {\r\n      handleResetAll();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Replies for your requests </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {isFetchingMessages ? (\r\n          <LoadingSpinner />\r\n        ) : (\r\n          <div>\r\n            {messages.map((message: Message, index: number) => {\r\n              return <ReplyTile message={message} key={index} />;\r\n            })}\r\n          </div>\r\n        )}\r\n        {amountOfReplies !== 0 && (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesPage;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  createMessage,\r\n  setError,\r\n  Plant,\r\n  Message,\r\n  User,\r\n  addMessage,\r\n  checkUserLoggedIn,\r\n  setLoggedInUser,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst CreateRequestForm = () => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const error = useAppSelector((state: RootState) => state.jungleSwap.error);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Set variable and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    scroll.scrollToTop();\r\n    dispatch(checkUserLoggedIn())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  // Create request\r\n  const handleCreateMessage = (event: any, plant: Plant) => {\r\n    event.preventDefault();\r\n    const { request } = event.target;\r\n    const { _id, creator } = plant;\r\n    const newMessage: Message = {\r\n      seller: (creator as User)._id,\r\n      plant: _id,\r\n      request: request.value,\r\n    };\r\n    dispatch(createMessage(newMessage))\r\n      .unwrap()\r\n      .then((newMessage) => {\r\n        dispatch(addMessage(newMessage));\r\n        history.push(`/plants/read/${newMessage.plant}`);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setError(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  const { _id, name } = plant as Plant;\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\"> Your message </h2>\r\n        <h3 className=\"mb-4\"> for {name} </h3>\r\n        <form\r\n          className=\"pl-0\"\r\n          onSubmit={(event) => {\r\n            handleCreateMessage(event, plant);\r\n          }}\r\n        >\r\n          <div>\r\n            <textarea\r\n              className=\"mb-4 form-control\"\r\n              name=\"request\"\r\n              cols={35}\r\n              rows={7}\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <div className=\"text-right\">\r\n            <button\r\n              className=\"btn btn-sm mx-2 form-control smallWidth\"\r\n              type=\"submit\"\r\n            >\r\n              Send\r\n            </button>\r\n            <Link to={`/plants/read/${_id}`}>\r\n              <button className=\"btn btn-sm mx-2 form-control smallWidth\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRequestForm;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  readMessage,\r\n  User,\r\n  Plant,\r\n  Message,\r\n  setMessage,\r\n  updateMessage,\r\n  decreaseAmountOfRequests,\r\n  setMessageChanges,\r\n  checkUserLoggedIn,\r\n  setLoggedInUser,\r\n  MessageId,\r\n  setIsFetchingMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst RequestDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read message and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(checkUserLoggedIn())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingMessage(true));\r\n        dispatch(readMessage(messageId))\r\n          .unwrap()\r\n          .then((message) => {\r\n            dispatch(setMessage(message));\r\n            scroll.scrollToTop();\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n        scroll.scrollToTop();\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  // Set message of the buyer inactive by the seller\r\n  const handleSetMessageInactive = (message: Message, history: any) => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.messageState = false;\r\n    dispatch(setMessage(clonedMessage));\r\n    const { _id, buyer, seller, plant, request, reply, messageState } =\r\n      clonedMessage;\r\n    const updatedMessage: Message = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    };\r\n    dispatch(updateMessage({ messageId: _id, updatedMessage }))\r\n      .unwrap()\r\n      .then((message) => {\r\n        dispatch(setMessageChanges(message));\r\n        dispatch(decreaseAmountOfRequests());\r\n        history.push(\"/requests/fetch\");\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, buyer, plant, request, reply } = message as Message;\r\n\r\n  if (isFetchingMessage || !buyer || !plant) {\r\n    return (\r\n      <div className=\"container d-flex align-items-center justify-content-center mt-5\">\r\n        <LoadingSpinner />\r\n        <span> Loading request </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Request for {(plant as Plant).name} </h2>\r\n        <h5> by {(buyer as User).username} </h5>\r\n        <p className=\"textField p-3 mb-4\"> {request} </p>\r\n        {reply && (\r\n          <div>\r\n            <h5> Your reply </h5>\r\n            <p className=\"textField p-3 mb-4\"> {reply} </p>\r\n          </div>\r\n        )}\r\n        <div className=\"text-right px-3\">\r\n          {!reply && (\r\n            <Link to={`/messages/update/${_id}`}>\r\n              <button className=\"btn btn-sm ml-2 smallWidth form-control mb-1\">\r\n                Reply\r\n              </button>\r\n            </Link>\r\n          )}\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => {\r\n              handleSetMessageInactive(message, history);\r\n            }}\r\n          >\r\n            Done\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/requests/fetch\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  readMessage,\r\n  deleteMessage,\r\n  User,\r\n  Plant,\r\n  Message,\r\n  setMessage,\r\n  removeMessage,\r\n  decreaseAmountOfReplies,\r\n  checkUserLoggedIn,\r\n  setLoggedInUser,\r\n  MessageId,\r\n  setIsFetchingMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst ReplyDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read message and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(checkUserLoggedIn())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsFetchingMessage(true));\r\n        dispatch(readMessage(messageId))\r\n          .unwrap()\r\n          .then((message) => {\r\n            dispatch(setMessage(message));\r\n            scroll.scrollToTop();\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, seller, plant, request, reply } = message as Message;\r\n\r\n  if (isFetchingMessage || !seller || !plant) {\r\n    return (\r\n      <div className=\"container d-flex align-items-center justify-content-center mt-5\">\r\n        <LoadingSpinner />\r\n        <span> Loading reply </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Your request for {(plant as Plant).name} </h2>\r\n        <p className=\"textField p-3 mb-4\"> {request} </p>\r\n        {reply && (\r\n          <div>\r\n            <h5> Reply by {(seller as User).username} </h5>\r\n            <p className=\"textField p-3 mb-4\"> {reply} </p>\r\n          </div>\r\n        )}\r\n        <div className=\"text-right px-3\">\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => {\r\n              dispatch(deleteMessage(_id))\r\n                .unwrap()\r\n                .then(() => {\r\n                  dispatch(removeMessage(_id));\r\n                  dispatch(decreaseAmountOfReplies());\r\n                  history && history.push(\"/replies/fetch\");\r\n                })\r\n                .catch((rejectedValue: any) => {\r\n                  console.log(rejectedValue.message);\r\n                });\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/replies/fetch\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setMessage,\r\n  updateMessage,\r\n  Message,\r\n  setMessageChanges,\r\n  checkUserLoggedIn,\r\n  setLoggedInUser,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst UpdateRequestForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    scroll.scrollToTop();\r\n    dispatch(checkUserLoggedIn())\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  }, []);\r\n\r\n  // Create reply\r\n  const handleCreateReply = ({ target }: any, message: Message): void => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.reply = target.value;\r\n    dispatch(setMessage(clonedMessage));\r\n  };\r\n\r\n  // Update message\r\n  const handleUpdateMessage = ({\r\n    _id,\r\n    buyer,\r\n    seller,\r\n    plant,\r\n    request,\r\n    reply,\r\n    messageState,\r\n  }: Message): void => {\r\n    const updatedMessage: Message = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    };\r\n    dispatch(updateMessage({ messageId: _id, updatedMessage }))\r\n      .unwrap()\r\n      .then((message) => {\r\n        dispatch(setMessageChanges(message));\r\n        history.push(`/requests/read/${_id}`);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, request } = message as Message;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> Reply your request </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <div className=\"card-body\">\r\n            <p> {request} </p>\r\n            <textarea\r\n              className=\"mb-4 form-control\"\r\n              name=\"reply\"\r\n              cols={31}\r\n              rows={6}\r\n              placeholder=\"Your reply\"\r\n              onChange={(event) => {\r\n                handleCreateReply(event, message);\r\n              }}\r\n            />\r\n            <div className=\"row justify-content-end px-3\">\r\n              <button\r\n                className=\"btn btn-sm smallWidth form-control mr-3 mb-2\"\r\n                onClick={() => {\r\n                  handleUpdateMessage(message);\r\n                }}\r\n              >\r\n                Submit\r\n              </button>\r\n              <Link to={`/requests/read/${_id}`}>\r\n                <button className=\"btn btn-sm form-control mb-2\">\r\n                  Go back\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateRequestForm;\r\n","import { useEffect } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { setLoggedInUser } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst Unauthorized = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    loggedInUser && dispatch(setLoggedInUser(null));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 401 Unauthorized </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Unauthorized;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 404 Not Found </h3>\r\n        <Link to={\"/\"}>\r\n          <button className=\"btn btn-sm ml-2 smallWidth form-control\">\r\n            Take me home{\" \"}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useEffect } from \"react\";\r\n\r\nconst KommunicateChat = (): JSX.Element => {\r\n  // Create launcher icon as soon as page loads\r\n  useEffect(() => {\r\n    ((d, m) => {\r\n      const kommunicateSettings = {\r\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      const s = document.createElement(\"script\");\r\n      s.type = \"text/javascript\";\r\n      s.async = true;\r\n      s.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      const h = document.getElementsByTagName(\"head\")[0];\r\n      h.appendChild(s);\r\n      (window as any).kommunicate = m;\r\n      m._globals = kommunicateSettings;\r\n    })(document, (window as any).kommunicate || {});\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default KommunicateChat;\r\n","import { Route, Switch, withRouter } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./screens/Home\";\r\nimport SignUp from \"./screens/SignUp\";\r\nimport SignIn from \"./screens/SignIn\";\r\nimport LogOut from \"./components/LogOut\";\r\nimport CreatePlantForm from \"./screens/CreatePlantForm\";\r\nimport PlantDetails from \"./screens/PlantDetails\";\r\nimport UpdatePlantForm from \"./screens/UpdatePlantForm\";\r\nimport CheckoutPage from \"./screens/CheckoutPage\";\r\nimport RequestsPage from \"./screens/RequestsPage\";\r\nimport RepliesPage from \"./screens/RepliesPage\";\r\nimport CreateRequestForm from \"./screens/CreateRequestForm\";\r\nimport RequestDetails from \"./screens/RequestDetails\";\r\nimport ReplyDetails from \"./screens/ReplyDetails\";\r\nimport UpdateRequestForm from \"./screens/UpdateRequestForm\";\r\nimport Unauthorized from \"./screens/Unauthorized\";\r\nimport NotFound from \"./screens/NotFound\";\r\nimport KommunicateChat from \"./components/Chat\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <div className=\"main\">\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/read/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n\r\n        <Route path=\"/messages/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/messages/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch\">\r\n          <RequestsPage />\r\n        </Route>\r\n        <Route path=\"/requests/read/:messageId\">\r\n          <RequestDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/replies/fetch\">\r\n          <RepliesPage />\r\n        </Route>\r\n        <Route path=\"/replies/read/:messageId\">\r\n          <ReplyDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/auth/signup\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/auth/signin\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/auth/logout\">\r\n          <LogOut />\r\n        </Route>\r\n        <Route path=\"auth/unauthorized\">\r\n          <Unauthorized />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"./reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}