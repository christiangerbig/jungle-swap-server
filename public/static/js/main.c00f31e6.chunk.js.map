{"version":3,"sources":["hooks.ts","reducer/jungleSwapSlice.ts","config.ts","lib/utilities.ts","components/NavLoggedInUserItems.tsx","components/NavAuthentificationItems.tsx","components/NavBar.tsx","components/Footer.tsx","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/About.tsx","components/PlantThumbnail.tsx","components/LoadingSpinner.tsx","components/SearchPlant.tsx","components/AllPlants.tsx","components/Title.tsx","screens/Home.tsx","screens/SignUp.tsx","screens/SignIn.tsx","components/LogOut.tsx","screens/CreatePlantForm.tsx","screens/PlantDetails.tsx","screens/UpdatePlantForm.tsx","components/CheckoutForm.tsx","screens/CheckoutPage.tsx","components/RequestTile.tsx","screens/RequestsPage.tsx","components/ReplyTile.tsx","screens/RepliesPage.tsx","screens/CreateRequestForm.tsx","screens/RequestDetails.tsx","screens/ReplyDetails.tsx","screens/UpdateRequestForm.tsx","screens/Unauthorized.tsx","screens/NotFound.tsx","components/Chat.tsx","App.tsx","store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","apiPath","process","rejectWithValue","data","Error","signUp","createAsyncThunk","newUser","a","axios","post","response","error","signIn","user","withCredentials","logOut","checkUserLoggedIn","get","createPlant","newPlant","fetchAllPlants","fetchQueryPlants","query","fetchPlant","plantId","updatePlant","updatedPlant","patch","deletePlant","delete","uploadPlantImage","uploadForm","deletePlantImage","destroyImageData","createPayment","plant","price","createMessage","newMessage","fetchAllMessages","fetchMessage","messageId","updateMessage","updatedMessage","deleteMessage","jungleSwapSlice","createSlice","name","initialState","isUserChange","loggedInUser","isCreatingPlant","isFetchingPlants","isFetchingPlant","isUpdatingPlant","isDeletingPlant","plants","filteredPlants","isUploadingPlantImage","isDeletingPlantImage","clientSecret","isCreatingMessage","isFetchingMessages","isFetchingMessage","isUpdatingMessage","isDeletingMessage","messages","message","isNewRequest","isNewReply","amountOfRequests","amountOfReplies","intervalId","delayCounter","titleSectionHeight","aboutSectionHeight","errorMessage","reducers","setIsUserChange","state","action","payload","setLoggedInUser","setIsCreatingPlant","setIsFetchingPlants","setIsFetchingPlant","setIsUpdatingPlant","setIsDeletingPlant","addPlant","push","setPlant","setPlants","setFilteredPlants","setPlantChanges","_id","description","size","imageUrl","imagePublicId","location","map","singlePlant","removePlant","filter","setIsUploadingPlantImage","setIsDeletingPlantImage","setDestroyImageData","setClientSecret","setIsCreatingMessage","setIsFetchingMessages","setIsFetchingMessage","setIsUpdatingMessage","setIsDeletingMessage","addMessage","setMessages","setMessage","setMessageChanges","buyer","seller","request","reply","messageState","singleMessage","removeMessage","setIsNewRequest","setIsNewReply","setStartAmountOfRequests","setStartAmountOfReplies","setAmountOfRequests","setAmountOfReplies","decreaseAmountOfRequests","decreaseAmountOfReplies","setIntervalId","setDelayCounter","increaseDelayCounter","setTitleSectionHeight","setAboutSectionHeight","scrollToAbout","scroll","scrollTo","scrollToPlants","setErrorMessage","extraReducers","builder","addCase","fulfilled","rejected","actions","protectRoute","dispatch","unwrap","then","catch","rejectedValue","console","log","fetchPlants","stopIntervalCounter","clearInterval","fetchSingleMessage","fetchMessages","handleDeletePlantImage","NavLoggedInUserItems","jungleSwap","to","className","title","icon","faBell","username","NavAuthentificationItems","NavBar","useEffect","setMessageVariables","setInterval","startInterval","setMessageVariablesAndStartInterval","currentAmountOfRequests","checkAmountOfRequests","length","getAmountOfRequests","checkNewRequests","currentAmountOfReplies","checkAmountOfReplies","getAmountOfReplies","checkNewReplies","setMessagesVariableAndCheckNewRequestsReplies","Navbar","variant","expand","fixed","Brand","onClick","scrollToTop","Toggle","aria-controls","Collapse","id","Nav","faSearch","Footer","About","src","plantsImage","alt","plantPotIcon","PlantThumbnail","LoadingSpinner","role","SearchPlant","useState","setQuery","setFilter","fetchPlantQueryByName","filterPlantsByLocation","type","placeholder","value","onChange","event","target","AllPlants","index","Title","Home","elementRef","useRef","Math","round","current","getBoundingClientRect","height","getTitleSectionHeight","getAboutSectionHeight","ref","titleSection","aboutSection","SignUp","history","useHistory","handleSignUp","preventDefault","email","password","toLowerCase","setUserVariablesAndReturnToHomePage","onSubmit","htmlFor","hidden","formNoValidate","SignIn","handleSignIn","LogOut","resetRequestReplyVariablesAndReturnToHomePage","updateUserData","clonedUser","JSON","parse","stringify","updateUserRequestsReplies","logOutUser","CreatePlantForm","handleCreatePlant","scrollToBottom","addPlantAndReturnToHomePage","image","plantImage","files","FormData","append","handleUploadPlantImage","min","disabled","PlantDetails","useParams","setPlantAndScrollToTop","fetchPlantData","handleDeletePlant","removePlantAndReturnToPlantsSection","creator","forEach","handleDeleteRemainingMessages","UpdatePlantForm","selectElementRef","setPlantLocationAndScrollToTop","handlePlantEntryChange","clonedPlant","handlePlantImageChange","setImageDataForPlant","handleUpdatePlant","setPlantChangesAndReturnToPlantsSection","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","payment","initializePayment","handleCardElementInputChanges","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","stripePromise","loadStripe","CheckoutPage","RequestThumbnail","RequestsPage","resetRequestVariableAndScrollToTop","RequestTile","ReplyThumbnail","RepliesPage","resetReplyVariableAndScrollToTop","ReplyTile","CreateRequestForm","handleCreateMessageForRequest","addMessageAndReturnToPlantDetailsPage","cols","rows","RequestDetails","handleChangeMessageState","setMessageChangesAndReturnToRequestsPage","updateBuyerMessage","clonedMessage","setBuyerMessageInactive","ReplyDetails","handleDeleteMessage","removeMessageReplyAndReturnToRepliesPage","UpdateRequestForm","handleUpdateMessage","setMessageChangesAndReturnToRequestPage","handleCreateReply","Unauthorized","NotFound","KommunicateChat","document","method","scriptElement","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","createLauncherIcon","withRouter","exact","path","component","store","configureStore","reducer","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.c00f31e6.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  User,\r\n  Plant,\r\n  PlantId,\r\n  Message,\r\n  MessageId,\r\n  DestroyImageData,\r\n  IntervalId,\r\n} from \"../typeDefinitions\";\r\n\r\ntype ErrorMessage = string | null;\r\n\r\ninterface InitialState {\r\n  // ----- User authentication -----\r\n  isUserChange: boolean;\r\n  loggedInUser: User | null;\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: boolean;\r\n  isFetchingPlants: boolean;\r\n  isFetchingPlant: boolean;\r\n  isUpdatingPlant: boolean;\r\n  isDeletingPlant: boolean;\r\n  plant: Plant | {};\r\n  plants: Plant[];\r\n  filteredPlants: Plant[];\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: boolean;\r\n  isDeletingPlantImage: boolean;\r\n  destroyImageData: DestroyImageData | null;\r\n\r\n  // ----- Payment -----\r\n  clientSecret: string;\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: boolean;\r\n  isFetchingMessages: boolean;\r\n  isFetchingMessage: boolean;\r\n  isUpdatingMessage: boolean;\r\n  isDeletingMessage: boolean;\r\n  messages: Message[];\r\n  message: Message | {};\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: boolean;\r\n  isNewReply: boolean;\r\n  amountOfRequests: number;\r\n  amountOfReplies: number;\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: IntervalId;\r\n  delayCounter: number;\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: number;\r\n  aboutSectionHeight: number;\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: ErrorMessage;\r\n}\r\n\r\ninterface UpdatePlantParameters {\r\n  plantId: PlantId;\r\n  updatedPlant: Plant;\r\n}\r\n\r\ninterface UpdateMessageParameters {\r\n  messageId: MessageId;\r\n  updatedMessage: Message;\r\n}\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\nconst initialState: InitialState = {\r\n  // ----- User authentication -----\r\n  isUserChange: false,\r\n  loggedInUser: null,\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: false,\r\n  isFetchingPlants: false,\r\n  isFetchingPlant: false,\r\n  isUpdatingPlant: false,\r\n  isDeletingPlant: false,\r\n  plant: {},\r\n  plants: [],\r\n  filteredPlants: [],\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: false,\r\n  isDeletingPlantImage: false,\r\n  destroyImageData: null,\r\n\r\n  // ----- Payment -----\r\n  clientSecret: \"\",\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: false,\r\n  isFetchingMessages: false,\r\n  isFetchingMessage: false,\r\n  isUpdatingMessage: false,\r\n  isDeletingMessage: false,\r\n  messages: [],\r\n  message: {},\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: false,\r\n  isNewReply: false,\r\n  amountOfRequests: 0,\r\n  amountOfReplies: 0,\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: null,\r\n  delayCounter: 0,\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: 0,\r\n  aboutSectionHeight: 0,\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: null,\r\n};\r\n\r\nconst rejectWithValue = (data: any): void | PromiseLike<void> => {\r\n  throw new Error(data);\r\n};\r\n\r\n// ----- User authentification -----\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (newUser: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-up`, newUser);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async (user: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-in`, user, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (user: User): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/auth/log-out`, user, {\r\n        withCredentials: true,\r\n      });\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const checkUserLoggedIn = createAsyncThunk(\r\n  \"jungleSwap/checkUserLoggedIn\",\r\n  async (): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/auth/check-user`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Plants -----\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async (newPlant: Plant): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/plants/create`, newPlant, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async (): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query: string): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchPlant = createAsyncThunk(\r\n  \"jungleSwap/fetchPlant\",\r\n  async (plantId: PlantId): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async ({\r\n    plantId,\r\n    updatedPlant,\r\n  }: UpdatePlantParameters): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (plantId: PlantId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Images -----\r\nexport const uploadPlantImage = createAsyncThunk(\r\n  \"jungleSwap/uploadPlantImage\",\r\n  async (uploadForm: FormData): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/cloudinary/upload`,\r\n        uploadForm\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlantImage = createAsyncThunk(\r\n  \"jungleSwap/deletePlantImage\",\r\n  async (destroyImageData: DestroyImageData): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/cloudinary/destroy`, destroyImageData);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Payment -----\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant: Plant): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/stripe/create-payment-intent`,\r\n        {\r\n          price: plant.price,\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Messages -----\r\nexport const createMessage = createAsyncThunk(\r\n  \"jungleSwap/createMessage\",\r\n  async (newMessage: Message): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/messages/create`,\r\n        newMessage,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllMessages = createAsyncThunk(\r\n  \"jungleSwap/fetchAllMessages\",\r\n  async (): Promise<Message[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/messages/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchMessage = createAsyncThunk(\r\n  \"jungleSwap/fetchMessage\",\r\n  async (messageId: MessageId): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${apiPath}/messages/fetch/${messageId}`,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updateMessage = createAsyncThunk(\r\n  \"jungleSwap/updateMessage\",\r\n  async ({\r\n    messageId,\r\n    updatedMessage,\r\n  }: UpdateMessageParameters): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/messages/update/${messageId}`,\r\n        updatedMessage\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteMessage = createAsyncThunk(\r\n  \"jungleSwap/deleteMessage\",\r\n  async (messageId: MessageId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    // ----- User authentication ------\r\n    setIsUserChange: (state, action: PayloadAction<boolean>) => {\r\n      state.isUserChange = action.payload;\r\n    },\r\n    setLoggedInUser: (state, action: PayloadAction<User | null>) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n\r\n    // ----- Plants ------\r\n    setIsCreatingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isCreatingPlant = action.payload;\r\n    },\r\n    setIsFetchingPlants: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingPlants = action.payload;\r\n    },\r\n    setIsFetchingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingPlant = action.payload;\r\n    },\r\n    setIsUpdatingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isUpdatingPlant = action.payload;\r\n    },\r\n    setIsDeletingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingPlant = action.payload;\r\n    },\r\n    addPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plants.push(action.payload);\r\n    },\r\n    setPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plant = action.payload;\r\n    },\r\n    setPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.plants = action.payload;\r\n    },\r\n    setFilteredPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.filteredPlants = action.payload;\r\n    },\r\n    setPlantChanges: (state, action: PayloadAction<Plant>) => {\r\n      const {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      } = action.payload;\r\n      state.plants = state.plants.map((singlePlant: Plant): Plant => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, action: PayloadAction<PlantId>) => {\r\n      state.plants = state.plants.filter(\r\n        (plant: Plant): boolean => plant._id !== action.payload\r\n      );\r\n    },\r\n\r\n    // ----- Images -----\r\n    setIsUploadingPlantImage: (state, action: PayloadAction<boolean>) => {\r\n      state.isUploadingPlantImage = action.payload;\r\n    },\r\n    setIsDeletingPlantImage: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingPlantImage = action.payload;\r\n    },\r\n    setDestroyImageData: (\r\n      state,\r\n      action: PayloadAction<DestroyImageData | null>\r\n    ) => {\r\n      state.destroyImageData = action.payload;\r\n    },\r\n\r\n    // ----- Payment -----\r\n    setClientSecret: (state, action: PayloadAction<string>) => {\r\n      state.clientSecret = action.payload;\r\n    },\r\n\r\n    // ----- Messages -----\r\n    setIsCreatingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isCreatingMessage = action.payload;\r\n    },\r\n    setIsFetchingMessages: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingMessages = action.payload;\r\n    },\r\n    setIsFetchingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingMessage = action.payload;\r\n    },\r\n    setIsUpdatingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isUpdatingMessage = action.payload;\r\n    },\r\n    setIsDeletingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingMessage = action.payload;\r\n    },\r\n    addMessage: (state, action: PayloadAction<Message>) => {\r\n      state.messages.push(action.payload);\r\n    },\r\n    setMessages: (state, action: PayloadAction<Message[]>) => {\r\n      state.messages = action.payload;\r\n    },\r\n    setMessage: (state, action: PayloadAction<Message>) => {\r\n      state.message = action.payload;\r\n    },\r\n    setMessageChanges: (state, action: PayloadAction<Message>) => {\r\n      const { _id, buyer, seller, plant, request, reply, messageState } =\r\n        action.payload;\r\n      state.messages = state.messages.map((singleMessage) => {\r\n        if (singleMessage._id === _id) {\r\n          singleMessage.buyer = buyer;\r\n          singleMessage.seller = seller;\r\n          singleMessage.plant = plant;\r\n          singleMessage.request = request;\r\n          singleMessage.reply = reply;\r\n          singleMessage.messageState = messageState;\r\n        }\r\n        return singleMessage;\r\n      });\r\n    },\r\n    removeMessage: (state, action: PayloadAction<MessageId>) => {\r\n      state.messages = state.messages.filter((message: Message): boolean => {\r\n        return message._id !== action.payload;\r\n      });\r\n    },\r\n\r\n    // ----- Requests/Replies check ------\r\n    setIsNewRequest: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewRequest = action.payload;\r\n    },\r\n    setIsNewReply: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewReply = action.payload;\r\n    },\r\n    setStartAmountOfRequests: (state) => {\r\n      state.amountOfRequests = (state.loggedInUser as any).amountOfRequests;\r\n    },\r\n    setStartAmountOfReplies: (state) => {\r\n      state.amountOfReplies = (state.loggedInUser as any).amountOfReplies;\r\n    },\r\n    setAmountOfRequests: (state, action: PayloadAction<number>) => {\r\n      state.amountOfRequests = action.payload;\r\n    },\r\n    setAmountOfReplies: (state, action: PayloadAction<number>) => {\r\n      state.amountOfReplies = action.payload;\r\n    },\r\n    decreaseAmountOfRequests: (state) => {\r\n      state.amountOfRequests -= 1;\r\n    },\r\n    decreaseAmountOfReplies: (state) => {\r\n      state.amountOfReplies -= 1;\r\n    },\r\n\r\n    // ----- Interval counter -----\r\n    setIntervalId: (state, action: PayloadAction<IntervalId>) => {\r\n      state.intervalId = action.payload;\r\n    },\r\n    setDelayCounter: (state, action: PayloadAction<number>) => {\r\n      state.delayCounter = action.payload;\r\n    },\r\n    increaseDelayCounter: (state) => {\r\n      state.delayCounter += 1;\r\n    },\r\n\r\n    // ----- Pages handling -----\r\n    setTitleSectionHeight: (state, action: PayloadAction<number>) => {\r\n      state.titleSectionHeight = action.payload;\r\n    },\r\n    setAboutSectionHeight: (state, action: PayloadAction<number>) => {\r\n      state.aboutSectionHeight = action.payload;\r\n    },\r\n    scrollToAbout: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight);\r\n    },\r\n    scrollToPlants: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight + state.aboutSectionHeight);\r\n    },\r\n\r\n    // ----- Error handling -----\r\n    setErrorMessage: (state, action: PayloadAction<ErrorMessage>) => {\r\n      state.errorMessage = action.payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    // ----- Plants ------\r\n    builder.addCase(createPlant.fulfilled, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(createPlant.rejected, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchPlant.fulfilled, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(fetchPlant.rejected, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.fulfilled, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.rejected, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.fulfilled, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.rejected, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n\r\n    // ----- Images -----\r\n    builder.addCase(uploadPlantImage.fulfilled, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(uploadPlantImage.rejected, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.fulfilled, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.rejected, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n\r\n    // ----- Messages -----\r\n    builder.addCase(createMessage.fulfilled, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(createMessage.rejected, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.fulfilled, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.rejected, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchMessage.fulfilled, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(fetchMessage.rejected, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.fulfilled, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.rejected, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.fulfilled, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.rejected, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n  },\r\n});\r\n\r\n// ----- Slice actions -----\r\nexport const {\r\n  // ----- User authentification -----\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n\r\n  // ----- Plants -----\r\n  setIsCreatingPlant,\r\n  setIsFetchingPlants,\r\n  setIsFetchingPlant,\r\n  setIsUpdatingPlant,\r\n  setIsDeletingPlant,\r\n  addPlant,\r\n  setPlants,\r\n  setFilteredPlants,\r\n  setPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n\r\n  // ----- Images -----\r\n  setIsUploadingPlantImage,\r\n  setIsDeletingPlantImage,\r\n  setDestroyImageData,\r\n\r\n  // ----- Payment -----\r\n  setClientSecret,\r\n\r\n  // ----- Messages -----\r\n  setIsCreatingMessage,\r\n  setIsFetchingMessages,\r\n  setIsFetchingMessage,\r\n  setIsUpdatingMessage,\r\n  setIsDeletingMessage,\r\n  addMessage,\r\n  setMessages,\r\n  setMessage,\r\n  setMessageChanges,\r\n  removeMessage,\r\n\r\n  // ----- Requests/Replies check -----\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  decreaseAmountOfRequests,\r\n  decreaseAmountOfReplies,\r\n\r\n  // ----- Interval counter -----\r\n  setIntervalId,\r\n  setDelayCounter,\r\n  increaseDelayCounter,\r\n\r\n  // ----- Pages handling -----\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n\r\n  // ----- Error handling -----\r\n  setErrorMessage,\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import {\r\n  checkUserLoggedIn,\r\n  deletePlantImage,\r\n  fetchAllMessages,\r\n  fetchAllPlants,\r\n  fetchMessage,\r\n  setDelayCounter,\r\n  setIntervalId,\r\n  setIsDeletingPlantImage,\r\n  setIsFetchingMessage,\r\n  setIsFetchingMessages,\r\n  setIsFetchingPlants,\r\n  setLoggedInUser,\r\n  setMessage,\r\n  setMessages,\r\n  setPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport {\r\n  DestroyImageData,\r\n  Message,\r\n  MessageId,\r\n  Plant,\r\n  User,\r\n} from \"../typeDefinitions\";\r\n\r\nexport const protectRoute = (dispatch: any): void => {\r\n  dispatch(checkUserLoggedIn())\r\n    .unwrap()\r\n    .then((user: User) => {\r\n      dispatch(setLoggedInUser(user));\r\n    })\r\n    .catch((rejectedValue: any) => {\r\n      console.log(rejectedValue.message);\r\n    });\r\n};\r\n\r\nexport const fetchPlants = (dispatch: any): void => {\r\n  dispatch(setIsFetchingPlants(true));\r\n  dispatch(fetchAllPlants())\r\n    .unwrap()\r\n    .then((plants: Plant[]) => {\r\n      dispatch(setPlants(plants));\r\n    })\r\n    .catch((rejectedValue: any) => {\r\n      console.log(rejectedValue.message);\r\n    });\r\n};\r\n\r\nexport const stopIntervalCounter = (\r\n  intervalId: NodeJS.Timeout,\r\n  dispatch: any\r\n): void => {\r\n  clearInterval(intervalId);\r\n  dispatch(setIntervalId(null));\r\n  dispatch(setDelayCounter(0));\r\n};\r\n\r\nexport const fetchSingleMessage = (\r\n  messageId: MessageId,\r\n  dispatch: any\r\n): void => {\r\n  dispatch(setIsFetchingMessage(true));\r\n  dispatch(fetchMessage(messageId))\r\n    .unwrap()\r\n    .then((message: Message) => {\r\n      dispatch(setMessage(message));\r\n    })\r\n    .catch((rejectedValue: any) => {\r\n      console.log(rejectedValue.message);\r\n    });\r\n};\r\n\r\nexport const fetchMessages = (dispatch: any): void => {\r\n  dispatch(setIsFetchingMessages(true));\r\n  dispatch(fetchAllMessages())\r\n    .unwrap()\r\n    .then((messages: Message[]) => {\r\n      dispatch(setMessages(messages));\r\n    })\r\n    .catch((rejectedValue: any) => {\r\n      console.log(rejectedValue.message);\r\n    });\r\n};\r\n\r\nexport const handleDeletePlantImage = (\r\n  destroyImageData: DestroyImageData,\r\n  dispatch: any\r\n): void => {\r\n  dispatch(setIsDeletingPlantImage(true));\r\n  dispatch(deletePlantImage(destroyImageData))\r\n    .unwrap()\r\n    .then(() => {\r\n      return;\r\n    })\r\n    .catch((rejectedValue: any) => {\r\n      console.log(rejectedValue.message);\r\n    });\r\n};\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NavLoggedInUserItems = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/plants/create\" className=\"p-2\">\r\n        Create Plant\r\n      </Link>\r\n      <Link\r\n        to=\"/requests/fetch-all\"\r\n        title={isNewRequest ? \"new request\" : \"\"}\r\n        className=\"p-2\"\r\n      >\r\n        {isNewRequest && <FontAwesomeIcon icon={faBell} />}\r\n        Requests\r\n      </Link>\r\n      <Link\r\n        to=\"/replies/fetch-all\"\r\n        title={isNewReply ? \"new reply\" : \"\"}\r\n        className=\"p-2\"\r\n      >\r\n        {isNewReply && <FontAwesomeIcon icon={faBell} />}\r\n        Replies\r\n      </Link>\r\n      <Link\r\n        to=\"/auth/log-out\"\r\n        title={loggedInUser ? loggedInUser.username : \"\"}\r\n        className=\"p-2\"\r\n      >\r\n        Log out\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavLoggedInUserItems;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst NavAuthentificationItems = (): JSX.Element => {\r\n  return (\r\n    <>\r\n      <Link to=\"/auth/sign-in\" className=\"p-2\">\r\n        Sign in\r\n      </Link>\r\n      <Link to=\"/auth/sign-up\" className=\"p-2\">\r\n        Sign up\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavAuthentificationItems;\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  setIsUserChange,\r\n  setIntervalId,\r\n  increaseDelayCounter,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  scrollToPlants,\r\n  setMessages,\r\n  setIsFetchingMessages,\r\n  fetchAllMessages,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { stopIntervalCounter } from \"../lib/utilities\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell, faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport NavLoggedInUserItems from \"./NavLoggedInUserItems\";\r\nimport NavAuthentificationItems from \"./NavAuthentificationItems\";\r\n\r\nconst NavBar = (): JSX.Element => {\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const delayCounter = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.delayCounter\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      intervalId && stopIntervalCounter(intervalId, dispatch);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchMessagesAndStartRequestsRepliesCheck = (): void => {\r\n      const setMessageVariablesAndStartInterval = (\r\n        messages: Message[]\r\n      ): void => {\r\n        const setMessageVariables = (messages: Message[]): void => {\r\n          dispatch(setMessages(messages));\r\n          dispatch(setStartAmountOfRequests());\r\n          dispatch(setStartAmountOfReplies());\r\n          dispatch(setIsUserChange(false));\r\n        };\r\n\r\n        const startInterval = (): void => {\r\n          const intervalId = setInterval(\r\n            () => {\r\n              dispatch(increaseDelayCounter());\r\n            },\r\n            1000 // every second\r\n          );\r\n          dispatch(setIntervalId(intervalId));\r\n          dispatch(increaseDelayCounter());\r\n        };\r\n\r\n        setMessageVariables(messages);\r\n        startInterval();\r\n      };\r\n\r\n      dispatch(setIsFetchingMessages(true));\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages: Message[]) => {\r\n          setMessageVariablesAndStartInterval(messages);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    isUserChange && fetchMessagesAndStartRequestsRepliesCheck();\r\n  }, [isUserChange]);\r\n\r\n  useEffect(() => {\r\n    const fetchMessagesAndCheckNewRequestsReplies = (): void => {\r\n      const setMessagesVariableAndCheckNewRequestsReplies = (\r\n        messages: Message[]\r\n      ): void => {\r\n        const checkNewRequests = (messages: Message[]): void => {\r\n          const getAmountOfRequests = (messages: Message[]): number => {\r\n            const currentAmountOfRequests = messages.filter(\r\n              (message: Message): boolean => {\r\n                const { seller, messageState } = message;\r\n                return (\r\n                  (seller as User)._id === (loggedInUser as User)._id &&\r\n                  messageState === true\r\n                );\r\n              }\r\n            ).length;\r\n            return currentAmountOfRequests;\r\n          };\r\n\r\n          const checkAmountOfRequests = (\r\n            currentAmountOfRequests: number,\r\n            amountOfRequests: number\r\n          ): void => {\r\n            if (amountOfRequests < currentAmountOfRequests) {\r\n              dispatch(setIsNewRequest(true));\r\n            }\r\n            if (amountOfRequests !== currentAmountOfRequests) {\r\n              dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n            }\r\n          };\r\n\r\n          const currentAmountOfRequests = getAmountOfRequests(messages);\r\n          checkAmountOfRequests(currentAmountOfRequests, amountOfRequests);\r\n        };\r\n\r\n        const checkNewReplies = (messages: Message[]): void => {\r\n          const getAmountOfReplies = (messages: Message[]): number => {\r\n            const currentAmountOfReplies = messages.filter(\r\n              (message: Message): boolean => {\r\n                const { buyer, reply } = message;\r\n                return (\r\n                  (buyer as User)._id === (loggedInUser as User)._id &&\r\n                  reply !== \"\"\r\n                );\r\n              }\r\n            ).length;\r\n            return currentAmountOfReplies;\r\n          };\r\n\r\n          const checkAmountOfReplies = (\r\n            currentAmountOfReplies: number,\r\n            amountOfReplies: number\r\n          ): void => {\r\n            if (amountOfReplies < currentAmountOfReplies) {\r\n              dispatch(setIsNewReply(true));\r\n            }\r\n            if (amountOfReplies !== currentAmountOfReplies) {\r\n              dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n            }\r\n          };\r\n\r\n          const currentAmountOfReplies = getAmountOfReplies(messages);\r\n          checkAmountOfReplies(currentAmountOfReplies, amountOfReplies);\r\n        };\r\n\r\n        dispatch(setMessages(messages));\r\n        checkNewRequests(messages);\r\n        checkNewReplies(messages);\r\n      };\r\n\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages: Message[]) => {\r\n          setMessagesVariableAndCheckNewRequestsReplies(messages);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    if (isUserChange) {\r\n      dispatch(setStartAmountOfRequests());\r\n      dispatch(setStartAmountOfReplies());\r\n    }\r\n    loggedInUser && fetchMessagesAndCheckNewRequestsReplies();\r\n  }, [delayCounter]);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar variant=\"dark\" expand=\"lg\" fixed=\"top\" className=\"pl-5\">\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" onClick={scroll.scrollToTop}>\r\n            JungleSwap\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\r\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\r\n        </Navbar.Toggle>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Link\r\n              to=\"/\"\r\n              className=\"p-2\"\r\n              onClick={() => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              All Plants\r\n            </Link>\r\n            {loggedInUser ? (\r\n              <NavLoggedInUserItems />\r\n            ) : (\r\n              <NavAuthentificationItems />\r\n            )}\r\n            <Link\r\n              to=\"/\"\r\n              className=\"p-2\"\r\n              onClick={() => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              <FontAwesomeIcon icon={faSearch} />\r\n            </Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst Footer = (): JSX.Element => {\r\n  return (\r\n    <div className=\"footer-row\">\r\n      <footer>\r\n        © 2021\r\n        <Link to={\"https://www.linkedin.com/in/christian-gerbig/\"}>\r\n          Christian Gerbig\r\n        </Link>\r\n        &amp;\r\n        <Link to={\"https://www.linkedin.com/in/lisa-montebaur/\"}>\r\n          Lisa Montebaur\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import plantsImage from \"../images/JungleSwap_Home.png\";\r\nimport plantPotIcon from \"../images/JungleSwap_Icon.png\";\r\n\r\nconst About = (): JSX.Element => {\r\n  return (\r\n    <div className=\"about centered container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n          <img src={plantsImage} alt=\"plants\" className=\"image\" />\r\n        </div>\r\n        <br />\r\n        <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 noOverflow\">\r\n          <article>\r\n            <header>\r\n              <h4> Welcome to JungleSwap! </h4>\r\n              <h5> Add green to your Home </h5>\r\n            </header>\r\n            <p>\r\n              It\"s easy-peasy. <br />\r\n              Share your plant offshoots. <br />\r\n              Make money! <br />\r\n              Or swap them for another plant. <br />\r\n              Don\"t have any baby plants? <br />\r\n              You can simply shop and give a plant a new home.\r\n            </p>\r\n            <img src={plantPotIcon} alt=\"plant pot\" className=\"icon\" />\r\n          </article>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import { Link } from \"react-router-dom\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\ntype PlantThumbnailProps = {\r\n  plant: Plant;\r\n};\r\n\r\nconst PlantThumbnail = ({ plant }: PlantThumbnailProps): JSX.Element => {\r\n  const { _id, name, imageUrl, price } = plant;\r\n\r\n  return (\r\n    <div className=\"col mb-5\">\r\n      <div className=\"card card-medium-width text-center h-100\">\r\n        <img src={imageUrl} alt={name} className=\"card-img-top mediumPicSize\" />\r\n        <div className=\"card-body mb-5\">\r\n          <h5> {name} </h5>\r\n          <p> {price} € </p>\r\n          <Link\r\n            className=\"btn form-control smallWidth\"\r\n            to={`/plants/fetch/${_id}`}\r\n          >\r\n            Details\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantThumbnail;\r\n","const LoadingSpinner = (): JSX.Element => {\r\n  return (\r\n    <div className=\"d-flex align-items-center justify-content-center\">\r\n      <div role=\"status\" className=\"spinner-border m-3 loadingSpinner\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { fetchPlants } from \"../lib/utilities\";\r\nimport {\r\n  fetchQueryPlants,\r\n  setFilteredPlants,\r\n  setIsFetchingPlants,\r\n  setPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\nconst SearchPlant = (): JSX.Element => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [filter, setFilter] = useState(\"\");\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    const fetchPlantQueryByName = (query: string): void => {\r\n      if (query) {\r\n        dispatch(setIsFetchingPlants(true));\r\n        dispatch(fetchQueryPlants(query))\r\n          .unwrap()\r\n          .then((plants: Plant[]) => {\r\n            dispatch(setPlants(plants));\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      } else {\r\n        fetchPlants(dispatch);\r\n      }\r\n    };\r\n\r\n    fetchPlantQueryByName(query);\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    const filterPlantsByLocation = (filter: string, plants: Plant[]): void => {\r\n      const filteredPlants = plants.filter(({ location }: Plant): boolean => {\r\n        return filter === location || filter === \"\";\r\n      });\r\n      dispatch(setFilteredPlants(filteredPlants));\r\n    };\r\n\r\n    filterPlantsByLocation(filter, plants);\r\n  }, [filter]);\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <hr />\r\n      <h4> Search a plant </h4>\r\n      <div className=\"d-flex\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter name\"\r\n          value={query}\r\n          className=\"smallWidth form-control\"\r\n          onChange={(event) => {\r\n            setQuery(event.target.value);\r\n          }}\r\n        />\r\n        <select\r\n          name=\"location\"\r\n          className=\"extraSmallWidth form-control ml-4\"\r\n          onChange={(event) => {\r\n            setFilter(event.target.value);\r\n          }}\r\n        >\r\n          <option value=\"\"> Select location </option>\r\n          <option value=\"sun\"> sun </option>\r\n          <option value=\"shade\"> shade </option>\r\n          <option value=\"sun and shade\"> sun and shade </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPlant;\r\n","import { useAppSelector } from \"../hooks\";\r\nimport { Plant } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport PlantThumbnail from \"../components/PlantThumbnail\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\nimport SearchPlant from \"./SearchPlant\";\r\n\r\nconst AllPlants = (): JSX.Element => {\r\n  const isFetchingPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlants\r\n  );\r\n  const filteredPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.filteredPlants\r\n  );\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-3\">\r\n        <h2> Plants </h2>\r\n      </div>\r\n      <SearchPlant />\r\n      {isFetchingPlants ? (\r\n        <LoadingSpinner />\r\n      ) : (\r\n        <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n          {filteredPlants.map((plant: Plant, index: number): JSX.Element => {\r\n            return <PlantThumbnail plant={plant} key={index} />;\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllPlants;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport { scrollToAbout } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst Title = (): JSX.Element => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <div className=\"row my-5\">\r\n      <div className=\"col-6 offset-3 my-5 borderAround\">\r\n        <h2 className=\"title mb-2\"> JungleSwap </h2>\r\n        <h5 className=\"mt-3 mb-5\"> Share your green heart </h5>\r\n        <div className=\"mb-5\">\r\n          <Link\r\n            to={\"/\"}\r\n            className=\"biggerFontSize\"\r\n            onClick={() => {\r\n              dispatch(scrollToAbout());\r\n            }}\r\n          >\r\n            Try it!\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  setFilteredPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport About from \"../components/About\";\r\nimport AllPlants from \"../components/AllPlants\";\r\nimport Title from \"../components/Title\";\r\nimport { fetchPlants } from \"../lib/utilities\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst Home = (): JSX.Element => {\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n  const elementRef = useRef([]);\r\n\r\n  useEffect(() => {\r\n    const getTitleSectionHeight = (): void => {\r\n      const titleSectionHeight = Math.round(\r\n        (elementRef.current[0] as any).getBoundingClientRect().height\r\n      );\r\n      dispatch(setTitleSectionHeight(titleSectionHeight));\r\n    };\r\n\r\n    const getAboutSectionHeight = (): void => {\r\n      const aboutSectionHeight = Math.round(\r\n        (elementRef.current[1] as any).getBoundingClientRect().height\r\n      );\r\n      dispatch(setAboutSectionHeight(aboutSectionHeight));\r\n    };\r\n\r\n    fetchPlants(dispatch);\r\n    getTitleSectionHeight();\r\n    getAboutSectionHeight();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(setFilteredPlants(plants));\r\n  }, [plants]);\r\n\r\n  return (\r\n    <div>\r\n      <section\r\n        ref={(titleSection) => {\r\n          (elementRef.current[0] as any) = titleSection;\r\n        }}\r\n        className=\"text-center pt-5 pb-5 headerImg\"\r\n      >\r\n        <Title />\r\n      </section>\r\n\r\n      <section\r\n        ref={(aboutSection) => {\r\n          (elementRef.current[1] as any) = aboutSection;\r\n        }}\r\n      >\r\n        <About />\r\n      </section>\r\n\r\n      <section>\r\n        <AllPlants />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n  signUp,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { User } from \"../typeDefinitions\";\r\n\r\nconst SignUp = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignUp = (event: any): void => {\r\n    const setUserVariablesAndReturnToHomePage = (user: User): void => {\r\n      dispatch(setLoggedInUser(user));\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    };\r\n\r\n    event.preventDefault();\r\n    const { username, email, password } = event.target;\r\n    const newUser = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    dispatch(signUp(newUser))\r\n      .unwrap()\r\n      .then((user) => {\r\n        setUserVariablesAndReturnToHomePage(user);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign Up </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleSignUp(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\"> Username </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n              placeholder=\"Enter\"\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder=\"Enter\"\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n          <p hidden={errorMessage ? false : true} className=\"warningColor\">\r\n            {\" \"}\r\n            {errorMessage}{\" \"}\r\n          </p>\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n          >\r\n            Sign up\r\n          </button>\r\n          <p className=\"padding\"> Already have an account? </p>\r\n          <div className=\"text-right\">\r\n            <Link to={\"/auth/sign-in\"}>\r\n              <button className=\"btn btn-sm ml-4 smallWidth form-control mt-0 mb-2\">\r\n                Sign In\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n  signIn,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignIn = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignIn = (event: any): void => {\r\n    const setUserVariablesAndReturnToHomePage = (user: User): void => {\r\n      dispatch(setLoggedInUser(user));\r\n      dispatch(setIsUserChange(true));\r\n      const { amountOfRequests, amountOfReplies } = user;\r\n      dispatch(setAmountOfRequests(amountOfRequests as number));\r\n      dispatch(setAmountOfReplies(amountOfReplies as number));\r\n      history.push(\"/\");\r\n    };\r\n\r\n    event.preventDefault();\r\n    const { email, password } = event.target;\r\n    const user: User = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    dispatch(signIn(user))\r\n      .unwrap()\r\n      .then((user) => {\r\n        setUserVariablesAndReturnToHomePage(user);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign In </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleSignIn(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder=\"Enter\"\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n          <p hidden={errorMessage ? false : true} className=\"warningColor\">\r\n            {\" \"}\r\n            {errorMessage}{\" \"}\r\n          </p>\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n          >\r\n            Sign in\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setLoggedInUser,\r\n  logOut,\r\n  setIsNewRequest,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { stopIntervalCounter } from \"../lib/utilities\";\r\n\r\nconst LogOut = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const logOutUser = (\r\n      loggedInUser: User,\r\n      intervalId: NodeJS.Timeout\r\n    ): void => {\r\n      const updateUserRequestsReplies = (loggedInUser: User): User => {\r\n        const clonedUser: User = JSON.parse(JSON.stringify(loggedInUser));\r\n        clonedUser.amountOfRequests = amountOfRequests;\r\n        clonedUser.amountOfReplies = amountOfReplies;\r\n        dispatch(setLoggedInUser(clonedUser));\r\n        return clonedUser;\r\n      };\r\n\r\n      const updateUserData = (loggedInUser: User): void => {\r\n        const resetRequestReplyVariablesAndReturnToHomePage = (\r\n          intervalId: NodeJS.Timeout\r\n        ): void => {\r\n          const resetRequestReplyVariables = (): void => {\r\n            dispatch(setIsNewRequest(false));\r\n            dispatch(setAmountOfRequests(0));\r\n            dispatch(setAmountOfReplies(0));\r\n          };\r\n\r\n          const returnToHomePage = (): void => {\r\n            history.push(\"/\");\r\n            scroll.scrollToTop();\r\n          };\r\n\r\n          dispatch(setLoggedInUser(null));\r\n          stopIntervalCounter(intervalId, dispatch);\r\n          resetRequestReplyVariables();\r\n          returnToHomePage();\r\n        };\r\n\r\n        dispatch(logOut(loggedInUser))\r\n          .unwrap()\r\n          .then(() => {\r\n            resetRequestReplyVariablesAndReturnToHomePage(intervalId);\r\n          });\r\n      };\r\n\r\n      const updatedUser = updateUserRequestsReplies(loggedInUser);\r\n      updateUserData(updatedUser);\r\n    };\r\n\r\n    logOutUser(loggedInUser as User, intervalId as NodeJS.Timeout);\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  addPlant,\r\n  createPlant,\r\n  setErrorMessage,\r\n  uploadPlantImage,\r\n  setIsUploadingPlantImage,\r\n  setIsCreatingPlant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant, UploadImageData } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { protectRoute } from \"../lib/utilities\";\r\n\r\nconst CreatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingPlantImage\r\n  );\r\n  const isCreatingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isCreatingPlant\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    protectRoute(dispatch);\r\n    if (loggedInUser) {\r\n      dispatch(setErrorMessage(null));\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handleCreatePlant = (\r\n    { name, description, size, location, price }: any,\r\n    { imageUrl, imagePublicId }: UploadImageData\r\n  ): void => {\r\n    const addPlantAndReturnToHomePage = (plant: Plant): void => {\r\n      dispatch(addPlant(plant));\r\n      history.push(\"/\");\r\n      scroll.scrollToBottom();\r\n    };\r\n\r\n    const newPlant: Plant = {\r\n      name: name.value,\r\n      description: description.value,\r\n      size: size.value,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location: location.value,\r\n      price: price.value,\r\n    };\r\n    dispatch(setIsCreatingPlant(true));\r\n    dispatch(createPlant(newPlant))\r\n      .unwrap()\r\n      .then((plant: Plant) => {\r\n        addPlantAndReturnToHomePage(plant);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  const handleUploadPlantImage = (event: any): void => {\r\n    event.preventDefault();\r\n    const { plantImage } = event.target;\r\n    const image = plantImage.files[0];\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    dispatch(setIsUploadingPlantImage(true));\r\n    dispatch(uploadPlantImage(uploadForm))\r\n      .unwrap()\r\n      .then(({ imageUrl, imagePublicId }: UploadImageData) => {\r\n        handleCreatePlant(event.target, { imageUrl, imagePublicId });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mb-5 text-left\"> Create a plant </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleUploadPlantImage(event);\r\n          }}\r\n        >\r\n          <label htmlFor=\"enterName\"> Name </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterName\"\r\n            name=\"name\"\r\n            placeholder=\"Enter\"\r\n            className=\"mb-4 form-control\"\r\n          />\r\n          <label htmlFor=\"enterDescription\"> Description </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterDescription\"\r\n            name=\"description\"\r\n            placeholder=\"Enter\"\r\n            className=\"mb-4 form-control\"\r\n          />\r\n          <label htmlFor=\"enterSize\"> Size (cm) </label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterSize\"\r\n            name=\"size\"\r\n            placeholder=\"Enter\"\r\n            min=\"1\"\r\n            className=\"mb-4 form-control\"\r\n          />\r\n          <label htmlFor=\"enterLocation\"> Location </label>\r\n          <select\r\n            id=\"enterLocation\"\r\n            name=\"location\"\r\n            className=\"mb-4 form-control p-2\"\r\n          >\r\n            <option> Select location </option>\r\n            <option value=\"sun\"> sun </option>\r\n            <option value=\"shade\"> shade </option>\r\n            <option value=\"sun and shade\"> sun and shade </option>\r\n          </select>\r\n          <label htmlFor=\"enterPrice\"> Price (EUR) </label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterPrice\"\r\n            name=\"price\"\r\n            placeholder=\"Enter\"\r\n            min=\"1\"\r\n            className=\"mb-4 form-control\"\r\n          />\r\n          <label htmlFor=\"enterImage\"> Image </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"enterImage\"\r\n            name=\"plantImage\"\r\n            className=\"mb-4 form-control\"\r\n          />\r\n          <p hidden={errorMessage ? false : true} className=\"warningColor\">\r\n            {\" \"}\r\n            {errorMessage}{\" \"}\r\n          </p>\r\n          <div className=\"col-12 text-right pr-0\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isUploadingPlantImage || isCreatingPlant ? true : false}\r\n              className=\"btn btn-sm form-control smallWidth ml-4 mb-2\"\r\n            >\r\n              Create\r\n            </button>\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm form-control smallWidth ml-4 mb-2\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePlantForm;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsFetchingPlant,\r\n  fetchPlant,\r\n  setPlant,\r\n  setIsDeletingPlant,\r\n  deletePlant,\r\n  removePlant,\r\n  setIsDeletingMessage,\r\n  deleteMessage,\r\n  removeMessage,\r\n  scrollToPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, PlantId, Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { handleDeletePlantImage, protectRoute } from \"../lib/utilities\";\r\n\r\nconst PlantDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isFetchingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlant\r\n  );\r\n  const isDeletingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlant\r\n  );\r\n  const isDeletingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlantImage\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const isDeletingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingMessage\r\n  );\r\n  const { plantId } = useParams<{ plantId: PlantId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const fetchPlantData = (plantId: PlantId): void => {\r\n      const setPlantAndScrollToTop = (plant: Plant): void => {\r\n        dispatch(setPlant(plant));\r\n        scroll.scrollToTop();\r\n      };\r\n\r\n      dispatch(setIsFetchingPlant(true));\r\n      dispatch(fetchPlant(plantId))\r\n        .unwrap()\r\n        .then((plant: Plant) => {\r\n          setPlantAndScrollToTop(plant);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    protectRoute(dispatch);\r\n    loggedInUser && fetchPlantData(plantId);\r\n  }, []);\r\n\r\n  const handleDeleteRemainingMessages = (\r\n    messages: Message[],\r\n    plantId: PlantId\r\n  ): void => {\r\n    messages.forEach((message: Message): void => {\r\n      const { _id, plant } = message;\r\n      if ((plant as Plant)._id === plantId) {\r\n        dispatch(setIsDeletingMessage(true));\r\n        dispatch(deleteMessage(_id as PlantId))\r\n          .unwrap()\r\n          .then(() => {\r\n            dispatch(removeMessage(_id as PlantId));\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleDeletePlant = (plantId: PlantId): void => {\r\n    const removePlantAndReturnToPlantsSection = (plantId: PlantId): void => {\r\n      dispatch(removePlant(plantId));\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    };\r\n\r\n    dispatch(setIsDeletingPlant(true));\r\n    dispatch(deletePlant(plantId))\r\n      .unwrap()\r\n      .then(() => {\r\n        removePlantAndReturnToPlantsSection(plantId);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/sign-up\"} />;\r\n  }\r\n  const {\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n    creator,\r\n  } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2> Plant details </h2>\r\n      </div>\r\n      {isFetchingPlant || !creator ? (\r\n        <LoadingSpinner />\r\n      ) : (\r\n        <div className=\"col\">\r\n          <div className=\"card cardMediumWidth\">\r\n            <img\r\n              src={imageUrl}\r\n              alt={name}\r\n              className=\"card-img-top mediumPicSize\"\r\n            />\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Name: </span> {name}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Description: </span> {description}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Size: </span> {size} cm\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Likes: </span> {location}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Price: </span> {price} €\r\n            </div>\r\n            <div className=\"ml-2 mt-2 col justify-content-center\">\r\n              <div className=\"row-2 justify-content-center\">\r\n                <div className=\"card-body text-right pt-0\">\r\n                  {loggedInUser._id === (creator as User)._id ? (\r\n                    <div className=\"p-0\">\r\n                      <Link to={\"/plants/update\"}>\r\n                        <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                          Update\r\n                        </button>\r\n                      </Link>\r\n                      <button\r\n                        disabled={\r\n                          isDeletingMessage ||\r\n                          isDeletingPlantImage ||\r\n                          isDeletingPlant\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        className=\"btn btn-sm ml-2 form-control smallWidth mb-2\"\r\n                        onClick={() => {\r\n                          handleDeleteRemainingMessages(\r\n                            messages,\r\n                            _id as PlantId\r\n                          );\r\n                          handleDeletePlantImage({ imagePublicId }, dispatch);\r\n                          handleDeletePlant(_id as PlantId);\r\n                        }}\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    </div>\r\n                  ) : (\r\n                    <div>\r\n                      <Link to=\"/plants/checkout\">\r\n                        <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                          Buy\r\n                        </button>\r\n                      </Link>\r\n                      <Link to=\"/messages/create\">\r\n                        <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                          Swap\r\n                        </button>\r\n                      </Link>\r\n                    </div>\r\n                  )}\r\n                  <Link\r\n                    to={\"/\"}\r\n                    onClick={() => {\r\n                      dispatch(scrollToPlants());\r\n                    }}\r\n                  >\r\n                    <button className=\"btn btn-sm ml-2 form-control smallWidth mb-3\">\r\n                      Go back\r\n                    </button>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setPlant,\r\n  setIsUpdatingPlant,\r\n  updatePlant,\r\n  setPlantChanges,\r\n  setIsUploadingPlantImage,\r\n  uploadPlantImage,\r\n  setDestroyImageData,\r\n  scrollToPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant, PlantId, UploadImageData } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { handleDeletePlantImage, protectRoute } from \"../lib/utilities\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\n\r\nconst UpdatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingPlantImage\r\n  );\r\n  const isDeletingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlantImage\r\n  );\r\n  const destroyImageData = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.destroyImageData\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isUpdatingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUpdatingPlant\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const selectElementRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const setPlantLocationAndScrollToTop = ({ location }: Plant): void => {\r\n      (selectElementRef as any).current.value = location;\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    protectRoute(dispatch);\r\n    loggedInUser && setPlantLocationAndScrollToTop(plant);\r\n  }, []);\r\n\r\n  const handlePlantEntryChange = ({ target }: any, plant: Plant): void => {\r\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\r\n    switch (target.name) {\r\n      case \"name\":\r\n        clonedPlant.name = target.value;\r\n        break;\r\n      case \"description\":\r\n        clonedPlant.description = target.value;\r\n        break;\r\n      case \"size\":\r\n        clonedPlant.size = target.value;\r\n        break;\r\n      case \"location\":\r\n        clonedPlant.location = target.value;\r\n        break;\r\n      case \"price\":\r\n        clonedPlant.price = target.value;\r\n    }\r\n    dispatch(setPlant(clonedPlant));\r\n  };\r\n\r\n  const handlePlantImageChange = ({ target }: any, plant: Plant): void => {\r\n    const setImageDataForPlant = (\r\n      plant: Plant,\r\n      { imageUrl, imagePublicId }: UploadImageData\r\n    ) => {\r\n      const clonedPlant = JSON.parse(JSON.stringify(plant));\r\n      clonedPlant.imagePublicId = imagePublicId;\r\n      clonedPlant.imageUrl = imageUrl;\r\n      dispatch(setPlant(clonedPlant));\r\n    };\r\n\r\n    const image = target.files[0];\r\n    const { imagePublicId } = plant as Plant;\r\n    dispatch(setDestroyImageData({ imagePublicId }));\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    dispatch(setIsUploadingPlantImage(true));\r\n    dispatch(uploadPlantImage(uploadForm))\r\n      .unwrap()\r\n      .then(({ imageUrl, imagePublicId }: UploadImageData) => {\r\n        setImageDataForPlant(plant, { imageUrl, imagePublicId });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  const handleUpdatePlant = ({\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n  }: Plant): void => {\r\n    const setPlantChangesAndReturnToPlantsSection = (\r\n      updatedPlant: Plant\r\n    ): void => {\r\n      dispatch(setPlantChanges(updatedPlant));\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    };\r\n\r\n    const updatedPlant: Plant = {\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    };\r\n    dispatch(setIsUpdatingPlant(true));\r\n    dispatch(updatePlant({ plantId: _id as PlantId, updatedPlant }))\r\n      .unwrap()\r\n      .then((updatedPlant) => {\r\n        setPlantChangesAndReturnToPlantsSection(updatedPlant);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n  const { name, description, size, imageUrl, price } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mt-5 mb-4 text-left\"> Update your plant </h2>\r\n        <div className=\"card cardMediumWidth mb-5\">\r\n          {isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant ? (\r\n            <LoadingSpinner />\r\n          ) : (\r\n            <img src={imageUrl} alt={name} className=\"mb-2 smallPicSize\" />\r\n          )}\r\n          <div className=\"card-body\">\r\n            <label htmlFor=\"updateName\"> Name </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateName\"\r\n              name=\"name\"\r\n              value={name}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateDescription\"> Description </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateDescription\"\r\n              name=\"description\"\r\n              value={description}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateSize\"> Size (cm) </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updateSize\"\r\n              name=\"size\"\r\n              value={size}\r\n              min=\"1\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateLocation\"> Location </label>\r\n            <select\r\n              ref={selectElementRef}\r\n              id=\"updateLocation\"\r\n              name=\"location\"\r\n              className=\"mb-4 form-control px-2\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            >\r\n              <option value=\"sun\"> sun </option>\r\n              <option value=\"shade\"> shade </option>\r\n              <option value=\"sun and shade\"> sun and shade </option>\r\n            </select>\r\n            <label htmlFor=\"updatePrice\"> Price (EUR) </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updatePrice\"\r\n              name=\"price\"\r\n              value={price}\r\n              min=\"1\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateImage\"> Image </label>\r\n            <input\r\n              type=\"file\"\r\n              id=\"updateImage\"\r\n              name=\"plantImage\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event) => {\r\n                handlePlantImageChange(event, plant);\r\n              }}\r\n            />\r\n            <div className=\"col-12 text-right pr-0\">\r\n              <button\r\n                disabled={\r\n                  isUploadingPlantImage ||\r\n                  isDeletingPlantImage ||\r\n                  isUpdatingPlant\r\n                    ? true\r\n                    : false\r\n                }\r\n                className=\"btn btn-sm ml-4 form-control smallWidth mb-2\"\r\n                onClick={() => {\r\n                  destroyImageData && handleDeletePlantImage(destroyImageData, dispatch);\r\n                  handleUpdatePlant(plant);\r\n                }}\r\n              >\r\n                Save\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdatePlantForm;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport {\r\n  setClientSecret,\r\n  createPayment,\r\n  scrollToPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\n\r\ninterface CardStyle {\r\n  style: {\r\n    base: {\r\n      color: string;\r\n      fontFamily: string;\r\n      fontSmoothing: string;\r\n      fontSize: string;\r\n      \"::placeholder\": { color: string };\r\n    };\r\n    invalid: {\r\n      color: string;\r\n      iconColor: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst CheckoutForm = (): JSX.Element => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(\"\");\r\n  const clientSecret = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.clientSecret\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const cardStyle: CardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initializePayment = (plant: Plant): void => {\r\n      dispatch(createPayment(plant))\r\n        .unwrap()\r\n        .then((payment: any) => {\r\n          dispatch(setClientSecret(payment.clientSecret));\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    initializePayment(plant);\r\n\r\n    return () => {\r\n      const returnToPlantsSection = (): void => {\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      };\r\n\r\n      returnToPlantsSection();\r\n    };\r\n  }, []);\r\n\r\n  const handleCardElementInputChanges = async (event: any): Promise<void> => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    // Stripe.js has not yet loaded\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n    setIsProcessing(true);\r\n    const payload = await (stripe as any).confirmCardPayment(clientSecret, {\r\n      payment_method: { card: (elements as any).getElement(CardElement) },\r\n    });\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    } else {\r\n      setPaymentError(\"\");\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n  const { _id, name, price } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container col-9\">\r\n      <form\r\n        id=\"payment-form\"\r\n        className=\"checkoutForm mt-5\"\r\n        onSubmit={handleSubmitPayment}\r\n      >\r\n        <h2 className=\"text-left mb-2 p-2\"> {name} </h2>\r\n        <h3 className=\"text-left mb-4 p-2\"> Price: {price} € </h3>\r\n        <CardElement\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          className=\"p-2\"\r\n          onChange={handleCardElementInputChanges}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            type=\"submit\"\r\n            id=\"submit\"\r\n            disabled={isProcessing || isDisabled || isSucceeded}\r\n            className=\"btn btn-sm mt-5 mb-4\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isProcessing ? (\r\n                <div id=\"spinner\" className=\"spinner\" />\r\n              ) : (\r\n                \"Pay now\"\r\n              )}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {\r\n          /* Show any error that happens when processing the payment */\r\n          <div\r\n            role=\"alert\"\r\n            hidden={paymentError ? false : true}\r\n            className=\"card-error\"\r\n          >\r\n            {paymentError}\r\n          </div>\r\n        }\r\n        {/* Show success message upon completion */}\r\n        <p\r\n          className={\r\n            isSucceeded\r\n              ? \"result-message text-center\"\r\n              : \"result-message hidden text-center\"\r\n          }\r\n        >\r\n          Payment succeeded.\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {isSucceeded ? (\r\n          <Link\r\n            to={\"/\"}\r\n            onClick={() => {\r\n              dispatch(scrollToPlants());\r\n            }}\r\n          >\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        ) : (\r\n          <Link to={`/plants/fetch/${_id}`}>\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { protectRoute } from \"../lib/utilities\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"../components/CheckoutForm\";\r\n\r\nconst stripePromise = loadStripe(\r\n  \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n);\r\n\r\nconst CheckoutPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    protectRoute(dispatch);\r\n    loggedInUser && scroll.scrollToTop();\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5 App\">\r\n        <Elements stripe={stripePromise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutPage;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { User, Message, Plant } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\n\r\ntype RequestThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst RequestThumbnail = ({ message }: RequestThumbnailProps): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const { _id, buyer, seller, plant, messageState } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <>\r\n      {(seller as User)._id === (loggedInUser as User)._id &&\r\n      messageState === true ? (\r\n        <div className=\"card p-3 mt-4\">\r\n          <h4> Request for {name} </h4>\r\n          <h5> by {username} </h5>\r\n          <div className=\"text-center\">\r\n            <Link\r\n              className=\"btn smallWidth form-control\"\r\n              to={`/requests/fetch/${_id}`}\r\n            >\r\n              Details\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RequestThumbnail;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsNewRequest,\r\n  setStartAmountOfRequests,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { fetchMessages, protectRoute } from \"../lib/utilities\";\r\nimport RequestTile from \"../components/RequestTile\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\n\r\nconst RequestsPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    const resetRequestVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    protectRoute(dispatch);\r\n    if (loggedInUser) {\r\n      fetchMessages(dispatch);\r\n      isUserChange && dispatch(setStartAmountOfRequests());\r\n      resetRequestVariableAndScrollToTop();\r\n    }\r\n\r\n    return () => {\r\n      resetRequestVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Requests for your plants </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {isFetchingMessages ? (\r\n          <LoadingSpinner />\r\n        ) : (\r\n          <div>\r\n            {messages.map((message: Message, index: number): JSX.Element => {\r\n              return <RequestTile message={message} key={index} />;\r\n            })}\r\n          </div>\r\n        )}\r\n        {amountOfRequests !== 0 ? (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsPage;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { User, Plant, Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\n\r\ntype ReplyThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst ReplyThumbnail = ({ message }: ReplyThumbnailProps): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const { _id, buyer, seller, plant, reply } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n\r\n  return (\r\n    <>\r\n      {(buyer as User)._id === (loggedInUser as User)._id && reply !== \"\" ? (\r\n        <div className=\"card p-3 mt-4 \">\r\n          <h4> Reply for {name} </h4>\r\n          <h5> by {username} </h5>\r\n          <div className=\"text-center\">\r\n            <Link\r\n              to={`/replies/fetch/${_id}`}\r\n              className=\"btn smallWidth form-control\"\r\n            >\r\n              Details\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReplyThumbnail;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsNewReply,\r\n  setStartAmountOfReplies,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { fetchMessages, protectRoute } from \"../lib/utilities\";\r\nimport ReplyTile from \"../components/ReplyTile\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\n\r\nconst RepliesPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    const resetReplyVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewReply(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    protectRoute(dispatch);\r\n    if (loggedInUser) {\r\n      fetchMessages(dispatch);\r\n      isUserChange && dispatch(setStartAmountOfReplies());\r\n      resetReplyVariableAndScrollToTop();\r\n    }\r\n\r\n    return () => {\r\n      resetReplyVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Replies for your requests </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {isFetchingMessages ? (\r\n          <LoadingSpinner />\r\n        ) : (\r\n          <div>\r\n            {messages.map((message: Message, index: number): JSX.Element => {\r\n              return <ReplyTile message={message} key={index} />;\r\n            })}\r\n          </div>\r\n        )}\r\n        {amountOfReplies !== 0 ? (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesPage;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsCreatingMessage,\r\n  createMessage,\r\n  addMessage,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { protectRoute } from \"../lib/utilities\";\r\n\r\nconst CreateRequestForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isCreatingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isCreatingMessage\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    protectRoute(dispatch);\r\n    if (loggedInUser) {\r\n      dispatch(setErrorMessage(null));\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handleCreateMessageForRequest = (event: any, plant: Plant): void => {\r\n    const addMessageAndReturnToPlantDetailsPage = (message: Message): void => {\r\n      dispatch(addMessage(message));\r\n      const { plant } = message;\r\n      history.push(`/plants/fetch/${(plant as Plant)._id}`);\r\n    };\r\n\r\n    event.preventDefault();\r\n    const { request } = event.target;\r\n    const { _id, creator } = plant;\r\n    const newMessage: Message = {\r\n      seller: (creator as User)._id,\r\n      plant: _id,\r\n      request: request.value,\r\n    };\r\n    dispatch(setIsCreatingMessage(true));\r\n    dispatch(createMessage(newMessage))\r\n      .unwrap()\r\n      .then((message) => {\r\n        addMessageAndReturnToPlantDetailsPage(message);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n  const { _id, name } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\"> Your request </h2>\r\n        <h3 className=\"mb-4\"> for {name} </h3>\r\n        <form\r\n          className=\"pl-0\"\r\n          onSubmit={(event) => {\r\n            handleCreateMessageForRequest(event, plant);\r\n          }}\r\n        >\r\n          <div>\r\n            <textarea\r\n              name=\"request\"\r\n              cols={35}\r\n              rows={7}\r\n              className=\"mb-4 form-control\"\r\n            />\r\n          </div>\r\n          <p hidden={errorMessage ? false : true} className=\"warningColor\">\r\n            {\" \"}\r\n            {errorMessage}{\" \"}\r\n          </p>\r\n          <div className=\"text-right\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isCreatingMessage ? true : false}\r\n              className=\"btn btn-sm mx-2 form-control smallWidth\"\r\n            >\r\n              Send\r\n            </button>\r\n            <Link to={`/plants/fetch/${_id}`}>\r\n              <button className=\"btn btn-sm mx-2 form-control smallWidth\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRequestForm;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setMessage,\r\n  updateMessage,\r\n  setMessageChanges,\r\n  decreaseAmountOfRequests,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { fetchSingleMessage, protectRoute } from \"../lib/utilities\";\r\n\r\nconst RequestDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    protectRoute(dispatch);\r\n    if (loggedInUser) {\r\n      fetchSingleMessage(messageId, dispatch);\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handleChangeMessageState = (message: Message): void => {\r\n    const setBuyerMessageInactive = (message: Message): Message => {\r\n      const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n      clonedMessage.messageState = false;\r\n      dispatch(setMessage(clonedMessage));\r\n      return clonedMessage;\r\n    };\r\n\r\n    const updateBuyerMessage = ({\r\n      _id,\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    }: Message) => {\r\n      const setMessageChangesAndReturnToRequestsPage = (\r\n        message: Message\r\n      ): void => {\r\n        dispatch(setMessageChanges(message));\r\n        dispatch(decreaseAmountOfRequests());\r\n        history.push(\"/requests/fetch-all\");\r\n      };\r\n\r\n      const updatedMessage: Message = {\r\n        buyer,\r\n        seller,\r\n        plant,\r\n        request,\r\n        reply,\r\n        messageState,\r\n      };\r\n      dispatch(updateMessage({ messageId: _id as MessageId, updatedMessage }))\r\n        .unwrap()\r\n        .then((message) => {\r\n          setMessageChangesAndReturnToRequestsPage(message);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    const updatedMessage = setBuyerMessageInactive(message);\r\n    updateBuyerMessage(updatedMessage);\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, buyer, plant, request, reply } = message as Message;\r\n  if (isFetchingMessage || !buyer || !plant) {\r\n    return (\r\n      <div className=\"container d-flex align-items-center justify-content-center mt-5\">\r\n        <LoadingSpinner />\r\n        <span> Loading request </span>\r\n      </div>\r\n    );\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Request for {name} </h2>\r\n        <h5> by {username} </h5>\r\n        <p className=\"textField p-3 mb-4\"> {request} </p>\r\n        {reply ? (\r\n          <div>\r\n            <h5> Your reply </h5>\r\n            <p className=\"textField p-3 mb-4\"> {reply} </p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"text-right px-3\">\r\n          {!reply ? (\r\n            <Link to={`/messages/update/${_id}`}>\r\n              <button className=\"btn btn-sm ml-2 smallWidth form-control mb-1\">\r\n                Reply\r\n              </button>\r\n            </Link>\r\n          ) : null}\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => {\r\n              handleChangeMessageState(message);\r\n            }}\r\n          >\r\n            Done\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/requests/fetch-all\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsDeletingMessage,\r\n  deleteMessage,\r\n  removeMessage,\r\n  decreaseAmountOfReplies,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { fetchSingleMessage, protectRoute } from \"../lib/utilities\";\r\n\r\nconst ReplyDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const isDeletingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingMessage\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    protectRoute(dispatch);\r\n    if (loggedInUser) {\r\n      fetchSingleMessage(messageId, dispatch);\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handleDeleteMessage = (messageId: MessageId): void => {\r\n    const removeMessageReplyAndReturnToRepliesPage = (\r\n      messageId: MessageId\r\n    ): void => {\r\n      dispatch(removeMessage(messageId));\r\n      dispatch(decreaseAmountOfReplies());\r\n      history.push(\"/replies/fetch-all\");\r\n    };\r\n\r\n    dispatch(setIsDeletingMessage(true));\r\n    dispatch(deleteMessage(messageId))\r\n      .unwrap()\r\n      .then(() => {\r\n        removeMessageReplyAndReturnToRepliesPage(messageId);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, seller, plant, request, reply } = message as Message;\r\n  if (isFetchingMessage || !seller || !plant) {\r\n    return (\r\n      <div className=\"container d-flex align-items-center justify-content-center mt-5\">\r\n        <LoadingSpinner />\r\n        <span> Loading reply </span>\r\n      </div>\r\n    );\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Your request for {name} </h2>\r\n        <p className=\"textField p-3 mb-4\"> {request} </p>\r\n        {reply ? (\r\n          <div>\r\n            <h5> Reply by {username} </h5>\r\n            <p className=\"textField p-3 mb-4\"> {reply} </p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"text-right px-3\">\r\n          <button\r\n            disabled={isDeletingMessage ? true : false}\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => {\r\n              handleDeleteMessage(_id as MessageId);\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/replies/fetch-all\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setMessage,\r\n  setIsUpdatingMessage,\r\n  updateMessage,\r\n  setMessageChanges,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Message, MessageId } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { protectRoute } from \"../lib/utilities\";\r\n\r\nconst UpdateRequestForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const isUpdatingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUpdatingMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    protectRoute(dispatch);\r\n    loggedInUser && scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const handleCreateReply = ({ target }: any, message: Message): void => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.reply = target.value;\r\n    dispatch(setMessage(clonedMessage));\r\n  };\r\n\r\n  const handleUpdateMessage = ({\r\n    _id,\r\n    buyer,\r\n    seller,\r\n    plant,\r\n    request,\r\n    reply,\r\n    messageState,\r\n  }: Message): void => {\r\n    const setMessageChangesAndReturnToRequestPage = (\r\n      message: Message\r\n    ): void => {\r\n      dispatch(setMessageChanges(message));\r\n      const { _id } = message;\r\n      history.push(`/requests/fetch/${_id}`);\r\n    };\r\n\r\n    const updatedMessage: Message = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    };\r\n    dispatch(setIsUpdatingMessage(true));\r\n    dispatch(updateMessage({ messageId: _id as MessageId, updatedMessage }))\r\n      .unwrap()\r\n      .then((message) => {\r\n        setMessageChangesAndReturnToRequestPage(message);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n  const { _id, request } = message as Message;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> Reply your request </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <div className=\"card-body\">\r\n            <p> {request} </p>\r\n            <textarea\r\n              name=\"reply\"\r\n              placeholder=\"Your reply\"\r\n              cols={31}\r\n              rows={6}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event) => {\r\n                handleCreateReply(event, message);\r\n              }}\r\n            />\r\n            <div className=\"row justify-content-end px-3\">\r\n              <button\r\n                disabled={isUpdatingMessage ? true : false}\r\n                className=\"btn btn-sm smallWidth form-control mr-3 mb-2\"\r\n                onClick={() => {\r\n                  handleUpdateMessage(message);\r\n                }}\r\n              >\r\n                Submit\r\n              </button>\r\n              <Link to={`/requests/fetch/${_id}`}>\r\n                <button className=\"btn btn-sm form-control mb-2\">\r\n                  Go back\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateRequestForm;\r\n","const Unauthorized = (): JSX.Element => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 401 Unauthorized </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Unauthorized;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 404 Not Found </h3>\r\n        <Link to={\"/\"}>\r\n          <button className=\"btn btn-sm ml-2 smallWidth form-control\">\r\n            Take me home{\" \"}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useEffect } from \"react\";\r\n\r\ninterface KommunicateSettings {\r\n  appId: string;\r\n  popupWidget: boolean;\r\n  automaticChatOpenOnNavigation: boolean;\r\n}\r\n\r\nconst KommunicateChat = (): JSX.Element => {\r\n  useEffect(() => {\r\n    const createLauncherIcon = (document: any, method: any): void => {\r\n      const kommunicateSettings: KommunicateSettings = {\r\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      const scriptElement = document.createElement(\"script\");\r\n      scriptElement.type = \"text/javascript\";\r\n      scriptElement.async = true;\r\n      scriptElement.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      const headElement = document.getElementsByTagName(\"head\")[0];\r\n      headElement.appendChild(scriptElement);\r\n      (window as any).kommunicate = method;\r\n      method._globals = kommunicateSettings;\r\n    };\r\n\r\n    createLauncherIcon(document, (window as any).kommunicate || {});\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default KommunicateChat;\r\n","import { Route, Switch, withRouter } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./screens/Home\";\r\nimport SignUp from \"./screens/SignUp\";\r\nimport SignIn from \"./screens/SignIn\";\r\nimport LogOut from \"./components/LogOut\";\r\nimport CreatePlantForm from \"./screens/CreatePlantForm\";\r\nimport PlantDetails from \"./screens/PlantDetails\";\r\nimport UpdatePlantForm from \"./screens/UpdatePlantForm\";\r\nimport CheckoutPage from \"./screens/CheckoutPage\";\r\nimport RequestsPage from \"./screens/RequestsPage\";\r\nimport RepliesPage from \"./screens/RepliesPage\";\r\nimport CreateRequestForm from \"./screens/CreateRequestForm\";\r\nimport RequestDetails from \"./screens/RequestDetails\";\r\nimport ReplyDetails from \"./screens/ReplyDetails\";\r\nimport UpdateRequestForm from \"./screens/UpdateRequestForm\";\r\nimport Unauthorized from \"./screens/Unauthorized\";\r\nimport NotFound from \"./screens/NotFound\";\r\nimport KommunicateChat from \"./components/Chat\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <div className=\"main\">\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n\r\n        <Route path=\"/auth/sign-up\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/auth/sign-in\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/auth/log-out\">\r\n          <LogOut />\r\n        </Route>\r\n        <Route path=\"/auth/unauthorized\">\r\n          <Unauthorized />\r\n        </Route>\r\n\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/fetch/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n\r\n        <Route path=\"/messages/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/messages/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch-all\">\r\n          <RequestsPage />\r\n        </Route>\r\n        <Route path=\"/requests/fetch/:messageId\">\r\n          <RequestDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/replies/fetch-all\">\r\n          <RepliesPage />\r\n        </Route>\r\n        <Route path=\"/replies/fetch/:messageId\">\r\n          <ReplyDetails />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"./reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}