{"version":3,"sources":["Reducer/jungleSwapSlice.js","config.js","components/NavBar.js","components/Footer.js","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/Home.js","components/SignUp.js","components/SignIn.js","components/LogOut.js","components/CreatePlantForm.js","components/PlantDetails.js","components/UpdatePlantForm.js","components/CheckoutForm.js","components/CheckoutPage.js","components/RequestsPage.js","components/CreateRequestForm.js","components/RequestDetails.js","components/UpdateRequestForm.js","components/NotFound.js","components/Chat.js","App.js","store.js","index.js"],"names":["rootPath","process","fetchAllPlants","createAsyncThunk","options","a","dispatch","axios","get","response","setPlants","data","console","log","fetchQueryPlants","query","err","createPlant","uploadForm","name","description","size","location","price","post","imageUrl","imagePublicId","newPlant","value","withCredentials","addPlant","setError","error","readPlant","plantId","setPlant","imageChange","destroyImageData","image","plant","FormData","append","clonePlant","JSON","parse","stringify","updatePlant","updatedPlant","patch","setPlantChanges","deletePlant","delete","removePlant","createPayment","setClientSecret","payPlant","fetchAllRequests","setRequests","createRequest","newRequest","addRequest","readRequest","requestId","setRequest","updateRequest","updatedRequest","setRequestChanges","deleteRequest","removeRequest","readUser","setLoggedInUser","setIsFetchingUser","signUp","newUser","signIn","user","logOut","jungleSwapSlice","createSlice","initialState","isFetchingUser","loggedInUser","isUserChange","plants","requests","request","amountOfRequests","isNewRequest","intervalId","minutesCounter","headerContainerHeight","aboutContainerHeight","clientSecret","reducers","state","action","payload","push","_id","map","singlePlant","filter","buyer","seller","message","reply","singleRequest","setAmountOfRequests","setIsNewRequest","setIntervalId","setMinutesCounter","increaseMinutesCounter","decreaseAmountOfRequests","setIsUserChange","setHeaderContainerHeight","setAboutContainerHeight","scrollToAbout","scroll","scrollTo","scrollToPlants","actions","setPaymentPromise","NavBar","useSelector","jungleSwap","useDispatch","useEffect","clearInterval","currentRequest","length","setInterval","currentAmountOfRequests","Navbar","className","variant","expand","fixed","Brand","to","onClick","scrollToTop","Toggle","aria-controls","Collapse","id","Nav","title","username","Footer","href","Home","useState","setQuery","Math","round","document","querySelector","getBoundingClientRect","height","class","role","src","alt","icon","type","placeholder","onChange","event","target","SignUp","history","useHistory","onSubmit","preventDefault","email","password","toLowerCase","htmlFor","formnovalidate","SignIn","LogOut","CreatePlantForm","plantImage","files","min","PlantDetails","useParams","creator","handleDeletePlant","UpdatePlantForm","handlePlantEntryChange","itemNumber","handleImageChange","handleUpdatePlant","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","handleChange","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","disabled","promise","loadStripe","CheckoutPage","RequestsPage","handleResetAll","CreateRequestForm","handleCreateRequest","cols","rows","RequestDetails","handleDeleteRequest","UpdateRequestForm","cloneRequest","handleCreateReply","handleUpdateRequest","NotFound","KommunicateChat","d","m","s","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","withRouter","exact","path","component","store","configureStore","reducer","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6595b50e.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, current } from \"@reduxjs/toolkit\";\r\nimport config from \"../config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\n\r\nconst initialState = {\r\n  isFetchingUser: true,\r\n  loggedInUser: null,\r\n  isUserChange: false,\r\n  plants: [],\r\n  plant: {},\r\n  requests: [],\r\n  request: {},\r\n  amountOfRequests: 0,\r\n  isNewRequest: false,\r\n  intervalId: null,\r\n  minutesCounter: 0,\r\n  headerContainerHeight: 0,\r\n  aboutContainerHeight: 0,\r\n  clientSecret: \"\",\r\n  error: null\r\n}\r\n\r\n\r\nconst rootPath = `${config.API_URL}/api`;\r\n\r\n// --------- Plants ---------\r\n// Fetch all plants\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungeSwap/fetchAllPlants\",\r\n  async (options, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(`${rootPath}/plants/fetch`);\r\n      dispatch(setPlants(response.data));\r\n    }\r\n    catch (err) {\r\n      console.log(\"Fetching plants failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch query plants\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungeSwap/fetchQueryPlants\",\r\n  async (query, { dispatch }) => {\r\n    try {\r\n      const response = axios.get(`${rootPath}/plants/search?q=${query}`);\r\n      dispatch(setPlants(response.data));\r\n    }\r\n    catch (err) {\r\n      console.log(\"Fetching query plants failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungeSwap/createPlant\",\r\n  async (uploadForm, { name, description, size, location, price }, { dispatch }) => {\r\n    try {\r\n      let response = await axios.post(\r\n        `${rootPath}/upload`,\r\n        uploadForm\r\n      );\r\n      const { imageUrl, imagePublicId } = response.data;\r\n      const newPlant = {\r\n        name: name.value,\r\n        description: description.value,\r\n        size: size.value,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location: location.value,\r\n        price: price.value\r\n      };\r\n      try {\r\n        response = await axios.post(\r\n          `${rootPath}/plants/create`,\r\n          newPlant,\r\n          { withCredentials: true }\r\n        );\r\n        dispatch(addPlant(response.data));\r\n      }\r\n      catch (err) {\r\n        dispatch(setError(err.response.data.error));\r\n      }\r\n    }\r\n    catch (err) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Read plant\r\nexport const readPlant = createAsyncThunk(\r\n  \"jungeSwap/readPlant\",\r\n  async (plantId, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${rootPath}/plants/read/${plantId}`,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setPlant(response.data));\r\n    }\r\n    catch {\r\n      console.log(\"Read plant failed\");\r\n    }\r\n  }\r\n);\r\n\r\n// Plant image change\r\nexport const imageChange = createAsyncThunk(\r\n  \"jungleSwap/imageChange\",\r\n  async (destroyImageData, image, plant, { dispatch }) => {\r\n    try {\r\n      await axios.post(\r\n        `${rootPath}/destroy`,\r\n        destroyImageData\r\n      );\r\n      try {\r\n        const uploadForm = new FormData();\r\n        uploadForm.append(\"image\", image);\r\n        const response = await axios.post(\r\n          `${rootPath}/upload`,\r\n          uploadForm\r\n        );\r\n        const { imagePublicId, imageUrl } = response.data;\r\n        const clonePlant = JSON.parse(JSON.stringify(plant));\r\n        clonePlant.imagePublicId = imagePublicId;\r\n        clonePlant.imageUrl = imageUrl;\r\n        dispatch(setPlant(clonePlant));\r\n      }\r\n      catch (err) {\r\n        console.log(\"Image upload failed\", err);\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.log(\"Delete old image failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Update plant\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async (plantId, updatedPlant, { dispatch }) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${rootPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      dispatch(setPlantChanges(response.data));\r\n    }\r\n    catch (err) {\r\n      console.log(\"Update plant failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete Plant\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (imagePublicId, plantId, { dispatch }) => {\r\n    try {\r\n      const destroyImageData = {\r\n        imagePublicId\r\n      }\r\n      await axios.post(\r\n        `${rootPath}/destroy`,\r\n        destroyImageData\r\n      );\r\n      try {\r\n        await axios.delete(`${rootPath}/plants/delete/${plantId}`);\r\n        dispatch(removePlant(plantId));\r\n      }\r\n      catch (err) {\r\n        console.log(\"Delete plant failed\", err);\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.log(\"Delete image failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant payment\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant, { dispatch }) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${rootPath}/create-payment-intent`,\r\n        { price: plant.price }\r\n      );\r\n      dispatch(setClientSecret(response.data));\r\n    }\r\n    catch (err) {\r\n      console.log(\"Create payment failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Pay plant\r\nexport const payPlant = createAsyncThunk(\r\n  \"jungleSwap/payPlant\",\r\n  async (options, { dispatch }) => {\r\n    try {\r\n      await axios.post(\r\n        `${rootPath}/create-payment-intent`,\r\n        {},\r\n        { withCredentials: true }\r\n      );\r\n    }\r\n    catch (err) {\r\n      console.log(\"Checkout failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// --------- Requests ----------\r\n// Fetch all requests\r\nexport const fetchAllRequests = createAsyncThunk(\r\n  \"jungleSwap/fetchAllRequests\",\r\n  async (options, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(`${rootPath}/requests/fetch`);\r\n      dispatch(setRequests(response.data));\r\n    }\r\n    catch (err) {\r\n      console.log(\"Fetching requests failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create request\r\nexport const createRequest = createAsyncThunk(\r\n  \"jungleSwap/createRequest\",\r\n  async (newRequest, { dispatch }) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${rootPath}/requests/create`,\r\n        newRequest,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(addRequest(response.data));\r\n    }\r\n    catch (err) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Read request\r\nexport const readRequest = createAsyncThunk(\r\n  \"jungleSwap/readRequest\",\r\n  async (requestId, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${rootPath}/requests/read/${requestId}`,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setRequest(response.data));\r\n    }\r\n    catch {\r\n      console.log(\"Read request failed\");\r\n    }\r\n  }\r\n);\r\n\r\n// Update request\r\nexport const updateRequest = createAsyncThunk(\r\n  \"jungleSwap/updateRequest\",\r\n  async (requestId, updatedRequest, { dispatch }) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${rootPath}/requests/update/${requestId}`,\r\n        updatedRequest\r\n      );\r\n      dispatch(setRequestChanges(response.data));\r\n    }\r\n    catch (err) {\r\n      console.log(\"Update request failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete request\r\nexport const deleteRequest = createAsyncThunk(\r\n  \"jungleSwap/deleteRequest\",\r\n  async (requestId, { dispatch }) => {\r\n    try {\r\n      await axios.delete(`${rootPath}/requests/delete/${requestId}`);\r\n      dispatch(removeRequest(requestId));\r\n    }\r\n    catch (err) {\r\n      console.log(\"Delete request failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// ---------- User authentification ----------\r\n// Read user\r\nexport const readUser = createAsyncThunk(\r\n  \"jungeSwap/readUserData\",\r\n  async (options, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${rootPath}/user`,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsFetchingUser(false));\r\n    }\r\n    catch (err) {\r\n      console.log(\"Initializing fetching failed\", err);\r\n      dispatch(setIsFetchingUser(false));\r\n    }\r\n  }\r\n);\r\n\r\n// Sign up\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (newUser, { dispatch }) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${rootPath}/signup`,\r\n        newUser\r\n      );\r\n      dispatch(setLoggedInUser(response.data));\r\n    }\r\n    catch (err) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Sign in\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async (user, { dispatch }) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${rootPath}/signin`,\r\n        user,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setLoggedInUser(response.data));\r\n    }\r\n    catch (err) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// LogOut\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (options, { dispatch }) => {\r\n    try {\r\n      await axios.post(\r\n        `${rootPath}/logout`,\r\n        {},\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setLoggedInUser(null));\r\n\r\n    }\r\n    catch (err) {\r\n      console.log(\"Logout failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n\r\n// ---------- Slices -----------\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n  reducers: {\r\n\r\n    // --------- Plants ----------\r\n    setPlants: (state, action) => {\r\n      state.plants = action.payload;\r\n    },\r\n    setPlant: (state, action) => {\r\n      state.plant = action.payload;\r\n    },\r\n    addPlant: (state, action) => {\r\n      state.plants.push(action.payload);\r\n    },\r\n    setPlantChanges: (state, action) => {\r\n      const { _id, name, description, size, imageUrl, imagePublicId, location, price } = action.payload;\r\n      state.plants = state.plants.map(\r\n        singlePlant => {\r\n          if (singlePlant._id === _id) {\r\n            singlePlant.name = name;\r\n            singlePlant.description = description;\r\n            singlePlant.size = size;\r\n            singlePlant.imageUrl = imageUrl;\r\n            singlePlant.imagePublicId = imagePublicId;\r\n            singlePlant.location = location;\r\n            singlePlant.price = price;\r\n          }\r\n          return singlePlant;\r\n        }\r\n      );\r\n    },\r\n    removePlant: (state, action) => {\r\n      state.plants = state.plants.filter(plant => plant._id !== action.payload);\r\n    },\r\n    setClientSecret: (state, action) => {\r\n      state.clientSecret = action.payload;\r\n    },\r\n\r\n    // ---------- Requests ----------\r\n    setRequests: (state, action) => {\r\n      state.requests = action.payload;\r\n    },\r\n    setRequest: (state, action) => {\r\n      state.request = action.payload;\r\n    },\r\n    addRequest: (state, action) => {\r\n      state.requests.push(action.payload);\r\n    },\r\n    setRequestChanges: (state, action) => {\r\n      const { _id, buyer, seller, plant, message, reply } = action.payload;\r\n      state.requests = state.requests.map(\r\n        singleRequest => {\r\n          if (singleRequest._id === _id) {\r\n            singleRequest.buyer = buyer;\r\n            singleRequest.seller = seller;\r\n            singleRequest.plant = plant;\r\n            singleRequest.message = message;\r\n            singleRequest.reply = reply;\r\n          }\r\n          return singleRequest;\r\n        }\r\n      )\r\n    },\r\n    removeRequest: (state, action) => {\r\n      state.requests = state.requests.filter(request => request._id !== action.payload);\r\n    },\r\n    setAmountOfRequests: (state, action) => {\r\n      state.amountOfRequests = action.payload;\r\n    },\r\n    setIsNewRequest: (state, action) => {\r\n      state.isNewRequest = action.payload;\r\n    },\r\n    setIntervalId: (state, action) => {\r\n      state.intervalId = action.payload;\r\n    },\r\n    setMinutesCounter: (state, action) => {\r\n      state.minutesCounter = action.payload;\r\n    },\r\n    increaseMinutesCounter: (state, action) => {\r\n      let minutesCounter = state.minutesCounter;\r\n      minutesCounter += 1;\r\n      state.minutesCounter = minutesCounter;\r\n    },\r\n    decreaseAmountOfRequests: (state, action) => {\r\n      let amountOfRequests = state.amountOfRequests;\r\n      amountOfRequests -= 1;\r\n      state.amountOfRequests = amountOfRequests;\r\n    },\r\n\r\n\r\n    // ---------- User authentification ----------\r\n    setLoggedInUser: (state, action) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n    setIsFetchingUser: (state, action) => {\r\n      state.isFetchingUser = action.payload;\r\n    },\r\n    setIsUserChange: (state, action) => {\r\n      state.isUserChange = action.payload;\r\n    },\r\n    setError: (state, action) => {\r\n      state.error = action.payload;\r\n    },\r\n\r\n    // ---------- HTML elements ----------\r\n    setHeaderContainerHeight: (state, action) => {\r\n      state.headerContainerHeight = action.payload;\r\n    },\r\n    setAboutContainerHeight: (state, action) => {\r\n      state.aboutContainerHeight = action.payload;\r\n    },\r\n    scrollToAbout: (state, action) => {\r\n      scroll.scrollTo(state.headerContainerHeight);\r\n    },\r\n    scrollToPlants: (state, action) => {\r\n      scroll.scrollTo((state.headerContainerHeight + state.aboutContainerHeight));\r\n    },\r\n\r\n  }\r\n});\r\n\r\nexport const {\r\n\r\n  // ----------- Plants ----------\r\n  setPlants,\r\n  setPlant,\r\n  addPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n  setPaymentPromise,\r\n  setClientSecret,\r\n\r\n  // ---------- Requests ----------\r\n  setRequests,\r\n  setRequest,\r\n  addRequest,\r\n  setRequestChanges,\r\n  removeRequest,\r\n  setAmountOfRequests,\r\n  setIsNewRequest,\r\n  setIntervalId,\r\n  setMinutesCounter,\r\n  increaseMinutesCounter,\r\n  decreaseAmountOfRequests,\r\n\r\n  // ---------- User authentification ----------\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n  setIsUserChange,\r\n  setError,\r\n\r\n  // ---------- HTML elements ----------\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;","export default {API_URL: process.env.REACT_APP_SERVER_URL};","import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { fetchAllRequests, setIsUserChange, setIntervalId, increaseMinutesCounter, setMinutesCounter, setAmountOfRequests, setIsNewRequest, scrollToPlants } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst NavBar = () => {\r\n  const loggedInUser = useSelector(state => state.jungleSwap.loggedInUser);\r\n  const isUserChange = useSelector(state => state.jungleSwap.isUserChange);\r\n  const requests = useSelector(state => state.jungleSwap.requests);\r\n  const isNewRequest = useSelector(state => state.jungleSwap.isNewRequest);\r\n  const intervalId = useSelector(state => state.jungleSwap.intervalId);\r\n  const minutesCounter = useSelector(state => state.jungleSwap.minutesCounter);\r\n  const amountOfRequests = useSelector(state => state.jungleSwap.amountOfRequests);\r\n  const dispatch = useDispatch();\r\n\r\n  // Stop interval at cleanup\r\n  useEffect(\r\n    () => {\r\n      return () => {\r\n        if (intervalId) {\r\n          clearInterval(intervalId);\r\n          dispatch(setIntervalId(null));\r\n          dispatch(setMinutesCounter(0));\r\n        }\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  // Start request check if user changes\r\n  useEffect(\r\n    () => {\r\n      if (isUserChange) {\r\n        dispatch(fetchAllRequests());\r\n        dispatch(setAmountOfRequests(requests.filter(currentRequest => currentRequest.seller._id === loggedInUser._id).length));\r\n        dispatch(setIntervalId(setInterval(\r\n          () => dispatch(increaseMinutesCounter()),\r\n          10000 // every minute\r\n        )));\r\n        dispatch(setIsUserChange(false));\r\n      }\r\n    },\r\n    [loggedInUser]\r\n  );\r\n\r\n  // Check new requests for logged in user every minute\r\n  useEffect(\r\n    () => {\r\n      dispatch(fetchAllRequests());\r\n      const currentAmountOfRequests = requests.filter(currentRequest => currentRequest.seller._id === loggedInUser._id).length;\r\n      if (amountOfRequests < currentAmountOfRequests) {\r\n        dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n        dispatch(setIsNewRequest(true));\r\n      }\r\n    },\r\n    [minutesCounter]\r\n  );\r\n  \r\n  return (\r\n    <div>\r\n      <Navbar className=\"pl-5\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\r\n        <Navbar.Brand> <Link to=\"/\" onClick={scroll.scrollToTop}> JungleSwap </Link> </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <div>\r\n              <Link to=\"/\" className=\"p-2\" onClick={() => dispatch(scrollToPlants())}> All Plants </Link>\r\n            </div>\r\n            {\r\n              loggedInUser && (\r\n                <div>\r\n                  <Link className=\"p-2\" to=\"/plants/create\"> Create Plant </Link>\r\n                  <Link className={isNewRequest ? \"p-2 alertColor\" : \"p-2\"} to=\"/requests/fetch\" title={isNewRequest ? \"new message\" : null}> Messages </Link>\r\n                </div>\r\n              )\r\n            }\r\n            {\r\n              loggedInUser ? (\r\n                <div>\r\n                  <Link className=\"p-2\" to=\"/logout\" title={loggedInUser.username}> Log out </Link>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <Link className=\"p-2\" to=\"/signin\"> Sign in </Link>\r\n                  <Link className=\"p-2\" to=\"/signup\"> Sign up </Link>\r\n                </div>\r\n              )\r\n            }\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer-row\">\r\n      <footer>\r\n        © 2021\r\n        <Link href=\"https://www.linkedin.com/in/christian-gerbig/\"> Christian Gerbig </Link>\r\n        &\r\n        <Link href=\"https://www.linkedin.com/in/lisa-montebaur/\"> Lisa Montebaur </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchAllPlants, fetchQueryPlants, readUser, setHeaderContainerHeight, setAboutContainerHeight, scrollToAbout } from \"../Reducer/jungleSwapSlice\";\r\nimport image from \"../images/JungleSwap_Home.png\";\r\nimport icon from \"../images/JungleSwap_Icon.png\";\r\n\r\nconst Home = () => {\r\n  const isFetchingUser = useSelector(state => state.jungleSwap.isFetchingUser);\r\n  const loggedInUser = useSelector(state => state.jungleSwap.loggedInUser);\r\n  const plants = useSelector(state => state.jungleSwap.plants);\r\n  const [query, setQuery] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  // Load plants and user data as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(fetchAllPlants());\r\n      !loggedInUser && dispatch(readUser());\r\n      const headerContainerHeight = Math.round(document.querySelector(\"#titleId\").getBoundingClientRect().height);\r\n      dispatch(setHeaderContainerHeight(headerContainerHeight));\r\n      const aboutContainerHeight = Math.round(document.querySelector(\"#aboutId\").getBoundingClientRect().height);\r\n      dispatch(setAboutContainerHeight(aboutContainerHeight));\r\n    },\r\n    []\r\n  );\r\n\r\n  // Handle plant search result if user types in query\r\n  useEffect(\r\n    () => {\r\n      dispatch(fetchQueryPlants(query));\r\n      query ? dispatch(fetchQueryPlants(query)) : dispatch(fetchAllPlants())\r\n    },\r\n    [query]\r\n  );\r\n\r\n  // Search plant\r\n  const handleSearchPlant = event => setQuery(event.target.value)\r\n\r\n  return (\r\n    <div>\r\n\r\n      {!plants && (\r\n        <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span class=\"visually-hidden\"> <br /> <br /> Loading plants... </span>\r\n        </div>\r\n      )}\r\n\r\n      {isFetchingUser && (\r\n        <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span class=\"visually-hidden\"> <br /> <br /> Loading user data... </span>\r\n        </div>\r\n      )}\r\n\r\n      <header className=\"text-center pt-5 pb-5 headerImg\" id=\"titleId\">\r\n        <div className=\"row my-5\">\r\n          <div className=\"col-6 offset-3 my-5 borderAround\">\r\n            <h2 className=\"title mb-2\"> JungleSwap </h2>\r\n            <h5 className=\"mt-3 mb-5\"> Share your green heart </h5>\r\n            <div className=\"mb-5\">\r\n              <Link className=\"biggerFontSize\" onClick={() => dispatch(scrollToAbout())}> Try it! </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <section id=\"aboutId\">\r\n        <div className=\"about centered container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n              <img className=\"image\" src={image} alt=\"plants\" />\r\n            </div>\r\n            <br />\r\n            <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 noOverflow\">\r\n              <h4> Welcome to JungleSwap! </h4>\r\n              <h5> Add green to your Home </h5>\r\n              <p> It\"s easy-peasy. <br />\r\n                Share your plant offshoots. <br />\r\n                Make money! <br />\r\n                Or swap them for another plant. <br />\r\n                Don\"t have any baby plants? <br />\r\n                You can simply shop and give a plant a new home.\r\n              </p>\r\n              <img className=\"icon\" src={icon} alt=\"icon\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section>\r\n        <div className=\"container mt-5\">\r\n          <div className=\"mt-5 mb-3\">\r\n            <h2> Plants </h2>\r\n            <hr />\r\n            <h4> Search a plant </h4>\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <input className=\"smallWidth form-control\" type=\"text\" placeholder=\"Search...\" value={query} onChange={handleSearchPlant} />\r\n          </div>\r\n          <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n            {\r\n              plants && (\r\n                plants.map(\r\n                  plant => {\r\n                    const { _id, name, imageUrl, price } = plant;\r\n                    return (\r\n                      <div className=\"col mb-5\" key={_id}>\r\n                        <div className=\"card card-medium-width text-center h-100\">\r\n                          <img className=\"card-img-top mediumPicSize\" src={imageUrl} alt={name} />\r\n                          <div className=\"card-body mb-5\">\r\n                            <h5> {name} </h5>\r\n                            <p> {price} € </p>\r\n                            <Link className=\"btn btn-outline-dark\" to={`/plants/read/${_id}`}> Details </Link>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  }\r\n                )\r\n              )\r\n            }\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React, { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { setError, setIsNewRequest, signUp, setIsUserChange } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst SignUp = () => {\r\n  const error = useSelector(state => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(setError(null));\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    },\r\n    []\r\n  );\r\n\r\n  // Sign up\r\n  const handleSignUp = event => {\r\n    event.preventDefault();\r\n    const { username, email, password } = event.target;\r\n    const newUser = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value\r\n    };\r\n    dispatch(signUp(newUser));\r\n    dispatch(setIsUserChange(true));\r\n    history.push(\"/\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign Up </h2>\r\n        <form onSubmit={handleSignUp}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\"> Username </label>\r\n            <input type=\"text\" className=\"form-control\" id=\"InputUsername\" name=\"username\" />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input type=\"email\" className=\"form-control\" id=\"InputEmail\" name=\"email\" />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input name=\"password\" type=\"password\" className=\"form-control\" id=\"InputPassword\" />\r\n          </div>\r\n          {error && (<p className=\"warningColor\"> {error} </p>)}\r\n          <button type=\"submit\" className=\"btn btn-primary mt-4 btn-outline-dark\" formnovalidate=\"formnovalidate\"> Sign up </button>\r\n          <p className=\"padding\"> Already have an account? </p>\r\n          <Link to={\"/signin\"}> Sign in </Link>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUp;","import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { setError, setIsNewRequest, signIn, setIsUserChange } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst SignIn = () => {\r\n  const error = useSelector(state => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(setError(null));\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    },\r\n    []\r\n  );\r\n\r\n  // Sign in\r\n  const handleSignIn = event => {\r\n    event.preventDefault();\r\n    dispatch(setIsUserChange(true));\r\n    const { email, password } = event.target;\r\n    const user = {\r\n      email: email.value,\r\n      password: password.value\r\n    };\r\n    dispatch(signIn(user));\r\n    history.push(\"/\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign In </h2>\r\n        <form onSubmit={handleSignIn}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input type=\"email\" className=\"form-control\" id=\"InputEmail\" name=\"email\" />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input name=\"password\" type=\"password\" className=\"form-control\" id=\"InputPassword\" />\r\n          </div>\r\n          {error && (<p className=\"warningColor\"> {error} </p>)}\r\n          <button type=\"submit\" className=\"btn btn-primary mt-4 btn-outline-dark\" formnovalidate=\"formnovalidate\"> Sign in </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignIn;","import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { logOut, setIsNewRequest, setIntervalId, setMinutesCounter } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst LogOut = () => {\r\n  const intervalId = useSelector(state => state.jungleSwap.intervalId);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Log out, stop interval, reset variables and scroll to top as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(logOut());\r\n      clearInterval(intervalId);\r\n      dispatch(setIntervalId(null));\r\n      dispatch(setMinutesCounter(0));\r\n      dispatch(setIsNewRequest(false));\r\n      history.push(\"/\");\r\n      scroll.scrollToTop();\r\n    },\r\n    []\r\n  );\r\n\r\n  return (<div />);\r\n}\r\n\r\nexport default LogOut;","import React, { useEffect } from \"react\";\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { createPlant, setError, scrollToPlants } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst CreatePlantForm = () => {\r\n  const loggedInUser = useSelector(state => state.jungleSwap.loggedInUser);\r\n  const error = useSelector(state => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads and scroll to plants section during cleanup\r\n  useEffect(\r\n    () => {\r\n      dispatch(setError(null));\r\n      scroll.scrollToTop();\r\n      return () => dispatch(scrollToPlants);\r\n    },\r\n    []\r\n  );\r\n\r\n  // Create plant\r\n  const handleCreatePlant = event => {\r\n    event.preventDefault();\r\n    const { plantImage } = event.target;\r\n    const image = plantImage.files[0];\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    dispatch(createPlant(uploadForm, event.target));\r\n    history.push(\"/\");\r\n  }\r\n\r\n  if (!loggedInUser) return (<Redirect to={\"/signup\"} />);\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-6\">\r\n        <h2 className=\"mb-5\"> Create a plant </h2>\r\n        <form onSubmit={handleCreatePlant}>\r\n          <input className=\"mb-4\" name=\"name\" type=\"text\" placeholder=\"Enter name\" />\r\n          <input className=\"mb-4\" name=\"description\" type=\"text\" placeholder=\"Enter description\" />\r\n          <input className=\"mb-4 smallWidth\" name=\"size\" type=\"number\" min=\"1\" placeholder=\"Size\" /> cm <br />\r\n          <select className=\"mb-4 p-1\" name=\"location\" type=\"text\">\r\n            <option> Select location </option>\r\n            <option value=\"sun\"> sun </option>\r\n            <option value=\"shade\"> shade </option>\r\n            <option value=\"sun and shade\"> sun and shade </option>\r\n          </select>\r\n          <br />\r\n          <input className=\"mb-4 smallWidth\" name=\"price\" type=\"number\" min=\"1\" placeholder=\"Price\" /> € <br />\r\n          <input className=\"mb-4\" name=\"plantImage\" type=\"file\" />\r\n          {error && (<p className=\"warningColor\"> {error} </p>)}\r\n          <div className=\"col-12\">\r\n            <button className=\"btn btn-sm btn-outline-dark\" type=\"submit\" > Create </button>\r\n            <Link to={\"/\"}> <button className=\"btn btn-sm mx-5\"> Go back </button> </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreatePlantForm;","import React, { useEffect } from \"react\";\r\nimport { Link, Redirect, useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { readPlant, deletePlant, scrollToPlants } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst PlantDetails = () => {\r\n  const loggedInUser = useSelector(state => state.jungleSwap.loggedInUser);\r\n  const plant = useSelector(state => state.jungleSwap.plant);\r\n  const { plantId } = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read plant data and scroll to top as soon as page loads  \r\n  useEffect(\r\n    () => {\r\n      dispatch(readPlant(plantId));\r\n      scroll.scrollToTop();\r\n    },\r\n    []\r\n  );\r\n\r\n  // Delete plant\r\n  const handleDeletePlant = (imagePublicId, plantId) => {\r\n    dispatch(deletePlant(imagePublicId, plantId));\r\n    history.push(\"/\");\r\n    dispatch(scrollToPlants());\r\n  }\r\n\r\n  if (!loggedInUser) return (<Redirect to={\"/signup\"} />);\r\n\r\n  const { _id, name, description, size, imageUrl, imagePublicId, location, price, creator } = plant;\r\n  if (!creator) return (\r\n    <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n      <span class=\"visually-hidden\"> <br/> <br/> Loading plant details... </span>\r\n    </div>\r\n  );\r\n\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2> Plant details </h2>\r\n      </div>\r\n      <div className=\"col\">\r\n        <div className=\"card cardMediumWidth\">\r\n          {imageUrl && (<img className=\"card-img-top mediumPicSize\" src={imageUrl} alt={name} />)}\r\n          <div className=\"ml-2 mt-2\"> <span> Name: </span> {name} </div>\r\n          <div className=\"ml-2 mt-2\"> <span> Description: </span> {description} </div>\r\n          <div className=\"ml-2 mt-2\"> <span> Size: </span> {size} cm </div>\r\n          <div className=\"ml-2 mt-2\"> <span> Likes: </span> {location} </div>\r\n          <div className=\"ml-2 mt-2\"> <span> Price: </span> {price} € </div>\r\n          <div className=\"ml-2 mt-2 col justify-content-center\">\r\n            <div className=\"row-2 justify-content-center\">\r\n              <div className=\"card-body\">\r\n                {\r\n                  loggedInUser._id === creator._id ? (\r\n                    <div>\r\n                      <Link to={\"/plants/update\"}> <button className=\"btn btn-sm ml-2 btn-outline-dark\"> Update </button> </Link>\r\n                      <button className=\"btn btn-sm ml-2 btn-outline-dark\" onClick={() => handleDeletePlant(imagePublicId, _id)}> Delete </button>\r\n                    </div>\r\n                  ) : (\r\n                    <div>\r\n                      <Link to=\"/plants/checkout\"> <button className=\"btn btn-sm ml-2 btn-outline-dark\"> Buy </button> </Link>\r\n                      <Link to=\"/requests/create\"> <button className=\"btn btn-sm ml-2 btn-outline-dark\"> Swap </button> </Link>\r\n                    </div>\r\n                  )\r\n                }\r\n                <Link to={\"/\"} onClick={() => dispatch(scrollToPlants())}> <button className=\"btn btn-sm ml-2\"> Go back </button> </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlantDetails;","import React, { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { imageChange, updatePlant, setPlant, scrollToPlants } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst UpdatePlantForm = () => {\r\n  const plant = useSelector(state => state.jungleSwap.plant);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(\r\n    () => scroll.scrollToTop(),\r\n    []\r\n  );\r\n\r\n  // Check which plant values changed\r\n  const handlePlantEntryChange = ({ target }, plant, itemNumber) => {\r\n    const clonePlant = JSON.parse(JSON.stringify(plant));\r\n    // eslint-disable-next-line default-case\r\n    switch (itemNumber) {\r\n      case 0:\r\n        clonePlant.name = target.value;\r\n        break;\r\n      case 1:\r\n        clonePlant.description = target.value;\r\n        break;\r\n      case 2:\r\n        clonePlant.size = target.value;\r\n        break;\r\n      case 3:\r\n        clonePlant.location = target.value;\r\n        break;\r\n      case 4:\r\n        clonePlant.price = target.value;\r\n    }\r\n    dispatch(setPlant(clonePlant));\r\n  }\r\n\r\n  // Plant image changed\r\n  const handleImageChange = ({ target }, plant) => {\r\n    const image = target.files[0];\r\n    const { imagePublicId } = plant;\r\n    const destroyImageData = {\r\n      imagePublicId\r\n    }\r\n    dispatch(imageChange(destroyImageData, image, plant));\r\n  }\r\n\r\n  const handleUpdatePlant = ({ _id, name, description, size, imageUrl, imagePublicId, location, price }) => {\r\n    const updatedPlant = {\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price\r\n    };\r\n    dispatch(updatePlant(_id, updatedPlant));\r\n    history.push(\"/\");\r\n    dispatch(scrollToPlants());\r\n  }\r\n\r\n  const { _id, name, description, size, imageUrl, price } = plant;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> Update your plant </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <img className=\"mb-2 smallPicSize\" src={imageUrl} alt={name} />\r\n          <div className=\"card-body\">\r\n            <input className=\"mb-2\" onChange={event => handleImageChange(event, plant)} type=\"file\" />\r\n            <input className=\"mb-2\" type=\"text\" onChange={event => handlePlantEntryChange(event, plant, 0)} value={name} />\r\n            <input className=\"mb-2\" type=\"text\" onChange={event => handlePlantEntryChange(event, plant, 1)} value={description} />\r\n            <input className=\"mb-2 smallWidth\" type=\"number\" onChange={event => handlePlantEntryChange(event, plant, 2)} value={size} /> cm <br />\r\n            <select className=\"mb-2\" onChange={event => handlePlantEntryChange(event, plant, 3)} name=\"location\" type=\"text\" placeholder=\"Select\">\r\n              <option value=\"sun\"> sun </option>\r\n              <option value=\"shade\"> shade </option>\r\n              <option value=\"sun and shade\"> sun and shade </option>\r\n            </select> <br />\r\n            <input className=\"mb-4 smallWidth\" name=\"price\" type=\"number\" min=\"1\" onChange={event => handlePlantEntryChange(event, plant, 4)} value={price} /> €\r\n            <div className=\"row justify-content-around\">\r\n              <button className=\"btn btn-sm btn-outline-dark\" onClick={() => handleUpdatePlant(plant)}> Save changes </button>\r\n              <Link to={`/plants/read/${_id}`}> <button className=\"btn btn-sm mx-2\"> Go back </button> </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdatePlantForm;","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport { payPlant, createPayment, scrollToPlants } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst CheckoutForm = () => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(null);\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const clientSecret = useSelector(state => state.jungleSwap.clientSecret);\r\n  const plant = useSelector(state => state.jungleSwap.plant);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Create payment as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(createPayment(plant))\r\n      return () => {\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  // Card styling\r\n  const cardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" }\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\"\r\n      }\r\n    }\r\n  };\r\n\r\n  // Plant payment\r\n  const handlePayPlant = () => {\r\n    dispatch(payPlant);\r\n    history.push(\"/\");\r\n    dispatch(scrollToPlants());\r\n  }\r\n\r\n  // Listen for changes in Card element and display any errors as customer types card details\r\n  const handleChange = async event => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  // Submit payment\r\n  const handleSubmitPayment = async event => {\r\n    event.preventDefault();\r\n    setIsProcessing(true);\r\n    const payload = await stripe.confirmCardPayment(\r\n      clientSecret,\r\n      { payment_method: { card: elements.getElement(CardElement) } }\r\n    );\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    }\r\n    else {\r\n      setPaymentError(null);\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  }\r\n\r\n  const { _id, name, price } = plant;\r\n  return (\r\n    <div className=\"container col-9\">\r\n      <form className=\"checkoutForm mt-5\" id=\"payment-form\" onSubmit={handleSubmitPayment}>\r\n        <h2 className=\"text-center mb-2 p-2\"> {name} </h2>\r\n        <h3 className=\"text-center mb-4 p-2\"> {price} € </h3>\r\n        <CardElement\r\n          className=\"p-2\"\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button onClick={handlePayPlant} className=\"btn btn-sm mt-5 mb-4\" disabled={isProcessing || isDisabled || isSucceeded} id=\"submit\">\r\n            <span id=\"button-text\">\r\n              {isProcessing ? <div className=\"spinner\" id=\"spinner\" /> : \"Pay now\"}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {/* Show any error that happens when processing the payment */\r\n          paymentError && (<div className=\"card-error\" role=\"alert\"> {paymentError} </div>)\r\n        /* Show success message upon completion */}\r\n        <p className={isSucceeded ? \"result-message text-center\" : \"result-message hidden text-center\"}>\r\n          Payment succeeded.\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {\r\n          isSucceeded ? (\r\n            <Link to={\"/\"} onClick={() => dispatch(scrollToPlants())}> <button className=\"btn btn-sm\"> Go back </button> </Link>\r\n          )\r\n            : (\r\n              <Link to={`/plants/read/${_id}`}> <button className=\"btn btn-sm\"> Go back </button> </Link>\r\n            )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckoutForm;","import React, { useEffect } from \"react\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"./CheckoutForm\";\r\n\r\nconst promise = loadStripe(\"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\");\r\n\r\nconst CheckoutPage = () => {\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(\r\n    () => scroll.scrollToTop(),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5 App\">\r\n        <Elements stripe={promise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckoutPage;","import React, { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { fetchAllRequests, setIsNewRequest } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst RequestsPage = () => {\r\n  const loggedInUser = useSelector(state => state.jungleSwap.loggedInUser);\r\n  const requests = useSelector(state => state.jungleSwap.requests);\r\n  const amountOfRequests = useSelector(state => state.jungleSwap.amountOfRequests);\r\n  const dispatch = useDispatch();\r\n\r\n  // Fetch all requests and reset values as soon as page loads and reset values during cleanup\r\n  useEffect(\r\n    () => {\r\n      const handleResetAll = () => {\r\n        dispatch(setIsNewRequest(false));\r\n        scroll.scrollToTop();\r\n      }\r\n\r\n      dispatch(fetchAllRequests());\r\n      handleResetAll();\r\n      return () => handleResetAll()\r\n    },\r\n    []\r\n  );\r\n\r\n  if (!loggedInUser) return (<Redirect to={\"/signup\"} />);\r\n\r\n  if (!requests) return (\r\n    <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n      <span class=\"visually-hidden\"> <br/> <br/> Loading requests... </span>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 > Your messages </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <Link to={\"/\"}> <button className=\"btn btn-sm mt-4\"> Go back </button> </Link>\r\n        {\r\n          requests.map(\r\n            request => {\r\n              const { _id, buyer, seller, plant } = request;\r\n              return (\r\n                seller._id === loggedInUser._id && (\r\n                  <div className=\"card p-3 mt-4 \" key={_id}>\r\n                    <h4> Request for: {plant.name} </h4>\r\n                    <h5> by: {buyer.username} </h5>\r\n                    <div>\r\n                      <Link className=\"btn btn-outline-dark\" to={`/requests/read/${_id}`}> Details </Link>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              );\r\n            }\r\n          )\r\n        }\r\n        {amountOfRequests !== 0 && (<Link to={\"/\"}> <button className=\"btn btn-sm mt-4\"> Go back </button> </Link>)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RequestsPage;","import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { createRequest, setError } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst CreateRequestForm = () => {\r\n  const plant = useSelector(state => state.jungleSwap.plant);\r\n  const error = useSelector(state => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n\r\n  // Set variable and scroll to top as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(setError(null));\r\n      scroll.scrollToTop();\r\n    },\r\n    []\r\n  );\r\n\r\n  // Create request\r\n  const handleCreateRequest = (event, { _id, creator }) => {\r\n    event.preventDefault();\r\n    const { message } = event.target;\r\n    const newRequest = {\r\n      seller: creator._id,\r\n      plant: _id,\r\n      message: message.value\r\n    };\r\n    dispatch(createRequest(newRequest));\r\n  }\r\n\r\n  const { _id, name } = plant;\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\"> Your mesage </h2>\r\n        <h3 className=\"mb-4\"> {name} </h3>\r\n        <form onSubmit={(event) => handleCreateRequest(event, plant)}>\r\n          <div>\r\n            <textarea className=\"mb-4\" name=\"message\" cols=\"35\" rows=\"7\" />\r\n          </div>\r\n          {error && (<p className=\"warningColor\"> {error} </p>)}\r\n          <button className=\"btn btn-sm btn-outline-dark\" type=\"submit\"> Send </button>\r\n          <Link to={`/plants/read/${_id}`}> <button className=\"btn btn-sm mx-2\"> Go back </button> </Link>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateRequestForm;","import React, { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { readRequest, deleteRequest, decreaseAmountOfRequests } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst RequestDetails = () => {\r\n  const request = useSelector(state => state.jungleSwap.request);\r\n  const { requestId } = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read request and scroll to top as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(readRequest(requestId));\r\n      scroll.scrollToTop();\r\n    },\r\n    []\r\n  );\r\n\r\n  // Delete request\r\n  const handleDeleteRequest = requestId => {\r\n    dispatch(deleteRequest(requestId));\r\n    dispatch(decreaseAmountOfRequests());\r\n    history.push(\"/requests/fetch\");\r\n  }\r\n\r\n  const { _id, buyer, plant, message, reply } = request;\r\n  if (!buyer || !plant) return (\r\n    <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n      <span class=\"visually-hidden\"> <br/> <br/> Loading request... </span>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Your request </h2>\r\n        <h4> for: {plant.name} </h4>\r\n        <h5> by: {buyer.username} </h5>\r\n        <p> {message} </p>\r\n        {\r\n          reply && (\r\n            <div>\r\n              <h5> Your reply: </h5>\r\n              <p> {reply} </p>\r\n            </div>\r\n          )\r\n        }\r\n        <div>\r\n          {!reply && (<Link to={`/requests/update/${_id}`}> <button className=\"btn btn-sm ml-2 btn-outline-dark\"> Reply </button> </Link>)}\r\n          <button className=\"btn btn-sm ml-2 btn-outline-dark\" onClick={() => handleDeleteRequest(_id)}> Delete </button>\r\n        </div>\r\n        <Link to={\"/requests/fetch\"} onClick={scroll.scrollToTop}> <button className=\"btn btn-sm mt-4\"> Go back </button> </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RequestDetails;","import React, { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { setRequest, updateRequest } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst UpdateRequestForm = () => {\r\n  const request = useSelector(state => state.jungleSwap.request);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(\r\n    () => scroll.scrollToTop(),\r\n    []\r\n  );\r\n\r\n  // Create reply\r\n  const handleCreateReply = ({ target }, request) => {\r\n    const cloneRequest = JSON.parse(JSON.stringify(request));\r\n    cloneRequest.reply = target.value;\r\n    dispatch(setRequest(cloneRequest));\r\n  }\r\n\r\n  // Update request\r\n  const handleUpdateRequest = ({ _id, buyer, seller, plant, message, reply }) => {\r\n    const updatedRequest = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      message,\r\n      reply\r\n    };\r\n    dispatch(updateRequest(_id, updatedRequest));\r\n    history.push(`/requests/read/${_id}`);\r\n  }\r\n\r\n  const { _id, message } = request;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> Reply your request </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <div className=\"card-body\">\r\n            <p> {message} </p>\r\n            <textarea className=\"mb-4\" name=\"reply\" cols=\"31\" rows=\"6\" placeholder=\"Your reply\" onChange={event => handleCreateReply(event, request)} />\r\n            <div className=\"row justify-content-around\">\r\n              <button className=\"btn btn-sm btn-outline-dark\" onClick={() => handleUpdateRequest(request)}> Submit </button>\r\n              <Link to={`/requests/read/${_id}`}> <button className=\"btn btn-sm mx-2\"> Go back </button> </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdateRequestForm;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 404 Not Found </h3>\r\n        <Link to={\"/\"}> <button className=\"btn btn-sm ml-2\"> Take me home </button> </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;","import React, { useEffect } from \"react\";\r\n\r\nconst KommunicateChat = () => {\r\n  // Create launcher icon as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      (\r\n        (d, m) => {\r\n          const kommunicateSettings = {\r\n            \"appId\": \"10b22c52854a305b79bbdecc356bea5\",\r\n            \"popupWidget\": true,\r\n            \"automaticChatOpenOnNavigation\": true\r\n          };\r\n          const s = document.createElement(\"script\");\r\n          s.type = \"text/javascript\";\r\n          s.async = true;\r\n          s.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n          const h = document.getElementsByTagName(\"head\")[0];\r\n          h.appendChild(s);\r\n          window.kommunicate = m;\r\n          m._globals = kommunicateSettings;\r\n        }\r\n      )\r\n        (\r\n          document,\r\n          window.kommunicate || {}\r\n        );\r\n    },\r\n    []\r\n  );\r\n\r\n  return (<div />);\r\n}\r\n\r\nexport default KommunicateChat;","import React from \"react\";\r\nimport { Route, Switch, withRouter } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./components/Home\";\r\nimport SignUp from \"./components/SignUp\";\r\nimport SignIn from \"./components/SignIn\";\r\nimport LogOut from \"./components/LogOut\";\r\nimport CreatePlantForm from \"./components/CreatePlantForm\";\r\nimport PlantDetails from \"./components/PlantDetails\";\r\nimport UpdatePlantForm from \"./components/UpdatePlantForm\";\r\nimport CheckoutPage from \"./components/CheckoutPage\";\r\nimport RequestsPage from \"./components/RequestsPage\";\r\nimport CreateRequestForm from \"./components/CreateRequestForm\";\r\nimport RequestDetails from \"./components/RequestDetails\";\r\nimport UpdateRequestForm from \"./components/UpdateRequestForm\";\r\nimport NotFound from \"./components/NotFound\";\r\nimport KommunicateChat from \"./components/Chat\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div class=\"main\">\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/read/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch\">\r\n          <RequestsPage />\r\n        </Route>\r\n        <Route path=\"/requests/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/requests/read/:requestId\">\r\n          <RequestDetails />\r\n        </Route>\r\n        <Route path=\"/requests/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/signup\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/signin\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/logout\">\r\n          <LogOut />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(App);","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"./Reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({ reducer: {jungleSwap: jungleSwapSlice} });","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);"],"sourceRoot":""}