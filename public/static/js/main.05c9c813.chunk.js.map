{"version":3,"sources":["app/hooks.ts","reducer/jungleSwapSlice.ts","app/config.ts","app/custom-hooks/useHandleMessage.ts","app/custom-hooks/useIntervalCounter.ts","components/navigation/NavAuthentificationItems.tsx","components/navigation/NavUserItems.tsx","components/navigation/NavAdditionalItems.tsx","components/navigation/NavBar.tsx","components/Footer.tsx","lib/externalLinkPaths.ts","app/custom-hooks/useHandlePlant.ts","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/home/HomeAbout.tsx","components/spinners/WaitSpinner.tsx","components/plants/PlantSearch.tsx","components/plants/PlantThumbnail.tsx","components/plants/PlantsCollection.tsx","components/plants/PlantsCockpit.tsx","components/home/HomeTitle.tsx","views/home/Home.tsx","app/custom-hooks/useAuthentification.ts","components/helpers/ErrorMessage.tsx","views/authentification/SignUp.tsx","views/authentification/SignIn.tsx","components/authentification/LogOut.tsx","app/custom-hooks/useRouting.ts","app/custom-hooks/useHandlePlantImage.ts","views/plants/PlantCreateForm.tsx","components/plants/PlantDetailsBuyerChoice.tsx","components/plants/PlantDetailsCreatorChoice.tsx","components/plants/PlantDetailsUserChoice.tsx","components/plants/PlantItems.tsx","views/plants/PlantDetails.tsx","views/plants/PlantUpdateForm.tsx","components/apis/CheckoutForm.tsx","app/custom-hooks/useHandlePayment.ts","views/apis/CheckoutView.tsx","components/requests/RequestTile.tsx","components/requests/RequestsCollection.tsx","components/helpers/GoBackButton.tsx","app/custom-hooks/useNavigation.ts","views/requests/RequestsView.tsx","components/replies/ReplyTile.tsx","components/replies/RepliesCollection.tsx","views/replies/RepliesView.tsx","views/requests/RequestCreateForm.tsx","components/spinners/WaitSpinnerText.tsx","components/replies/Reply.tsx","views/requests/RequestDetails.tsx","views/replies/ReplyDetails.tsx","views/requests/RequestUpdateForm.tsx","views/authentification/Unauthorized.tsx","views/errors/NotFound.tsx","components/apis/KommunicateChat.tsx","components/plants/PlantsCreatedCollection.tsx","views/plants/PlantsCreatedView.tsx","components/modals/ModalBody.tsx","components/modals/ErrorModal.tsx","components/modals/OfflineModal.tsx","components/modals/Modals.tsx","app/custom-hooks/useOnlineStatus.ts","App.tsx","app/store.ts","app/locales/en.ts","app/i18n.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","apiPath","process","rejectWithValue","data","Error","signUp","createAsyncThunk","newUser","a","axios","post","response","error","signIn","user","withCredentials","logOut","checkUserLoggedIn","get","createPlant","newPlant","fetchAllPlants","fetchQueryPlants","query","fetchPlant","plantId","updatePlant","updatedPlant","patch","deletePlant","delete","uploadPlantImage","uploadForm","deletePlantImage","destroyImageData","createPayment","plant","price","createMessage","newMessage","fetchAllMessages","fetchMessage","messageId","updateMessage","updatedMessage","deleteMessage","jungleSwapSlice","createSlice","name","initialState","isUserChange","loggedInUser","isCreatingPlant","isFetchingPlants","isFetchingPlant","isUpdatingPlant","isDeletingPlant","plants","filteredPlants","numberOfVisibleEntries","isUploadingPlantImage","isDeletingPlantImage","clientSecret","isCreatingMessage","isFetchingMessages","isFetchingMessage","isUpdatingMessage","isDeletingMessage","messages","message","isNewRequest","isNewReply","amountOfRequests","amountOfReplies","intervalId","delayCounter","titleSectionHeight","aboutSectionHeight","errorMessage","reducers","setIsUserChange","state","payload","setLoggedInUser","setIsCreatingPlant","setIsFetchingPlants","setIsFetchingPlant","setIsUpdatingPlant","setIsDeletingPlant","addPlant","push","setPlant","setPlants","setFilteredPlants","setPlantChanges","_id","description","size","imageUrl","imagePublicId","location","map","singlePlant","removePlant","filter","setNumberOfVisibleEntries","setIsUploadingPlantImage","setIsDeletingPlantImage","setDestroyImageData","setClientSecret","setIsCreatingMessage","setIsFetchingMessages","setIsFetchingMessage","setIsUpdatingMessage","setIsDeletingMessage","addMessage","setMessages","setMessage","setMessageChanges","buyer","seller","request","reply","messageState","singleMessage","removeMessage","setIsNewRequest","setIsNewReply","setStartAmountOfRequests","setStartAmountOfReplies","setAmountOfRequests","setAmountOfReplies","decreaseAmountOfRequests","decreaseAmountOfReplies","setIntervalId","setDelayCounter","increaseDelayCounter","setTitleSectionHeight","setAboutSectionHeight","scrollToAbout","scroll","scrollTo","scrollToPlants","setErrorMessage","extraReducers","builder","addCase","fulfilled","rejected","actions","useHandleMessage","dispatch","callbackFunction","unwrap","then","catch","rejectedValue","fetchMessages","fetchCheck","deleteRemainingMessages","forEach","checkNewRequests","currentAmountOfRequests","checkAmountOfRequests","length","calculateAmountOfRequests","checkNewReplies","currentAmountOfReplies","checkAmountOfReplies","calculateAmountOfReplies","useIntervalCounter","stopCounter","clearInterval","NavAuthentificationItems","t","useTranslation","to","className","NavUserItems","jungleSwap","title","icon","faBell","username","NavAdditionalItems","NavBar","scrollToTop","useEffect","setInterval","startInterval","Navbar","variant","expand","fixed","Brand","onClick","Toggle","aria-controls","Collapse","id","Nav","faSearch","Footer","year","Date","getFullYear","pathname","target","rel","useHandlePlant","value","fetchPlants","searchPlant","HomeAbout","src","plantsImage","loading","alt","plantPotIcon","WaitSpinner","role","PlantSearch","useState","setQuery","setFilter","fetchPlantQueryByName","filterPlantsByLocation","type","placeholder","onChange","event","PlantThumbnail","PlantsCollection","index","PlantsCockpit","HomeTitle","Home","elementRef","useRef","elementHeight","Math","round","getBoundingClientRect","height","current","ref","titleSection","aboutSection","useAuthentification","ErrorMessage","outputFunction","includes","SignUp","useHistory","onSubmit","email","password","toLowerCase","preventDefault","handleSignUp","htmlFor","formNoValidate","SignIn","handleSignIn","LogOut","updateUserData","clonedUser","JSON","parse","stringify","updateUserRequestsReplies","useRouting","protectRoute","useHandlePlantImage","createImage","uploadImageData","deleteImage","PlantCreateForm","goBack","image","plantImage","files","FormData","append","handleUploadPlantImage","min","disabled","PlantDetailsBuyerItems","PlantDetailsCreatorChoice","PlantDetailsUserChoice","isCreator","PlantDetailsBuyerChoice","PlantItems","creator","PlantDetails","useParams","PlantUpdateForm","selectElementRef","setPlantLocation","handlePlantEntryChange","clonedPlant","handlePlantImageChange","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","initializePayment","payment","useHandlePayment","handleInputChanges","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","stripePromise","loadStripe","CheckoutView","RequestTile","RequestsCollection","GoBackButton","goToHome","useNavigation","RequestsView","resetRequestVariableAndScrollToTop","ReplyThumbnail","RepliesCollection","ReplyTile","RepliesView","resetReplyVariableAndScrollToTop","RequestCreateForm","handleCreateMessageForRequest","cols","rows","WaitSpinnerText","text","Reply","headline","RequestDetails","clonedMessage","setBuyerMessageInactive","handleChangeMessageState","ReplyDetails","handleDeleteMessage","RequestUpdateForm","handleCreateReply","Unauthorized","NotFound","KommunicateChat","htmlDocument","method","scriptElement","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","createLauncherIcon","document","PlantsCreatedCollection","PlantsCreatedView","ModalBody","subheadline","isClose","divElementRef","handleCloseModal","handleClickOutside","ErrorModal","convertErrorMessage","OfflineModal","isOnline","Modals","setIsOnline","handleOfflineEventCallback","handleOnlineEventCallback","addEventListener","removeEventListener","useOnlineStatus","withRouter","exact","path","component","store","configureStore","reducer","en","translations","link","allPlants","myPlants","requests","replies","tryIt","details","tooltipps","newRequest","newReply","search","button","create","update","save","send","submit","buy","swap","done","more","proceed","takeMeHome","select","sun","shade","sunAndShade","texts","home","about","paragraph","line1","line2","line3","line4","line5","line6","namePlaceholder","authentification","enterPlaceholder","alreadyAccountCreated","form","plantThumbnail","currency","plantDetails","sizeUnit","likes","checkout","payNow","paymentSuccessful","createRequest","updateRequest","replyPlaceholder","overview","requestDetails","yourReply","requestTile","replyDetails","replyBy","replyTile","notFound","subheadline1","subheadline2","unauthorized","footer","copyright","appAuthor1","appAuthor2","errorModal","offlineModal","errorTexts","usernameMissing","emailMissing","passwordMissing","emailFormatInvalid","passwordInvalid","userAlreadyExists","errorWhileCreatingUser","noMatchPasswords","userUnknown","noUserUpdate","nameMissing","descriptionMissing","sizeMissing","locationMissing","priceMissing","imageMissing","noImageSelected","createPlantFailed","fetchPlantFailed","fetchAllPlantsFailed","updatePlantFailed","deletePlantFailed","requestTextMissing","replyTextMissing","createMessageFailed","fetchMessageFailed","fetchAllMessagesFailed","updateMessageFailed","deleteMessageFailed","offline","general","i18n","use","initReactI18next","init","resources","fallbackLng","debug","ns","defaultNS","interpolation","escapeValue","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.05c9c813.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../app/config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  User,\r\n  Plant,\r\n  PlantId,\r\n  Message,\r\n  MessageId,\r\n  DestroyImageData,\r\n  IntervalId,\r\n} from \"../app/typeDefinitions\";\r\n\r\ntype ErrorMessage = string | null;\r\n\r\ninterface InitialState {\r\n  // ----- User authentication -----\r\n  isUserChange: boolean;\r\n  loggedInUser: User | null;\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: boolean;\r\n  isFetchingPlants: boolean;\r\n  isFetchingPlant: boolean;\r\n  isUpdatingPlant: boolean;\r\n  isDeletingPlant: boolean;\r\n  plant: Plant | {};\r\n  plants: Plant[];\r\n  filteredPlants: Plant[];\r\n  numberOfVisibleEntries: number;\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: boolean;\r\n  isDeletingPlantImage: boolean;\r\n  destroyImageData: DestroyImageData | null;\r\n\r\n  // ----- Payment -----\r\n  clientSecret: string;\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: boolean;\r\n  isFetchingMessages: boolean;\r\n  isFetchingMessage: boolean;\r\n  isUpdatingMessage: boolean;\r\n  isDeletingMessage: boolean;\r\n  messages: Message[];\r\n  message: Message | {};\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: boolean;\r\n  isNewReply: boolean;\r\n  amountOfRequests: number;\r\n  amountOfReplies: number;\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: IntervalId;\r\n  delayCounter: number;\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: number;\r\n  aboutSectionHeight: number;\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: ErrorMessage;\r\n}\r\n\r\ninterface UpdatePlantParameters {\r\n  plantId: PlantId;\r\n  updatedPlant: Plant;\r\n}\r\n\r\ninterface UpdateMessageParameters {\r\n  messageId: MessageId;\r\n  updatedMessage: Message;\r\n}\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\nconst initialState: InitialState = {\r\n  // ----- User authentication -----\r\n  isUserChange: false,\r\n  loggedInUser: null,\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: false,\r\n  isFetchingPlants: false,\r\n  isFetchingPlant: false,\r\n  isUpdatingPlant: false,\r\n  isDeletingPlant: false,\r\n  plant: {},\r\n  plants: [],\r\n  filteredPlants: [],\r\n  numberOfVisibleEntries: 6,\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: false,\r\n  isDeletingPlantImage: false,\r\n  destroyImageData: null,\r\n\r\n  // ----- Payment -----\r\n  clientSecret: \"\",\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: false,\r\n  isFetchingMessages: false,\r\n  isFetchingMessage: false,\r\n  isUpdatingMessage: false,\r\n  isDeletingMessage: false,\r\n  messages: [],\r\n  message: {},\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: false,\r\n  isNewReply: false,\r\n  amountOfRequests: 0,\r\n  amountOfReplies: 0,\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: null,\r\n  delayCounter: 0,\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: 0,\r\n  aboutSectionHeight: 0,\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: null,\r\n};\r\n\r\nconst rejectWithValue = (data: any): void | PromiseLike<void> => {\r\n  throw new Error(data);\r\n};\r\n\r\n// ----- User authentification -----\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (newUser: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-up`, newUser);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async (user: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-in`, user, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (user: User): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/auth/log-out`, user, {\r\n        withCredentials: true,\r\n      });\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const checkUserLoggedIn = createAsyncThunk(\r\n  \"jungleSwap/checkUserLoggedIn\",\r\n  async (): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/auth/check-user`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Plants -----\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async (newPlant: Plant): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/plants/create`, newPlant, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async (): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query: string): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchPlant = createAsyncThunk(\r\n  \"jungleSwap/fetchPlant\",\r\n  async (plantId: PlantId): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async ({\r\n    plantId,\r\n    updatedPlant,\r\n  }: UpdatePlantParameters): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (plantId: PlantId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Images -----\r\nexport const uploadPlantImage = createAsyncThunk(\r\n  \"jungleSwap/uploadPlantImage\",\r\n  async (uploadForm: FormData): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/cloudinary/upload`,\r\n        uploadForm\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlantImage = createAsyncThunk(\r\n  \"jungleSwap/deletePlantImage\",\r\n  async (destroyImageData: DestroyImageData): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/cloudinary/destroy`, destroyImageData);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Payment -----\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant: Plant): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/stripe/create-payment-intent`,\r\n        {\r\n          price: plant.price,\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Messages -----\r\nexport const createMessage = createAsyncThunk(\r\n  \"jungleSwap/createMessage\",\r\n  async (newMessage: Message): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/messages/create`,\r\n        newMessage,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllMessages = createAsyncThunk(\r\n  \"jungleSwap/fetchAllMessages\",\r\n  async (): Promise<Message[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/messages/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchMessage = createAsyncThunk(\r\n  \"jungleSwap/fetchMessage\",\r\n  async (messageId: MessageId): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${apiPath}/messages/fetch/${messageId}`,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updateMessage = createAsyncThunk(\r\n  \"jungleSwap/updateMessage\",\r\n  async ({\r\n    messageId,\r\n    updatedMessage,\r\n  }: UpdateMessageParameters): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/messages/update/${messageId}`,\r\n        updatedMessage\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteMessage = createAsyncThunk(\r\n  \"jungleSwap/deleteMessage\",\r\n  async (messageId: MessageId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    // ----- User authentication ------\r\n    setIsUserChange: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isUserChange = payload;\r\n    },\r\n    setLoggedInUser: (state, { payload }: PayloadAction<User | null>) => {\r\n      state.loggedInUser = payload;\r\n    },\r\n\r\n    // ----- Plants ------\r\n    setIsCreatingPlant: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isCreatingPlant = payload;\r\n    },\r\n    setIsFetchingPlants: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isFetchingPlants = payload;\r\n    },\r\n    setIsFetchingPlant: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isFetchingPlant = payload;\r\n    },\r\n    setIsUpdatingPlant: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isUpdatingPlant = payload;\r\n    },\r\n    setIsDeletingPlant: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isDeletingPlant = payload;\r\n    },\r\n    addPlant: (state, { payload }: PayloadAction<Plant>) => {\r\n      state.plants.push(payload);\r\n    },\r\n    setPlant: (state, { payload }: PayloadAction<Plant>) => {\r\n      state.plant = payload;\r\n    },\r\n    setPlants: (state, { payload }: PayloadAction<Plant[]>) => {\r\n      state.plants = payload;\r\n    },\r\n    setFilteredPlants: (state, { payload }: PayloadAction<Plant[]>) => {\r\n      state.filteredPlants = payload;\r\n    },\r\n    setPlantChanges: (state, { payload }: PayloadAction<Plant>) => {\r\n      const {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      } = payload;\r\n      state.plants = state.plants.map((singlePlant: Plant): Plant => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, { payload }: PayloadAction<PlantId>) => {\r\n      state.plants = state.plants.filter(\r\n        (plant: Plant): boolean => plant._id !== payload\r\n      );\r\n    },\r\n    setNumberOfVisibleEntries: (state, { payload }: PayloadAction<number>) => {\r\n      state.numberOfVisibleEntries = payload;\r\n    },\r\n\r\n    // ----- Images -----\r\n    setIsUploadingPlantImage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isUploadingPlantImage = payload;\r\n    },\r\n    setIsDeletingPlantImage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isDeletingPlantImage = payload;\r\n    },\r\n    setDestroyImageData: (\r\n      state,\r\n      { payload }: PayloadAction<DestroyImageData | null>\r\n    ) => {\r\n      state.destroyImageData = payload;\r\n    },\r\n\r\n    // ----- Payment -----\r\n    setClientSecret: (state, { payload }: PayloadAction<string>) => {\r\n      state.clientSecret = payload;\r\n    },\r\n\r\n    // ----- Messages -----\r\n    setIsCreatingMessage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isCreatingMessage = payload;\r\n    },\r\n    setIsFetchingMessages: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isFetchingMessages = payload;\r\n    },\r\n    setIsFetchingMessage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isFetchingMessage = payload;\r\n    },\r\n    setIsUpdatingMessage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isUpdatingMessage = payload;\r\n    },\r\n    setIsDeletingMessage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isDeletingMessage = payload;\r\n    },\r\n    addMessage: (state, { payload }: PayloadAction<Message>) => {\r\n      state.messages.push(payload);\r\n    },\r\n    setMessages: (state, { payload }: PayloadAction<Message[]>) => {\r\n      state.messages = payload;\r\n    },\r\n    setMessage: (state, { payload }: PayloadAction<Message>) => {\r\n      state.message = payload;\r\n    },\r\n    setMessageChanges: (state, { payload }: PayloadAction<Message>) => {\r\n      const { _id, buyer, seller, plant, request, reply, messageState } =\r\n        payload;\r\n      state.messages = state.messages.map((singleMessage) => {\r\n        if (singleMessage._id === _id) {\r\n          singleMessage.buyer = buyer;\r\n          singleMessage.seller = seller;\r\n          singleMessage.plant = plant;\r\n          singleMessage.request = request;\r\n          singleMessage.reply = reply;\r\n          singleMessage.messageState = messageState;\r\n        }\r\n        return singleMessage;\r\n      });\r\n    },\r\n    removeMessage: (state, { payload }: PayloadAction<MessageId>) => {\r\n      state.messages = state.messages.filter((message: Message): boolean => {\r\n        return message._id !== payload;\r\n      });\r\n    },\r\n\r\n    // ----- Requests/Replies check ------\r\n    setIsNewRequest: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isNewRequest = payload;\r\n    },\r\n    setIsNewReply: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isNewReply = payload;\r\n    },\r\n    setStartAmountOfRequests: (state) => {\r\n      state.amountOfRequests = (state.loggedInUser as any).amountOfRequests;\r\n    },\r\n    setStartAmountOfReplies: (state) => {\r\n      state.amountOfReplies = (state.loggedInUser as any).amountOfReplies;\r\n    },\r\n    setAmountOfRequests: (state, { payload }: PayloadAction<number>) => {\r\n      state.amountOfRequests = payload;\r\n    },\r\n    setAmountOfReplies: (state, { payload }: PayloadAction<number>) => {\r\n      state.amountOfReplies = payload;\r\n    },\r\n    decreaseAmountOfRequests: (state) => {\r\n      state.amountOfRequests -= 1;\r\n    },\r\n    decreaseAmountOfReplies: (state) => {\r\n      state.amountOfReplies -= 1;\r\n    },\r\n\r\n    // ----- Interval counter -----\r\n    setIntervalId: (state, { payload }: PayloadAction<IntervalId>) => {\r\n      state.intervalId = payload;\r\n    },\r\n    setDelayCounter: (state, { payload }: PayloadAction<number>) => {\r\n      state.delayCounter = payload;\r\n    },\r\n    increaseDelayCounter: (state) => {\r\n      state.delayCounter += 1;\r\n    },\r\n\r\n    // ----- Pages handling -----\r\n    setTitleSectionHeight: (state, { payload }: PayloadAction<number>) => {\r\n      state.titleSectionHeight = payload;\r\n    },\r\n    setAboutSectionHeight: (state, { payload }: PayloadAction<number>) => {\r\n      state.aboutSectionHeight = payload;\r\n    },\r\n    scrollToAbout: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight);\r\n    },\r\n    scrollToPlants: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight + state.aboutSectionHeight);\r\n    },\r\n\r\n    // ----- Error handling -----\r\n    setErrorMessage: (state, { payload }: PayloadAction<ErrorMessage>) => {\r\n      state.errorMessage = payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    // ----- Plants ------\r\n    builder.addCase(createPlant.fulfilled, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(createPlant.rejected, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchPlant.fulfilled, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(fetchPlant.rejected, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.fulfilled, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.rejected, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.fulfilled, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.rejected, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n\r\n    // ----- Images -----\r\n    builder.addCase(uploadPlantImage.fulfilled, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(uploadPlantImage.rejected, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.fulfilled, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.rejected, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n\r\n    // ----- Messages -----\r\n    builder.addCase(createMessage.fulfilled, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(createMessage.rejected, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.fulfilled, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.rejected, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchMessage.fulfilled, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(fetchMessage.rejected, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.fulfilled, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.rejected, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.fulfilled, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.rejected, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n  },\r\n});\r\n\r\n// ----- Slice actions -----\r\nexport const {\r\n  // ----- User authentification -----\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n\r\n  // ----- Plants -----\r\n  setIsCreatingPlant,\r\n  setIsFetchingPlants,\r\n  setIsFetchingPlant,\r\n  setIsUpdatingPlant,\r\n  setIsDeletingPlant,\r\n  addPlant,\r\n  setPlants,\r\n  setFilteredPlants,\r\n  setPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n  setNumberOfVisibleEntries,\r\n\r\n  // ----- Images -----\r\n  setIsUploadingPlantImage,\r\n  setIsDeletingPlantImage,\r\n  setDestroyImageData,\r\n\r\n  // ----- Payment -----\r\n  setClientSecret,\r\n\r\n  // ----- Messages -----\r\n  setIsCreatingMessage,\r\n  setIsFetchingMessages,\r\n  setIsFetchingMessage,\r\n  setIsUpdatingMessage,\r\n  setIsDeletingMessage,\r\n  addMessage,\r\n  setMessages,\r\n  setMessage,\r\n  setMessageChanges,\r\n  removeMessage,\r\n\r\n  // ----- Requests/Replies check -----\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  decreaseAmountOfRequests,\r\n  decreaseAmountOfReplies,\r\n\r\n  // ----- Interval counter -----\r\n  setIntervalId,\r\n  setDelayCounter,\r\n  increaseDelayCounter,\r\n\r\n  // ----- Pages handling -----\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n\r\n  // ----- Error handling -----\r\n  setErrorMessage,\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  addMessage,\r\n  createMessage,\r\n  deleteMessage,\r\n  fetchAllMessages,\r\n  fetchMessage,\r\n  removeMessage,\r\n  setAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setErrorMessage,\r\n  setIsCreatingMessage,\r\n  setIsDeletingMessage,\r\n  setIsFetchingMessage,\r\n  setIsFetchingMessages,\r\n  setIsNewReply,\r\n  setIsNewRequest,\r\n  setIsUpdatingMessage,\r\n  setMessage,\r\n  setMessageChanges,\r\n  setMessages,\r\n  updateMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Message, MessageId, Plant, PlantId, User } from \"../typeDefinitions\";\r\n\r\ntype HandleMessage = {\r\n  createMessage: Function;\r\n  fetchMessage: Function;\r\n  fetchMessages: Function;\r\n  fetchCheck: Function;\r\n  updateMessage: Function;\r\n  deleteMessage: Function;\r\n  deleteRemainingMessages: Function;\r\n  checkNewRequests: Function;\r\n  checkNewReplies: Function;\r\n};\r\n\r\nexport const useHandleMessage = (): HandleMessage => {\r\n  const dispatch = useAppDispatch();\r\n  const handleMessage = {\r\n    createMessage(newMessage: Message, callbackFunction: Function): void {\r\n      dispatch(setIsCreatingMessage(true));\r\n      dispatch(createMessage(newMessage))\r\n        .unwrap()\r\n        .then((message: Message): void => {\r\n          dispatch(addMessage(message));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchMessage(messageId: MessageId, callbackFunction: Function): void {\r\n      dispatch(setIsFetchingMessage(true));\r\n      dispatch(fetchMessage(messageId))\r\n        .unwrap()\r\n        .then((message: Message): void => {\r\n          dispatch(setMessage(message));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchMessages(callbackFunction: Function): void {\r\n      dispatch(setIsFetchingMessages(true));\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages: Message[]): void => {\r\n          dispatch(setMessages(messages));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchCheck(callbackFunction: Function): void {\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages: Message[]): void => {\r\n          dispatch(setMessages(messages));\r\n          callbackFunction(messages);\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    updateMessage(\r\n      messageId: MessageId,\r\n      updatedMessage: Message,\r\n      callbackFunction: Function\r\n    ): void {\r\n      dispatch(setIsUpdatingMessage(true));\r\n      dispatch(updateMessage({ messageId, updatedMessage }))\r\n        .unwrap()\r\n        .then((message: Message): void => {\r\n          dispatch(setMessageChanges(message));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    deleteMessage(messageId: MessageId, callbackFunction: Function): void {\r\n      dispatch(setIsDeletingMessage(true));\r\n      dispatch(deleteMessage(messageId))\r\n        .unwrap()\r\n        .then((): void => {\r\n          dispatch(removeMessage(messageId));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    deleteRemainingMessages(messages: Message[], plantId: PlantId): void {\r\n      messages.forEach(({ _id, plant }: Message): void => {\r\n        if ((plant as Plant)._id === plantId) {\r\n          dispatch(setIsDeletingMessage(true));\r\n          dispatch(deleteMessage(_id as PlantId))\r\n            .unwrap()\r\n            .then((): void => {\r\n              dispatch(removeMessage(_id as PlantId));\r\n            })\r\n            .catch((rejectedValue: any): void => {\r\n              dispatch(setErrorMessage(rejectedValue.message));\r\n            });\r\n        }\r\n      });\r\n    },\r\n\r\n    checkNewRequests(\r\n      loggedInUser: User | null,\r\n      messages: Message[],\r\n      amountOfRequests: number\r\n    ): void {\r\n      const calculateAmountOfRequests = (messages: Message[]): number => {\r\n        const currentAmountOfRequests = messages.filter(\r\n          ({ seller, messageState }: Message): boolean => {\r\n            return (\r\n              (seller as User)._id === (loggedInUser as User)._id &&\r\n              messageState === true\r\n            );\r\n          }\r\n        ).length;\r\n        return currentAmountOfRequests;\r\n      };\r\n\r\n      const checkAmountOfRequests = (\r\n        currentAmountOfRequests: number,\r\n        amountOfRequests: number\r\n      ): void => {\r\n        if (amountOfRequests < currentAmountOfRequests) {\r\n          dispatch(setIsNewRequest(true));\r\n        }\r\n        if (amountOfRequests !== currentAmountOfRequests) {\r\n          dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n        }\r\n      };\r\n\r\n      const currentAmountOfRequests = calculateAmountOfRequests(messages);\r\n      checkAmountOfRequests(currentAmountOfRequests, amountOfRequests);\r\n    },\r\n\r\n    checkNewReplies(\r\n      loggedInUser: User | null,\r\n      messages: Message[],\r\n      amountOfReplies: number\r\n    ): void {\r\n      const calculateAmountOfReplies = (messages: Message[]): number => {\r\n        const currentAmountOfReplies = messages.filter(\r\n          ({ buyer, reply }: Message): boolean => {\r\n            return (\r\n              (buyer as User)._id === (loggedInUser as User)._id && reply !== \"\"\r\n            );\r\n          }\r\n        ).length;\r\n        return currentAmountOfReplies;\r\n      };\r\n\r\n      const checkAmountOfReplies = (\r\n        currentAmountOfReplies: number,\r\n        amountOfReplies: number\r\n      ): void => {\r\n        if (amountOfReplies < currentAmountOfReplies) {\r\n          dispatch(setIsNewReply(true));\r\n        }\r\n        if (amountOfReplies !== currentAmountOfReplies) {\r\n          dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n        }\r\n      };\r\n\r\n      const currentAmountOfReplies = calculateAmountOfReplies(messages);\r\n      checkAmountOfReplies(currentAmountOfReplies, amountOfReplies);\r\n    },\r\n  };\r\n  return handleMessage;\r\n};\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport { setDelayCounter, setIntervalId } from \"../../reducer/jungleSwapSlice\";\r\n\r\ntype IntervalCounter = {\r\n  stopCounter: Function;\r\n};\r\n\r\nexport const useIntervalCounter = (): IntervalCounter => {\r\n  const dispatch = useAppDispatch();\r\n  const intervalCounter = {\r\n    stopCounter(intervalId: NodeJS.Timeout): void {\r\n      clearInterval(intervalId);\r\n      dispatch(setIntervalId(null));\r\n      dispatch(setDelayCounter(0));\r\n    },\r\n  };\r\n  return intervalCounter;\r\n};\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst NavAuthentificationItems = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/auth/sign-in\" className=\"p-2 is-link\">\r\n        {t(\"link.signIn\")}\r\n      </Link>\r\n      <Link to=\"/auth/sign-up\" className=\"p-2 is-link\">\r\n        {t(\"link.signUp\")}\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavAuthentificationItems;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NavUserItems = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const { t } = useTranslation();\r\n\r\n  const tooltipItemRequests = (): string => {\r\n    return isNewRequest ? t(\"link.tooltipps.newRequest\") : \"\";\r\n  };\r\n\r\n  const tooltipItemReplies = (): string => {\r\n    return isNewReply ? t(\"link.tooltipps.newReply\") : \"\";\r\n  };\r\n\r\n  const tooltipItemLogOut = (): any => {\r\n    return loggedInUser ? loggedInUser.username : \"\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/plants/my-own\" className=\"p-2 is-link\">\r\n        {t(\"link.myPlants\")}\r\n      </Link>\r\n      <Link to=\"/plants/create\" className=\"p-2 is-link\">\r\n        {t(\"link.createPlant\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/requests/fetch-all\"\r\n        title={tooltipItemRequests()}\r\n        className=\"p-2 is-link\"\r\n      >\r\n        {isNewRequest && <FontAwesomeIcon icon={faBell} />}\r\n        {t(\"link.requests\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/replies/fetch-all\"\r\n        title={tooltipItemReplies()}\r\n        className=\"p-2 is-link\"\r\n      >\r\n        {isNewReply && <FontAwesomeIcon icon={faBell} />}\r\n        {t(\"link.replies\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/auth/log-out\"\r\n        title={tooltipItemLogOut()}\r\n        className=\"p-2 is-link\"\r\n      >\r\n        {t(\"link.logOut\")}\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavUserItems;\r\n","import { User } from \"../../app/typeDefinitions\";\r\nimport NavAuthentificationItems from \"./NavAuthentificationItems\";\r\nimport NavUserItems from \"./NavUserItems\";\r\n\r\ntype NavAdditionalItemsProps = {\r\n  user: User | null;\r\n};\r\n\r\nconst NavAdditionalItems = ({ user }: NavAdditionalItemsProps): JSX.Element => {\r\n  if (user) {\r\n    return <NavUserItems />;\r\n  }\r\n  return <NavAuthentificationItems />;\r\n};\r\n\r\nexport default NavAdditionalItems;\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport { useIntervalCounter } from \"../../app/custom-hooks/useIntervalCounter\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  setIsUserChange,\r\n  setIntervalId,\r\n  increaseDelayCounter,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  scrollToPlants,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell, faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Message } from \"../../app/typeDefinitions\";\r\nimport NavAdditionalItems from \"./NavAdditionalItems\";\r\n\r\nconst NavBar = (): JSX.Element => {\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const delayCounter = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.delayCounter\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { fetchMessages, fetchCheck, checkNewRequests, checkNewReplies } =\r\n    useHandleMessage();\r\n  const { stopCounter } = useIntervalCounter();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalId) {\r\n        stopCounter(intervalId);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const startRequestsRepliesCheck = (): void => {\r\n      const setInitialMessageVariables = (): void => {\r\n        dispatch(setStartAmountOfRequests());\r\n        dispatch(setStartAmountOfReplies());\r\n        dispatch(setIsUserChange(false));\r\n      };\r\n\r\n      const startInterval = (): void => {\r\n        const intervalId = setInterval(\r\n          (): void => {\r\n            dispatch(increaseDelayCounter());\r\n          },\r\n          1000 // every second\r\n        );\r\n        dispatch(setIntervalId(intervalId));\r\n        dispatch(increaseDelayCounter());\r\n      };\r\n\r\n      fetchMessages((): void => {\r\n        setInitialMessageVariables();\r\n        startInterval();\r\n      });\r\n    };\r\n\r\n    isUserChange && startRequestsRepliesCheck();\r\n  }, [isUserChange]);\r\n\r\n  useEffect(() => {\r\n    const checkNewRequestsReplies = (): void => {\r\n      fetchCheck((messages: Message[]): void => {\r\n        checkNewRequests(loggedInUser, messages, amountOfRequests);\r\n        checkNewReplies(loggedInUser, messages, amountOfReplies);\r\n      });\r\n    };\r\n\r\n    if (isUserChange) {\r\n      dispatch(setStartAmountOfRequests());\r\n      dispatch(setStartAmountOfReplies());\r\n    }\r\n    loggedInUser && checkNewRequestsReplies();\r\n  }, [delayCounter]);\r\n\r\n  const tooltipItemSearch = (): string => {\r\n    return t(\"link.tooltipps.search\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar variant=\"dark\" expand=\"lg\" fixed=\"top\" className=\"pl-5\">\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" className=\"is-link\" onClick={scrollToTop}>\r\n            {t(\"link.jungleSwap\")}\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\r\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\r\n        </Navbar.Toggle>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Link\r\n              to=\"/\"\r\n              className=\"p-2 is-link\"\r\n              onClick={(): void => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              {t(\"link.allPlants\")}\r\n            </Link>\r\n            <NavAdditionalItems user={loggedInUser} />\r\n            <Link\r\n              to=\"/\"\r\n              title={tooltipItemSearch()}\r\n              className=\"p-2 is-link\"\r\n              onClick={(): void => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              <FontAwesomeIcon icon={faSearch} />\r\n            </Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { linkedInPath1, linkedInPath2 } from \"../lib/externalLinkPaths\";\r\n\r\nconst Footer = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n  const currentTime = new Date();\r\n  const year = currentTime.getFullYear();\r\n\r\n  return (\r\n    <div className=\"has-background-image\">\r\n      <footer>\r\n        {t(\"texts.footer.copyright\")} {year}{\" \"}\r\n        <Link\r\n          to={{ pathname: linkedInPath1 }}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n          className=\"is-link\"\r\n        >\r\n          {t(\"texts.footer.appAuthor1\")}\r\n        </Link>{\" \"}\r\n        &amp;{\" \"}\r\n        <Link\r\n          to={{ pathname: linkedInPath2 }}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n          className=\"is-link\"\r\n        >\r\n          {t(\"texts.footer.appAuthor2\")}\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","// LinkedIn\r\n\r\nexport const linkedInPath1: string = \"https://www.linkedin.com/in/christian-gerbig/\";\r\nexport const linkedInPath2: string = \"https://www.linkedin.com/in/lisa-montebaur/\";\r\n\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  addPlant,\r\n  createPlant,\r\n  deletePlant,\r\n  fetchAllPlants,\r\n  fetchPlant,\r\n  fetchQueryPlants,\r\n  removePlant,\r\n  setErrorMessage,\r\n  setIsCreatingPlant,\r\n  setIsDeletingPlant,\r\n  setIsFetchingPlant,\r\n  setIsFetchingPlants,\r\n  setIsUpdatingPlant,\r\n  setPlant,\r\n  setPlantChanges,\r\n  setPlants,\r\n  updatePlant,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, PlantId, UploadImageData } from \"../typeDefinitions\";\r\n\r\ntype HandlePlant = {\r\n  createPlant: Function;\r\n  fetchPlant: Function;\r\n  fetchPlants: Function;\r\n  updatePlant: Function;\r\n  deletePlant: Function;\r\n  searchPlant: Function;\r\n};\r\n\r\nexport const useHandlePlant = (): HandlePlant => {\r\n  const dispatch = useAppDispatch();\r\n  const handlePlant = {\r\n    createPlant(\r\n      { name, description, size, location, price }: any,\r\n      { imageUrl, imagePublicId }: UploadImageData,\r\n      callbackFunction: Function\r\n    ): void {\r\n      const newPlant: Plant = {\r\n        name: name.value,\r\n        description: description.value,\r\n        size: size.value,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location: location.value,\r\n        price: price.value,\r\n      };\r\n      dispatch(setIsCreatingPlant(true));\r\n      dispatch(createPlant(newPlant))\r\n        .unwrap()\r\n        .then((plant: Plant): void => {\r\n          dispatch(addPlant(plant));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchPlant(plantId: PlantId, callbackFunction: Function): void {\r\n      dispatch(setIsFetchingPlant(true));\r\n      dispatch(fetchPlant(plantId))\r\n        .unwrap()\r\n        .then((plant: Plant): void => {\r\n          dispatch(setPlant(plant));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchPlants(callbackFunction?: Function): void {\r\n      dispatch(setIsFetchingPlants(true));\r\n      dispatch(fetchAllPlants())\r\n        .unwrap()\r\n        .then((plants: Plant[]): void => {\r\n          dispatch(setPlants(plants));\r\n          if (typeof callbackFunction !== \"undefined\") {\r\n            callbackFunction();\r\n          }\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    updatePlant(\r\n      {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      }: Plant,\r\n      callbackFunction: Function\r\n    ): void {\r\n      const updatedPlant: Plant = {\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      };\r\n      dispatch(setIsUpdatingPlant(true));\r\n      dispatch(updatePlant({ plantId: _id as PlantId, updatedPlant }))\r\n        .unwrap()\r\n        .then((updatedPlant: Plant): void => {\r\n          dispatch(setPlantChanges(updatedPlant));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    deletePlant(plantId: PlantId, callbackFunction: Function): void {\r\n      dispatch(setIsDeletingPlant(true));\r\n      dispatch(deletePlant(plantId))\r\n        .unwrap()\r\n        .then((): void => {\r\n          dispatch(removePlant(plantId));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    searchPlant(query: string): void {\r\n      dispatch(setIsFetchingPlants(true));\r\n      dispatch(fetchQueryPlants(query))\r\n        .unwrap()\r\n        .then((plants: Plant[]): void => {\r\n          dispatch(setPlants(plants));\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n  };\r\n  return handlePlant;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import { useTranslation } from \"react-i18next\";\r\nimport plantsImage from \"../../images/JungleSwap_Home.png\";\r\nimport plantPotIcon from \"../../images/JungleSwap_Icon.png\";\r\n\r\nconst HomeAbout = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"about centered container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n          <img\r\n            src={plantsImage}\r\n            loading=\"eager\"\r\n            alt=\"plants\"\r\n            className=\"is-background-image\"\r\n          />\r\n        </div>\r\n        <br />\r\n        <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 is-no-overflow\">\r\n          <article>\r\n            <header>\r\n              <h4>{t(\"texts.home.about.headline\")}</h4>\r\n              <h5>{t(\"texts.home.about.subheadline\")}</h5>\r\n            </header>\r\n            <p>\r\n              {t(\"texts.home.about.paragraph.line1\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line2\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line3\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line4\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line5\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line6\")}\r\n            </p>\r\n            <img\r\n              src={plantPotIcon}\r\n              loading=\"lazy\"\r\n              alt=\"plant pot\"\r\n              className=\"is-icon\"\r\n            />\r\n          </article>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeAbout;\r\n","const WaitSpinner = (): JSX.Element => {\r\n  return (\r\n    <div className=\"d-flex align-items-center justify-content-center\">\r\n      <div role=\"status\" className=\"spinner-border m-3 loading-wait-spinner\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitSpinner;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport { setFilteredPlants } from \"../../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { Plant } from \"../../app/typeDefinitions\";\r\n\r\nconst PlantSearch = (): JSX.Element => {\r\n  const [query, setQuery] = useState<string>(\"\");\r\n  const [filter, setFilter] = useState<string>(\"\");\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n  const { searchPlant, fetchPlants } = useHandlePlant();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const fetchPlantQueryByName = (query: string): void => {\r\n      if (query) {\r\n        searchPlant(query);\r\n      } else {\r\n        fetchPlants();\r\n      }\r\n    };\r\n\r\n    fetchPlantQueryByName(query);\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    const filterPlantsByLocation = (filter: string, plants: Plant[]): void => {\r\n      const filteredPlants = plants.filter(({ location }: Plant): boolean => {\r\n        return filter === location || filter === \"\";\r\n      });\r\n      dispatch(setFilteredPlants(filteredPlants));\r\n    };\r\n\r\n    filterPlantsByLocation(filter, plants);\r\n  }, [filter]);\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <hr className=\"horizontal-rule\" />\r\n      <h4>{t(\"texts.home.searchPlant.headline\")}</h4>\r\n      <div className=\"d-flex\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder={t(\"texts.home.searchPlant.namePlaceholder\")}\r\n          value={query}\r\n          className=\"is-width-medium form-control\"\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n            setQuery(event.target.value);\r\n          }}\r\n        />\r\n        <select\r\n          name=\"location\"\r\n          className=\"location-filter form-control ml-4\"\r\n          onChange={(event: React.ChangeEvent<HTMLSelectElement>): void => {\r\n            setFilter(event.target.value);\r\n          }}\r\n        >\r\n          <option value=\"\">{t(\"select.location.title\")}</option>\r\n          <option value=\"sun\">{t(\"select.location.sun\")}</option>\r\n          <option value=\"shade\">{t(\"select.location.shade\")}</option>\r\n          <option value=\"sun and shade\">\r\n            {t(\"select.location.sunAndShade\")}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantSearch;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Plant } from \"../../app/typeDefinitions\";\r\n\r\ntype PlantThumbnailProps = {\r\n  plant: Plant;\r\n};\r\n\r\nconst PlantThumbnail = ({ plant }: PlantThumbnailProps): JSX.Element => {\r\n  const { t } = useTranslation();\r\n  const { _id, name, imageUrl, price } = plant;\r\n\r\n  return (\r\n    <div className=\"col mb-5\">\r\n      <div className=\"card card-medium-width text-center h-100\">\r\n        <img\r\n          src={imageUrl}\r\n          loading=\"lazy\"\r\n          alt={name}\r\n          className=\"card-img-top is-image-size-large\"\r\n        />\r\n        <div className=\"card-body mb-5\">\r\n          <h5>{name}</h5>\r\n          <p>\r\n            {price} {t(\"texts.plants.plantThumbnail.currency\")}\r\n          </p>\r\n          <Link\r\n            className=\"btn form-control is-width-medium is-link\"\r\n            to={`/plants/fetch/${_id}`}\r\n          >\r\n            {t(\"link.details\")}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantThumbnail;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { setNumberOfVisibleEntries } from \"../../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { Plant } from \"../../app/typeDefinitions\";\r\nimport PlantThumbnail from \"./PlantThumbnail\";\r\n\r\nconst PlantsCollection = (): JSX.Element => {\r\n  const filteredPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.filteredPlants\r\n  );\r\n  const numberOfVisibleEntries = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.numberOfVisibleEntries\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  const handleClickButton = (): void => {\r\n    dispatch(setNumberOfVisibleEntries(numberOfVisibleEntries + 6));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-2 row-cols-xl-3 row-cols-xxl-3\">\r\n        {filteredPlants.map(\r\n          (plant: Plant, index: number): JSX.Element | null => {\r\n            const { _id } = plant;\r\n            return index < numberOfVisibleEntries ? (\r\n              <PlantThumbnail plant={plant} key={_id} />\r\n            ) : null;\r\n          }\r\n        )}\r\n      </div>\r\n      {numberOfVisibleEntries < filteredPlants.length && (\r\n        <div className=\"is-text-align-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-sm is-width-medium form-control\"\r\n            onClick={handleClickButton}\r\n          >\r\n            {t(\"button.more\")}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCollection;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { RootState } from \"../../app/store\";\r\nimport WaitSpinner from \"../spinners/WaitSpinner\";\r\nimport PlantSearch from \"./PlantSearch\";\r\nimport PlantsCollection from \"./PlantsCollection\";\r\n\r\nconst PlantsCockpit = (): JSX.Element => {\r\n  const isFetchingPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlants\r\n  );\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-3\">\r\n        <h2>{t(\"texts.home.allPlants.headline\")}</h2>\r\n      </div>\r\n      <PlantSearch />\r\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsCollection />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCockpit;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppDispatch } from \"../../app/hooks\";\r\nimport { scrollToAbout } from \"../../reducer/jungleSwapSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst HomeTitle = (): JSX.Element => {\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"row my-5\">\r\n      <div className=\"col-6 offset-3 my-5 has-border-around\">\r\n        <h2 className=\"title mb-2\">{t(\"texts.home.title.headline\")}</h2>\r\n        <h5 className=\"mt-3 mb-5\">{t(\"texts.home.title.subheadline\")}</h5>\r\n        <div className=\"mb-5\">\r\n          <Link\r\n            to={\"/\"}\r\n            className=\"try-it-link is-link\"\r\n            onClick={(): void => {\r\n              dispatch(scrollToAbout());\r\n            }}\r\n          >\r\n            {t(\"link.tryIt\")}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeTitle;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport {\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  setFilteredPlants,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../../app/store\";\r\nimport HomeAbout from \"../../components/home/HomeAbout\";\r\nimport PlantsCockpit from \"../../components/plants/PlantsCockpit\";\r\nimport HomeTitle from \"../../components/home/HomeTitle\";\r\n\r\nconst Home = (): JSX.Element => {\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n  const { fetchPlants } = useHandlePlant();\r\n  const elementRef = useRef<HTMLElement[]>([]);\r\n\r\n  useEffect(() => {\r\n    const elementHeight = (elementRef: HTMLElement): number => {\r\n      return Math.round(elementRef.getBoundingClientRect().height);\r\n    };\r\n\r\n    fetchPlants((): void => {\r\n      const titleSectionHeight = elementHeight(elementRef.current[0]);\r\n      dispatch(setTitleSectionHeight(titleSectionHeight));\r\n      const aboutSectionHeight = elementHeight(elementRef.current[1]);\r\n      dispatch(setAboutSectionHeight(aboutSectionHeight));\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(setFilteredPlants(plants));\r\n  }, [plants]);\r\n\r\n  return (\r\n    <div>\r\n      <section\r\n        ref={(titleSection: HTMLElement): void => {\r\n          (elementRef.current[0] as HTMLElement | null) = titleSection;\r\n        }}\r\n        className=\"text-center pt-5 pb-5 title-header has-fixed-background-image\"\r\n      >\r\n        <HomeTitle />\r\n      </section>\r\n\r\n      <section\r\n        ref={(aboutSection: HTMLElement): void => {\r\n          (elementRef.current[1] as HTMLElement | null) = aboutSection;\r\n        }}\r\n      >\r\n        <HomeAbout />\r\n      </section>\r\n\r\n      <section>\r\n        <PlantsCockpit />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  setErrorMessage,\r\n  setLoggedInUser,\r\n  signIn,\r\n  signUp,\r\n  logOut,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\n\r\ntype Authentification = {\r\n  signIn: Function;\r\n  signUp: Function;\r\n  logOut: Function;\r\n};\r\n\r\nexport const useAuthentification = (): Authentification => {\r\n  const dispatch = useAppDispatch();\r\n  const authentification = {\r\n    signIn(user: User, callbackFunction: Function): void {\r\n      dispatch(signIn(user))\r\n        .unwrap()\r\n        .then((user: User): void => {\r\n          dispatch(setLoggedInUser(user));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    signUp(newUser: User, callbackFunction: Function): void {\r\n      dispatch(signUp(newUser))\r\n        .unwrap()\r\n        .then((user: User): void => {\r\n          dispatch(setLoggedInUser(user));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    logOut(loggedInUser: User, callbackFunction: Function): void {\r\n      dispatch(logOut(loggedInUser))\r\n        .unwrap()\r\n        .then((): void => {\r\n          dispatch(setLoggedInUser(null));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n  };\r\n  return authentification;\r\n};\r\n","type ErrorMessageProps = {\r\n  message: string | null;\r\n  outputFunction: Function;\r\n};\r\n\r\nconst ErrorMessage = ({\r\n  message,\r\n  outputFunction,\r\n}: ErrorMessageProps): JSX.Element | null => {\r\n  if (!message || !message.includes(\"Form\")) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <span className=\"is-danger is-text-bold is-display-block\">\r\n        {outputFunction(message)}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\r\nimport {\r\n  setIsUserChange,\r\n  setErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../app/typeDefinitions\";\r\nimport { RootState } from \"../../app/store\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst SignUp = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { push } = useHistory();\r\n  const { signUp } = useAuthentification();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignUp = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    const { username, email, password } = event.target as any;\r\n    const newUser: User = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    event.preventDefault();\r\n    signUp(newUser, (): void => {\r\n      dispatch(setIsUserChange(true));\r\n      push(\"/\");\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Username missing\":\r\n        return t(\"errorTexts.authentification.signUp.form.usernameMissing\");\r\n      case \"Form: Email missing\":\r\n        return t(\"errorTexts.authentification.signUp.form.emailMissing\");\r\n      case \"Form: Password missing\":\r\n        return t(\"errorTexts.authentification.signUp.form.passwordMissing\");\r\n      case \"Form: Email format invalid\":\r\n        return t(\"errorTexts.authentification.signUp.form.emailFormatInvalid\");\r\n      case \"Form: Password invalid\":\r\n        return t(\"errorTexts.authentification.signUp.form.passwordInvalid\");\r\n      case \"Form: Username or email already exists\":\r\n        return t(\"errorTexts.authentification.signUp.form.userAlreadyExists\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">{t(\"texts.authentification.signUp.headline\")}</h2>\r\n        <form\r\n          className=\"form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleSignUp(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\">\r\n              {t(\"texts.authentification.signUp.username\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n              placeholder={t(\"texts.authentification.signUp.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\">\r\n              {t(\"texts.authentification.signUp.email\")}\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder={t(\"texts.authentification.signUp.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\">\r\n              {t(\"texts.authentification.signUp.password\")}\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder={t(\"texts.authentification.signUp.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className=\"btn btn-sm mt-4 is-width-medium form-control\"\r\n          >\r\n            {t(\"button.signUp\")}\r\n          </button>\r\n          <p className=\"is-padding-top\">\r\n            {t(\"texts.authentification.signUp.alreadyAccountCreated\")}\r\n          </p>\r\n          <div className=\"text-right\">\r\n            <Link to={\"/auth/sign-in\"} className=\"is-link\">\r\n              <button className=\"btn btn-sm ml-4 is-width-medium form-control mt-0 mb-2\">\r\n                {t(\"button.signIn\")}\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\r\nimport {\r\n  setIsUserChange,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../app/typeDefinitions\";\r\nimport { RootState } from \"../../app/store\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst SignIn = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { push } = useHistory();\r\n  const { signIn } = useAuthentification();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignIn = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    const { email, password } = event.target as any;\r\n    const user: User = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    event.preventDefault();\r\n    signIn(user, (): void => {\r\n      dispatch(setIsUserChange(true));\r\n      const { amountOfRequests, amountOfReplies } = user;\r\n      dispatch(setAmountOfRequests(amountOfRequests as number));\r\n      dispatch(setAmountOfReplies(amountOfReplies as number));\r\n      push(\"/\");\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Email missing\":\r\n        return t(\"errorTexts.authentification.signIn.form.emailMissing\");\r\n      case \"Form: Password missing\":\r\n        return t(\"errorTexts.authentification.signIn.form.passwordMissing\");\r\n      case \"Form: Email format invalid\":\r\n        return t(\"errorTexts.authentification.signIn.form.emailFormatInvalid\");\r\n      case \"Form: Passwords don't match\":\r\n        return t(\"errorTexts.authentification.signIn.form.noMatchPasswords\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">{t(\"texts.authentification.signIn.headline\")}</h2>\r\n        <form\r\n          className=\"form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleSignIn(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\">\r\n              {t(\"texts.authentification.signIn.email\")}\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder={t(\"texts.authentification.signIn.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\">\r\n              {t(\"texts.authentification.signIn.password\")}\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder={t(\"texts.authentification.signIn.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className=\"btn btn-sm mt-4 is-width-medium form-control\"\r\n          >\r\n            {t(\"button.signIn\")}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\r\nimport { useIntervalCounter } from \"../../app/custom-hooks/useIntervalCounter\";\r\nimport {\r\n  setLoggedInUser,\r\n  setIsNewRequest,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../app/typeDefinitions\";\r\nimport { RootState } from \"../../app/store\";\r\n\r\nconst LogOut = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { push } = useHistory();\r\n  const { logOut } = useAuthentification();\r\n  const { stopCounter } = useIntervalCounter();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    const logOutUser = (): void => {\r\n      const updateUserRequestsReplies = (loggedInUser: User): User => {\r\n        const clonedUser: User = JSON.parse(JSON.stringify(loggedInUser));\r\n        clonedUser.amountOfRequests = amountOfRequests;\r\n        clonedUser.amountOfReplies = amountOfReplies;\r\n        dispatch(setLoggedInUser(clonedUser));\r\n        return clonedUser;\r\n      };\r\n\r\n      const updateUserData = (loggedInUser: User): void => {\r\n        logOut(loggedInUser, (): void => {\r\n          stopCounter(intervalId as NodeJS.Timeout);\r\n          dispatch(setIsNewRequest(false));\r\n          dispatch(setAmountOfRequests(0));\r\n          dispatch(setAmountOfReplies(0));\r\n          push(\"/\");\r\n          scrollToTop();\r\n        });\r\n      };\r\n\r\n      const updatedUser = updateUserRequestsReplies(loggedInUser as User);\r\n      updateUserData(updatedUser);\r\n    };\r\n\r\n    logOutUser();\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  checkUserLoggedIn,\r\n  setErrorMessage,\r\n  setLoggedInUser,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../app/typeDefinitions\";\r\n\r\ntype Routing = {\r\n  protectRoute: Function;\r\n};\r\n\r\nexport const useRouting = (): Routing => {\r\n  const dispatch = useAppDispatch();\r\n  const routing = {\r\n    protectRoute(callbackFunction: Function): void {\r\n      dispatch(checkUserLoggedIn())\r\n        .unwrap()\r\n        .then((user: User): void => {\r\n          dispatch(setLoggedInUser(user));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          if (rejectedValue.message !== \"Unauthorized user\") {\r\n            dispatch(setErrorMessage(rejectedValue.message));\r\n          }\r\n        });\r\n    },\r\n  };\r\n  return routing;\r\n};\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  deletePlantImage,\r\n  setErrorMessage,\r\n  setIsDeletingPlantImage,\r\n  setIsUploadingPlantImage,\r\n  uploadPlantImage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { DestroyImageData, UploadImageData } from \"../typeDefinitions\";\r\n\r\ntype HandlePlantImage = {\r\n  createImage: Function;\r\n  deleteImage: Function;\r\n};\r\n\r\nexport const useHandlePlantImage = (): HandlePlantImage => {\r\n  const dispatch = useAppDispatch();\r\n  const handlePlantImage = {\r\n    createImage(uploadForm: any, callbackFunction: Function): void {\r\n      dispatch(setIsUploadingPlantImage(true));\r\n      dispatch(uploadPlantImage(uploadForm))\r\n        .unwrap()\r\n        .then((uploadImageData: UploadImageData): void => {\r\n          callbackFunction(uploadImageData);\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    deleteImage(destroyImageData: DestroyImageData): void {\r\n      dispatch(setIsDeletingPlantImage(true));\r\n      dispatch(deletePlantImage(destroyImageData))\r\n        .unwrap()\r\n        .then((): void => {\r\n          return;\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n  };\r\n  return handlePlantImage;\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandlePlantImage } from \"../../app/custom-hooks/useHandlePlantImage\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport { setErrorMessage } from \"../../reducer/jungleSwapSlice\";\r\nimport { UploadImageData } from \"../../app/typeDefinitions\";\r\nimport { RootState } from \"../../app/store\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst PlantCreateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingPlantImage\r\n  );\r\n  const isCreatingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isCreatingPlant\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { push, goBack } = useHistory();\r\n  const { protectRoute } = useRouting();\r\n  const { createImage } = useHandlePlantImage();\r\n  const { createPlant } = useHandlePlant();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      dispatch(setErrorMessage(null));\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const handleUploadPlantImage = (\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ): void => {\r\n    const { plantImage } = event.target as any;\r\n    const image = plantImage.files[0];\r\n    event.preventDefault();\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    createImage(\r\n      uploadForm,\r\n      ({ imageUrl, imagePublicId }: UploadImageData): void => {\r\n        createPlant(event.target, { imageUrl, imagePublicId }, (): void => {\r\n          push(\"/plants/my-own\");\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Name missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.nameMissing\");\r\n      case \"Form: Description missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.descriptionMissing\");\r\n      case \"Form: Size missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.sizeMissing\");\r\n      case \"Form: Location missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.locationMissing\");\r\n      case \"Form: Price missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.priceMissing\");\r\n      case \"Form: Image missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.imageMissing\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isUploadingPlantImage || isCreatingPlant ? true : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-12 col-md-6 offset-md-4\">\r\n        <h2 className=\"mb-5 text-left\">\r\n          {t(\"texts.plants.createPlant.form.headline\")}\r\n        </h2>\r\n        <form\r\n          className=\"form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleUploadPlantImage(event);\r\n          }}\r\n        >\r\n          <label htmlFor=\"enterName\">\r\n            {t(\"texts.plants.createPlant.form.name\")}\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterName\"\r\n            name=\"name\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterDescription\">\r\n            {t(\"texts.plants.createPlant.form.description\")}\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterDescription\"\r\n            name=\"description\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterSize\">\r\n            {t(\"texts.plants.createPlant.form.size\")}\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterSize\"\r\n            name=\"size\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            min=\"1\"\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterLocation\">\r\n            {t(\"texts.plants.createPlant.form.location\")}\r\n          </label>\r\n          <select\r\n            id=\"enterLocation\"\r\n            name=\"location\"\r\n            className=\"mb-4 form-control p-2\"\r\n          >\r\n            <option>{t(\"select.location.title\")}</option>\r\n            <option value=\"sun\">{t(\"select.location.sun\")}</option>\r\n            <option value=\"shade\">{t(\"select.location.shade\")}</option>\r\n            <option value=\"sun and shade\">\r\n              {t(\"select.location.sunAndShade\")}\r\n            </option>\r\n          </select>\r\n          <label htmlFor=\"enterPrice\">\r\n            {t(\"texts.plants.createPlant.form.price\")}\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterPrice\"\r\n            name=\"price\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            min=\"1\"\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterImage\">\r\n            {t(\"texts.plants.createPlant.form.image\")}\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"enterImage\"\r\n            name=\"plantImage\"\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <div className=\"col-12 text-right pr-0\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={buttonState()}\r\n              className=\"ml-4 mb-2 btn btn-sm form-control is-width-medium\"\r\n            >\r\n              {t(\"button.create\")}\r\n            </button>\r\n            <button\r\n              className=\"ml-4 mb-2 btn btn-sm form-control is-width-medium\"\r\n              onClick={(): void => {\r\n                goBack();\r\n              }}\r\n            >\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantCreateForm;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst PlantDetailsBuyerItems = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/plants/checkout\" className=\"is-link\">\r\n        <button className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\">\r\n          {t(\"button.buy\")}\r\n        </button>\r\n      </Link>\r\n      <Link to=\"/messages/create\" className=\"is-link\">\r\n        <button className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\">\r\n          {t(\"button.swap\")}\r\n        </button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetailsBuyerItems;\r\n","import { Link, useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport { useHandlePlantImage } from \"../../app/custom-hooks/useHandlePlantImage\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport { Plant, PlantId } from \"../../app/typeDefinitions\";\r\n\r\nconst PlantDetailsCreatorChoice = (): JSX.Element => {\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isDeletingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlant\r\n  );\r\n  const isDeletingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlantImage\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const isDeletingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingMessage\r\n  );\r\n  const { goBack } = useHistory();\r\n  const { deleteRemainingMessages } = useHandleMessage();\r\n  const { deleteImage } = useHandlePlantImage();\r\n  const { deletePlant } = useHandlePlant();\r\n  const { t } = useTranslation();\r\n  const { _id, imagePublicId } = plant as Plant;\r\n\r\n  const handleDelete = (): void => {\r\n    deleteRemainingMessages(messages, _id as PlantId);\r\n    deleteImage({ imagePublicId });\r\n    deletePlant(_id as PlantId, (): void => {\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isDeletingMessage || isDeletingPlantImage || isDeletingPlant\r\n      ? true\r\n      : false;\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-0\">\r\n      <Link to={\"/plants/update\"} className=\"is-link\">\r\n        <button className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\">\r\n          {t(\"button.update\")}\r\n        </button>\r\n      </Link>\r\n      <button\r\n        disabled={buttonState()}\r\n        className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\"\r\n        onClick={handleDelete}\r\n      >\r\n        {t(\"button.delete\")}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetailsCreatorChoice;\r\n","import PlantDetailsBuyerChoice from \"./PlantDetailsBuyerChoice\";\r\nimport PlantDetailsCreatorChoice from \"./PlantDetailsCreatorChoice\";\r\n\r\ntype PlantDetailsUserChoiceProps = {\r\n  isCreator: boolean;\r\n};\r\n\r\nconst PlantDetailsUserChoice = ({\r\n  isCreator,\r\n}: PlantDetailsUserChoiceProps): JSX.Element => {\r\n  if (isCreator) {\r\n    return <PlantDetailsCreatorChoice />;\r\n  }\r\n  return <PlantDetailsBuyerChoice />;\r\n};\r\n\r\nexport default PlantDetailsUserChoice;\r\n","import { useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { Plant, User } from \"../../app/typeDefinitions\";\r\nimport PlantDetailsUserChoice from \"./PlantDetailsUserChoice\";\r\n\r\ntype PlantItemsProps = {\r\n  plant: Plant;\r\n};\r\n\r\nconst PlantItems = ({ plant }: PlantItemsProps): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const { goBack } = useHistory();\r\n  const { t } = useTranslation();\r\n  const { name, description, size, imageUrl, location, price, creator } = plant;\r\n  const { _id } = creator as User;\r\n\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"card is-card-width-large\">\r\n        <img\r\n          src={imageUrl}\r\n          loading=\"lazy\"\r\n          alt={name}\r\n          className=\"card-img-top is-image-size-large\"\r\n        />\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"is-text-bold\">\r\n            {t(\"texts.plants.plantDetails.name\")}\r\n          </span>{\" \"}\r\n          {name}\r\n        </div>\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"is-text-bold\">\r\n            {t(\"texts.plants.plantDetails.description\")}\r\n          </span>{\" \"}\r\n          {description}\r\n        </div>\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"is-text-bold\">\r\n            {t(\"texts.plants.plantDetails.size\")}\r\n          </span>{\" \"}\r\n          {size} {t(\"texts.plants.plantDetails.sizeUnit\")}\r\n        </div>\r\n        <div className=\"ml-2 mt-2\">\r\n          <span>{t(\"texts.plants.plantDetails.likes\")}</span> {location}\r\n        </div>\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"is-text-bold\">\r\n            {t(\"texts.plants.plantDetails.price\")}\r\n          </span>{\" \"}\r\n          {price} {t(\"texts.plants.plantDetails.currency\")}\r\n        </div>\r\n        <div className=\"ml-2 mt-2 col justify-content-center\">\r\n          <div className=\"row-2 justify-content-center\">\r\n            <div className=\"card-body text-right pt-0\">\r\n              <PlantDetailsUserChoice\r\n                isCreator={(loggedInUser as User)._id === _id}\r\n              />\r\n              <button\r\n                className=\"btn btn-sm ml-2 form-control is-width-medium mb-3\"\r\n                onClick={(): void => {\r\n                  goBack();\r\n                }}\r\n              >\r\n                {t(\"button.goBack\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantItems;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport { Plant, PlantId } from \"../../app/typeDefinitions\";\r\nimport { RootState } from \"../../app/store\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport PlantItems from \"../../components/plants/PlantItems\";\r\n\r\nconst PlantDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isFetchingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlant\r\n  );\r\n  const { plantId } = useParams<{ plantId: PlantId }>();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchPlant } = useHandlePlant();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n  const { creator } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      fetchPlant(plantId, (): void => {\r\n        scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/sign-up\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2>{t(\"texts.plants.plantDetails.headline\")}</h2>\r\n      </div>\r\n      {isFetchingPlant || !creator ? (\r\n        <WaitSpinner />\r\n      ) : (\r\n        <PlantItems plant={plant} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandlePlantImage } from \"../../app/custom-hooks/useHandlePlantImage\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport { setPlant, setDestroyImageData } from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, UploadImageData } from \"../../app/typeDefinitions\";\r\nimport { RootState } from \"../../app/store\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\n\r\nconst PlantUpdateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingPlantImage\r\n  );\r\n  const isDeletingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlantImage\r\n  );\r\n  const destroyImageData = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.destroyImageData\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isUpdatingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUpdatingPlant\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { protectRoute } = useRouting();\r\n  const { createImage, deleteImage } = useHandlePlantImage();\r\n  const { updatePlant } = useHandlePlant();\r\n  const selectElementRef = useRef<HTMLSelectElement | null>(null);\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n  const { name, description, size, imageUrl, price } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    const setPlantLocation = ({ location }: Plant): void => {\r\n      if (location) {\r\n        (selectElementRef.current as HTMLSelectElement).value = location;\r\n      }\r\n    };\r\n\r\n    protectRoute((): void => {\r\n      setPlantLocation(plant);\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const handlePlantEntryChange = (\r\n    { target }: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\r\n    plant: Plant\r\n  ): void => {\r\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\r\n    switch (target.name) {\r\n      case \"name\":\r\n        clonedPlant.name = target.value;\r\n        break;\r\n      case \"description\":\r\n        clonedPlant.description = target.value;\r\n        break;\r\n      case \"size\":\r\n        clonedPlant.size = target.value as unknown as number;\r\n        break;\r\n      case \"location\":\r\n        clonedPlant.location = target.value;\r\n        break;\r\n      case \"price\":\r\n        clonedPlant.price = target.value as unknown as number;\r\n    }\r\n    dispatch(setPlant(clonedPlant));\r\n  };\r\n\r\n  const handlePlantImageChange = (\r\n    { target }: React.ChangeEvent<HTMLInputElement>,\r\n    { imagePublicId }: Plant\r\n  ): void => {\r\n    const image = (target.files as any)[0];\r\n    dispatch(setDestroyImageData({ imagePublicId }));\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    createImage(\r\n      uploadForm,\r\n      ({ imageUrl, imagePublicId }: UploadImageData): void => {\r\n        const clonedPlant = JSON.parse(JSON.stringify(plant));\r\n        clonedPlant.imagePublicId = imagePublicId;\r\n        clonedPlant.imageUrl = imageUrl;\r\n        dispatch(setPlant(clonedPlant));\r\n      }\r\n    );\r\n  };\r\n\r\n  const handleUpdatePlant = () => {\r\n    if (destroyImageData) {\r\n      deleteImage(destroyImageData);\r\n    }\r\n    updatePlant(plant, (): void => {\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant\r\n      ? true\r\n      : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mt-5 mb-4 text-left\">\r\n          {t(\"texts.plants.updatePlant.form.headline\")}\r\n        </h2>\r\n        <div className=\"card is-card-width-large mb-5\">\r\n          {isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant ? (\r\n            <WaitSpinner />\r\n          ) : (\r\n            <img\r\n              src={imageUrl}\r\n              loading=\"lazy\"\r\n              alt={name}\r\n              className=\"mb-2 is-image-size-medium\"\r\n            />\r\n          )}\r\n          <div className=\"card-body\">\r\n            <label htmlFor=\"updateName\">\r\n              {t(\"texts.plants.updatePlant.form.name\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateName\"\r\n              name=\"name\"\r\n              value={name}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateDescription\">\r\n              {t(\"texts.plants.updatePlant.form.description\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateDescription\"\r\n              name=\"description\"\r\n              value={description}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateSize\">\r\n              {t(\"texts.plants.updatePlant.form.size\")}\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updateSize\"\r\n              name=\"size\"\r\n              value={size}\r\n              min=\"1\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateLocation\">\r\n              {t(\"texts.plants.updatePlant.form.location\")}\r\n            </label>\r\n            <select\r\n              ref={selectElementRef}\r\n              id=\"updateLocation\"\r\n              name=\"location\"\r\n              className=\"mb-4 form-control px-2\"\r\n              onChange={(event: React.ChangeEvent<HTMLSelectElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            >\r\n              <option value=\"sun\">{t(\"select.location.sun\")}</option>\r\n              <option value=\"shade\">{t(\"select.location.shade\")}</option>\r\n              <option value=\"sun and shade\">\r\n                {t(\"select.location.sunAndShade\")}\r\n              </option>\r\n            </select>\r\n            <label htmlFor=\"updatePrice\">\r\n              {t(\"texts.plants.updatePlant.form.price\")}\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updatePrice\"\r\n              name=\"price\"\r\n              value={price}\r\n              min=\"1\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateImage\">\r\n              {t(\"texts.plants.updatePlant.form.image\")}\r\n            </label>\r\n            <input\r\n              type=\"file\"\r\n              id=\"updateImage\"\r\n              name=\"plantImage\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantImageChange(event, plant);\r\n              }}\r\n            />\r\n            <div className=\"col-12 text-right pr-0\">\r\n              <button\r\n                disabled={buttonState()}\r\n                className=\"btn btn-sm ml-4 form-control is-width-medium mb-2\"\r\n                onClick={handleUpdatePlant}\r\n              >\r\n                {t(\"button.save\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantUpdateForm;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useHandlePayment } from \"../../app/custom-hooks/useHandlePayment\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport { scrollToPlants } from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../../app/typeDefinitions\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { Stripe } from \"@stripe/stripe-js\";\r\n\r\ntype CardStyle = {\r\n  style: {\r\n    base: {\r\n      color: string;\r\n      fontFamily: string;\r\n      fontSmoothing: string;\r\n      fontSize: string;\r\n      \"::placeholder\": { color: string };\r\n    };\r\n    invalid: {\r\n      color: string;\r\n      iconColor: string;\r\n    };\r\n  };\r\n};\r\n\r\nconst CheckoutForm = (): JSX.Element => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(\"\");\r\n  const clientSecret = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.clientSecret\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useAppDispatch();\r\n  const { push } = useHistory();\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const { initializePayment } = useHandlePayment();\r\n  const { t } = useTranslation();\r\n  const { _id, name, price } = plant as Plant;\r\n  const cardStyle: CardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    initializePayment(plant);\r\n    return (): void => {\r\n      push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    };\r\n  }, []);\r\n\r\n  const handleInputChanges = async (event: any): Promise<void> => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    // Stripe.js has not yet been loaded\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n    setIsProcessing(true);\r\n    const payload = await (stripe as Stripe).confirmCardPayment(clientSecret, {\r\n      payment_method: { card: elements.getElement(CardElement) } as any,\r\n    });\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    } else {\r\n      setPaymentError(\"\");\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n\r\n  const messageVisibility = (): string => {\r\n    return isSucceeded ? \"result-message text-center\" : \"is-hidden\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"container col-md-9 col-sm-12\">\r\n      <h2 className=\"mb-4 is-word-break\">{name}</h2>\r\n      <h3 className=\"mb-4\">\r\n        {t(\"texts.plants.checkout.form.price\")} {price}{\" \"}\r\n        {t(\"texts.plants.checkout.form.currency\")}\r\n      </h3>\r\n      <form\r\n        id=\"payment-form\"\r\n        className=\"checkoutForm form-style mt-5\"\r\n        onSubmit={handleSubmitPayment}\r\n      >\r\n        <CardElement\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          className=\"p-2\"\r\n          onChange={handleInputChanges}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            type=\"submit\"\r\n            id=\"submit\"\r\n            disabled={isProcessing || isDisabled || isSucceeded}\r\n            className=\"btn btn-sm mt-5 mb-4 card-button\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isProcessing ? (\r\n                <div id=\"spinner\" className=\"spinner is-text-bold\" />\r\n              ) : (\r\n                t(\"texts.plants.checkout.form.payNow\")\r\n              )}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {/* Show any error that happens when processing the payment */}\r\n        {paymentError && (\r\n          <div role=\"alert\" className=\"card-error\">\r\n            {paymentError}\r\n          </div>\r\n        )}\r\n        {/* Show success message upon completion */}\r\n        <p className={messageVisibility()}>\r\n          {t(\"texts.plants.checkout.form.paymentSuccessful\")}\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {isSucceeded ? (\r\n          <Link\r\n            to={\"/\"}\r\n            onClick={(): void => {\r\n              dispatch(scrollToPlants());\r\n            }}\r\n            className=\"is-link\"\r\n          >\r\n            <button className=\"btn btn-sm form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        ) : (\r\n          <Link to={`/plants/fetch/${_id}`} className=\"is-link\">\r\n            <button className=\"btn btn-sm form-control pl-3 pr-3\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  createPayment,\r\n  setClientSecret,\r\n  setErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\ntype HandlePayment = {\r\n  initializePayment: Function;\r\n};\r\n\r\nexport const useHandlePayment = (): HandlePayment => {\r\n  const dispatch = useAppDispatch();\r\n  const handlePayment = {\r\n    initializePayment(plant: Plant): void {\r\n      dispatch(createPayment(plant))\r\n        .unwrap()\r\n        .then((payment: any): void => {\r\n          dispatch(setClientSecret(payment.clientSecret));\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n  };\r\n  return handlePayment;\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"../../components/apis/CheckoutForm\";\r\n\r\nconst stripePromise = loadStripe(\r\n  \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n);\r\n\r\nconst CheckoutView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const { protectRoute } = useRouting();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5\">\r\n        <Elements stripe={stripePromise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutView;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { User, Message, Plant } from \"../../app/typeDefinitions\";\r\n\r\ntype RequestThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst RequestTile = ({ message }: RequestThumbnailProps): JSX.Element => {\r\n  const { t } = useTranslation();\r\n  const { _id, buyer, plant } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <div className=\"card p-3 mt-4\">\r\n      <h4>\r\n        {t(\"texts.requests.requestTile.subheadline\")} {name}\r\n      </h4>\r\n      <h5>{username}</h5>\r\n      <div className=\"text-center\">\r\n        <Link\r\n          to={`/requests/fetch/${_id}`}\r\n          className=\"btn is-width-medium form-control is-link\"\r\n        >\r\n          {t(\"link.details\")}\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestTile;\r\n","import { useAppSelector } from \"../../app/hooks\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { Message, User } from \"../../app/typeDefinitions\";\r\nimport RequestTile from \"./RequestTile\";\r\n\r\nconst RequestsCollection = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((message: Message): JSX.Element | null => {\r\n        const { _id, seller, messageState } = message;\r\n        return (seller as User)._id === (loggedInUser as User)._id &&\r\n          messageState === true ? (\r\n          <RequestTile message={message} key={_id} />\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsCollection;\r\n","import { useNavigation } from \"../../app/custom-hooks/useNavigation\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst GoBackButton = (): JSX.Element => {\r\n  const { goToHome } = useNavigation();\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"text-right pr-2\">\r\n      <button\r\n        className=\"btn btn-sm mt-4 is-width-medium form-control\"\r\n        onClick={(): void => {\r\n          goToHome();\r\n        }}\r\n      >\r\n        {t(\"button.goBack\")}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoBackButton;\r\n","import { useHistory } from \"react-router\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\n\r\ntype Navigation = {\r\n  goToHome: Function;\r\n};\r\n\r\nexport const useNavigation = (): Navigation => {\r\n  const { push } = useHistory();\r\n  const { scrollToTop } = scroll;\r\n\r\n  const navigation = {\r\n    goToHome(): void {\r\n      push(\"/\");\r\n      scrollToTop();\r\n    },\r\n  };\r\n  return navigation;\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport {\r\n  setIsNewRequest,\r\n  setStartAmountOfRequests,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../../app/store\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport RequestsCollection from \"../../components/requests/RequestsCollection\";\r\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\r\n\r\nconst RequestsView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchMessages } = useHandleMessage();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    const resetRequestVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewRequest(false));\r\n      scrollToTop();\r\n    };\r\n\r\n    protectRoute((): void => {\r\n      fetchMessages((): void => {\r\n        isUserChange && dispatch(setStartAmountOfRequests());\r\n        resetRequestVariableAndScrollToTop();\r\n      });\r\n    });\r\n    return () => {\r\n      resetRequestVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2>{t(\"texts.requests.overview.headline\")}</h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <GoBackButton />\r\n        {isFetchingMessages ? <WaitSpinner /> : <RequestsCollection />}\r\n        {amountOfRequests !== 0 && <GoBackButton />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsView;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { User, Plant, Message } from \"../../app/typeDefinitions\";\r\n\r\ntype ReplyThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst ReplyThumbnail = ({ message }: ReplyThumbnailProps): JSX.Element => {\r\n  const { _id, seller, plant } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"card p-3 mt-4 \">\r\n      <h4>\r\n        {t(\"texts.replies.replyTile.headline\")} {name}\r\n      </h4>\r\n      <h5>\r\n        {t(\"texts.replies.replyTile.subheadline\")} {username}\r\n      </h5>\r\n      <div className=\"text-center\">\r\n        <Link\r\n          to={`/replies/fetch/${_id}`}\r\n          className=\"btn is-width-medium form-control is-link\"\r\n        >\r\n          {t(\"link.details\")}\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyThumbnail;\r\n","import { useAppSelector } from \"../../app/hooks\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { Message, User } from \"../../app/typeDefinitions\";\r\nimport ReplyTile from \"./ReplyTile\";\r\n\r\nconst RepliesCollection = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((message: Message): JSX.Element | null => {\r\n        const { _id, buyer, reply } = message;\r\n        return (buyer as User)._id === (loggedInUser as User)._id &&\r\n          reply !== \"\" ? (\r\n          <ReplyTile message={message} key={_id} />\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesCollection;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport {\r\n  setIsNewReply,\r\n  setStartAmountOfReplies,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../../app/store\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport RepliesCollection from \"../../components/replies/RepliesCollection\";\r\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\r\n\r\nconst RepliesView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchMessages } = useHandleMessage();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    const resetReplyVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewReply(false));\r\n      scrollToTop();\r\n    };\r\n\r\n    protectRoute((): void => {\r\n      fetchMessages((): void => {\r\n        isUserChange && dispatch(setStartAmountOfReplies());\r\n        resetReplyVariableAndScrollToTop();\r\n      });\r\n    });\r\n    return () => {\r\n      resetReplyVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2>{t(\"texts.replies.overview.headline\")}</h2>\r\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\r\n        <GoBackButton />\r\n        {isFetchingMessages ? <WaitSpinner /> : <RepliesCollection />}\r\n        {amountOfReplies !== 0 && <GoBackButton />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesView;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport { setErrorMessage } from \"../../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message } from \"../../app/typeDefinitions\";\r\nimport { RootState } from \"../../app/store\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst RequestCreateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isCreatingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isCreatingMessage\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { protectRoute } = useRouting();\r\n  const { createMessage } = useHandleMessage();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n  const { name } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      dispatch(setErrorMessage(null));\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const handleCreateMessageForRequest = (\r\n    event: React.FormEvent<HTMLFormElement>,\r\n    { _id, creator }: Plant\r\n  ): void => {\r\n    const { request } = event.target as any;\r\n    const newMessage: Message = {\r\n      seller: (creator as User)._id,\r\n      plant: _id,\r\n      request: request.value,\r\n    };\r\n    event.preventDefault();\r\n    createMessage(newMessage, (): void => {\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Request text missing\":\r\n        return t(\"errorTexts.messages.createRequest.form.requestTextMissing\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isCreatingMessage ? true : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\">\r\n          {t(\"texts.requests.createRequest.form.headline\")}\r\n        </h2>\r\n        <h3 className=\"mb-4\">\r\n          {t(\"texts.requests.createRequest.form.subheadline\")} {name}\r\n        </h3>\r\n        <form\r\n          className=\"pl-0 form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleCreateMessageForRequest(event, plant);\r\n          }}\r\n        >\r\n          <div>\r\n            <textarea\r\n              name=\"request\"\r\n              cols={35}\r\n              rows={7}\r\n              className=\"mb-4 form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <div className=\"text-right\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={buttonState()}\r\n              className=\"btn btn-sm mx-2 form-control is-width-medium\"\r\n            >\r\n              {t(\"button.send\")}\r\n            </button>\r\n            <button\r\n              className=\"btn btn-sm mx-2 form-control is-width-medium\"\r\n              onClick={(): void => {\r\n                goBack();\r\n              }}\r\n            >\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestCreateForm;\r\n","import WaitSpinner from \"./WaitSpinner\";\r\n\r\ntype WaitSpinnerTextProps = {\r\n  text: string;\r\n};\r\n\r\nconst WaitSpinnerText = ({ text }: WaitSpinnerTextProps): JSX.Element => {\r\n  return (\r\n    <div className=\"container d-flex align-items-center justify-content-center mt-5\">\r\n      <WaitSpinner />\r\n      <span className=\"is-text-bold\">{text}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitSpinnerText;\r\n","type ReplyProps = {\r\n  headline: string;\r\n  text: string | undefined;\r\n};\r\n\r\nconst Reply = ({ headline, text }: ReplyProps): JSX.Element | null => {\r\n  if (!text) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h5>{headline}</h5>\r\n      <p className=\"text-field p-3 mb-4\">{text}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reply;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport {\r\n  setMessage,\r\n  decreaseAmountOfRequests,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../../app/typeDefinitions\";\r\nimport { RootState } from \"../../app/store\";\r\nimport WaitSpinnerText from \"../../components/spinners/WaitSpinnerText\";\r\nimport Reply from \"../../components/replies/Reply\";\r\n\r\nconst RequestDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchMessage, updateMessage } = useHandleMessage();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n  const { _id, buyer, plant, request, reply } = message as Message;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      fetchMessage(messageId, (): void => {\r\n        scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const handleChangeMessageState = (message: Message): void => {\r\n    const setBuyerMessageInactive = (message: Message): Message => {\r\n      const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n      clonedMessage.messageState = false;\r\n      dispatch(setMessage(clonedMessage));\r\n      return clonedMessage;\r\n    };\r\n\r\n    const updateBuyerMessage = (updatedMessage: Message) => {\r\n      updateMessage(\r\n        updatedMessage._id as MessageId,\r\n        updatedMessage,\r\n        (): void => {\r\n          dispatch(decreaseAmountOfRequests());\r\n          goBack();\r\n        }\r\n      );\r\n    };\r\n\r\n    const updatedMessage = setBuyerMessageInactive(message);\r\n    updateBuyerMessage(updatedMessage);\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  if (isFetchingMessage || !buyer || !plant) {\r\n    return <WaitSpinnerText text={\"Loading request\"} />;\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">\r\n          {t(\"texts.requests.requestDetails.headline\")} {name}\r\n        </h2>\r\n        <h5>\r\n          {t(\"texts.requests.requestDetails.subheadline\")} {username}\r\n        </h5>\r\n        <p className=\"text-field p-3 mb-4\">{request}</p>\r\n        <Reply\r\n          headline={t(\"texts.requests.requestDetails.yourReply\")}\r\n          text={reply}\r\n        />\r\n        <div className=\"text-right px-3\">\r\n          {!reply && (\r\n            <Link to={`/messages/update/${_id}`} className=\"is-link\">\r\n              <button className=\"btn btn-sm ml-2 is-width-medium form-control mb-1\">\r\n                {t(\"button.reply\")}\r\n              </button>\r\n            </Link>\r\n          )}\r\n          <button\r\n            className=\"btn btn-sm ml-2 is-width-medium form-control mb-1\"\r\n            onClick={(): void => {\r\n              handleChangeMessageState(message);\r\n            }}\r\n          >\r\n            {t(\"button.done\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link\r\n            to={\"/requests/fetch-all\"}\r\n            className=\"is-link\"\r\n            onClick={scrollToTop}\r\n          >\r\n            <button className=\"btn btn-sm mt-4 is-width-medium form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport { decreaseAmountOfReplies } from \"../../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../../app/typeDefinitions\";\r\nimport { RootState } from \"../../app/store\";\r\nimport WaitSpinnerText from \"../../components/spinners/WaitSpinnerText\";\r\nimport Reply from \"../../components/replies/Reply\";\r\n\r\nconst ReplyDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const isDeletingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingMessage\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchMessage, deleteMessage } = useHandleMessage();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n  const { _id, seller, plant, request, reply } = message as Message;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      fetchMessage(messageId, (): void => {\r\n        scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const handleDeleteMessage = (messageId: MessageId): void => {\r\n    deleteMessage(messageId, (): void => {\r\n      dispatch(decreaseAmountOfReplies());\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isDeletingMessage ? true : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  if (isFetchingMessage || !seller || !plant) {\r\n    return <WaitSpinnerText text={\"Loading reply\"} />;\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">\r\n          {t(\"texts.replies.replyDetails.headline\")} {name}\r\n        </h2>\r\n        <p className=\"text-field p-3 mb-4\">{request}</p>\r\n        <Reply\r\n          headline={`${t(\"texts.replies.replyDetails.replyBy\")} ${username}`}\r\n          text={reply}\r\n        />\r\n        <div className=\"text-right px-3\">\r\n          <button\r\n            disabled={buttonState()}\r\n            className=\"btn btn-sm ml-2 is-width-medium form-control mb-1\"\r\n            onClick={(): void => {\r\n              handleDeleteMessage(_id as MessageId);\r\n            }}\r\n          >\r\n            {t(\"button.delete\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link\r\n            to={\"/replies/fetch-all\"}\r\n            className=\"is-link\"\r\n            onClick={scrollToTop}\r\n          >\r\n            <button className=\"btn btn-sm mt-4 is-width-medium form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyDetails;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport { setMessage } from \"../../reducer/jungleSwapSlice\";\r\nimport { Message, MessageId } from \"../../app/typeDefinitions\";\r\nimport { RootState } from \"../../app/store\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst RequestUpdateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const isUpdatingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUpdatingMessage\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { protectRoute } = useRouting();\r\n  const { updateMessage } = useHandleMessage();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n  const { request } = message as Message;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const handleCreateReply = (\r\n    { target }: React.ChangeEvent<HTMLTextAreaElement>,\r\n    message: Message\r\n  ): void => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.reply = target.value;\r\n    dispatch(setMessage(clonedMessage));\r\n  };\r\n\r\n  const handleUpdateMessage = (updatedMessage: Message): void => {\r\n    updateMessage(updatedMessage._id as MessageId, updatedMessage, (): void => {\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Reply text missing\":\r\n        return t(\"errorTexts.messages.updateRequest.form.replyTextMissing\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isUpdatingMessage ? true : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\">\r\n          {t(\"texts.requests.updateRequest.form.headline\")}\r\n        </h2>\r\n        <div className=\"card is-card-width-small mb-5\">\r\n          <div className=\"card-body\">\r\n            <p>{request}</p>\r\n            <textarea\r\n              name=\"reply\"\r\n              placeholder={t(\r\n                \"texts.requests.updateRequest.form.replyPlaceholder\"\r\n              )}\r\n              cols={31}\r\n              rows={6}\r\n              className=\"mb-4 form-control is-width-full\"\r\n              onChange={(\r\n                event: React.ChangeEvent<HTMLTextAreaElement>\r\n              ): void => {\r\n                handleCreateReply(event, message);\r\n              }}\r\n            />\r\n            <ErrorMessage\r\n              message={errorMessage}\r\n              outputFunction={convertErrorMessage}\r\n            />\r\n            <div className=\"row justify-content-end px-3\">\r\n              <button\r\n                disabled={buttonState()}\r\n                className=\"btn btn-sm is-width-medium form-control mr-3 mb-2\"\r\n                onClick={(): void => {\r\n                  handleUpdateMessage(message);\r\n                }}\r\n              >\r\n                {t(\"button.submit\")}\r\n              </button>\r\n              <button\r\n                className=\"btn btn-sm is-width-medium form-control mb-2\"\r\n                onClick={(): void => {\r\n                  goBack();\r\n                }}\r\n              >\r\n                {t(\"button.goBack\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestUpdateForm;\r\n","import { useTranslation } from \"react-i18next\";\r\n\r\nconst Unauthorized = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"unauthorized has-background-image2\">\r\n      <div>\r\n        <h1>{t(\"texts.unauthorized.headline\")}</h1>\r\n        <h2>{t(\"texts.unauthorized.subheadline1\")}</h2>\r\n        <h3>{t(\"texts.unauthorized.subheadline2\")}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Unauthorized;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"not-found has-background-image2\">\r\n      <div>\r\n        <h1>{t(\"texts.notFound.headline\")}</h1>\r\n        <h2>{t(\"texts.notFound.subheadline1\")}</h2>\r\n        <h3>{t(\"texts.notFound.subheadline2\")}</h3>\r\n        <Link to={\"/\"} className=\"is-link\">\r\n          <button className=\"ml-2 btn btn-sm is-width-medium form-control\">\r\n            {t(\"button.takeMeHome\")}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useEffect } from \"react\";\r\n\r\ntype KommunicateSettings = {\r\n  appId: string;\r\n  popupWidget: boolean;\r\n  automaticChatOpenOnNavigation: boolean;\r\n};\r\n\r\nconst KommunicateChat = (): JSX.Element => {\r\n  useEffect(() => {\r\n    const createLauncherIcon = (htmlDocument: Document, method: any): void => {\r\n      const kommunicateSettings: KommunicateSettings = {\r\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      const scriptElement = htmlDocument.createElement(\"script\");\r\n      scriptElement.type = \"text/javascript\";\r\n      scriptElement.async = true;\r\n      scriptElement.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      const headElement = htmlDocument.getElementsByTagName(\"head\")[0];\r\n      headElement.appendChild(scriptElement);\r\n      (window as any).kommunicate = method;\r\n      method._globals = kommunicateSettings;\r\n    };\r\n\r\n    createLauncherIcon(document, (window as any).kommunicate || {});\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default KommunicateChat;\r\n","import { useAppSelector } from \"../../app/hooks\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { Plant, User } from \"../../app/typeDefinitions\";\r\nimport PlantThumbnail from \"./PlantThumbnail\";\r\n\r\nconst PlantsCreatedCollection = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n\r\n  return (\r\n    <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-2 row-cols-xl-3 row-cols-xxl-3\">\r\n      {plants.map((plant: Plant): JSX.Element | null => {\r\n        const { _id, creator } = plant;\r\n        return (creator as User)._id === (loggedInUser as User)._id ? (\r\n          <PlantThumbnail plant={plant} key={_id} />\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCreatedCollection;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport { RootState } from \"../../app/store\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport PlantsCreatedCollection from \"../../components/plants/PlantsCreatedCollection\";\r\n\r\nconst PlantsCreatedView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isFetchingPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlants\r\n  );\r\n  const { protectRoute } = useRouting();\r\n  const { fetchPlants } = useHandlePlant();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      fetchPlants((): void => {\r\n        scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-5\">\r\n        <h2>{t(\"texts.plants.myPlants.headline\")}</h2>\r\n      </div>\r\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsCreatedCollection />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCreatedView;\r\n","import { useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch } from \"../../app/hooks\";\r\nimport { setErrorMessage } from \"../../reducer/jungleSwapSlice\";\r\n\r\ntype ModalBodyProps = {\r\n  headline: string;\r\n  subheadline: string;\r\n  text: string;\r\n  isClose: boolean;\r\n};\r\n\r\nconst ModalBody = ({\r\n  headline,\r\n  subheadline,\r\n  text,\r\n  isClose,\r\n}: ModalBodyProps): JSX.Element => {\r\n  const divElementRef = useRef<HTMLDivElement | null>(null);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  const handleCloseModal = (): void => {\r\n    dispatch(setErrorMessage(null));\r\n  };\r\n\r\n  const handleClickOutside = ({ target }: any): void => {\r\n    if (divElementRef.current === target) {\r\n      handleCloseModal();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={divElementRef}\r\n      className=\"error-modal fade-error-modal-in\"\r\n      onClick={(event: any): void => {\r\n        isClose && handleClickOutside(event);\r\n      }}\r\n    >\r\n      <div className=\"error-modal-box\">\r\n        <h1>{headline}</h1>\r\n        <h2>{subheadline}</h2>\r\n        <h3>{text}</h3>\r\n        {isClose && (\r\n          <button\r\n            className=\"btn form-control is-width-small mt-4 mb-3\"\r\n            onClick={handleCloseModal}\r\n          >\r\n            {t(\"button.proceed\")}\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalBody;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport ModalBody from \"./ModalBody\";\r\n\r\ntype ErrorModalProps = {\r\n  message: string | null;\r\n};\r\n\r\nconst ErrorModal = ({ message }: ErrorModalProps): JSX.Element | null => {\r\n  const { t } = useTranslation();\r\n\r\n  const convertErrorMessage = (message: string): string => {\r\n    switch (message) {\r\n      // Authentification\r\n      case \"Error while creating user\":\r\n        return t(\"errorTexts.authentification.signUp.errorWhileCreatingUser\");\r\n      case \"User does not exist\":\r\n        return t(\"errorTexts.authentification.signIn.userUnknown\");\r\n      case \"Could not update user\":\r\n        return t(\"errorTexts.authentification.logOut.noUserUpdate\");\r\n      // Plants\r\n      case \"Create plant failed\":\r\n        return t(\"errorTexts.plants.createPlantFailed\");\r\n      case \"Fetch plant failed\":\r\n        return t(\"errorTexts.plants.fetchPlantFailed\");\r\n      case \"Fetch all plants failed\":\r\n        return t(\"errorTexts.plants.techAllPlantsFailed\");\r\n      case \"Search plant failed\":\r\n        return t(\"errorTexts.plants.searchPlantFailed\");\r\n      case \"Update plant failed\":\r\n        return t(\"errorTexts.plants.updatePlantFailed\");\r\n      case \"Delete plant failed\":\r\n        return t(\"errorTexts.plants.deletePlantFailed\");\r\n      // Messages\r\n      case \"Create message failed\":\r\n        return t(\"errorTexts.messages.createMessageFailed\");\r\n      case \"Fetch message failed\":\r\n        return t(\"errorTexts.messages.fetchMessageFailed\");\r\n      case \"Fetch all messages failed\":\r\n        return t(\"errorTexts.messages.fetchAllMessagesFailed\");\r\n      case \"Update message failed\":\r\n        return t(\"errorTexts.updateMessageFailed\");\r\n      case \"Delete message failed\":\r\n        return t(\"errorTexts.deleteMessageFailed\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  if (!message || message.includes(\"Form\")) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ModalBody\r\n      headline={t(\"texts.errorModal.headline\")}\r\n      subheadline={t(\"texts.errorModal.subheadline\")}\r\n      text={convertErrorMessage(message)}\r\n      isClose={true}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorModal;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport ModalBody from \"./ModalBody\";\r\n\r\ntype OfflineModalProps = {\r\n  isOnline: boolean;\r\n};\r\n\r\nconst OfflineModal = ({ isOnline }: OfflineModalProps): JSX.Element | null => {\r\n  const { t } = useTranslation();\r\n\r\n  if (isOnline) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ModalBody\r\n      headline={t(\"texts.offlineModal.headline\")}\r\n      subheadline={t(\"texts.offlineModal.subheadline\")}\r\n      text={t(\"errorTexts.offline\")}\r\n      isClose={false}\r\n    />\r\n  );\r\n};\r\n\r\nexport default OfflineModal;\r\n","import { useAppSelector } from \"../../app/hooks\";\r\nimport { useOnlineStatus } from \"../../app/custom-hooks/useOnlineStatus\";\r\nimport { RootState } from \"../../app/store\";\r\nimport ErrorModal from \"./ErrorModal\";\r\nimport OfflineModal from \"./OfflineModal\";\r\n\r\nconst Modals = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const isOnline = useOnlineStatus();\r\n\r\n  if (isOnline) {\r\n    return <ErrorModal message={errorMessage} />;\r\n  }\r\n  return <OfflineModal isOnline={isOnline} />;\r\n};\r\n\r\nexport default Modals;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useOnlineStatus = (): boolean => {\r\n  const [isOnline, setIsOnline] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    const handleOfflineEventCallback = (): void => {\r\n      setIsOnline(false);\r\n    };\r\n\r\n    const handleOnlineEventCallback = (): void => {\r\n      setIsOnline(true);\r\n    };\r\n\r\n    window.addEventListener(\"offline\", handleOfflineEventCallback);\r\n    window.addEventListener(\"online\", handleOnlineEventCallback);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"offline\", handleOfflineEventCallback);\r\n      window.removeEventListener(\"online\", handleOnlineEventCallback);\r\n    };\r\n  }, []);\r\n\r\n  return isOnline;\r\n};\r\n","import { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport NavBar from \"./components/navigation/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./views/home/Home\";\r\nimport SignUp from \"./views/authentification/SignUp\";\r\nimport SignIn from \"./views/authentification/SignIn\";\r\nimport LogOut from \"./components/authentification/LogOut\";\r\nimport CreatePlantForm from \"./views/plants/PlantCreateForm\";\r\nimport PlantDetails from \"./views/plants/PlantDetails\";\r\nimport UpdatePlantForm from \"./views/plants/PlantUpdateForm\";\r\nimport CheckoutPage from \"./views/apis/CheckoutView\";\r\nimport RequestsOverview from \"./views/requests/RequestsView\";\r\nimport RepliesOverview from \"./views/replies/RepliesView\";\r\nimport CreateRequestForm from \"./views/requests/RequestCreateForm\";\r\nimport RequestDetails from \"./views/requests/RequestDetails\";\r\nimport ReplyDetails from \"./views/replies/ReplyDetails\";\r\nimport UpdateRequestForm from \"./views/requests/RequestUpdateForm\";\r\nimport Unauthorized from \"./views/authentification/Unauthorized\";\r\nimport NotFound from \"./views/errors/NotFound\";\r\nimport KommunicateChat from \"./components/apis/KommunicateChat\";\r\nimport MyPlants from \"./views/plants/PlantsCreatedView\";\r\nimport Modals from \"./components/modals/Modals\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n\r\n        <Route path=\"/auth/sign-up\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/auth/sign-in\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/auth/log-out\">\r\n          <LogOut />\r\n        </Route>\r\n        <Route path=\"/auth/unauthorized\">\r\n          <Unauthorized />\r\n        </Route>\r\n\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/fetch/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n        <Route path=\"/plants/my-own\">\r\n          <MyPlants />\r\n        </Route>\r\n\r\n        <Route path=\"/messages/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/messages/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch-all\">\r\n          <RequestsOverview />\r\n        </Route>\r\n        <Route path=\"/requests/fetch/:messageId\">\r\n          <RequestDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/replies/fetch-all\">\r\n          <RepliesOverview />\r\n        </Route>\r\n        <Route path=\"/replies/fetch/:messageId\">\r\n          <ReplyDetails />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Modals />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"../reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","const en = {\r\n  translations: {\r\n    link: {\r\n      jungleSwap: \"JungleSwap\",\r\n      allPlants: \"All Plants\",\r\n      myPlants: \"My Plants\",\r\n      createPlant: \"Create Plant\",\r\n      requests: \"Requests\",\r\n      replies: \"Replies\",\r\n      logOut: \"Log out\",\r\n      tryIt: \"Try it!\",\r\n      signIn: \"Sign in\",\r\n      signUp: \"Sign up\",\r\n      details: \"Details\",\r\n      tooltipps: {\r\n        newRequest: \"new request\",\r\n        newReply: \"new reply\",\r\n        search: \"search plant\",\r\n      },\r\n    },\r\n\r\n    button: {\r\n      signIn: \"Sign in\",\r\n      signUp: \"Sign up\",\r\n      create: \"Create\",\r\n      update: \"Update\",\r\n      save: \"Save\",\r\n      delete: \"Delete\",\r\n      send: \"Send\",\r\n      submit: \"Submit\",\r\n      buy: \"Buy\",\r\n      swap: \"Swap\",\r\n      reply: \"Reply\",\r\n      done: \"Done\",\r\n      goBack: \"Back\",\r\n      more: \"More\",\r\n      proceed: \"Proceed\",\r\n      takeMeHome: \"Take me home\",\r\n    },\r\n\r\n    select: {\r\n      location: {\r\n        title: \"Select location\",\r\n        sun: \"sun\",\r\n        shade: \"shade\",\r\n        sunAndShade: \"sun and shade\",\r\n      },\r\n    },\r\n\r\n    texts: {\r\n      home: {\r\n        title: {\r\n          headline: \"JungleSwap\",\r\n          subheadline: \"Share your green heart\",\r\n        },\r\n        about: {\r\n          headline: \"Welcome to JungleSwap!\",\r\n          subheadline: \"Add green to your Home\",\r\n          paragraph: {\r\n            line1: \"It's easy-peasy.\",\r\n            line2: \"Share your plant offshoots.\",\r\n            line3: \"Make money!\",\r\n            line4: \"Or swap them for another plant.\",\r\n            line5: \"Don't have any baby plants?\",\r\n            line6: \"You can simply shop and give a plant a new home.\",\r\n          },\r\n        },\r\n        allPlants: {\r\n          headline: \"Plants\",\r\n        },\r\n        searchPlant: {\r\n          headline: \"Search a plant\",\r\n          namePlaceholder: \"Enter name\",\r\n        },\r\n      },\r\n      authentification: {\r\n        signIn: {\r\n          headline: \"Sign In\",\r\n          email: \"Email address\",\r\n          password: \"Password\",\r\n          enterPlaceholder: \"Enter\",\r\n        },\r\n        signUp: {\r\n          headline: \"Sign Up\",\r\n          username: \"Username\",\r\n          email: \"Email address\",\r\n          password: \"Password\",\r\n          enterPlaceholder: \"Enter\",\r\n          alreadyAccountCreated: \"Already have an account?\",\r\n        },\r\n      },\r\n      plants: {\r\n        myPlants: {\r\n          headline: \"My plants\",\r\n        },\r\n        createPlant: {\r\n          form: {\r\n            headline: \"Create a plant\",\r\n            name: \"Name\",\r\n            description: \"Description\",\r\n            size: \"Size (cm)\",\r\n            location: \"Location\",\r\n            price: \"Price (EUR)\",\r\n            image: \"Image\",\r\n            enterPlaceholder: \"Enter\",\r\n          },\r\n        },\r\n        updatePlant: {\r\n          form: {\r\n            headline: \"Update your plant\",\r\n            name: \"Name\",\r\n            description: \"Description\",\r\n            size: \"Size (cm)\",\r\n            location: \"Location\",\r\n            price: \"Price (EUR)\",\r\n            image: \"Image\",\r\n          },\r\n        },\r\n        plantThumbnail: {\r\n          currency: \"€\",\r\n        },\r\n        plantDetails: {\r\n          headline: \"Plant details\",\r\n          name: \"Name:\",\r\n          description: \"Description:\",\r\n          size: \"Size:\",\r\n          sizeUnit: \"cm\",\r\n          likes: \"Likes:\",\r\n          price: \"Price:\",\r\n          currency: \"€\",\r\n        },\r\n        checkout: {\r\n          form: {\r\n            price: \" Price:\",\r\n            currency: \"€\",\r\n            payNow: \"Pay now\",\r\n            paymentSuccessful: \"Payment succeeded.\",\r\n          },\r\n        },\r\n      },\r\n      requests: {\r\n        createRequest: {\r\n          form: {\r\n            headline: \"Your request\",\r\n            subheadline: \"for\",\r\n          },\r\n        },\r\n        updateRequest: {\r\n          form: {\r\n            headline: \"Reply your request\",\r\n            replyPlaceholder: \"Your reply\",\r\n          },\r\n        },\r\n        overview: {\r\n          headline: \"Requests for your plants\",\r\n        },\r\n        requestDetails: {\r\n          headline: \"Request for\",\r\n          subheadline: \"by\",\r\n          yourReply: \"Your reply\",\r\n        },\r\n        requestTile: {\r\n          headline: \"Request for\",\r\n          subheadline: \"by\",\r\n        },\r\n      },\r\n      replies: {\r\n        overview: {\r\n          headline: \"Replies for your requests\",\r\n        },\r\n        replyDetails: {\r\n          headline: \"Your request for\",\r\n          replyBy: \"Reply by\",\r\n        },\r\n        replyTile: {\r\n          headline: \"Reply for\",\r\n          subheadline: \"by\",\r\n        },\r\n      },\r\n      notFound: {\r\n        headline: \"Oh-oh!\",\r\n        subheadline1: \"We think you got lost in the jungle!\",\r\n        subheadline2: \"404 Not Found\",\r\n      },\r\n      unauthorized: {\r\n        headline: \"Oh-oh!\",\r\n        subheadline1: \"We think you reached the forbidden part of the jungle!\",\r\n        subheadline2: \"401 Unauthorized\",\r\n      },\r\n      footer: {\r\n        copyright: \"©\",\r\n        appAuthor1: \"Christian Gerbig\",\r\n        appAuthor2: \"Lisa Montebaur\",\r\n      },\r\n      errorModal: {\r\n        headline: \"Oh-oh!\",\r\n        subheadline: \"Something went wrong in the jungle!\",\r\n      },\r\n      offlineModal: {\r\n        headline: \"Oh-oh!\",\r\n        subheadline: \"You lost your roots in the jungle!\",\r\n      },\r\n    },\r\n\r\n    errorTexts: {\r\n      authentification: {\r\n        unauthorized: \"Unauthorized user\",\r\n        signUp: {\r\n          form: {\r\n            usernameMissing: \"Please enter username\",\r\n            emailMissing: \"Please enter email\",\r\n            passwordMissing: \"Please enter password\",\r\n            emailFormatInvalid: \"The email format is invalid\",\r\n            passwordInvalid:\r\n              \"The password needs to have 8 characters, a number, a special character and an uppercase alphabet\",\r\n            userAlreadyExists: \"Username or email already exists\",\r\n          },\r\n          errorWhileCreatingUser: \"Error while creating user\",\r\n        },\r\n        signIn: {\r\n          form: {\r\n            emailMissing: \"Please enter email\",\r\n            passwordMissing: \"Please enter password\",\r\n            emailFormatInvalid: \"The email format is invalid\",\r\n            noMatchPasswords: \"Passwords don't match\",\r\n          },\r\n          userUnknown: \"User does not exist\",\r\n        },\r\n        logOut: {\r\n          noUserUpdate: \"Could not update user\",\r\n        },\r\n      },\r\n      plants: {\r\n        createPlant: {\r\n          form: {\r\n            nameMissing: \"Please enter name\",\r\n            descriptionMissing: \"Please enter description\",\r\n            sizeMissing: \"Please enter size\",\r\n            locationMissing: \"Please enter location\",\r\n            priceMissing: \"Please enter price\",\r\n            imageMissing: \"Please choose an image\",\r\n            noImageSelected: \"Please choose an image to delete\",\r\n          },\r\n        },\r\n        createPlantFailed: \"Creating the plant failed\",\r\n        fetchPlantFailed: \"Fetching the plant failed\",\r\n        fetchAllPlantsFailed: \"Fetching all plants failed\",\r\n        updatePlantFailed: \"Updating the plant failed\",\r\n        deletePlantFailed: \"Delete plant failed\",\r\n      },\r\n      messages: {\r\n        createRequest: {\r\n          form: {\r\n            requestTextMissing: \"Please enter request text\",\r\n          },\r\n        },\r\n        updateRequest: {\r\n          form: {\r\n            replyTextMissing: \"Please enter reply text\",\r\n          },\r\n        },\r\n        createMessageFailed: \"Creating message failed\",\r\n        fetchMessageFailed: \"Fetching message failed\",\r\n        fetchAllMessagesFailed: \"Fetching all messages failed\",\r\n        updateMessageFailed: \"Updating the message failed\",\r\n        deleteMessageFailed: \"Delete message failed\",\r\n      },\r\n      offline: \"No internet connection\",\r\n      general: \"An error occured\",\r\n    },\r\n  },\r\n};\r\n\r\nexport default en;\r\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport en from \"./locales/en\";\r\n\r\ni18n.use(initReactI18next).init({\r\n  resources: {\r\n    en: en,\r\n  },\r\n  fallbackLng: \"en\",\r\n  debug: false,\r\n  ns: [\"translations\"],\r\n  defaultNS: \"translations\",\r\n  interpolation: {\r\n    escapeValue: false,\r\n  },\r\n});\r\n\r\nexport default i18n;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./app/store\";\r\n\r\nimport \"./app/i18n\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}