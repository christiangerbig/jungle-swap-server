{"version":3,"sources":["hooks.ts","reducer/jungleSwapSlice.ts","config.ts","lib/utilities.ts","components/NavBar.tsx","components/Footer.tsx","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/About.tsx","components/PlantThumbnail.tsx","components/LoadingSpinner.tsx","components/SearchPlant.tsx","components/AllPlants.tsx","components/Title.tsx","screens/Home.tsx","screens/SignUp.tsx","screens/SignIn.tsx","components/LogOut.tsx","screens/CreatePlantForm.tsx","screens/PlantDetails.tsx","screens/UpdatePlantForm.tsx","components/CheckoutForm.tsx","screens/CheckoutPage.tsx","components/RequestTile.tsx","screens/RequestsPage.tsx","components/ReplyTile.tsx","screens/RepliesPage.tsx","screens/CreateRequestForm.tsx","screens/RequestDetails.tsx","screens/ReplyDetails.tsx","screens/UpdateRequestForm.tsx","screens/Unauthorized.tsx","screens/NotFound.tsx","components/Chat.tsx","App.tsx","store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","apiPath","process","rejectWithValue","data","Error","signUp","createAsyncThunk","newUser","a","axios","post","response","error","signIn","user","withCredentials","logOut","checkUserLoggedIn","get","createPlant","newPlant","fetchAllPlants","fetchQueryPlants","query","fetchPlant","plantId","updatePlant","updatedPlant","patch","deletePlant","delete","uploadPlantImage","uploadForm","deletePlantImage","destroyImageData","createPayment","plant","price","createMessage","newMessage","fetchAllMessages","fetchMessage","messageId","updateMessage","updatedMessage","deleteMessage","jungleSwapSlice","createSlice","name","initialState","isUserChange","loggedInUser","isCreatingPlant","isFetchingPlants","isFetchingPlant","isUpdatingPlant","isDeletingPlant","plants","isUploadingPlantImage","isDeletingPlantImage","clientSecret","isCreatingMessage","isFetchingMessages","isFetchingMessage","isUpdatingMessage","isDeletingMessage","messages","message","isNewRequest","isNewReply","amountOfRequests","amountOfReplies","intervalId","delayCounter","headerContainerHeight","aboutContainerHeight","errorMessage","reducers","setIsUserChange","state","action","payload","setLoggedInUser","setIsCreatingPlant","setIsFetchingPlants","setIsFetchingPlant","setIsUpdatingPlant","setIsDeletingPlant","addPlant","push","setPlant","setPlants","setPlantChanges","_id","description","size","imageUrl","imagePublicId","location","map","singlePlant","removePlant","filter","setIsUploadingPlantImage","setIsDeletingPlantImage","setDestroyImageData","setClientSecret","setIsCreatingMessage","setIsFetchingMessages","setIsFetchingMessage","setIsUpdatingMessage","setIsDeletingMessage","addMessage","setMessages","setMessage","setMessageChanges","buyer","seller","request","reply","messageState","singleMessage","removeMessage","setIsNewRequest","setIsNewReply","setStartAmountOfRequests","setStartAmountOfReplies","setAmountOfRequests","setAmountOfReplies","decreaseAmountOfRequests","decreaseAmountOfReplies","setIntervalId","setDelayCounter","increaseDelayCounter","setHeaderContainerHeight","setAboutContainerHeight","scrollToAbout","scroll","scrollTo","scrollToPlants","setErrorMessage","extraReducers","builder","addCase","fulfilled","rejected","actions","protectPage","dispatch","unwrap","then","catch","rejectedValue","console","log","stopIntervalCounter","clearInterval","fetchSingleMessage","scrollToTop","fetchMessages","handleDeletePlantImage","NavBar","jungleSwap","useEffect","setInterval","currentAmountOfRequests","length","checkAmountOfRequests","currentAmountOfReplies","checkAmountOfReplies","checkNewRequestsAndReplies","Navbar","className","variant","expand","fixed","Brand","to","onClick","Toggle","aria-controls","icon","faBell","Collapse","id","Nav","title","username","faSearch","Footer","About","src","image","alt","PlantThumbnail","LoadingSpinner","role","SearchPlant","useState","setQuery","checkPlantQuery","type","placeholder","value","onChange","event","target","AllPlants","index","Title","Home","elementRef","useRef","headerElementHeight","Math","round","current","getBoundingClientRect","height","aboutElementHeight","getScrollElementsHeight","ref","headerElement","aboutElement","SignUp","history","useHistory","onSubmit","preventDefault","email","password","toLowerCase","handleSignUp","htmlFor","formNoValidate","SignIn","handleSignIn","LogOut","clonedUser","JSON","parse","stringify","logOutUser","CreatePlantForm","handleUploadImage","plantImage","files","FormData","append","scrollToBottom","handleCreatePlant","min","disabled","PlantDetails","useParams","fetchPlantData","creator","forEach","handleDeleteMessages","handleDeletePlant","UpdatePlantForm","handlePlantEntryChange","itemNumber","clonedPlant","handleImageChange","handleUpdatePlant","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","payment","initializePayment","handleChange","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","stripePromise","loadStripe","CheckoutPage","RequestThumbnail","RequestsPage","resetValues","RequestTile","ReplyThumbnail","RepliesPage","ReplyTile","CreateRequestForm","handleCreateMessage","cols","rows","RequestDetails","clonedMessage","handleSetMessageInactive","ReplyDetails","handleDeleteMessage","UpdateRequestForm","handleCreateReply","handleUpdateMessage","Unauthorized","NotFound","KommunicateChat","d","m","s","document","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","withRouter","exact","path","component","store","configureStore","reducer","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.a61eb073.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  User,\r\n  Plant,\r\n  PlantId,\r\n  Message,\r\n  MessageId,\r\n  DestroyImageData,\r\n} from \"../typeDefinitions\";\r\n\r\ntype IntervalId = NodeJS.Timeout | null;\r\ntype ErrorMessage = string | null;\r\n\r\ninterface InitialState {\r\n  // ---------- User authentication ----------\r\n  isUserChange: boolean;\r\n  loggedInUser: User | null;\r\n\r\n  // ---------- Plants ----------\r\n  isCreatingPlant: boolean;\r\n  isFetchingPlants: boolean;\r\n  isFetchingPlant: boolean;\r\n  isUpdatingPlant: boolean;\r\n  isDeletingPlant: boolean;\r\n  plants: Plant[];\r\n  plant: Plant | {};\r\n\r\n  // ---------- Images ----------\r\n  isUploadingPlantImage: boolean;\r\n  isDeletingPlantImage: boolean;\r\n  destroyImageData: DestroyImageData;\r\n\r\n  // ---------- Payment ----------\r\n  clientSecret: string;\r\n\r\n  // ---------- Messages ----------\r\n  isCreatingMessage: boolean;\r\n  isFetchingMessages: boolean;\r\n  isFetchingMessage: boolean;\r\n  isUpdatingMessage: boolean;\r\n  isDeletingMessage: boolean;\r\n  messages: Message[];\r\n  message: Message | {};\r\n\r\n  // ---------- Requests/Replies check ----------\r\n  isNewRequest: boolean;\r\n  isNewReply: boolean;\r\n  amountOfRequests: number;\r\n  amountOfReplies: number;\r\n\r\n  // ---------- Interval counter ----------\r\n  intervalId: IntervalId;\r\n  delayCounter: number;\r\n\r\n  // ---------- Pages handling ----------\r\n  headerContainerHeight: number;\r\n  aboutContainerHeight: number;\r\n\r\n  // ---------- Error handling ----------\r\n  errorMessage: ErrorMessage;\r\n}\r\n\r\ninterface UpdatePlantParameters {\r\n  plantId: PlantId;\r\n  updatedPlant: Plant;\r\n}\r\n\r\ninterface UpdateMessageParameters {\r\n  messageId: MessageId;\r\n  updatedMessage: Message;\r\n}\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\n// Initialize states\r\nconst initialState: InitialState = {\r\n  // ---------- User authentication ----------\r\n  isUserChange: false,\r\n  loggedInUser: null,\r\n\r\n  // ---------- Plants ----------\r\n  isCreatingPlant: false,\r\n  isFetchingPlants: false,\r\n  isFetchingPlant: false,\r\n  isUpdatingPlant: false,\r\n  isDeletingPlant: false,\r\n  plants: [],\r\n  plant: {},\r\n\r\n  // ---------- Images ----------\r\n  isUploadingPlantImage: false,\r\n  isDeletingPlantImage: false,\r\n  destroyImageData: {},\r\n\r\n  // ---------- Payment ----------\r\n  clientSecret: \"\",\r\n\r\n  // ---------- Messages ----------\r\n  isCreatingMessage: false,\r\n  isFetchingMessages: false,\r\n  isFetchingMessage: false,\r\n  isUpdatingMessage: false,\r\n  isDeletingMessage: false,\r\n  messages: [],\r\n  message: {},\r\n\r\n  // ---------- Requests/Replies check ----------\r\n  isNewRequest: false,\r\n  isNewReply: false,\r\n  amountOfRequests: 0,\r\n  amountOfReplies: 0,\r\n\r\n  // ---------- Interval counter ----------\r\n  intervalId: null,\r\n  delayCounter: 0,\r\n\r\n  // ---------- Pages handling ----------\r\n  headerContainerHeight: 0,\r\n  aboutContainerHeight: 0,\r\n\r\n  // ---------- Error handling ----------\r\n  errorMessage: null,\r\n};\r\n\r\nconst rejectWithValue = (data: any): void | PromiseLike<void> => {\r\n  throw new Error(data);\r\n};\r\n\r\n// ---------- User authentification ----------\r\n// Sign up\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (newUser: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-up`, newUser);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Sign in\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async (user: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-in`, user, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Log out\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (user: User): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/auth/log-out`, user, {\r\n        withCredentials: true,\r\n      });\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Check if user is logged in\r\nexport const checkUserLoggedIn = createAsyncThunk(\r\n  \"jungleSwap/checkUserLoggedIn\",\r\n  async (): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/auth/check-user`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// --------- Plants ---------\r\n// Create plant\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async (newPlant: Plant): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/plants/create`, newPlant, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch all plants\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async (): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch query plants\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query: string): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch single plant\r\nexport const fetchPlant = createAsyncThunk(\r\n  \"jungleSwap/fetchPlant\",\r\n  async (plantId: PlantId): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Update plant\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async ({\r\n    plantId,\r\n    updatedPlant,\r\n  }: UpdatePlantParameters): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete Plant\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (plantId: PlantId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ---------- Images ----------\r\n// Upload plant image\r\nexport const uploadPlantImage = createAsyncThunk(\r\n  \"jungleSwap/uploadPlantImage\",\r\n  async (uploadForm: FormData): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/cloudinary/upload`,\r\n        uploadForm\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete plant image\r\nexport const deletePlantImage = createAsyncThunk(\r\n  \"jungleSwap/deletePlantImage\",\r\n  async (destroyImageData: DestroyImageData): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/cloudinary/destroy`, destroyImageData);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ---------- Payment ----------\r\n// Create plant payment\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant: Plant): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/stripe/create-payment-intent`,\r\n        {\r\n          price: plant.price,\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// --------- Messages ----------\r\n// Create message\r\nexport const createMessage = createAsyncThunk(\r\n  \"jungleSwap/createMessage\",\r\n  async (newMessage: Message): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/messages/create`,\r\n        newMessage,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch all messages\r\nexport const fetchAllMessages = createAsyncThunk(\r\n  \"jungleSwap/fetchAllMessages\",\r\n  async (): Promise<Message[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/messages/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch single message\r\nexport const fetchMessage = createAsyncThunk(\r\n  \"jungleSwap/fetchMessage\",\r\n  async (messageId: MessageId): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${apiPath}/messages/fetch/${messageId}`,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Update message\r\nexport const updateMessage = createAsyncThunk(\r\n  \"jungleSwap/updateMessage\",\r\n  async ({\r\n    messageId,\r\n    updatedMessage,\r\n  }: UpdateMessageParameters): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/messages/update/${messageId}`,\r\n        updatedMessage\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete message\r\nexport const deleteMessage = createAsyncThunk(\r\n  \"jungleSwap/deleteMessage\",\r\n  async (messageId: MessageId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ---------- Slice ----------\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n\r\n  // ---------- Reducers ----------\r\n  reducers: {\r\n    // --------- User authentication -----------\r\n    setIsUserChange: (state, action: PayloadAction<boolean>) => {\r\n      state.isUserChange = action.payload;\r\n    },\r\n    setLoggedInUser: (state, action: PayloadAction<User | null>) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n\r\n    // --------- Plants ----------\r\n    setIsCreatingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isCreatingPlant = action.payload;\r\n    },\r\n    setIsFetchingPlants: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingPlants = action.payload;\r\n    },\r\n    setIsFetchingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingPlant = action.payload;\r\n    },\r\n    setIsUpdatingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isUpdatingPlant = action.payload;\r\n    },\r\n    setIsDeletingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingPlant = action.payload;\r\n    },\r\n    addPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plants.push(action.payload);\r\n    },\r\n    setPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plant = action.payload;\r\n    },\r\n    setPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.plants = action.payload;\r\n    },\r\n    setPlantChanges: (state, action: PayloadAction<Plant>) => {\r\n      const {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      } = action.payload;\r\n      state.plants = state.plants.map((singlePlant: Plant): Plant => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, action: PayloadAction<PlantId>) => {\r\n      state.plants = state.plants.filter(\r\n        (plant: Plant): boolean => plant._id !== action.payload\r\n      );\r\n    },\r\n\r\n    // ---------- Images ----------\r\n    setIsUploadingPlantImage: (state, action: PayloadAction<boolean>) => {\r\n      state.isUploadingPlantImage = action.payload;\r\n    },\r\n    setIsDeletingPlantImage: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingPlantImage = action.payload;\r\n    },\r\n    setDestroyImageData: (state, action: PayloadAction<DestroyImageData>) => {\r\n      state.destroyImageData = action.payload;\r\n    },\r\n\r\n    // ---------- Payment ----------\r\n    setClientSecret: (state, action: PayloadAction<string>) => {\r\n      state.clientSecret = action.payload;\r\n    },\r\n\r\n    // ---------- Messages ----------\r\n    setIsCreatingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isCreatingMessage = action.payload;\r\n    },\r\n    setIsFetchingMessages: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingMessages = action.payload;\r\n    },\r\n    setIsFetchingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingMessage = action.payload;\r\n    },\r\n    setIsUpdatingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isUpdatingMessage = action.payload;\r\n    },\r\n    setIsDeletingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingMessage = action.payload;\r\n    },\r\n    addMessage: (state, action: PayloadAction<Message>) => {\r\n      state.messages.push(action.payload);\r\n    },\r\n    setMessages: (state, action: PayloadAction<Message[]>) => {\r\n      state.messages = action.payload;\r\n    },\r\n    setMessage: (state, action: PayloadAction<Message>) => {\r\n      state.message = action.payload;\r\n    },\r\n    setMessageChanges: (state, action: PayloadAction<Message>) => {\r\n      const { _id, buyer, seller, plant, request, reply, messageState } =\r\n        action.payload;\r\n      state.messages = state.messages.map((singleMessage) => {\r\n        if (singleMessage._id === _id) {\r\n          singleMessage.buyer = buyer;\r\n          singleMessage.seller = seller;\r\n          singleMessage.plant = plant;\r\n          singleMessage.request = request;\r\n          singleMessage.reply = reply;\r\n          singleMessage.messageState = messageState;\r\n        }\r\n        return singleMessage;\r\n      });\r\n    },\r\n    removeMessage: (state, action: PayloadAction<MessageId>) => {\r\n      state.messages = state.messages.filter((message: Message): boolean => {\r\n        return message._id !== action.payload;\r\n      });\r\n    },\r\n\r\n    // --------- Requests/Replies check ----------\r\n    setIsNewRequest: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewRequest = action.payload;\r\n    },\r\n    setIsNewReply: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewReply = action.payload;\r\n    },\r\n    setStartAmountOfRequests: (state) => {\r\n      state.amountOfRequests = (state.loggedInUser as any).amountOfRequests;\r\n    },\r\n    setStartAmountOfReplies: (state) => {\r\n      state.amountOfReplies = (state.loggedInUser as any).amountOfReplies;\r\n    },\r\n    setAmountOfRequests: (state, action: PayloadAction<number>) => {\r\n      state.amountOfRequests = action.payload;\r\n    },\r\n    setAmountOfReplies: (state, action: PayloadAction<number>) => {\r\n      state.amountOfReplies = action.payload;\r\n    },\r\n    decreaseAmountOfRequests: (state) => {\r\n      state.amountOfRequests -= 1;\r\n    },\r\n    decreaseAmountOfReplies: (state) => {\r\n      state.amountOfReplies -= 1;\r\n    },\r\n\r\n    // ---------- Interval counter ----------\r\n    setIntervalId: (state, action: PayloadAction<IntervalId>) => {\r\n      state.intervalId = action.payload;\r\n    },\r\n    setDelayCounter: (state, action: PayloadAction<number>) => {\r\n      state.delayCounter = action.payload;\r\n    },\r\n    increaseDelayCounter: (state) => {\r\n      state.delayCounter += 1;\r\n    },\r\n\r\n    // ---------- Pages handling ----------\r\n    setHeaderContainerHeight: (state, action: PayloadAction<number>) => {\r\n      state.headerContainerHeight = action.payload;\r\n    },\r\n    setAboutContainerHeight: (state, action: PayloadAction<number>) => {\r\n      state.aboutContainerHeight = action.payload;\r\n    },\r\n    scrollToAbout: (state) => {\r\n      scroll.scrollTo(state.headerContainerHeight);\r\n    },\r\n    scrollToPlants: (state) => {\r\n      scroll.scrollTo(state.headerContainerHeight + state.aboutContainerHeight);\r\n    },\r\n\r\n    // ---------- Error handling ----------\r\n    setErrorMessage: (state, action: PayloadAction<ErrorMessage>) => {\r\n      state.errorMessage = action.payload;\r\n    },\r\n  },\r\n\r\n  // ---------- Extra reducers ----------\r\n  extraReducers: (builder) => {\r\n    // --------- Plants ----------\r\n    builder.addCase(createPlant.fulfilled, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(createPlant.rejected, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchPlant.fulfilled, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(fetchPlant.rejected, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.fulfilled, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.rejected, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.fulfilled, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.rejected, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n\r\n    // ---------- Images ----------\r\n    builder.addCase(uploadPlantImage.fulfilled, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(uploadPlantImage.rejected, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.fulfilled, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.rejected, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n\r\n    // ---------- Messages ----------\r\n    builder.addCase(createMessage.fulfilled, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(createMessage.rejected, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.fulfilled, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.rejected, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchMessage.fulfilled, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(fetchMessage.rejected, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.fulfilled, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.rejected, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.fulfilled, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.rejected, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n  },\r\n});\r\n\r\n// ---------- Slice actions ----------\r\nexport const {\r\n  // ---------- User authentification ----------\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n\r\n  // ----------- Plants ----------\r\n  setIsCreatingPlant,\r\n  setIsFetchingPlants,\r\n  setIsFetchingPlant,\r\n  setIsUpdatingPlant,\r\n  setIsDeletingPlant,\r\n  addPlant,\r\n  setPlants,\r\n  setPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n\r\n  // ---------- Images ----------\r\n  setIsUploadingPlantImage,\r\n  setIsDeletingPlantImage,\r\n  setDestroyImageData,\r\n\r\n  // ---------- Payment ----------\r\n  setClientSecret,\r\n\r\n  // ---------- Messages ----------\r\n  setIsCreatingMessage,\r\n  setIsFetchingMessages,\r\n  setIsFetchingMessage,\r\n  setIsUpdatingMessage,\r\n  setIsDeletingMessage,\r\n  addMessage,\r\n  setMessages,\r\n  setMessage,\r\n  setMessageChanges,\r\n  removeMessage,\r\n\r\n  // ---------- Requests/Replies check ----------\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  decreaseAmountOfRequests,\r\n  decreaseAmountOfReplies,\r\n\r\n  // ---------- Interval counter ----------\r\n  setIntervalId,\r\n  setDelayCounter,\r\n  increaseDelayCounter,\r\n\r\n  // ---------- Pages handling ----------\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n\r\n  // ---------- Error handling ----------\r\n  setErrorMessage,\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  checkUserLoggedIn,\r\n  deletePlantImage,\r\n  fetchAllMessages,\r\n  fetchMessage,\r\n  setDelayCounter,\r\n  setIntervalId,\r\n  setIsDeletingPlantImage,\r\n  setIsFetchingMessage,\r\n  setIsFetchingMessages,\r\n  setLoggedInUser,\r\n  setMessage,\r\n  setMessages,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { DestroyImageData, Message, MessageId, User } from \"../typeDefinitions\";\r\n\r\n// Check if a user is logged in\r\nexport const protectPage = (dispatch: any): void => {\r\n  dispatch(checkUserLoggedIn())\r\n    .unwrap()\r\n    .then((user: User) => {\r\n      dispatch(setLoggedInUser(user));\r\n    })\r\n    .catch((rejectedValue: any) => {\r\n      console.log(rejectedValue.message);\r\n    });\r\n};\r\n\r\n// Stop interval counter and reset its variables\r\nexport const stopIntervalCounter = (\r\n  intervalId: NodeJS.Timeout,\r\n  dispatch: any\r\n): void => {\r\n  clearInterval(intervalId);\r\n  dispatch(setIntervalId(null));\r\n  dispatch(setDelayCounter(0));\r\n};\r\n\r\n// Fetch single message and scroll page to top\r\nexport const fetchSingleMessage = (\r\n  messageId: MessageId,\r\n  dispatch: any\r\n): void => {\r\n  dispatch(setIsFetchingMessage(true));\r\n  dispatch(fetchMessage(messageId))\r\n    .unwrap()\r\n    .then((message: Message) => {\r\n      dispatch(setMessage(message));\r\n      scroll.scrollToTop();\r\n    })\r\n    .catch((rejectedValue: any) => {\r\n      console.log(rejectedValue.message);\r\n    });\r\n};\r\n\r\n// Fetch all messages\r\nexport const fetchMessages = (dispatch: any) => {\r\n  dispatch(setIsFetchingMessages(true));\r\n  dispatch(fetchAllMessages())\r\n    .unwrap()\r\n    .then((messages: Message[]) => {\r\n      dispatch(setMessages(messages));\r\n    })\r\n    .catch((rejectedValue: any) => {\r\n      console.log(rejectedValue.message);\r\n    });\r\n};\r\n\r\n// Delete old plant image\r\nexport const handleDeletePlantImage = (\r\n  destroyImageData: DestroyImageData,\r\n  dispatch: any\r\n): void => {\r\n  dispatch(setIsDeletingPlantImage(true));\r\n  dispatch(deletePlantImage(destroyImageData))\r\n    .unwrap()\r\n    .then(() => {\r\n      return;\r\n    })\r\n    .catch((rejectedValue: any) => {\r\n      console.log(rejectedValue.message);\r\n    });\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  setIsUserChange,\r\n  setIsFetchingMessages,\r\n  fetchAllMessages,\r\n  setMessages,\r\n  setIntervalId,\r\n  increaseDelayCounter,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  scrollToPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { stopIntervalCounter } from \"../lib/utilities\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell, faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NavBar = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const delayCounter = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.delayCounter\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    // Stop interval at cleanup\r\n    return () => {\r\n      intervalId && stopIntervalCounter(intervalId, dispatch);\r\n    };\r\n  }, []);\r\n\r\n  // Start request/reply check if user changes\r\n  useEffect(() => {\r\n    // Start request/reply check\r\n    const startRequestAndReplyCheck = () => {\r\n      dispatch(setIsFetchingMessages(true));\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages) => {\r\n          dispatch(setMessages(messages));\r\n          dispatch(setStartAmountOfRequests());\r\n          dispatch(setStartAmountOfReplies());\r\n          dispatch(setIsUserChange(false));\r\n          dispatch(\r\n            setIntervalId(\r\n              setInterval(\r\n                () => {\r\n                  dispatch(increaseDelayCounter());\r\n                },\r\n                1000 // every second\r\n              )\r\n            )\r\n          );\r\n          dispatch(increaseDelayCounter());\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    isUserChange && startRequestAndReplyCheck();\r\n  }, [isUserChange]);\r\n\r\n  // Check for new requests/replies every second if user is logged in\r\n  useEffect(() => {\r\n    // Check if there are new requests\r\n    const checkAmountOfRequests = (messages: Message[]): void => {\r\n      const currentAmountOfRequests = messages.filter(\r\n        (message: Message): boolean => {\r\n          const { seller, messageState } = message;\r\n          return (\r\n            (seller as User)._id === (loggedInUser as User)._id &&\r\n            messageState === true\r\n          );\r\n        }\r\n      ).length;\r\n      if (amountOfRequests < currentAmountOfRequests) {\r\n        dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n        dispatch(setIsNewRequest(true));\r\n      } else if (amountOfRequests > currentAmountOfRequests) {\r\n        dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n      }\r\n    };\r\n\r\n    // Check if there are new replies\r\n    const checkAmountOfReplies = (messages: Message[]): void => {\r\n      const currentAmountOfReplies = messages.filter(\r\n        (message: Message): boolean => {\r\n          const { buyer, reply } = message;\r\n          return (\r\n            (buyer as User)._id === (loggedInUser as User)._id && reply !== \"\"\r\n          );\r\n        }\r\n      ).length;\r\n      if (amountOfReplies < currentAmountOfReplies) {\r\n        dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n        dispatch(setIsNewReply(true));\r\n      } else if (amountOfReplies > currentAmountOfReplies) {\r\n        dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n      }\r\n    };\r\n\r\n    // Check and update amount of new requests/replies\r\n    const checkNewRequestsAndReplies = (isUserChange: boolean): void => {\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages) => {\r\n          dispatch(setMessages(messages));\r\n          isUserChange && dispatch(setStartAmountOfRequests());\r\n          isUserChange && dispatch(setStartAmountOfReplies());\r\n          checkAmountOfRequests(messages);\r\n          checkAmountOfReplies(messages);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    loggedInUser && checkNewRequestsAndReplies(isUserChange);\r\n  }, [delayCounter]);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar className=\"pl-5\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" onClick={scroll.scrollToTop}>\r\n            JungleSwap\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\r\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\r\n        </Navbar.Toggle>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <>\r\n              <Link\r\n                to=\"/\"\r\n                className=\"p-2\"\r\n                onClick={() => {\r\n                  dispatch(scrollToPlants());\r\n                }}\r\n              >\r\n                All Plants\r\n              </Link>\r\n            </>\r\n            {loggedInUser && (\r\n              <>\r\n                <Link className=\"p-2\" to=\"/plants/create\">\r\n                  Create Plant\r\n                </Link>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/requests/fetch-all\"\r\n                  title={isNewRequest ? \"new request\" : \"\"}\r\n                >\r\n                  {isNewRequest && <FontAwesomeIcon icon={faBell} />}\r\n                  Requests\r\n                </Link>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/replies/fetch-all\"\r\n                  title={isNewReply ? \"new reply\" : \"\"}\r\n                >\r\n                  {isNewReply && <FontAwesomeIcon icon={faBell} />}\r\n                  Replies\r\n                </Link>\r\n              </>\r\n            )}\r\n            {loggedInUser ? (\r\n              <>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/auth/log-out\"\r\n                  title={loggedInUser.username}\r\n                >\r\n                  Log out\r\n                </Link>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Link className=\"p-2\" to=\"/auth/sign-in\">\r\n                  Sign in\r\n                </Link>\r\n                <Link className=\"p-2\" to=\"/auth/sign-up\">\r\n                  Sign up\r\n                </Link>\r\n              </>\r\n            )}\r\n            <>\r\n              <Link\r\n                to=\"/\"\r\n                className=\"p-2\"\r\n                onClick={() => {\r\n                  dispatch(scrollToPlants());\r\n                }}\r\n              >\r\n                <FontAwesomeIcon icon={faSearch} />\r\n              </Link>\r\n            </>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst Footer = (): JSX.Element => {\r\n  return (\r\n    <div className=\"footer-row\">\r\n      <footer>\r\n        © 2021\r\n        <Link to={\"https://www.linkedin.com/in/christian-gerbig/\"}>\r\n          Christian Gerbig\r\n        </Link>\r\n        &amp;\r\n        <Link to={\"https://www.linkedin.com/in/lisa-montebaur/\"}>\r\n          Lisa Montebaur\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import image from \"../images/JungleSwap_Home.png\";\r\nimport icon from \"../images/JungleSwap_Icon.png\";\r\n\r\nconst About = (): JSX.Element => {\r\n  return (\r\n    <div className=\"about centered container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n          <img className=\"image\" src={image} alt=\"plants\" />\r\n        </div>\r\n        <br />\r\n        <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 noOverflow\">\r\n          <h4> Welcome to JungleSwap! </h4>\r\n          <h5> Add green to your Home </h5>\r\n          <p>\r\n            It\"s easy-peasy. <br />\r\n            Share your plant offshoots. <br />\r\n            Make money! <br />\r\n            Or swap them for another plant. <br />\r\n            Don\"t have any baby plants? <br />\r\n            You can simply shop and give a plant a new home.\r\n          </p>\r\n          <img className=\"icon\" src={icon} alt=\"icon\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import { Link } from \"react-router-dom\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\ntype PlantThumbnailProps = {\r\n  plant: Plant;\r\n};\r\n\r\nconst PlantThumbnail = ({ plant }: PlantThumbnailProps): JSX.Element => {\r\n  const { _id, name, imageUrl, price } = plant;\r\n\r\n  return (\r\n    <div className=\"col mb-5\" key={_id}>\r\n      <div className=\"card card-medium-width text-center h-100\">\r\n        <img className=\"card-img-top mediumPicSize\" src={imageUrl} alt={name} />\r\n        <div className=\"card-body mb-5\">\r\n          <h5> {name} </h5>\r\n          <p> {price} € </p>\r\n          <Link\r\n            className=\"btn form-control smallWidth\"\r\n            to={`/plants/fetch/${_id}`}\r\n          >\r\n            Details\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantThumbnail;\r\n","const LoadingSpinner = (): JSX.Element => {\r\n  return (\r\n    <div className=\"d-flex align-items-center justify-content-center\">\r\n      <div className=\"spinner-border m-3 loadingSpinner\" role=\"status\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  fetchAllPlants,\r\n  fetchQueryPlants,\r\n  setIsFetchingPlants,\r\n  setPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\nconst SearchPlant = (): JSX.Element => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const dispatch = useAppDispatch();\r\n\r\n  // Handle plant query\r\n  useEffect(() => {\r\n    // Check if there is a plant query input by the user\r\n    const checkPlantQuery = (query: string) => {\r\n      if (query) {\r\n        dispatch(setIsFetchingPlants(true));\r\n        dispatch(fetchQueryPlants(query))\r\n          .unwrap()\r\n          .then((plants: Plant[]) => {\r\n            dispatch(setPlants(plants));\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      } else {\r\n        dispatch(setIsFetchingPlants(true));\r\n        dispatch(fetchAllPlants())\r\n          .unwrap()\r\n          .then((plants: Plant[]) => {\r\n            dispatch(setPlants(plants));\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      }\r\n    };\r\n\r\n    checkPlantQuery(query);\r\n  }, [query]);\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <hr />\r\n      <h4> Search a plant </h4>\r\n      <input\r\n        className=\"smallWidth form-control\"\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        value={query}\r\n        onChange={(event) => {\r\n          setQuery(event.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPlant;\r\n","import { useAppSelector } from \"../hooks\";\r\n\r\nimport { Plant } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport PlantThumbnail from \"../components/PlantThumbnail\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\nimport SearchPlant from \"./SearchPlant\";\r\n\r\nconst AllPlants = (): JSX.Element => {\r\n  const isFetchingPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlants\r\n  );\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-3\">\r\n        <h2> Plants </h2>\r\n      </div>\r\n      <SearchPlant />\r\n      {isFetchingPlants ? (\r\n        <LoadingSpinner />\r\n      ) : (\r\n        <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n          {plants.map((plant: Plant, index: number): JSX.Element => {\r\n            return <PlantThumbnail plant={plant} key={index} />;\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllPlants;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport { scrollToAbout } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst Title = (): JSX.Element => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <div className=\"row my-5\">\r\n      <div className=\"col-6 offset-3 my-5 borderAround\">\r\n        <h2 className=\"title mb-2\"> JungleSwap </h2>\r\n        <h5 className=\"mt-3 mb-5\"> Share your green heart </h5>\r\n        <div className=\"mb-5\">\r\n          <Link\r\n            to={\"/\"}\r\n            className=\"biggerFontSize\"\r\n            onClick={() => {\r\n              dispatch(scrollToAbout());\r\n            }}\r\n          >\r\n            Try it!\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  setIsFetchingPlants,\r\n  fetchAllPlants,\r\n  setPlants,\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../typeDefinitions\";\r\nimport About from \"../components/About\";\r\nimport AllPlants from \"../components/AllPlants\";\r\nimport Title from \"../components/Title\";\r\n\r\nconst Home = (): JSX.Element => {\r\n  const dispatch = useAppDispatch();\r\n  const elementRef = useRef([]);\r\n\r\n  useEffect(() => {\r\n    // Load plants\r\n    const initializePlants = (): void => {\r\n      dispatch(setIsFetchingPlants(true));\r\n      dispatch(fetchAllPlants())\r\n        .unwrap()\r\n        .then((plants: Plant[]) => {\r\n          dispatch(setPlants(plants));\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    // Calculate scroll element positions\r\n    const getScrollElementsHeight = (): void => {\r\n      const headerElementHeight = Math.round(\r\n        (elementRef.current[0] as any).getBoundingClientRect().height\r\n      );\r\n      dispatch(setHeaderContainerHeight(headerElementHeight));\r\n      const aboutElementHeight = Math.round(\r\n        (elementRef.current[1] as any).getBoundingClientRect().height\r\n      );\r\n      dispatch(setAboutContainerHeight(aboutElementHeight));\r\n    };\r\n\r\n    initializePlants();\r\n    getScrollElementsHeight();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <header\r\n        className=\"text-center pt-5 pb-5 headerImg\"\r\n        ref={(headerElement) => {\r\n          (elementRef.current[0] as any) = headerElement;\r\n        }}\r\n      >\r\n        <Title />\r\n      </header>\r\n\r\n      <section\r\n        ref={(aboutElement) => {\r\n          (elementRef.current[1] as any) = aboutElement;\r\n        }}\r\n      >\r\n        <About />\r\n      </section>\r\n\r\n      <section>\r\n        <AllPlants />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n  signUp,\r\n  setIsNewRequest,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignUp = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Reset variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign up\r\n  const handleSignUp = (event: any): void => {\r\n    event.preventDefault();\r\n    const { username, email, password } = event.target;\r\n    const newUser = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    dispatch(signUp(newUser))\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        dispatch(setIsUserChange(true));\r\n        history.push(\"/\");\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign Up </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleSignUp(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\"> Username </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          {errorMessage && <p className=\"warningColor\"> {errorMessage} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n            formNoValidate\r\n          >\r\n            Sign up\r\n          </button>\r\n          <p className=\"padding\"> Already have an account? </p>\r\n          <div className=\"text-right\">\r\n            <Link to={\"/auth/sign-in\"}>\r\n              <button className=\"btn btn-sm ml-4 smallWidth form-control mt-0 mb-2\">\r\n                Sign In\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n  signIn,\r\n  setIsNewRequest,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignIn = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // Reset variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign in\r\n  const handleSignIn = (event: any): void => {\r\n    event.preventDefault();\r\n    const { email, password } = event.target;\r\n    const user: User = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    dispatch(signIn(user))\r\n      .unwrap()\r\n      .then((user) => {\r\n        dispatch(setLoggedInUser(user));\r\n        const { amountOfRequests, amountOfReplies } = user;\r\n        dispatch(setAmountOfRequests(amountOfRequests));\r\n        dispatch(setAmountOfReplies(amountOfReplies));\r\n        dispatch(setIsUserChange(true));\r\n        history.push(\"/\");\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign In </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleSignIn(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n              placeholder=\"Enter\"\r\n            />\r\n          </div>\r\n          {errorMessage && <p className=\"warningColor\"> {errorMessage} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n            formNoValidate\r\n          >\r\n            Sign in\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setLoggedInUser,\r\n  logOut,\r\n  setIsNewRequest,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { stopIntervalCounter } from \"../lib/utilities\";\r\n\r\nconst LogOut = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Reset variables\r\n    const resetVariables = (): void => {\r\n      dispatch(setIsNewRequest(false));\r\n      dispatch(setAmountOfRequests(0));\r\n      dispatch(setAmountOfReplies(0));\r\n    };\r\n\r\n    // Update user amount of requests/replies\r\n    const logOutUser = (\r\n      loggedInUser: User | null,\r\n      intervalId: NodeJS.Timeout | null\r\n    ) => {\r\n      const clonedUser: User = JSON.parse(JSON.stringify(loggedInUser));\r\n      clonedUser.amountOfRequests = amountOfRequests;\r\n      clonedUser.amountOfReplies = amountOfReplies;\r\n      dispatch(setLoggedInUser(clonedUser));\r\n      dispatch(logOut(clonedUser))\r\n        .unwrap()\r\n        .then(() => {\r\n          dispatch(setLoggedInUser(null));\r\n          intervalId && stopIntervalCounter(intervalId, dispatch);\r\n          resetVariables();\r\n          history.push(\"/\");\r\n          scroll.scrollToTop();\r\n        });\r\n    };\r\n\r\n    logOutUser(loggedInUser, intervalId);\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  addPlant,\r\n  createPlant,\r\n  setErrorMessage,\r\n  uploadPlantImage,\r\n  setIsUploadingPlantImage,\r\n  setIsCreatingPlant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant, UploadImageData } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { protectPage } from \"../lib/utilities\";\r\n\r\nconst CreatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingPlantImage\r\n  );\r\n  const isCreatingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isCreatingPlant\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Scroll to top as soon as page loads if the user is logged in\r\n    protectPage(dispatch);\r\n    if (loggedInUser) {\r\n      dispatch(setErrorMessage(null));\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  // Create plant\r\n  const handleCreatePlant = (\r\n    { name, description, size, location, price }: any,\r\n    { imageUrl, imagePublicId }: UploadImageData\r\n  ): void => {\r\n    const newPlant: Plant = {\r\n      name: name.value,\r\n      description: description.value,\r\n      size: size.value,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location: location.value,\r\n      price: price.value,\r\n    };\r\n    dispatch(setIsCreatingPlant(true));\r\n    dispatch(createPlant(newPlant))\r\n      .unwrap()\r\n      .then((plant: Plant) => {\r\n        dispatch(addPlant(plant));\r\n        history.push(\"/\");\r\n        scroll.scrollToBottom();\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  // Upload plant image\r\n  const handleUploadImage = (event: any): void => {\r\n    event.preventDefault();\r\n    const { plantImage } = event.target;\r\n    const image = plantImage.files[0];\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    dispatch(setIsUploadingPlantImage(true));\r\n    dispatch(uploadPlantImage(uploadForm))\r\n      .unwrap()\r\n      .then(({ imageUrl, imagePublicId }: UploadImageData) => {\r\n        handleCreatePlant(event.target, { imageUrl, imagePublicId });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mb-5 text-left\"> Create a plant </h2>\r\n        <form\r\n          onSubmit={(event) => {\r\n            handleUploadImage(event);\r\n          }}\r\n        >\r\n          <label htmlFor=\"enterName\"> Name </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterName\"\r\n          />\r\n          <label htmlFor=\"enterDescription\"> Description </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"description\"\r\n            type=\"text\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterDescription\"\r\n          />\r\n          <label htmlFor=\"enterSize\"> Size (cm) </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"size\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterSize\"\r\n          />\r\n          <label htmlFor=\"enterLocation\"> Location </label>\r\n          <select\r\n            className=\"mb-4 form-control p-2\"\r\n            name=\"location\"\r\n            id=\"enterLocation\"\r\n          >\r\n            <option> Select location </option>\r\n            <option value=\"sun\"> sun </option>\r\n            <option value=\"shade\"> shade </option>\r\n            <option value=\"sun and shade\"> sun and shade </option>\r\n          </select>\r\n          <label htmlFor=\"enterPrice\"> Price (EUR) </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"price\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Enter\"\r\n            id=\"enterPrice\"\r\n          />\r\n          <label htmlFor=\"enterImage\"> Image </label>\r\n          <input\r\n            className=\"mb-4 form-control\"\r\n            name=\"plantImage\"\r\n            type=\"file\"\r\n            id=\"enterImage\"\r\n          />\r\n          {errorMessage && <p className=\"warningColor\"> {errorMessage} </p>}\r\n          <div className=\"col-12 text-right pr-0\">\r\n            <button\r\n              className=\"btn btn-sm form-control smallWidth ml-4 mb-2\"\r\n              type=\"submit\"\r\n              disabled={isUploadingPlantImage || isCreatingPlant ? true : false}\r\n            >\r\n              Create\r\n            </button>\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm form-control smallWidth ml-4 mb-2\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePlantForm;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  checkUserLoggedIn,\r\n  setLoggedInUser,\r\n  setIsFetchingPlant,\r\n  fetchPlant,\r\n  setPlant,\r\n  setIsDeletingPlant,\r\n  deletePlant,\r\n  removePlant,\r\n  setIsDeletingMessage,\r\n  deleteMessage,\r\n  removeMessage,\r\n  setIsDeletingPlantImage,\r\n  deletePlantImage,\r\n  scrollToPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport {\r\n  User,\r\n  Plant,\r\n  PlantId,\r\n  DestroyImageData,\r\n  Message,\r\n} from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { handleDeletePlantImage, protectPage } from \"../lib/utilities\";\r\n\r\nconst PlantDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isFetchingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlant\r\n  );\r\n  const isDeletingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlant\r\n  );\r\n  const isDeletingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlantImage\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const isDeletingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingMessage\r\n  );\r\n  const { plantId } = useParams<{ plantId: PlantId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Fetch plant data and scroll to top if the user is logged in\r\n    const fetchPlantData = (plantId: PlantId) => {\r\n      dispatch(setIsFetchingPlant(true));\r\n      dispatch(fetchPlant(plantId))\r\n        .unwrap()\r\n        .then((plant: Plant) => {\r\n          dispatch(setPlant(plant));\r\n          scroll.scrollToTop();\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    protectPage(dispatch);\r\n    loggedInUser && fetchPlantData(plantId);\r\n  }, []);\r\n\r\n  // Delete all remaining messages for the plant\r\n  const handleDeleteMessages = (\r\n    messages: Message[],\r\n    plantId: PlantId\r\n  ): void => {\r\n    messages.forEach((message: Message) => {\r\n      const { _id, plant }: any = message;\r\n      if (plant._id === plantId) {\r\n        dispatch(setIsDeletingMessage(true));\r\n        dispatch(deleteMessage(_id))\r\n          .unwrap()\r\n          .then(() => {\r\n            dispatch(removeMessage(_id));\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  // Delete plant\r\n  const handleDeletePlant = (plantId: PlantId) => {\r\n    dispatch(setIsDeletingPlant(true));\r\n    dispatch(deletePlant(plantId))\r\n      .unwrap()\r\n      .then(() => {\r\n        dispatch(removePlant(plantId));\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/sign-up\"} />;\r\n  }\r\n  const {\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n    creator,\r\n  } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2> Plant details </h2>\r\n      </div>\r\n      {isFetchingPlant || !creator ? (\r\n        <LoadingSpinner />\r\n      ) : (\r\n        <div className=\"col\">\r\n          <div className=\"card cardMediumWidth\">\r\n            {imageUrl && (\r\n              <img\r\n                className=\"card-img-top mediumPicSize\"\r\n                src={imageUrl}\r\n                alt={name}\r\n              />\r\n            )}\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Name: </span> {name}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Description: </span> {description}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Size: </span> {size} cm\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Likes: </span> {location}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span> Price: </span> {price} €\r\n            </div>\r\n            <div className=\"ml-2 mt-2 col justify-content-center\">\r\n              <div className=\"row-2 justify-content-center\">\r\n                <div className=\"card-body text-right pt-0\">\r\n                  {loggedInUser._id === (creator as User)._id ? (\r\n                    <div className=\"p-0\">\r\n                      <Link to={\"/plants/update\"}>\r\n                        <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                          Update\r\n                        </button>\r\n                      </Link>\r\n                      <button\r\n                        className=\"btn btn-sm ml-2 form-control smallWidth mb-2\"\r\n                        disabled={\r\n                          isDeletingMessage ||\r\n                          isDeletingPlantImage ||\r\n                          isDeletingPlant\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        onClick={() => {\r\n                          _id && handleDeleteMessages(messages, _id);\r\n                          handleDeletePlantImage({ imagePublicId }, dispatch);\r\n                          _id && handleDeletePlant(_id);\r\n                        }}\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    </div>\r\n                  ) : (\r\n                    <div>\r\n                      <Link to=\"/plants/checkout\">\r\n                        <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                          Buy\r\n                        </button>\r\n                      </Link>\r\n                      <Link to=\"/messages/create\">\r\n                        <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                          Swap\r\n                        </button>\r\n                      </Link>\r\n                    </div>\r\n                  )}\r\n                  <Link\r\n                    to={\"/\"}\r\n                    onClick={() => {\r\n                      dispatch(scrollToPlants());\r\n                    }}\r\n                  >\r\n                    <button className=\"btn btn-sm ml-2 form-control smallWidth mb-3\">\r\n                      Go back\r\n                    </button>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setPlant,\r\n  setIsUpdatingPlant,\r\n  updatePlant,\r\n  setPlantChanges,\r\n  setIsUploadingPlantImage,\r\n  uploadPlantImage,\r\n  setDestroyImageData,\r\n  scrollToPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant, UploadImageData } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { handleDeletePlantImage, protectPage } from \"../lib/utilities\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\n\r\nconst UpdatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingPlantImage\r\n  );\r\n  const isDeletingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlantImage\r\n  );\r\n  const destroyImageData = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.destroyImageData\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isUpdatingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUpdatingPlant\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Scroll to top if the user ia logged in\r\n    protectPage(dispatch);\r\n    loggedInUser && scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Check which plant values have changed\r\n  const handlePlantEntryChange = (\r\n    { target }: any,\r\n    plant: Plant,\r\n    itemNumber: number\r\n  ): void => {\r\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\r\n    // eslint-disable-next-line default-case\r\n    switch (itemNumber) {\r\n      case 0:\r\n        clonedPlant.name = target.value;\r\n        break;\r\n      case 1:\r\n        clonedPlant.description = target.value;\r\n        break;\r\n      case 2:\r\n        clonedPlant.size = target.value;\r\n        break;\r\n      case 3:\r\n        clonedPlant.location = target.value;\r\n        break;\r\n      case 4:\r\n        clonedPlant.price = target.value;\r\n    }\r\n    dispatch(setPlant(clonedPlant));\r\n  };\r\n\r\n  // Plant image changed\r\n  // Upload a new image and update plant values\r\n  const handleImageChange = ({ target }: any, plant: Plant): void => {\r\n    const image = target.files[0];\r\n    const { imagePublicId } = plant as Plant;\r\n    dispatch(setDestroyImageData({ imagePublicId }));\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    dispatch(setIsUploadingPlantImage(true));\r\n    dispatch(uploadPlantImage(uploadForm))\r\n      .unwrap()\r\n      .then(({ imageUrl, imagePublicId }: UploadImageData) => {\r\n        const clonedPlant = JSON.parse(JSON.stringify(plant));\r\n        clonedPlant.imagePublicId = imagePublicId;\r\n        clonedPlant.imageUrl = imageUrl;\r\n        dispatch(setPlant(clonedPlant));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  // Update plant values\r\n  const handleUpdatePlant = ({\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n  }: Plant): void => {\r\n    const updatedPlant: Plant = {\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    };\r\n    dispatch(setIsUpdatingPlant(true));\r\n    _id &&\r\n      dispatch(updatePlant({ plantId: _id, updatedPlant }))\r\n        .unwrap()\r\n        .then((updatedPlant) => {\r\n          dispatch(setPlantChanges(updatedPlant));\r\n          history.push(\"/\");\r\n          dispatch(scrollToPlants());\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n  const { name, description, size, imageUrl, price } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mt-5 mb-4 text-left\"> Update your plant </h2>\r\n        <div className=\"card cardMediumWidth mb-5\">\r\n          {isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant ? (\r\n            <LoadingSpinner />\r\n          ) : (\r\n            <img className=\"mb-2 smallPicSize\" src={imageUrl} alt={name} />\r\n          )}\r\n          <div className=\"card-body\">\r\n            <label htmlFor=\"updateName\"> Name </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"text\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 0);\r\n              }}\r\n              value={name}\r\n              id=\"updateName\"\r\n            />\r\n            <label htmlFor=\"updateDescription\"> Description </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"text\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 1);\r\n              }}\r\n              value={description}\r\n              id=\"updateDescription\"\r\n            />\r\n            <label htmlFor=\"updateSize\"> Size (cm) </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 2);\r\n              }}\r\n              value={size}\r\n              id=\"updateSize\"\r\n            />\r\n            <label htmlFor=\"updateLocation\"> Location </label>\r\n            <select\r\n              className=\"mb-4 form-control px-2\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 3);\r\n              }}\r\n              name=\"location\"\r\n              placeholder=\"Select\"\r\n              id=\"updateLocation\"\r\n            >\r\n              <option value=\"sun\"> sun </option>\r\n              <option value=\"shade\"> shade </option>\r\n              <option value=\"sun and shade\"> sun and shade </option>\r\n            </select>\r\n            <label htmlFor=\"updatePrice\"> Price (EUR) </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              name=\"price\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              onChange={(event) => {\r\n                handlePlantEntryChange(event, plant, 4);\r\n              }}\r\n              value={price}\r\n              id=\"updatePrice\"\r\n            />\r\n            <label htmlFor=\"updateImage\"> Image </label>\r\n            <input\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event) => {\r\n                handleImageChange(event, plant);\r\n              }}\r\n              type=\"file\"\r\n              id=\"updateImage\"\r\n            />\r\n            <div className=\"col-12 text-right pr-0\">\r\n              <button\r\n                className=\"btn btn-sm ml-4 form-control smallWidth mb-2\"\r\n                disabled={\r\n                  isUploadingPlantImage ||\r\n                  isDeletingPlantImage ||\r\n                  isUpdatingPlant\r\n                    ? true\r\n                    : false\r\n                }\r\n                onClick={() => {\r\n                  handleDeletePlantImage(destroyImageData, dispatch);\r\n                  handleUpdatePlant(plant);\r\n                }}\r\n              >\r\n                Save\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdatePlantForm;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport {\r\n  setClientSecret,\r\n  createPayment,\r\n  scrollToPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\n\r\ninterface CardStyle {\r\n  style: {\r\n    base: {\r\n      color: string;\r\n      fontFamily: string;\r\n      fontSmoothing: string;\r\n      fontSize: string;\r\n      \"::placeholder\": { color: string };\r\n    };\r\n    invalid: {\r\n      color: string;\r\n      iconColor: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst CheckoutForm = (): JSX.Element => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(\"\");\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const clientSecret = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.clientSecret\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Create payment as soon as page loads\r\n    const initializePayment = (plant: Plant) => {\r\n      dispatch(createPayment(plant))\r\n        .unwrap()\r\n        .then((payment: any) => {\r\n          dispatch(setClientSecret(payment.clientSecret));\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    initializePayment(plant);\r\n    // Return to Home page and scroll to plants section at cleanup\r\n    return () => {\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    };\r\n  }, []);\r\n\r\n  // Card styling\r\n  const cardStyle: CardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n  // Listen for changes in Card element and display any errors as customer types card details\r\n  const handleChange = async (event: any): Promise<void> => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  // Submit payment\r\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      return;\r\n    }\r\n    setIsProcessing(true);\r\n    const payload = await (stripe as any).confirmCardPayment(clientSecret, {\r\n      payment_method: { card: (elements as any).getElement(CardElement) },\r\n    });\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    } else {\r\n      setPaymentError(\"\");\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n  const { _id, name, price } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container col-9\">\r\n      <form\r\n        className=\"checkoutForm mt-5\"\r\n        id=\"payment-form\"\r\n        onSubmit={handleSubmitPayment}\r\n      >\r\n        <h2 className=\"text-left mb-2 p-2\"> {name} </h2>\r\n        <h3 className=\"text-left mb-4 p-2\"> Price: {price} € </h3>\r\n        <CardElement\r\n          className=\"p-2\"\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            className=\"btn btn-sm mt-5 mb-4\"\r\n            type=\"submit\"\r\n            disabled={isProcessing || isDisabled || isSucceeded}\r\n            id=\"submit\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isProcessing ? (\r\n                <div className=\"spinner\" id=\"spinner\" />\r\n              ) : (\r\n                \"Pay now\"\r\n              )}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {\r\n          /* Show any error that happens when processing the payment */\r\n          paymentError && (\r\n            <div className=\"card-error\" role=\"alert\">\r\n              {paymentError}\r\n            </div>\r\n          )\r\n        }\r\n        {/* Show success message upon completion */}\r\n        <p\r\n          className={\r\n            isSucceeded\r\n              ? \"result-message text-center\"\r\n              : \"result-message hidden text-center\"\r\n          }\r\n        >\r\n          Payment succeeded.\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {isSucceeded ? (\r\n          <Link\r\n            to={\"/\"}\r\n            onClick={() => {\r\n              dispatch(scrollToPlants());\r\n            }}\r\n          >\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        ) : (\r\n          <Link to={`/plants/fetch/${_id}`}>\r\n            <button className=\"btn btn-sm form-control\"> Go back </button>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { protectPage } from \"../lib/utilities\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"../components/CheckoutForm\";\r\n\r\nconst stripePromise = loadStripe(\r\n  \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n);\r\n\r\nconst CheckoutPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    // Scroll to top as soon as page loads if the user is logged in\r\n    protectPage(dispatch);\r\n    loggedInUser && scroll.scrollToTop();\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5 App\">\r\n        <Elements stripe={stripePromise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutPage;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { User, Message, Plant } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\n\r\ntype RequestThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst RequestThumbnail = ({ message }: RequestThumbnailProps): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const { _id, buyer, seller, plant, messageState } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <>\r\n      {loggedInUser &&\r\n        (seller as User)._id === loggedInUser._id &&\r\n        messageState === true && (\r\n          <div className=\"card p-3 mt-4\" key={_id}>\r\n            <h4> Request for {name} </h4>\r\n            <h5> by {username} </h5>\r\n            <div className=\"text-center\">\r\n              <Link\r\n                className=\"btn smallWidth form-control\"\r\n                to={`/requests/fetch/${_id}`}\r\n              >\r\n                Details\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RequestThumbnail;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsNewRequest,\r\n  setStartAmountOfRequests,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { fetchMessages, protectPage } from \"../lib/utilities\";\r\nimport RequestTile from \"../components/RequestTile\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\n\r\nconst RequestsPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    // Reset values and scroll to top\r\n    const resetValues = (): void => {\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    // Fetch all messages if the user is logged in\r\n    protectPage(dispatch);\r\n    if (loggedInUser) {\r\n      fetchMessages(dispatch);\r\n      isUserChange && dispatch(setStartAmountOfRequests());\r\n      resetValues();\r\n    }\r\n    // Reset values at cleanup\r\n    return () => {\r\n      resetValues();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Requests for your plants </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {isFetchingMessages ? (\r\n          <LoadingSpinner />\r\n        ) : (\r\n          <div>\r\n            {messages.map((message: Message, index: number): JSX.Element => {\r\n              return <RequestTile message={message} key={index} />;\r\n            })}\r\n          </div>\r\n        )}\r\n        {amountOfRequests !== 0 && (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsPage;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { User, Plant, Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\n\r\ntype ReplyThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst ReplyThumbnail = ({ message }: ReplyThumbnailProps): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const { _id, buyer, seller, plant, reply } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n\r\n  return (\r\n    <>\r\n      {loggedInUser &&\r\n        (buyer as User)._id === loggedInUser._id &&\r\n        reply !== \"\" && (\r\n          <div className=\"card p-3 mt-4 \" key={_id}>\r\n            <h4> Reply for {name} </h4>\r\n            <h5> by {username} </h5>\r\n            <div className=\"text-center\">\r\n              <Link\r\n                className=\"btn smallWidth form-control\"\r\n                to={`/replies/fetch/${_id}`}\r\n              >\r\n                Details\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReplyThumbnail;\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsNewReply,\r\n  setStartAmountOfReplies,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { fetchMessages, protectPage } from \"../lib/utilities\";\r\nimport ReplyTile from \"../components/ReplyTile\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\n\r\nconst RepliesPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    // Reset values and scroll to top\r\n    const resetValues = (): void => {\r\n      dispatch(setIsNewReply(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    // Fetch all messages if the user is logged in\r\n    protectPage(dispatch);\r\n    if (loggedInUser) {\r\n      fetchMessages(dispatch);\r\n      isUserChange && dispatch(setStartAmountOfReplies());\r\n      resetValues();\r\n    }\r\n    // Reset values at cleanup\r\n    return () => {\r\n      resetValues();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Replies for your requests </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\r\n        <div className=\"text-right pr-2\">\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        {isFetchingMessages ? (\r\n          <LoadingSpinner />\r\n        ) : (\r\n          <div>\r\n            {messages.map((message: Message, index: number): JSX.Element => {\r\n              return <ReplyTile message={message} key={index} />;\r\n            })}\r\n          </div>\r\n        )}\r\n        {amountOfReplies !== 0 && (\r\n          <div className=\"text-right mt-4 pr-2\">\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesPage;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  checkUserLoggedIn,\r\n  setLoggedInUser,\r\n  setIsCreatingMessage,\r\n  createMessage,\r\n  addMessage,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { protectPage } from \"../lib/utilities\";\r\n\r\nconst CreateRequestForm = () => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isCreatingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isCreatingMessage\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Set variable and scroll to top as soon as page loads if the user is logged in\r\n    protectPage(dispatch);\r\n    if (loggedInUser) {\r\n      dispatch(setErrorMessage(null));\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  // Create request\r\n  const handleCreateMessage = (event: any, plant: Plant) => {\r\n    event.preventDefault();\r\n    const { request } = event.target;\r\n    const { _id, creator } = plant;\r\n    const newMessage: Message = {\r\n      seller: (creator as User)._id,\r\n      plant: _id,\r\n      request: request.value,\r\n    };\r\n    dispatch(setIsCreatingMessage(true));\r\n    dispatch(createMessage(newMessage))\r\n      .unwrap()\r\n      .then((newMessage) => {\r\n        dispatch(addMessage(newMessage));\r\n        history.push(`/plants/fetch/${newMessage.plant}`);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n  const { _id, name } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\"> Your message </h2>\r\n        <h3 className=\"mb-4\"> for {name} </h3>\r\n        <form\r\n          className=\"pl-0\"\r\n          onSubmit={(event) => {\r\n            handleCreateMessage(event, plant);\r\n          }}\r\n        >\r\n          <div>\r\n            <textarea\r\n              className=\"mb-4 form-control\"\r\n              name=\"request\"\r\n              cols={35}\r\n              rows={7}\r\n            />\r\n          </div>\r\n          {errorMessage && <p className=\"warningColor\"> {errorMessage} </p>}\r\n          <div className=\"text-right\">\r\n            <button\r\n              className=\"btn btn-sm mx-2 form-control smallWidth\"\r\n              type=\"submit\"\r\n              disabled={isCreatingMessage ? true : false}\r\n            >\r\n              Send\r\n            </button>\r\n            <Link to={`/plants/fetch/${_id}`}>\r\n              <button className=\"btn btn-sm mx-2 form-control smallWidth\">\r\n                Go back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRequestForm;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setMessage,\r\n  updateMessage,\r\n  setMessageChanges,\r\n  decreaseAmountOfRequests,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { fetchSingleMessage, protectPage } from \"../lib/utilities\";\r\n\r\nconst RequestDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Fetch single message and scroll to top if the user is logged in\r\n    protectPage(dispatch);\r\n    loggedInUser && fetchSingleMessage(messageId, dispatch);\r\n  }, []);\r\n\r\n  // Set message of the buyer inactive by the seller\r\n  const handleSetMessageInactive = (message: Message): void => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.messageState = false;\r\n    dispatch(setMessage(clonedMessage));\r\n    const { _id, buyer, seller, plant, request, reply, messageState } =\r\n      clonedMessage;\r\n    const updatedMessage: Message = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    };\r\n    _id &&\r\n      dispatch(updateMessage({ messageId: _id, updatedMessage }))\r\n        .unwrap()\r\n        .then((message) => {\r\n          dispatch(setMessageChanges(message));\r\n          dispatch(decreaseAmountOfRequests());\r\n          history.push(\"/requests/fetch-all\");\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, buyer, plant, request, reply } = message as Message;\r\n  if (isFetchingMessage || !buyer || !plant) {\r\n    return (\r\n      <div className=\"container d-flex align-items-center justify-content-center mt-5\">\r\n        <LoadingSpinner />\r\n        <span> Loading request </span>\r\n      </div>\r\n    );\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Request for {name} </h2>\r\n        <h5> by {username} </h5>\r\n        <p className=\"textField p-3 mb-4\"> {request} </p>\r\n        {reply && (\r\n          <div>\r\n            <h5> Your reply </h5>\r\n            <p className=\"textField p-3 mb-4\"> {reply} </p>\r\n          </div>\r\n        )}\r\n        <div className=\"text-right px-3\">\r\n          {!reply && (\r\n            <Link to={`/messages/update/${_id}`}>\r\n              <button className=\"btn btn-sm ml-2 smallWidth form-control mb-1\">\r\n                Reply\r\n              </button>\r\n            </Link>\r\n          )}\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => {\r\n              handleSetMessageInactive(message);\r\n            }}\r\n          >\r\n            Done\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/requests/fetch-all\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsDeletingMessage,\r\n  deleteMessage,\r\n  removeMessage,\r\n  decreaseAmountOfReplies,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { fetchSingleMessage, protectPage } from \"../lib/utilities\";\r\n\r\nconst ReplyDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const isDeletingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingMessage\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Fetch single message and scroll to top if the user is logged in\r\n    protectPage(dispatch);\r\n    loggedInUser && fetchSingleMessage(messageId, dispatch);\r\n  }, []);\r\n\r\n  // Delete Message\r\n  const handleDeleteMessage = (messageId: MessageId): void => {\r\n    dispatch(setIsDeletingMessage(true));\r\n    dispatch(deleteMessage(messageId))\r\n      .unwrap()\r\n      .then(() => {\r\n        dispatch(removeMessage(messageId));\r\n        dispatch(decreaseAmountOfReplies());\r\n        history.push(\"/replies/fetch-all\");\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, seller, plant, request, reply } = message as Message;\r\n  if (isFetchingMessage || !seller || !plant) {\r\n    return (\r\n      <div className=\"container d-flex align-items-center justify-content-center mt-5\">\r\n        <LoadingSpinner />\r\n        <span> Loading reply </span>\r\n      </div>\r\n    );\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Your request for {name} </h2>\r\n        <p className=\"textField p-3 mb-4\"> {request} </p>\r\n        {reply && (\r\n          <div>\r\n            <h5> Reply by {username} </h5>\r\n            <p className=\"textField p-3 mb-4\"> {reply} </p>\r\n          </div>\r\n        )}\r\n        <div className=\"text-right px-3\">\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            disabled={isDeletingMessage ? true : false}\r\n            onClick={() => {\r\n              _id && handleDeleteMessage(_id);\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/replies/fetch-all\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              Go back\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setMessage,\r\n  setIsUpdatingMessage,\r\n  updateMessage,\r\n  setMessageChanges,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { protectPage } from \"../lib/utilities\";\r\n\r\nconst UpdateRequestForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const isUpdatingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUpdatingMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Scroll to top if the user ia logged in\r\n    protectPage(dispatch);\r\n    loggedInUser && scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Create reply\r\n  const handleCreateReply = ({ target }: any, message: Message): void => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.reply = target.value;\r\n    dispatch(setMessage(clonedMessage));\r\n  };\r\n\r\n  // Update message\r\n  const handleUpdateMessage = ({\r\n    _id,\r\n    buyer,\r\n    seller,\r\n    plant,\r\n    request,\r\n    reply,\r\n    messageState,\r\n  }: Message): void => {\r\n    const updatedMessage: Message = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    };\r\n    dispatch(setIsUpdatingMessage(true));\r\n    _id &&\r\n      dispatch(updateMessage({ messageId: _id, updatedMessage }))\r\n        .unwrap()\r\n        .then((message) => {\r\n          dispatch(setMessageChanges(message));\r\n          history.push(`/requests/fetch/${_id}`);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n  const { _id, request } = message as Message;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> Reply your request </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <div className=\"card-body\">\r\n            <p> {request} </p>\r\n            <textarea\r\n              className=\"mb-4 form-control\"\r\n              name=\"reply\"\r\n              cols={31}\r\n              rows={6}\r\n              placeholder=\"Your reply\"\r\n              onChange={(event) => {\r\n                handleCreateReply(event, message);\r\n              }}\r\n            />\r\n            <div className=\"row justify-content-end px-3\">\r\n              <button\r\n                className=\"btn btn-sm smallWidth form-control mr-3 mb-2\"\r\n                disabled={isUpdatingMessage ? true : false}\r\n                onClick={() => {\r\n                  handleUpdateMessage(message);\r\n                }}\r\n              >\r\n                Submit\r\n              </button>\r\n              <Link to={`/requests/fetch/${_id}`}>\r\n                <button className=\"btn btn-sm form-control mb-2\">\r\n                  Go back\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateRequestForm;\r\n","const Unauthorized = (): JSX.Element => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 401 Unauthorized </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Unauthorized;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 404 Not Found </h3>\r\n        <Link to={\"/\"}>\r\n          <button className=\"btn btn-sm ml-2 smallWidth form-control\">\r\n            Take me home{\" \"}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useEffect } from \"react\";\r\n\r\nconst KommunicateChat = (): JSX.Element => {\r\n  \r\n  useEffect(() => {\r\n    // Create launcher icon as soon as page loads\r\n    ((d, m) => {\r\n      const kommunicateSettings = {\r\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      const s = document.createElement(\"script\");\r\n      s.type = \"text/javascript\";\r\n      s.async = true;\r\n      s.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      const h = document.getElementsByTagName(\"head\")[0];\r\n      h.appendChild(s);\r\n      (window as any).kommunicate = m;\r\n      m._globals = kommunicateSettings;\r\n    })(document, (window as any).kommunicate || {});\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default KommunicateChat;\r\n","import { Route, Switch, withRouter } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./screens/Home\";\r\nimport SignUp from \"./screens/SignUp\";\r\nimport SignIn from \"./screens/SignIn\";\r\nimport LogOut from \"./components/LogOut\";\r\nimport CreatePlantForm from \"./screens/CreatePlantForm\";\r\nimport PlantDetails from \"./screens/PlantDetails\";\r\nimport UpdatePlantForm from \"./screens/UpdatePlantForm\";\r\nimport CheckoutPage from \"./screens/CheckoutPage\";\r\nimport RequestsPage from \"./screens/RequestsPage\";\r\nimport RepliesPage from \"./screens/RepliesPage\";\r\nimport CreateRequestForm from \"./screens/CreateRequestForm\";\r\nimport RequestDetails from \"./screens/RequestDetails\";\r\nimport ReplyDetails from \"./screens/ReplyDetails\";\r\nimport UpdateRequestForm from \"./screens/UpdateRequestForm\";\r\nimport Unauthorized from \"./screens/Unauthorized\";\r\nimport NotFound from \"./screens/NotFound\";\r\nimport KommunicateChat from \"./components/Chat\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <div className=\"main\">\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n\r\n        <Route path=\"/auth/sign-up\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/auth/sign-in\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/auth/log-out\">\r\n          <LogOut />\r\n        </Route>\r\n        <Route path=\"/auth/unauthorized\">\r\n          <Unauthorized />\r\n        </Route>\r\n\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/fetch/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n\r\n        <Route path=\"/messages/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/messages/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch-all\">\r\n          <RequestsPage />\r\n        </Route>\r\n        <Route path=\"/requests/fetch/:messageId\">\r\n          <RequestDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/replies/fetch-all\">\r\n          <RepliesPage />\r\n        </Route>\r\n        <Route path=\"/replies/fetch/:messageId\">\r\n          <ReplyDetails />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"./reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}