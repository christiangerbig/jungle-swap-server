{"version":3,"sources":["app/hooks.ts","reducer/jungleSwapSlice.ts","app/config.ts","app/custom-hooks/useHandleMessage.ts","app/custom-hooks/useIntervalCounter.ts","components/navigation/NavAuthentificationItems.tsx","components/navigation/NavUserItems.tsx","components/navigation/NavAdditionalItems.tsx","components/navigation/NavBar.tsx","components/Footer.tsx","lib/externalLinkPaths.ts","app/custom-hooks/useHandlePlant.ts","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/home/HomeAbout.tsx","components/spinners/WaitSpinner.tsx","components/plants/PlantSearch.tsx","components/plants/PlantThumbnail.tsx","components/plants/PlantsCollection.tsx","components/plants/PlantsCockpit.tsx","components/home/HomeTitle.tsx","views/home/Home.tsx","app/custom-hooks/useAuthentification.ts","components/helpers/ErrorMessage.tsx","views/authentification/SignUp.tsx","views/authentification/SignIn.tsx","components/authentification/LogOut.tsx","app/custom-hooks/useRouting.ts","app/custom-hooks/useHandlePlantImage.ts","views/plants/PlantCreateForm.tsx","components/plants/PlantDetailsBuyerChoice.tsx","components/plants/PlantDetailsCreatorChoice.tsx","components/plants/PlantDetailsUserChoice.tsx","components/plants/PlantItems.tsx","views/plants/PlantDetails.tsx","views/plants/PlantUpdateForm.tsx","components/apis/CheckoutForm.tsx","app/custom-hooks/useHandlePayment.ts","views/apis/CheckoutView.tsx","components/requests/RequestTile.tsx","components/requests/RequestsCollection.tsx","components/helpers/GoBackButton.tsx","app/custom-hooks/useNavigation.ts","views/requests/RequestsView.tsx","components/replies/ReplyTile.tsx","components/replies/RepliesCollection.tsx","views/replies/RepliesView.tsx","views/requests/RequestCreateForm.tsx","components/spinners/WaitSpinnerText.tsx","components/replies/Reply.tsx","views/requests/RequestDetails.tsx","views/replies/ReplyDetails.tsx","views/requests/RequestUpdateForm.tsx","views/authentification/Unauthorized.tsx","views/errors/NotFound.tsx","components/apis/KommunicateChat.tsx","components/plants/PlantsCreatedCollection.tsx","views/plants/PlantsCreatedView.tsx","components/modals/ModalBody.tsx","components/modals/ErrorModal.tsx","components/modals/OfflineModal.tsx","components/modals/Modals.tsx","app/custom-hooks/useOnlineStatus.ts","App.tsx","app/store.ts","app/locales/en.ts","app/i18n.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","apiPath","process","rejectWithValue","data","Error","signUp","createAsyncThunk","newUser","a","axios","post","response","error","signIn","user","withCredentials","logOut","checkUserLoggedIn","get","createPlant","newPlant","fetchAllPlants","fetchQueryPlants","query","fetchPlant","plantId","updatePlant","updatedPlant","patch","deletePlant","delete","uploadPlantImage","uploadForm","deletePlantImage","destroyImageData","createPayment","plant","price","createMessage","newMessage","fetchAllMessages","fetchMessage","messageId","updateMessage","updatedMessage","deleteMessage","jungleSwapSlice","createSlice","name","initialState","isUserChange","loggedInUser","isCreatingPlant","isFetchingPlants","isFetchingPlant","isUpdatingPlant","isDeletingPlant","plants","filteredPlants","numberOfVisibleEntries","isUploadingPlantImage","isDeletingPlantImage","clientSecret","isCreatingMessage","isFetchingMessages","isFetchingMessage","isUpdatingMessage","isDeletingMessage","messages","message","isNewRequest","isNewReply","amountOfRequests","amountOfReplies","intervalId","delayCounter","titleSectionHeight","aboutSectionHeight","errorMessage","reducers","setIsUserChange","state","payload","setLoggedInUser","setIsCreatingPlant","setIsFetchingPlants","setIsFetchingPlant","setIsUpdatingPlant","setIsDeletingPlant","addPlant","push","setPlant","setPlants","setFilteredPlants","setPlantChanges","_id","description","size","imageUrl","imagePublicId","location","map","singlePlant","removePlant","filter","setNumberOfVisibleEntries","setIsUploadingPlantImage","setIsDeletingPlantImage","setDestroyImageData","setClientSecret","setIsCreatingMessage","setIsFetchingMessages","setIsFetchingMessage","setIsUpdatingMessage","setIsDeletingMessage","addMessage","setMessages","setMessage","setMessageChanges","buyer","seller","request","reply","messageState","singleMessage","removeMessage","setIsNewRequest","setIsNewReply","setStartAmountOfRequests","setStartAmountOfReplies","setAmountOfRequests","setAmountOfReplies","decreaseAmountOfRequests","decreaseAmountOfReplies","setIntervalId","setDelayCounter","increaseDelayCounter","setTitleSectionHeight","setAboutSectionHeight","scrollToAbout","scroll","scrollTo","scrollToPlants","setErrorMessage","extraReducers","builder","addCase","fulfilled","rejected","selectors","jungleSwap","actions","selectIsUserChange","selectLoggedInUser","selectIsCreatingPlant","selectIsFetchingPlants","selectIsFetchingPlant","selectIsUpdatingPlant","selectIsDeletingPlant","selectPlant","selectPlants","selectfFilteredPlants","selectNumberOfVisibleEntries","selectIsUploadingPlantImage","selectIsDeletingPlantImage","selectDestroyImageData","selectClientSecret","selectIsCreatingMessage","selectiIsFetchingMessages","selectIsFetchingMessage","selectIsUpdatingMessage","selectIsDeletingMessage","selectMessages","selectMessage","selectIsNewRequest","selectIsNewReply","selectAmountOfRequests","selectAmountOfReplies","selectIntervalId","selectDelayCounter","selectErrorMessage","useHandleMessage","dispatch","callbackFunction","unwrap","then","catch","rejectedValue","fetchMessages","fetchCheck","deleteRemainingMessages","forEach","checkNewRequests","currentAmountOfRequests","checkAmountOfRequests","length","calculateAmountOfRequests","checkNewReplies","currentAmountOfReplies","checkAmountOfReplies","calculateAmountOfReplies","useIntervalCounter","stopCounter","clearInterval","NavAuthentificationItems","t","useTranslation","to","className","NavUserItems","title","icon","faBell","username","NavAdditionalItems","NavBar","scrollToTop","useEffect","setInterval","startInterval","Navbar","variant","expand","fixed","Brand","onClick","Toggle","aria-controls","Collapse","id","Nav","faSearch","Footer","year","Date","getFullYear","pathname","target","rel","useHandlePlant","value","fetchPlants","searchPlant","HomeAbout","src","plantsImage","loading","alt","plantPotIcon","WaitSpinner","role","PlantSearch","useState","setQuery","setFilter","fetchPlantQueryByName","filterPlantsByLocation","type","placeholder","onChange","event","PlantThumbnail","PlantsCollection","index","PlantsCockpit","HomeTitle","Home","elementRef","useRef","elementHeight","Math","round","getBoundingClientRect","height","current","ref","titleSection","aboutSection","useAuthentification","ErrorMessage","outputFunction","includes","SignUp","useHistory","onSubmit","email","password","toLowerCase","preventDefault","handleSignUp","htmlFor","formNoValidate","SignIn","handleSignIn","LogOut","updateUserData","clonedUser","JSON","parse","stringify","updateUserRequestsReplies","useRouting","protectRoute","useHandlePlantImage","createImage","uploadImageData","deleteImage","PlantCreateForm","goBack","image","plantImage","files","FormData","append","handleUploadPlantImage","min","disabled","PlantDetailsBuyerItems","PlantDetailsCreatorChoice","PlantDetailsUserChoice","isCreator","PlantDetailsBuyerChoice","PlantItems","creator","PlantDetails","useParams","PlantUpdateForm","selectElementRef","setPlantLocation","handlePlantEntryChange","clonedPlant","handlePlantImageChange","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","initializePayment","payment","useHandlePayment","handleInputChanges","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","stripePromise","loadStripe","CheckoutView","RequestTile","RequestsCollection","GoBackButton","goToHome","useNavigation","RequestsView","resetRequestVariableAndScrollToTop","ReplyThumbnail","RepliesCollection","ReplyTile","RepliesView","resetReplyVariableAndScrollToTop","RequestCreateForm","handleCreateMessageForRequest","cols","rows","WaitSpinnerText","text","Reply","headline","RequestDetails","clonedMessage","setBuyerMessageInactive","handleChangeMessageState","ReplyDetails","handleDeleteMessage","RequestUpdateForm","handleCreateReply","Unauthorized","NotFound","KommunicateChat","htmlDocument","method","scriptElement","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","createLauncherIcon","document","PlantsCreatedCollection","PlantsCreatedView","ModalBody","subheadline","isClose","divElementRef","handleCloseModal","handleClickOutside","ErrorModal","convertErrorMessage","OfflineModal","isOnline","Modals","setIsOnline","handleOfflineEventCallback","handleOnlineEventCallback","addEventListener","removeEventListener","useOnlineStatus","withRouter","exact","path","component","store","configureStore","reducer","en","translations","link","allPlants","myPlants","requests","replies","tryIt","details","tooltipps","newRequest","newReply","search","button","create","update","save","send","submit","buy","swap","done","more","proceed","takeMeHome","select","sun","shade","sunAndShade","texts","home","about","paragraph","line1","line2","line3","line4","line5","line6","namePlaceholder","authentification","enterPlaceholder","alreadyAccountCreated","form","plantThumbnail","currency","plantDetails","sizeUnit","likes","checkout","payNow","paymentSuccessful","createRequest","updateRequest","replyPlaceholder","overview","requestDetails","yourReply","requestTile","replyDetails","replyBy","replyTile","notFound","subheadline1","subheadline2","unauthorized","footer","copyright","appAuthor1","appAuthor2","errorModal","offlineModal","errorTexts","usernameMissing","emailMissing","passwordMissing","emailFormatInvalid","passwordInvalid","userAlreadyExists","errorWhileCreatingUser","noMatchPasswords","userUnknown","noUserUpdate","nameMissing","descriptionMissing","sizeMissing","locationMissing","priceMissing","imageMissing","noImageSelected","createPlantFailed","fetchPlantFailed","fetchAllPlantsFailed","updatePlantFailed","deletePlantFailed","requestTextMissing","replyTextMissing","createMessageFailed","fetchMessageFailed","fetchAllMessagesFailed","updateMessageFailed","deleteMessageFailed","offline","general","i18n","use","initReactI18next","init","resources","fallbackLng","debug","ns","defaultNS","interpolation","escapeValue","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.0e22d55c.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../app/config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  User,\r\n  Plant,\r\n  PlantId,\r\n  Message,\r\n  MessageId,\r\n  DestroyImageData,\r\n  IntervalId,\r\n} from \"../app/typeDefinitions\";\r\nimport { RootState } from \"../app/store\";\r\n\r\ntype ErrorMessage = string | null;\r\n\r\ninterface InitialState {\r\n  // ----- User authentication -----\r\n  isUserChange: boolean;\r\n  loggedInUser: User | null;\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: boolean;\r\n  isFetchingPlants: boolean;\r\n  isFetchingPlant: boolean;\r\n  isUpdatingPlant: boolean;\r\n  isDeletingPlant: boolean;\r\n  plant: Plant | {};\r\n  plants: Plant[];\r\n  filteredPlants: Plant[];\r\n  numberOfVisibleEntries: number;\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: boolean;\r\n  isDeletingPlantImage: boolean;\r\n  destroyImageData: DestroyImageData | null;\r\n\r\n  // ----- Payment -----\r\n  clientSecret: string;\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: boolean;\r\n  isFetchingMessages: boolean;\r\n  isFetchingMessage: boolean;\r\n  isUpdatingMessage: boolean;\r\n  isDeletingMessage: boolean;\r\n  messages: Message[];\r\n  message: Message | {};\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: boolean;\r\n  isNewReply: boolean;\r\n  amountOfRequests: number;\r\n  amountOfReplies: number;\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: IntervalId;\r\n  delayCounter: number;\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: number;\r\n  aboutSectionHeight: number;\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: ErrorMessage;\r\n}\r\n\r\ninterface UpdatePlantParameters {\r\n  plantId: PlantId;\r\n  updatedPlant: Plant;\r\n}\r\n\r\ninterface UpdateMessageParameters {\r\n  messageId: MessageId;\r\n  updatedMessage: Message;\r\n}\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\nconst initialState: InitialState = {\r\n  // ----- User authentication -----\r\n  isUserChange: false,\r\n  loggedInUser: null,\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: false,\r\n  isFetchingPlants: false,\r\n  isFetchingPlant: false,\r\n  isUpdatingPlant: false,\r\n  isDeletingPlant: false,\r\n  plant: {},\r\n  plants: [],\r\n  filteredPlants: [],\r\n  numberOfVisibleEntries: 6,\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: false,\r\n  isDeletingPlantImage: false,\r\n  destroyImageData: null,\r\n\r\n  // ----- Payment -----\r\n  clientSecret: \"\",\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: false,\r\n  isFetchingMessages: false,\r\n  isFetchingMessage: false,\r\n  isUpdatingMessage: false,\r\n  isDeletingMessage: false,\r\n  messages: [],\r\n  message: {},\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: false,\r\n  isNewReply: false,\r\n  amountOfRequests: 0,\r\n  amountOfReplies: 0,\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: null,\r\n  delayCounter: 0,\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: 0,\r\n  aboutSectionHeight: 0,\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: null,\r\n};\r\n\r\nconst rejectWithValue = (data: any): void | PromiseLike<void> => {\r\n  throw new Error(data);\r\n};\r\n\r\n// ----- User authentification -----\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (newUser: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-up`, newUser);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async (user: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-in`, user, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (user: User): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/auth/log-out`, user, {\r\n        withCredentials: true,\r\n      });\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const checkUserLoggedIn = createAsyncThunk(\r\n  \"jungleSwap/checkUserLoggedIn\",\r\n  async (): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/auth/check-user`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Plants -----\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async (newPlant: Plant): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/plants/create`, newPlant, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async (): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query: string): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchPlant = createAsyncThunk(\r\n  \"jungleSwap/fetchPlant\",\r\n  async (plantId: PlantId): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async ({\r\n    plantId,\r\n    updatedPlant,\r\n  }: UpdatePlantParameters): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (plantId: PlantId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Images -----\r\nexport const uploadPlantImage = createAsyncThunk(\r\n  \"jungleSwap/uploadPlantImage\",\r\n  async (uploadForm: FormData): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/cloudinary/upload`,\r\n        uploadForm\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlantImage = createAsyncThunk(\r\n  \"jungleSwap/deletePlantImage\",\r\n  async (destroyImageData: DestroyImageData): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/cloudinary/destroy`, destroyImageData);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Payment -----\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant: Plant): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/stripe/create-payment-intent`,\r\n        {\r\n          price: plant.price,\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Messages -----\r\nexport const createMessage = createAsyncThunk(\r\n  \"jungleSwap/createMessage\",\r\n  async (newMessage: Message): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/messages/create`,\r\n        newMessage,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllMessages = createAsyncThunk(\r\n  \"jungleSwap/fetchAllMessages\",\r\n  async (): Promise<Message[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/messages/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchMessage = createAsyncThunk(\r\n  \"jungleSwap/fetchMessage\",\r\n  async (messageId: MessageId): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${apiPath}/messages/fetch/${messageId}`,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updateMessage = createAsyncThunk(\r\n  \"jungleSwap/updateMessage\",\r\n  async ({\r\n    messageId,\r\n    updatedMessage,\r\n  }: UpdateMessageParameters): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/messages/update/${messageId}`,\r\n        updatedMessage\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteMessage = createAsyncThunk(\r\n  \"jungleSwap/deleteMessage\",\r\n  async (messageId: MessageId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    // ----- User authentication ------\r\n    setIsUserChange: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isUserChange = payload;\r\n    },\r\n    setLoggedInUser: (state, { payload }: PayloadAction<User | null>) => {\r\n      state.loggedInUser = payload;\r\n    },\r\n\r\n    // ----- Plants ------\r\n    setIsCreatingPlant: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isCreatingPlant = payload;\r\n    },\r\n    setIsFetchingPlants: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isFetchingPlants = payload;\r\n    },\r\n    setIsFetchingPlant: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isFetchingPlant = payload;\r\n    },\r\n    setIsUpdatingPlant: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isUpdatingPlant = payload;\r\n    },\r\n    setIsDeletingPlant: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isDeletingPlant = payload;\r\n    },\r\n    addPlant: (state, { payload }: PayloadAction<Plant>) => {\r\n      state.plants.push(payload);\r\n    },\r\n    setPlant: (state, { payload }: PayloadAction<Plant>) => {\r\n      state.plant = payload;\r\n    },\r\n    setPlants: (state, { payload }: PayloadAction<Plant[]>) => {\r\n      state.plants = payload;\r\n    },\r\n    setFilteredPlants: (state, { payload }: PayloadAction<Plant[]>) => {\r\n      state.filteredPlants = payload;\r\n    },\r\n    setPlantChanges: (state, { payload }: PayloadAction<Plant>) => {\r\n      const {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      } = payload;\r\n      state.plants = state.plants.map((singlePlant: Plant): Plant => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, { payload }: PayloadAction<PlantId>) => {\r\n      state.plants = state.plants.filter(\r\n        (plant: Plant): boolean => plant._id !== payload\r\n      );\r\n    },\r\n    setNumberOfVisibleEntries: (state, { payload }: PayloadAction<number>) => {\r\n      state.numberOfVisibleEntries = payload;\r\n    },\r\n\r\n    // ----- Images -----\r\n    setIsUploadingPlantImage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isUploadingPlantImage = payload;\r\n    },\r\n    setIsDeletingPlantImage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isDeletingPlantImage = payload;\r\n    },\r\n    setDestroyImageData: (\r\n      state,\r\n      { payload }: PayloadAction<DestroyImageData | null>\r\n    ) => {\r\n      state.destroyImageData = payload;\r\n    },\r\n\r\n    // ----- Payment -----\r\n    setClientSecret: (state, { payload }: PayloadAction<string>) => {\r\n      state.clientSecret = payload;\r\n    },\r\n\r\n    // ----- Messages -----\r\n    setIsCreatingMessage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isCreatingMessage = payload;\r\n    },\r\n    setIsFetchingMessages: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isFetchingMessages = payload;\r\n    },\r\n    setIsFetchingMessage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isFetchingMessage = payload;\r\n    },\r\n    setIsUpdatingMessage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isUpdatingMessage = payload;\r\n    },\r\n    setIsDeletingMessage: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isDeletingMessage = payload;\r\n    },\r\n    addMessage: (state, { payload }: PayloadAction<Message>) => {\r\n      state.messages.push(payload);\r\n    },\r\n    setMessages: (state, { payload }: PayloadAction<Message[]>) => {\r\n      state.messages = payload;\r\n    },\r\n    setMessage: (state, { payload }: PayloadAction<Message>) => {\r\n      state.message = payload;\r\n    },\r\n    setMessageChanges: (state, { payload }: PayloadAction<Message>) => {\r\n      const { _id, buyer, seller, plant, request, reply, messageState } =\r\n        payload;\r\n      state.messages = state.messages.map((singleMessage) => {\r\n        if (singleMessage._id === _id) {\r\n          singleMessage.buyer = buyer;\r\n          singleMessage.seller = seller;\r\n          singleMessage.plant = plant;\r\n          singleMessage.request = request;\r\n          singleMessage.reply = reply;\r\n          singleMessage.messageState = messageState;\r\n        }\r\n        return singleMessage;\r\n      });\r\n    },\r\n    removeMessage: (state, { payload }: PayloadAction<MessageId>) => {\r\n      state.messages = state.messages.filter((message: Message): boolean => {\r\n        return message._id !== payload;\r\n      });\r\n    },\r\n\r\n    // ----- Requests/Replies check ------\r\n    setIsNewRequest: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isNewRequest = payload;\r\n    },\r\n    setIsNewReply: (state, { payload }: PayloadAction<boolean>) => {\r\n      state.isNewReply = payload;\r\n    },\r\n    setStartAmountOfRequests: (state) => {\r\n      state.amountOfRequests = (state.loggedInUser as any).amountOfRequests;\r\n    },\r\n    setStartAmountOfReplies: (state) => {\r\n      state.amountOfReplies = (state.loggedInUser as any).amountOfReplies;\r\n    },\r\n    setAmountOfRequests: (state, { payload }: PayloadAction<number>) => {\r\n      state.amountOfRequests = payload;\r\n    },\r\n    setAmountOfReplies: (state, { payload }: PayloadAction<number>) => {\r\n      state.amountOfReplies = payload;\r\n    },\r\n    decreaseAmountOfRequests: (state) => {\r\n      state.amountOfRequests -= 1;\r\n    },\r\n    decreaseAmountOfReplies: (state) => {\r\n      state.amountOfReplies -= 1;\r\n    },\r\n\r\n    // ----- Interval counter -----\r\n    setIntervalId: (state, { payload }: PayloadAction<IntervalId>) => {\r\n      state.intervalId = payload;\r\n    },\r\n    setDelayCounter: (state, { payload }: PayloadAction<number>) => {\r\n      state.delayCounter = payload;\r\n    },\r\n    increaseDelayCounter: (state) => {\r\n      state.delayCounter += 1;\r\n    },\r\n\r\n    // ----- Pages handling -----\r\n    setTitleSectionHeight: (state, { payload }: PayloadAction<number>) => {\r\n      state.titleSectionHeight = payload;\r\n    },\r\n    setAboutSectionHeight: (state, { payload }: PayloadAction<number>) => {\r\n      state.aboutSectionHeight = payload;\r\n    },\r\n    scrollToAbout: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight);\r\n    },\r\n    scrollToPlants: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight + state.aboutSectionHeight);\r\n    },\r\n\r\n    // ----- Error handling -----\r\n    setErrorMessage: (state, { payload }: PayloadAction<ErrorMessage>) => {\r\n      state.errorMessage = payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    // ----- Plants ------\r\n    builder.addCase(createPlant.fulfilled, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(createPlant.rejected, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchPlant.fulfilled, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(fetchPlant.rejected, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.fulfilled, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.rejected, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.fulfilled, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.rejected, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n\r\n    // ----- Images -----\r\n    builder.addCase(uploadPlantImage.fulfilled, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(uploadPlantImage.rejected, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.fulfilled, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.rejected, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n\r\n    // ----- Messages -----\r\n    builder.addCase(createMessage.fulfilled, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(createMessage.rejected, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.fulfilled, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.rejected, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchMessage.fulfilled, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(fetchMessage.rejected, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.fulfilled, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.rejected, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.fulfilled, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.rejected, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n  },\r\n});\r\n\r\nconst selectors = {\r\n  // ----- User authentication -----\r\n  selectIsUserChange: ({ jungleSwap }: RootState) => jungleSwap.isUserChange,\r\n  selectLoggedInUser: ({ jungleSwap }: RootState) => jungleSwap.loggedInUser,\r\n\r\n  // ----- Plants -----\r\n  selectIsCreatingPlant: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.isCreatingPlant,\r\n  selectIsFetchingPlants: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.isFetchingPlants,\r\n  selectIsFetchingPlant: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.isFetchingPlant,\r\n  selectIsUpdatingPlant: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.isUpdatingPlant,\r\n  selectIsDeletingPlant: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.isDeletingPlant,\r\n  selectPlant: ({ jungleSwap }: RootState) => jungleSwap.plant,\r\n  selectPlants: ({ jungleSwap }: RootState) => jungleSwap.plants,\r\n  selectfFilteredPlants: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.filteredPlants,\r\n  selectNumberOfVisibleEntries: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.numberOfVisibleEntries,\r\n\r\n  // ----- Images -----\r\n  selectIsUploadingPlantImage: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.isUploadingPlantImage,\r\n  selectIsDeletingPlantImage: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.isDeletingPlantImage,\r\n  selectDestroyImageData: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.destroyImageData,\r\n\r\n  // ----- Payment -----\r\n  selectClientSecret: ({ jungleSwap }: RootState) => jungleSwap.clientSecret,\r\n\r\n  // ----- Messages -----\r\n  selectIsCreatingMessage: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.isCreatingMessage,\r\n  selectiIsFetchingMessages: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.isFetchingMessages,\r\n  selectIsFetchingMessage: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.isFetchingMessage,\r\n  selectIsUpdatingMessage: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.isUpdatingMessage,\r\n  selectIsDeletingMessage: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.isDeletingMessage,\r\n  selectMessages: ({ jungleSwap }: RootState) => jungleSwap.messages,\r\n  selectMessage: ({ jungleSwap }: RootState) => jungleSwap.message,\r\n\r\n  // ----- Requests/Replies check -----\r\n  selectIsNewRequest: ({ jungleSwap }: RootState) => jungleSwap.isNewRequest,\r\n  selectIsNewReply: ({ jungleSwap }: RootState) => jungleSwap.isNewReply,\r\n  selectAmountOfRequests: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.amountOfRequests,\r\n  selectAmountOfReplies: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.amountOfReplies,\r\n\r\n  // ----- Interval counter -----\r\n  selectIntervalId: ({ jungleSwap }: RootState) => jungleSwap.intervalId,\r\n  selectDelayCounter: ({ jungleSwap }: RootState) => jungleSwap.delayCounter,\r\n\r\n  // ----- Pages handling -----\r\n  selectTitleSectionHeight: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.titleSectionHeight,\r\n  selectAboutSectionHeight: ({ jungleSwap }: RootState) =>\r\n    jungleSwap.aboutSectionHeight,\r\n\r\n  // ----- Error handling -----\r\n  selectErrorMessage: ({ jungleSwap }: RootState) => jungleSwap.errorMessage,\r\n};\r\n\r\n// ----- Slice actions -----\r\nexport const {\r\n  // ----- User authentification -----\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n\r\n  // ----- Plants -----\r\n  setIsCreatingPlant,\r\n  setIsFetchingPlants,\r\n  setIsFetchingPlant,\r\n  setIsUpdatingPlant,\r\n  setIsDeletingPlant,\r\n  addPlant,\r\n  setPlants,\r\n  setFilteredPlants,\r\n  setPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n  setNumberOfVisibleEntries,\r\n\r\n  // ----- Images -----\r\n  setIsUploadingPlantImage,\r\n  setIsDeletingPlantImage,\r\n  setDestroyImageData,\r\n\r\n  // ----- Payment -----\r\n  setClientSecret,\r\n\r\n  // ----- Messages -----\r\n  setIsCreatingMessage,\r\n  setIsFetchingMessages,\r\n  setIsFetchingMessage,\r\n  setIsUpdatingMessage,\r\n  setIsDeletingMessage,\r\n  addMessage,\r\n  setMessages,\r\n  setMessage,\r\n  setMessageChanges,\r\n  removeMessage,\r\n\r\n  // ----- Requests/Replies check -----\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  decreaseAmountOfRequests,\r\n  decreaseAmountOfReplies,\r\n\r\n  // ----- Interval counter -----\r\n  setIntervalId,\r\n  setDelayCounter,\r\n  increaseDelayCounter,\r\n\r\n  // ----- Pages handling -----\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n\r\n  // ----- Error handling -----\r\n  setErrorMessage,\r\n} = jungleSwapSlice.actions;\r\n\r\n// ----- Slice selectors -----\r\nexport const {\r\n  // ----- User authentication -----\r\n  selectIsUserChange,\r\n  selectLoggedInUser,\r\n\r\n  // ----- Plants -----\r\n  selectIsCreatingPlant,\r\n  selectIsFetchingPlants,\r\n  selectIsFetchingPlant,\r\n  selectIsUpdatingPlant,\r\n  selectIsDeletingPlant,\r\n  selectPlant,\r\n  selectPlants,\r\n  selectfFilteredPlants,\r\n  selectNumberOfVisibleEntries,\r\n\r\n  // ----- Images -----\r\n  selectIsUploadingPlantImage,\r\n  selectIsDeletingPlantImage,\r\n  selectDestroyImageData,\r\n\r\n  // ----- Payment -----\r\n  selectClientSecret,\r\n\r\n  // ----- Messages -----\r\n  selectIsCreatingMessage,\r\n  selectiIsFetchingMessages,\r\n  selectIsFetchingMessage,\r\n  selectIsUpdatingMessage,\r\n  selectIsDeletingMessage,\r\n  selectMessages,\r\n  selectMessage,\r\n\r\n  // ----- Requests/Replies check -----\r\n  selectIsNewRequest,\r\n  selectIsNewReply,\r\n  selectAmountOfRequests,\r\n  selectAmountOfReplies,\r\n\r\n  // ----- Interval counter -----\r\n  selectIntervalId,\r\n  selectDelayCounter,\r\n\r\n  // ----- Pages handling -----\r\n  selectTitleSectionHeight,\r\n  selectAboutSectionHeight,\r\n\r\n  // ----- Error handling -----\r\n  selectErrorMessage,\r\n} = selectors;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  addMessage,\r\n  createMessage,\r\n  deleteMessage,\r\n  fetchAllMessages,\r\n  fetchMessage,\r\n  removeMessage,\r\n  setAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setErrorMessage,\r\n  setIsCreatingMessage,\r\n  setIsDeletingMessage,\r\n  setIsFetchingMessage,\r\n  setIsFetchingMessages,\r\n  setIsNewReply,\r\n  setIsNewRequest,\r\n  setIsUpdatingMessage,\r\n  setMessage,\r\n  setMessageChanges,\r\n  setMessages,\r\n  updateMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Message, MessageId, Plant, PlantId, User } from \"../typeDefinitions\";\r\n\r\ntype HandleMessage = {\r\n  createMessage: Function;\r\n  fetchMessage: Function;\r\n  fetchMessages: Function;\r\n  fetchCheck: Function;\r\n  updateMessage: Function;\r\n  deleteMessage: Function;\r\n  deleteRemainingMessages: Function;\r\n  checkNewRequests: Function;\r\n  checkNewReplies: Function;\r\n};\r\n\r\nexport const useHandleMessage = (): HandleMessage => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleMessage = {\r\n    createMessage: (newMessage: Message, callbackFunction: Function): void => {\r\n      dispatch(setIsCreatingMessage(true));\r\n      dispatch(createMessage(newMessage))\r\n        .unwrap()\r\n        .then((message: Message): void => {\r\n          dispatch(addMessage(message));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchMessage: (messageId: MessageId, callbackFunction: Function): void => {\r\n      dispatch(setIsFetchingMessage(true));\r\n      dispatch(fetchMessage(messageId))\r\n        .unwrap()\r\n        .then((message: Message): void => {\r\n          dispatch(setMessage(message));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchMessages: (callbackFunction: Function): void => {\r\n      dispatch(setIsFetchingMessages(true));\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages: Message[]): void => {\r\n          dispatch(setMessages(messages));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchCheck: (callbackFunction: Function): void => {\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages: Message[]): void => {\r\n          dispatch(setMessages(messages));\r\n          callbackFunction(messages);\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    updateMessage: (\r\n      messageId: MessageId,\r\n      updatedMessage: Message,\r\n      callbackFunction: Function\r\n    ): void => {\r\n      dispatch(setIsUpdatingMessage(true));\r\n      dispatch(updateMessage({ messageId, updatedMessage }))\r\n        .unwrap()\r\n        .then((message: Message): void => {\r\n          dispatch(setMessageChanges(message));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    deleteMessage: (messageId: MessageId, callbackFunction: Function): void => {\r\n      dispatch(setIsDeletingMessage(true));\r\n      dispatch(deleteMessage(messageId))\r\n        .unwrap()\r\n        .then((): void => {\r\n          dispatch(removeMessage(messageId));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    deleteRemainingMessages: (messages: Message[], plantId: PlantId): void => {\r\n      messages.forEach(({ _id, plant }: Message): void => {\r\n        if ((plant as Plant)._id === plantId) {\r\n          dispatch(setIsDeletingMessage(true));\r\n          dispatch(deleteMessage(_id as PlantId))\r\n            .unwrap()\r\n            .then((): void => {\r\n              dispatch(removeMessage(_id as PlantId));\r\n            })\r\n            .catch((rejectedValue: any): void => {\r\n              dispatch(setErrorMessage(rejectedValue.message));\r\n            });\r\n        }\r\n      });\r\n    },\r\n\r\n    checkNewRequests: (\r\n      loggedInUser: User | null,\r\n      messages: Message[],\r\n      amountOfRequests: number\r\n    ): void => {\r\n      const calculateAmountOfRequests = (messages: Message[]): number => {\r\n        const currentAmountOfRequests = messages.filter(\r\n          ({ seller, messageState }: Message): boolean => {\r\n            return (\r\n              (seller as User)._id === (loggedInUser as User)._id &&\r\n              messageState === true\r\n            );\r\n          }\r\n        ).length;\r\n        return currentAmountOfRequests;\r\n      };\r\n\r\n      const checkAmountOfRequests = (\r\n        currentAmountOfRequests: number,\r\n        amountOfRequests: number\r\n      ): void => {\r\n        if (amountOfRequests < currentAmountOfRequests) {\r\n          dispatch(setIsNewRequest(true));\r\n        }\r\n        if (amountOfRequests !== currentAmountOfRequests) {\r\n          dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n        }\r\n      };\r\n\r\n      const currentAmountOfRequests = calculateAmountOfRequests(messages);\r\n      checkAmountOfRequests(currentAmountOfRequests, amountOfRequests);\r\n    },\r\n\r\n    checkNewReplies: (\r\n      loggedInUser: User | null,\r\n      messages: Message[],\r\n      amountOfReplies: number\r\n    ): void => {\r\n      const calculateAmountOfReplies = (messages: Message[]): number => {\r\n        const currentAmountOfReplies = messages.filter(\r\n          ({ buyer, reply }: Message): boolean => {\r\n            return (\r\n              (buyer as User)._id === (loggedInUser as User)._id && reply !== \"\"\r\n            );\r\n          }\r\n        ).length;\r\n        return currentAmountOfReplies;\r\n      };\r\n\r\n      const checkAmountOfReplies = (\r\n        currentAmountOfReplies: number,\r\n        amountOfReplies: number\r\n      ): void => {\r\n        if (amountOfReplies < currentAmountOfReplies) {\r\n          dispatch(setIsNewReply(true));\r\n        }\r\n        if (amountOfReplies !== currentAmountOfReplies) {\r\n          dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n        }\r\n      };\r\n\r\n      const currentAmountOfReplies = calculateAmountOfReplies(messages);\r\n      checkAmountOfReplies(currentAmountOfReplies, amountOfReplies);\r\n    },\r\n  };\r\n  return handleMessage;\r\n};\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport { setDelayCounter, setIntervalId } from \"../../reducer/jungleSwapSlice\";\r\n\r\ntype IntervalCounter = {\r\n  stopCounter: Function;\r\n};\r\n\r\nexport const useIntervalCounter = (): IntervalCounter => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const intervalCounter = {\r\n    stopCounter: (intervalId: NodeJS.Timeout): void => {\r\n      clearInterval(intervalId);\r\n      dispatch(setIntervalId(null));\r\n      dispatch(setDelayCounter(0));\r\n    },\r\n  };\r\n  return intervalCounter;\r\n};\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst NavAuthentificationItems = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/auth/sign-in\" className=\"p-2 is-link\">\r\n        {t(\"link.signIn\")}\r\n      </Link>\r\n      <Link to=\"/auth/sign-up\" className=\"p-2 is-link\">\r\n        {t(\"link.signUp\")}\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavAuthentificationItems;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport {\r\n  selectIsNewReply,\r\n  selectIsNewRequest,\r\n  selectLoggedInUser,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NavUserItems = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isNewRequest = useAppSelector(selectIsNewRequest);\r\n  const isNewReply = useAppSelector(selectIsNewReply);\r\n  const { t } = useTranslation();\r\n\r\n  const tooltipItemRequests = (): string => {\r\n    return isNewRequest ? t(\"link.tooltipps.newRequest\") : \"\";\r\n  };\r\n\r\n  const tooltipItemReplies = (): string => {\r\n    return isNewReply ? t(\"link.tooltipps.newReply\") : \"\";\r\n  };\r\n\r\n  const tooltipItemLogOut = (): any => {\r\n    return loggedInUser ? loggedInUser.username : \"\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/plants/my-own\" className=\"p-2 is-link\">\r\n        {t(\"link.myPlants\")}\r\n      </Link>\r\n      <Link to=\"/plants/create\" className=\"p-2 is-link\">\r\n        {t(\"link.createPlant\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/requests/fetch-all\"\r\n        title={tooltipItemRequests()}\r\n        className=\"p-2 is-link\"\r\n      >\r\n        {isNewRequest && <FontAwesomeIcon icon={faBell} />}\r\n        {t(\"link.requests\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/replies/fetch-all\"\r\n        title={tooltipItemReplies()}\r\n        className=\"p-2 is-link\"\r\n      >\r\n        {isNewReply && <FontAwesomeIcon icon={faBell} />}\r\n        {t(\"link.replies\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/auth/log-out\"\r\n        title={tooltipItemLogOut()}\r\n        className=\"p-2 is-link\"\r\n      >\r\n        {t(\"link.logOut\")}\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavUserItems;\r\n","import { User } from \"../../app/typeDefinitions\";\r\nimport NavAuthentificationItems from \"./NavAuthentificationItems\";\r\nimport NavUserItems from \"./NavUserItems\";\r\n\r\ntype NavAdditionalItemsProps = {\r\n  user: User | null;\r\n};\r\n\r\nconst NavAdditionalItems = ({ user }: NavAdditionalItemsProps): JSX.Element => {\r\n  if (user) {\r\n    return <NavUserItems />;\r\n  }\r\n  return <NavAuthentificationItems />;\r\n};\r\n\r\nexport default NavAdditionalItems;\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport { useIntervalCounter } from \"../../app/custom-hooks/useIntervalCounter\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  setIsUserChange,\r\n  setIntervalId,\r\n  increaseDelayCounter,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  scrollToPlants,\r\n  selectIsUserChange,\r\n  selectLoggedInUser,\r\n  selectIntervalId,\r\n  selectDelayCounter,\r\n  selectIsNewRequest,\r\n  selectIsNewReply,\r\n  selectAmountOfRequests,\r\n  selectAmountOfReplies,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell, faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Message } from \"../../app/typeDefinitions\";\r\nimport NavAdditionalItems from \"./NavAdditionalItems\";\r\n\r\nconst NavBar = (): JSX.Element => {\r\n  const isUserChange = useAppSelector(selectIsUserChange);\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const intervalId = useAppSelector(selectIntervalId);\r\n  const delayCounter = useAppSelector(selectDelayCounter);\r\n  const isNewRequest = useAppSelector(selectIsNewRequest);\r\n  const isNewReply = useAppSelector(selectIsNewReply);\r\n  const amountOfRequests = useAppSelector(selectAmountOfRequests);\r\n  const amountOfReplies = useAppSelector(selectAmountOfReplies);\r\n  const dispatch = useAppDispatch();\r\n  const { fetchMessages, fetchCheck, checkNewRequests, checkNewReplies } =\r\n    useHandleMessage();\r\n  const { stopCounter } = useIntervalCounter();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalId) {\r\n        stopCounter(intervalId);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const startRequestsRepliesCheck = (): void => {\r\n      const setInitialMessageVariables = (): void => {\r\n        dispatch(setStartAmountOfRequests());\r\n        dispatch(setStartAmountOfReplies());\r\n        dispatch(setIsUserChange(false));\r\n      };\r\n\r\n      const startInterval = (): void => {\r\n        const intervalId = setInterval(\r\n          (): void => {\r\n            dispatch(increaseDelayCounter());\r\n          },\r\n          1000 // every second\r\n        );\r\n        dispatch(setIntervalId(intervalId));\r\n        dispatch(increaseDelayCounter());\r\n      };\r\n\r\n      fetchMessages((): void => {\r\n        setInitialMessageVariables();\r\n        startInterval();\r\n      });\r\n    };\r\n\r\n    isUserChange && startRequestsRepliesCheck();\r\n  }, [isUserChange]);\r\n\r\n  useEffect(() => {\r\n    const checkNewRequestsReplies = (): void => {\r\n      fetchCheck((messages: Message[]): void => {\r\n        checkNewRequests(loggedInUser, messages, amountOfRequests);\r\n        checkNewReplies(loggedInUser, messages, amountOfReplies);\r\n      });\r\n    };\r\n\r\n    if (isUserChange) {\r\n      dispatch(setStartAmountOfRequests());\r\n      dispatch(setStartAmountOfReplies());\r\n    }\r\n    loggedInUser && checkNewRequestsReplies();\r\n  }, [delayCounter]);\r\n\r\n  const tooltipItemSearch = (): string => {\r\n    return t(\"link.tooltipps.search\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar variant=\"dark\" expand=\"lg\" fixed=\"top\" className=\"pl-5\">\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" className=\"is-link\" onClick={scrollToTop}>\r\n            {t(\"link.jungleSwap\")}\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\r\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\r\n        </Navbar.Toggle>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Link\r\n              to=\"/\"\r\n              className=\"p-2 is-link\"\r\n              onClick={(): void => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              {t(\"link.allPlants\")}\r\n            </Link>\r\n            <NavAdditionalItems user={loggedInUser} />\r\n            <Link\r\n              to=\"/\"\r\n              title={tooltipItemSearch()}\r\n              className=\"p-2 is-link\"\r\n              onClick={(): void => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              <FontAwesomeIcon icon={faSearch} />\r\n            </Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { linkedInPath1, linkedInPath2 } from \"../lib/externalLinkPaths\";\r\n\r\nconst Footer = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n  const currentTime = new Date();\r\n  const year = currentTime.getFullYear();\r\n\r\n  return (\r\n    <div className=\"has-background-image\">\r\n      <footer>\r\n        {t(\"texts.footer.copyright\")} {year}{\" \"}\r\n        <Link\r\n          to={{ pathname: linkedInPath1 }}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n          className=\"is-link\"\r\n        >\r\n          {t(\"texts.footer.appAuthor1\")}\r\n        </Link>{\" \"}\r\n        &amp;{\" \"}\r\n        <Link\r\n          to={{ pathname: linkedInPath2 }}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n          className=\"is-link\"\r\n        >\r\n          {t(\"texts.footer.appAuthor2\")}\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","// LinkedIn\r\n\r\nexport const linkedInPath1: string = \"https://www.linkedin.com/in/christian-gerbig/\";\r\nexport const linkedInPath2: string = \"https://www.linkedin.com/in/lisa-montebaur/\";\r\n\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  addPlant,\r\n  createPlant,\r\n  deletePlant,\r\n  fetchAllPlants,\r\n  fetchPlant,\r\n  fetchQueryPlants,\r\n  removePlant,\r\n  setErrorMessage,\r\n  setIsCreatingPlant,\r\n  setIsDeletingPlant,\r\n  setIsFetchingPlant,\r\n  setIsFetchingPlants,\r\n  setIsUpdatingPlant,\r\n  setPlant,\r\n  setPlantChanges,\r\n  setPlants,\r\n  updatePlant,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, PlantId, UploadImageData } from \"../typeDefinitions\";\r\n\r\ntype HandlePlant = {\r\n  createPlant: Function;\r\n  fetchPlant: Function;\r\n  fetchPlants: Function;\r\n  updatePlant: Function;\r\n  deletePlant: Function;\r\n  searchPlant: Function;\r\n};\r\n\r\nexport const useHandlePlant = (): HandlePlant => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handlePlant = {\r\n    createPlant: (\r\n      { name, description, size, location, price }: any,\r\n      { imageUrl, imagePublicId }: UploadImageData,\r\n      callbackFunction: Function\r\n    ): void => {\r\n      const newPlant: Plant = {\r\n        name: name.value,\r\n        description: description.value,\r\n        size: size.value,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location: location.value,\r\n        price: price.value,\r\n      };\r\n      dispatch(setIsCreatingPlant(true));\r\n      dispatch(createPlant(newPlant))\r\n        .unwrap()\r\n        .then((plant: Plant): void => {\r\n          dispatch(addPlant(plant));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchPlant: (plantId: PlantId, callbackFunction: Function): void => {\r\n      dispatch(setIsFetchingPlant(true));\r\n      dispatch(fetchPlant(plantId))\r\n        .unwrap()\r\n        .then((plant: Plant): void => {\r\n          dispatch(setPlant(plant));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    fetchPlants: (callbackFunction?: Function): void => {\r\n      dispatch(setIsFetchingPlants(true));\r\n      dispatch(fetchAllPlants())\r\n        .unwrap()\r\n        .then((plants: Plant[]): void => {\r\n          dispatch(setPlants(plants));\r\n          if (typeof callbackFunction !== \"undefined\") {\r\n            callbackFunction();\r\n          }\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    updatePlant: (\r\n      {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      }: Plant,\r\n      callbackFunction: Function\r\n    ): void => {\r\n      const updatedPlant: Plant = {\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      };\r\n      dispatch(setIsUpdatingPlant(true));\r\n      dispatch(updatePlant({ plantId: _id as PlantId, updatedPlant }))\r\n        .unwrap()\r\n        .then((updatedPlant: Plant): void => {\r\n          dispatch(setPlantChanges(updatedPlant));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    deletePlant: (plantId: PlantId, callbackFunction: Function): void => {\r\n      dispatch(setIsDeletingPlant(true));\r\n      dispatch(deletePlant(plantId))\r\n        .unwrap()\r\n        .then((): void => {\r\n          dispatch(removePlant(plantId));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    searchPlant: (query: string): void => {\r\n      dispatch(setIsFetchingPlants(true));\r\n      dispatch(fetchQueryPlants(query))\r\n        .unwrap()\r\n        .then((plants: Plant[]): void => {\r\n          dispatch(setPlants(plants));\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n  };\r\n  return handlePlant;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import { useTranslation } from \"react-i18next\";\r\nimport plantsImage from \"../../images/JungleSwap_Home.png\";\r\nimport plantPotIcon from \"../../images/JungleSwap_Icon.png\";\r\n\r\nconst HomeAbout = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"about centered container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n          <img\r\n            src={plantsImage}\r\n            loading=\"eager\"\r\n            alt=\"plants\"\r\n            className=\"is-background-image\"\r\n          />\r\n        </div>\r\n        <br />\r\n        <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 is-no-overflow\">\r\n          <article>\r\n            <header>\r\n              <h4>{t(\"texts.home.about.headline\")}</h4>\r\n              <h5>{t(\"texts.home.about.subheadline\")}</h5>\r\n            </header>\r\n            <p>\r\n              {t(\"texts.home.about.paragraph.line1\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line2\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line3\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line4\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line5\")}\r\n              <br />\r\n              {t(\"texts.home.about.paragraph.line6\")}\r\n            </p>\r\n            <img\r\n              src={plantPotIcon}\r\n              loading=\"lazy\"\r\n              alt=\"plant pot\"\r\n              className=\"is-icon\"\r\n            />\r\n          </article>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeAbout;\r\n","const WaitSpinner = (): JSX.Element => {\r\n  return (\r\n    <div className=\"d-flex align-items-center justify-content-center\">\r\n      <div role=\"status\" className=\"spinner-border m-3 loading-wait-spinner\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitSpinner;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport { selectPlants, setFilteredPlants } from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../../app/typeDefinitions\";\r\n\r\nconst PlantSearch = (): JSX.Element => {\r\n  const [query, setQuery] = useState<string>(\"\");\r\n  const [filter, setFilter] = useState<string>(\"\");\r\n  const plants = useAppSelector(selectPlants);\r\n  const dispatch = useAppDispatch();\r\n  const { searchPlant, fetchPlants } = useHandlePlant();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const fetchPlantQueryByName = (query: string): void => {\r\n      if (query) {\r\n        searchPlant(query);\r\n      } else {\r\n        fetchPlants();\r\n      }\r\n    };\r\n\r\n    fetchPlantQueryByName(query);\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    const filterPlantsByLocation = (filter: string, plants: Plant[]): void => {\r\n      const filteredPlants = plants.filter(({ location }: Plant): boolean => {\r\n        return filter === location || filter === \"\";\r\n      });\r\n      dispatch(setFilteredPlants(filteredPlants));\r\n    };\r\n\r\n    filterPlantsByLocation(filter, plants);\r\n  }, [filter]);\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <hr className=\"horizontal-rule\" />\r\n      <h4>{t(\"texts.home.searchPlant.headline\")}</h4>\r\n      <div className=\"d-flex\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder={t(\"texts.home.searchPlant.namePlaceholder\")}\r\n          value={query}\r\n          className=\"is-width-medium form-control\"\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n            setQuery(event.target.value);\r\n          }}\r\n        />\r\n        <select\r\n          name=\"location\"\r\n          className=\"location-filter form-control ml-4\"\r\n          onChange={(event: React.ChangeEvent<HTMLSelectElement>): void => {\r\n            setFilter(event.target.value);\r\n          }}\r\n        >\r\n          <option value=\"\">{t(\"select.location.title\")}</option>\r\n          <option value=\"sun\">{t(\"select.location.sun\")}</option>\r\n          <option value=\"shade\">{t(\"select.location.shade\")}</option>\r\n          <option value=\"sun and shade\">\r\n            {t(\"select.location.sunAndShade\")}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantSearch;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Plant } from \"../../app/typeDefinitions\";\r\n\r\ntype PlantThumbnailProps = {\r\n  plant: Plant;\r\n};\r\n\r\nconst PlantThumbnail = ({ plant }: PlantThumbnailProps): JSX.Element => {\r\n  const { t } = useTranslation();\r\n  const { _id, name, imageUrl, price } = plant;\r\n\r\n  return (\r\n    <div className=\"col mb-5\">\r\n      <div className=\"card card-medium-width text-center h-100\">\r\n        <img\r\n          src={imageUrl}\r\n          loading=\"lazy\"\r\n          alt={name}\r\n          className=\"card-img-top is-image-size-large\"\r\n        />\r\n        <div className=\"card-body mb-5\">\r\n          <h5>{name}</h5>\r\n          <p>\r\n            {price} {t(\"texts.plants.plantThumbnail.currency\")}\r\n          </p>\r\n          <Link\r\n            className=\"btn form-control is-width-medium is-link\"\r\n            to={`/plants/fetch/${_id}`}\r\n          >\r\n            {t(\"link.details\")}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantThumbnail;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport {\r\n  selectfFilteredPlants,\r\n  selectNumberOfVisibleEntries,\r\n  setNumberOfVisibleEntries,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../../app/typeDefinitions\";\r\nimport PlantThumbnail from \"./PlantThumbnail\";\r\n\r\nconst PlantsCollection = (): JSX.Element => {\r\n  const filteredPlants = useAppSelector(selectfFilteredPlants);\r\n  const numberOfVisibleEntries = useAppSelector(selectNumberOfVisibleEntries);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  const handleClickButton = (): void => {\r\n    dispatch(setNumberOfVisibleEntries(numberOfVisibleEntries + 6));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-2 row-cols-xl-3 row-cols-xxl-3\">\r\n        {filteredPlants.map(\r\n          (plant: Plant, index: number): JSX.Element | null => {\r\n            const { _id } = plant;\r\n            return index < numberOfVisibleEntries ? (\r\n              <PlantThumbnail plant={plant} key={_id} />\r\n            ) : null;\r\n          }\r\n        )}\r\n      </div>\r\n      {numberOfVisibleEntries < filteredPlants.length && (\r\n        <div className=\"is-text-align-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-sm is-width-medium form-control\"\r\n            onClick={handleClickButton}\r\n          >\r\n            {t(\"button.more\")}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCollection;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { selectIsFetchingPlants } from \"../../reducer/jungleSwapSlice\";\r\nimport WaitSpinner from \"../spinners/WaitSpinner\";\r\nimport PlantSearch from \"./PlantSearch\";\r\nimport PlantsCollection from \"./PlantsCollection\";\r\n\r\nconst PlantsCockpit = (): JSX.Element => {\r\n  const isFetchingPlants = useAppSelector(selectIsFetchingPlants);\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-3\">\r\n        <h2>{t(\"texts.home.allPlants.headline\")}</h2>\r\n      </div>\r\n      <PlantSearch />\r\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsCollection />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCockpit;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppDispatch } from \"../../app/hooks\";\r\nimport { scrollToAbout } from \"../../reducer/jungleSwapSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst HomeTitle = (): JSX.Element => {\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"row my-5\">\r\n      <div className=\"col-6 offset-3 my-5 has-border-around\">\r\n        <h2 className=\"title mb-2\">{t(\"texts.home.title.headline\")}</h2>\r\n        <h5 className=\"mt-3 mb-5\">{t(\"texts.home.title.subheadline\")}</h5>\r\n        <div className=\"mb-5\">\r\n          <Link\r\n            to={\"/\"}\r\n            className=\"try-it-link is-link\"\r\n            onClick={(): void => {\r\n              dispatch(scrollToAbout());\r\n            }}\r\n          >\r\n            {t(\"link.tryIt\")}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeTitle;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport {\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  setFilteredPlants,\r\n  selectPlants,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport HomeAbout from \"../../components/home/HomeAbout\";\r\nimport PlantsCockpit from \"../../components/plants/PlantsCockpit\";\r\nimport HomeTitle from \"../../components/home/HomeTitle\";\r\n\r\nconst Home = (): JSX.Element => {\r\n  const plants = useAppSelector(selectPlants);\r\n  const dispatch = useAppDispatch();\r\n  const { fetchPlants } = useHandlePlant();\r\n  const elementRef = useRef<HTMLElement[]>([]);\r\n\r\n  useEffect(() => {\r\n    const elementHeight = (elementRef: HTMLElement): number => {\r\n      return Math.round(elementRef.getBoundingClientRect().height);\r\n    };\r\n\r\n    fetchPlants((): void => {\r\n      const titleSectionHeight = elementHeight(elementRef.current[0]);\r\n      dispatch(setTitleSectionHeight(titleSectionHeight));\r\n      const aboutSectionHeight = elementHeight(elementRef.current[1]);\r\n      dispatch(setAboutSectionHeight(aboutSectionHeight));\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(setFilteredPlants(plants));\r\n  }, [plants]);\r\n\r\n  return (\r\n    <div>\r\n      <section\r\n        ref={(titleSection: HTMLElement): void => {\r\n          (elementRef.current[0] as HTMLElement | null) = titleSection;\r\n        }}\r\n        className=\"text-center pt-5 pb-5 title-header has-fixed-background-image\"\r\n      >\r\n        <HomeTitle />\r\n      </section>\r\n\r\n      <section\r\n        ref={(aboutSection: HTMLElement): void => {\r\n          (elementRef.current[1] as HTMLElement | null) = aboutSection;\r\n        }}\r\n      >\r\n        <HomeAbout />\r\n      </section>\r\n\r\n      <section>\r\n        <PlantsCockpit />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  setErrorMessage,\r\n  setLoggedInUser,\r\n  signIn,\r\n  signUp,\r\n  logOut,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\n\r\ntype Authentification = {\r\n  signIn: Function;\r\n  signUp: Function;\r\n  logOut: Function;\r\n};\r\n\r\nexport const useAuthentification = (): Authentification => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const authentification = {\r\n    signIn: (user: User, callbackFunction: Function): void => {\r\n      dispatch(signIn(user))\r\n        .unwrap()\r\n        .then((user: User): void => {\r\n          dispatch(setLoggedInUser(user));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    signUp: (newUser: User, callbackFunction: Function): void => {\r\n      dispatch(signUp(newUser))\r\n        .unwrap()\r\n        .then((user: User): void => {\r\n          dispatch(setLoggedInUser(user));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    logOut: (loggedInUser: User, callbackFunction: Function): void => {\r\n      dispatch(logOut(loggedInUser))\r\n        .unwrap()\r\n        .then((): void => {\r\n          dispatch(setLoggedInUser(null));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n  };\r\n  return authentification;\r\n};\r\n","type ErrorMessageProps = {\r\n  message: string | null;\r\n  outputFunction: Function;\r\n};\r\n\r\nconst ErrorMessage = ({\r\n  message,\r\n  outputFunction,\r\n}: ErrorMessageProps): JSX.Element | null => {\r\n  if (!message || !message.includes(\"Form\")) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <span className=\"is-danger is-text-bold is-display-block\">\r\n        {outputFunction(message)}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\r\nimport {\r\n  setIsUserChange,\r\n  setErrorMessage,\r\n  selectErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../app/typeDefinitions\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst SignUp = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(selectErrorMessage);\r\n  const dispatch = useAppDispatch();\r\n  const { push } = useHistory();\r\n  const { signUp } = useAuthentification();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignUp = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    const { username, email, password } = event.target as any;\r\n    const newUser: User = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    event.preventDefault();\r\n    signUp(newUser, (): void => {\r\n      dispatch(setIsUserChange(true));\r\n      push(\"/\");\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Username missing\":\r\n        return t(\"errorTexts.authentification.signUp.form.usernameMissing\");\r\n      case \"Form: Email missing\":\r\n        return t(\"errorTexts.authentification.signUp.form.emailMissing\");\r\n      case \"Form: Password missing\":\r\n        return t(\"errorTexts.authentification.signUp.form.passwordMissing\");\r\n      case \"Form: Email format invalid\":\r\n        return t(\"errorTexts.authentification.signUp.form.emailFormatInvalid\");\r\n      case \"Form: Password invalid\":\r\n        return t(\"errorTexts.authentification.signUp.form.passwordInvalid\");\r\n      case \"Form: Username or email already exists\":\r\n        return t(\"errorTexts.authentification.signUp.form.userAlreadyExists\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">{t(\"texts.authentification.signUp.headline\")}</h2>\r\n        <form\r\n          className=\"form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleSignUp(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\">\r\n              {t(\"texts.authentification.signUp.username\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n              placeholder={t(\"texts.authentification.signUp.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\">\r\n              {t(\"texts.authentification.signUp.email\")}\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder={t(\"texts.authentification.signUp.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\">\r\n              {t(\"texts.authentification.signUp.password\")}\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder={t(\"texts.authentification.signUp.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className=\"btn btn-sm mt-4 is-width-medium form-control\"\r\n          >\r\n            {t(\"button.signUp\")}\r\n          </button>\r\n          <p className=\"is-padding-top\">\r\n            {t(\"texts.authentification.signUp.alreadyAccountCreated\")}\r\n          </p>\r\n          <div className=\"text-right\">\r\n            <Link to={\"/auth/sign-in\"} className=\"is-link\">\r\n              <button className=\"btn btn-sm ml-4 is-width-medium form-control mt-0 mb-2\">\r\n                {t(\"button.signIn\")}\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\r\nimport {\r\n  setIsUserChange,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setErrorMessage,\r\n  selectErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../app/typeDefinitions\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst SignIn = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(selectErrorMessage);\r\n  const dispatch = useAppDispatch();\r\n  const { push } = useHistory();\r\n  const { signIn } = useAuthentification();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignIn = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    const { email, password } = event.target as any;\r\n    const user: User = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    event.preventDefault();\r\n    signIn(user, (): void => {\r\n      dispatch(setIsUserChange(true));\r\n      const { amountOfRequests, amountOfReplies } = user;\r\n      dispatch(setAmountOfRequests(amountOfRequests as number));\r\n      dispatch(setAmountOfReplies(amountOfReplies as number));\r\n      push(\"/\");\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Email missing\":\r\n        return t(\"errorTexts.authentification.signIn.form.emailMissing\");\r\n      case \"Form: Password missing\":\r\n        return t(\"errorTexts.authentification.signIn.form.passwordMissing\");\r\n      case \"Form: Email format invalid\":\r\n        return t(\"errorTexts.authentification.signIn.form.emailFormatInvalid\");\r\n      case \"Form: Passwords don't match\":\r\n        return t(\"errorTexts.authentification.signIn.form.noMatchPasswords\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">{t(\"texts.authentification.signIn.headline\")}</h2>\r\n        <form\r\n          className=\"form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleSignIn(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\">\r\n              {t(\"texts.authentification.signIn.email\")}\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder={t(\"texts.authentification.signIn.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\">\r\n              {t(\"texts.authentification.signIn.password\")}\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder={t(\"texts.authentification.signIn.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className=\"btn btn-sm mt-4 is-width-medium form-control\"\r\n          >\r\n            {t(\"button.signIn\")}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useAuthentification } from \"../../app/custom-hooks/useAuthentification\";\r\nimport { useIntervalCounter } from \"../../app/custom-hooks/useIntervalCounter\";\r\nimport {\r\n  setLoggedInUser,\r\n  setIsNewRequest,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  selectLoggedInUser,\r\n  selectIntervalId,\r\n  selectAmountOfRequests,\r\n  selectAmountOfReplies,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../app/typeDefinitions\";\r\n\r\nconst LogOut = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const intervalId = useAppSelector(selectIntervalId);\r\n  const amountOfRequests = useAppSelector(selectAmountOfRequests);\r\n  const amountOfReplies = useAppSelector(selectAmountOfReplies);\r\n  const dispatch = useAppDispatch();\r\n  const { push } = useHistory();\r\n  const { logOut } = useAuthentification();\r\n  const { stopCounter } = useIntervalCounter();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    const logOutUser = (): void => {\r\n      const updateUserRequestsReplies = (loggedInUser: User): User => {\r\n        const clonedUser: User = JSON.parse(JSON.stringify(loggedInUser));\r\n        clonedUser.amountOfRequests = amountOfRequests;\r\n        clonedUser.amountOfReplies = amountOfReplies;\r\n        dispatch(setLoggedInUser(clonedUser));\r\n        return clonedUser;\r\n      };\r\n\r\n      const updateUserData = (loggedInUser: User): void => {\r\n        logOut(loggedInUser, (): void => {\r\n          stopCounter(intervalId as NodeJS.Timeout);\r\n          dispatch(setIsNewRequest(false));\r\n          dispatch(setAmountOfRequests(0));\r\n          dispatch(setAmountOfReplies(0));\r\n          push(\"/\");\r\n          scrollToTop();\r\n        });\r\n      };\r\n\r\n      const updatedUser = updateUserRequestsReplies(loggedInUser as User);\r\n      updateUserData(updatedUser);\r\n    };\r\n\r\n    logOutUser();\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  checkUserLoggedIn,\r\n  setErrorMessage,\r\n  setLoggedInUser,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User } from \"../../app/typeDefinitions\";\r\n\r\ntype Routing = {\r\n  protectRoute: Function;\r\n};\r\n\r\nexport const useRouting = (): Routing => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const routing = {\r\n    protectRoute: (callbackFunction: Function): void => {\r\n      dispatch(checkUserLoggedIn())\r\n        .unwrap()\r\n        .then((user: User): void => {\r\n          dispatch(setLoggedInUser(user));\r\n          callbackFunction();\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          if (rejectedValue.message !== \"Unauthorized user\") {\r\n            dispatch(setErrorMessage(rejectedValue.message));\r\n          }\r\n        });\r\n    },\r\n  };\r\n  return routing;\r\n};\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  deletePlantImage,\r\n  setErrorMessage,\r\n  setIsDeletingPlantImage,\r\n  setIsUploadingPlantImage,\r\n  uploadPlantImage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { DestroyImageData, UploadImageData } from \"../typeDefinitions\";\r\n\r\ntype HandlePlantImage = {\r\n  createImage: Function;\r\n  deleteImage: Function;\r\n};\r\n\r\nexport const useHandlePlantImage = (): HandlePlantImage => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handlePlantImage = {\r\n    createImage: (uploadForm: any, callbackFunction: Function): void => {\r\n      dispatch(setIsUploadingPlantImage(true));\r\n      dispatch(uploadPlantImage(uploadForm))\r\n        .unwrap()\r\n        .then((uploadImageData: UploadImageData): void => {\r\n          callbackFunction(uploadImageData);\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n\r\n    deleteImage: (destroyImageData: DestroyImageData): void => {\r\n      dispatch(setIsDeletingPlantImage(true));\r\n      dispatch(deletePlantImage(destroyImageData))\r\n        .unwrap()\r\n        .then((): void => {\r\n          return;\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n  };\r\n  return handlePlantImage;\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandlePlantImage } from \"../../app/custom-hooks/useHandlePlantImage\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport {\r\n  selectErrorMessage,\r\n  selectIsCreatingPlant,\r\n  selectIsUploadingPlantImage,\r\n  selectLoggedInUser,\r\n  setErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { UploadImageData } from \"../../app/typeDefinitions\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst PlantCreateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isUploadingPlantImage = useAppSelector(selectIsUploadingPlantImage);\r\n  const isCreatingPlant = useAppSelector(selectIsCreatingPlant);\r\n  const errorMessage = useAppSelector(selectErrorMessage);\r\n  const dispatch = useAppDispatch();\r\n  const { push, goBack } = useHistory();\r\n  const { protectRoute } = useRouting();\r\n  const { createImage } = useHandlePlantImage();\r\n  const { createPlant } = useHandlePlant();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      dispatch(setErrorMessage(null));\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const handleUploadPlantImage = (\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ): void => {\r\n    const { plantImage } = event.target as any;\r\n    const image = plantImage.files[0];\r\n    event.preventDefault();\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    createImage(\r\n      uploadForm,\r\n      ({ imageUrl, imagePublicId }: UploadImageData): void => {\r\n        createPlant(event.target, { imageUrl, imagePublicId }, (): void => {\r\n          push(\"/plants/my-own\");\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Name missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.nameMissing\");\r\n      case \"Form: Description missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.descriptionMissing\");\r\n      case \"Form: Size missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.sizeMissing\");\r\n      case \"Form: Location missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.locationMissing\");\r\n      case \"Form: Price missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.priceMissing\");\r\n      case \"Form: Image missing\":\r\n        return t(\"errorTexts.plants.createPlant.form.imageMissing\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isUploadingPlantImage || isCreatingPlant ? true : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-12 col-md-6 offset-md-4\">\r\n        <h2 className=\"mb-5 text-left\">\r\n          {t(\"texts.plants.createPlant.form.headline\")}\r\n        </h2>\r\n        <form\r\n          className=\"form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleUploadPlantImage(event);\r\n          }}\r\n        >\r\n          <label htmlFor=\"enterName\">\r\n            {t(\"texts.plants.createPlant.form.name\")}\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterName\"\r\n            name=\"name\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterDescription\">\r\n            {t(\"texts.plants.createPlant.form.description\")}\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterDescription\"\r\n            name=\"description\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterSize\">\r\n            {t(\"texts.plants.createPlant.form.size\")}\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterSize\"\r\n            name=\"size\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            min=\"1\"\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterLocation\">\r\n            {t(\"texts.plants.createPlant.form.location\")}\r\n          </label>\r\n          <select\r\n            id=\"enterLocation\"\r\n            name=\"location\"\r\n            className=\"mb-4 form-control p-2\"\r\n          >\r\n            <option>{t(\"select.location.title\")}</option>\r\n            <option value=\"sun\">{t(\"select.location.sun\")}</option>\r\n            <option value=\"shade\">{t(\"select.location.shade\")}</option>\r\n            <option value=\"sun and shade\">\r\n              {t(\"select.location.sunAndShade\")}\r\n            </option>\r\n          </select>\r\n          <label htmlFor=\"enterPrice\">\r\n            {t(\"texts.plants.createPlant.form.price\")}\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterPrice\"\r\n            name=\"price\"\r\n            placeholder={t(\"texts.plants.createPlant.form.enterPlaceholder\")}\r\n            min=\"1\"\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterImage\">\r\n            {t(\"texts.plants.createPlant.form.image\")}\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"enterImage\"\r\n            name=\"plantImage\"\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <div className=\"col-12 text-right pr-0\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={buttonState()}\r\n              className=\"ml-4 mb-2 btn btn-sm form-control is-width-medium\"\r\n            >\r\n              {t(\"button.create\")}\r\n            </button>\r\n            <button\r\n              className=\"ml-4 mb-2 btn btn-sm form-control is-width-medium\"\r\n              onClick={(): void => {\r\n                goBack();\r\n              }}\r\n            >\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantCreateForm;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst PlantDetailsBuyerItems = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/plants/checkout\" className=\"is-link\">\r\n        <button className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\">\r\n          {t(\"button.buy\")}\r\n        </button>\r\n      </Link>\r\n      <Link to=\"/messages/create\" className=\"is-link\">\r\n        <button className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\">\r\n          {t(\"button.swap\")}\r\n        </button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetailsBuyerItems;\r\n","import { Link, useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport { useHandlePlantImage } from \"../../app/custom-hooks/useHandlePlantImage\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport {\r\n  selectIsDeletingMessage,\r\n  selectIsDeletingPlant,\r\n  selectIsDeletingPlantImage,\r\n  selectMessages,\r\n  selectPlant,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, PlantId } from \"../../app/typeDefinitions\";\r\n\r\nconst PlantDetailsCreatorChoice = (): JSX.Element => {\r\n  const plant = useAppSelector(selectPlant);\r\n  const isDeletingPlant = useAppSelector(selectIsDeletingPlant);\r\n  const isDeletingPlantImage = useAppSelector(selectIsDeletingPlantImage);\r\n  const messages = useAppSelector(selectMessages);\r\n  const isDeletingMessage = useAppSelector(selectIsDeletingMessage);\r\n  const { goBack } = useHistory();\r\n  const { deleteRemainingMessages } = useHandleMessage();\r\n  const { deleteImage } = useHandlePlantImage();\r\n  const { deletePlant } = useHandlePlant();\r\n  const { t } = useTranslation();\r\n  const { _id, imagePublicId } = plant as Plant;\r\n\r\n  const handleDelete = (): void => {\r\n    deleteRemainingMessages(messages, _id as PlantId);\r\n    deleteImage({ imagePublicId });\r\n    deletePlant(_id as PlantId, (): void => {\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isDeletingMessage || isDeletingPlantImage || isDeletingPlant\r\n      ? true\r\n      : false;\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-0\">\r\n      <Link to={\"/plants/update\"} className=\"is-link\">\r\n        <button className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\">\r\n          {t(\"button.update\")}\r\n        </button>\r\n      </Link>\r\n      <button\r\n        disabled={buttonState()}\r\n        className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\"\r\n        onClick={handleDelete}\r\n      >\r\n        {t(\"button.delete\")}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetailsCreatorChoice;\r\n","import PlantDetailsBuyerChoice from \"./PlantDetailsBuyerChoice\";\r\nimport PlantDetailsCreatorChoice from \"./PlantDetailsCreatorChoice\";\r\n\r\ntype PlantDetailsUserChoiceProps = {\r\n  isCreator: boolean;\r\n};\r\n\r\nconst PlantDetailsUserChoice = ({\r\n  isCreator,\r\n}: PlantDetailsUserChoiceProps): JSX.Element => {\r\n  if (isCreator) {\r\n    return <PlantDetailsCreatorChoice />;\r\n  }\r\n  return <PlantDetailsBuyerChoice />;\r\n};\r\n\r\nexport default PlantDetailsUserChoice;\r\n","import { useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { selectLoggedInUser } from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, User } from \"../../app/typeDefinitions\";\r\nimport PlantDetailsUserChoice from \"./PlantDetailsUserChoice\";\r\n\r\ntype PlantItemsProps = {\r\n  plant: Plant;\r\n};\r\n\r\nconst PlantItems = ({ plant }: PlantItemsProps): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const { goBack } = useHistory();\r\n  const { t } = useTranslation();\r\n  const { name, description, size, imageUrl, location, price, creator } = plant;\r\n  const { _id } = creator as User;\r\n\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"card is-card-width-large\">\r\n        <img\r\n          src={imageUrl}\r\n          loading=\"lazy\"\r\n          alt={name}\r\n          className=\"card-img-top is-image-size-large\"\r\n        />\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"is-text-bold\">\r\n            {t(\"texts.plants.plantDetails.name\")}\r\n          </span>{\" \"}\r\n          {name}\r\n        </div>\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"is-text-bold\">\r\n            {t(\"texts.plants.plantDetails.description\")}\r\n          </span>{\" \"}\r\n          {description}\r\n        </div>\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"is-text-bold\">\r\n            {t(\"texts.plants.plantDetails.size\")}\r\n          </span>{\" \"}\r\n          {size} {t(\"texts.plants.plantDetails.sizeUnit\")}\r\n        </div>\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"is-text-bold\">\r\n            {t(\"texts.plants.plantDetails.likes\")}\r\n          </span>{\" \"}\r\n          {location}\r\n        </div>\r\n        <div className=\"ml-2 mt-2\">\r\n          <span className=\"is-text-bold\">\r\n            {t(\"texts.plants.plantDetails.price\")}\r\n          </span>{\" \"}\r\n          {price} {t(\"texts.plants.plantDetails.currency\")}\r\n        </div>\r\n        <div className=\"ml-2 mt-2 col justify-content-center\">\r\n          <div className=\"row-2 justify-content-center\">\r\n            <div className=\"card-body text-right pt-0\">\r\n              <PlantDetailsUserChoice\r\n                isCreator={(loggedInUser as User)._id === _id}\r\n              />\r\n              <button\r\n                className=\"btn btn-sm ml-2 form-control is-width-medium mb-3\"\r\n                onClick={(): void => {\r\n                  goBack();\r\n                }}\r\n              >\r\n                {t(\"button.goBack\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantItems;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport {\r\n  selectIsFetchingPlant,\r\n  selectLoggedInUser,\r\n  selectPlant,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, PlantId } from \"../../app/typeDefinitions\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport PlantItems from \"../../components/plants/PlantItems\";\r\n\r\nconst PlantDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const plant = useAppSelector(selectPlant);\r\n  const isFetchingPlant = useAppSelector(selectIsFetchingPlant);\r\n  const { plantId } = useParams<{ plantId: PlantId }>();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchPlant } = useHandlePlant();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n  const { creator } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      fetchPlant(plantId, (): void => {\r\n        scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/sign-up\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2>{t(\"texts.plants.plantDetails.headline\")}</h2>\r\n      </div>\r\n      {isFetchingPlant || !creator ? (\r\n        <WaitSpinner />\r\n      ) : (\r\n        <PlantItems plant={plant} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandlePlantImage } from \"../../app/custom-hooks/useHandlePlantImage\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport {\r\n  setPlant,\r\n  setDestroyImageData,\r\n  selectLoggedInUser,\r\n  selectIsUploadingPlantImage,\r\n  selectIsDeletingPlantImage,\r\n  selectDestroyImageData,\r\n  selectPlant,\r\n  selectIsUpdatingPlant,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, UploadImageData } from \"../../app/typeDefinitions\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\n\r\nconst PlantUpdateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isUploadingPlantImage = useAppSelector(selectIsUploadingPlantImage);\r\n  const isDeletingPlantImage = useAppSelector(selectIsDeletingPlantImage);\r\n  const destroyImageData = useAppSelector(selectDestroyImageData);\r\n  const plant = useAppSelector(selectPlant);\r\n  const isUpdatingPlant = useAppSelector(selectIsUpdatingPlant);\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { protectRoute } = useRouting();\r\n  const { createImage, deleteImage } = useHandlePlantImage();\r\n  const { updatePlant } = useHandlePlant();\r\n  const selectElementRef = useRef<HTMLSelectElement | null>(null);\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n  const { name, description, size, imageUrl, price } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    const setPlantLocation = ({ location }: Plant): void => {\r\n      if (location) {\r\n        (selectElementRef.current as HTMLSelectElement).value = location;\r\n      }\r\n    };\r\n\r\n    protectRoute((): void => {\r\n      setPlantLocation(plant);\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const handlePlantEntryChange = (\r\n    { target }: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\r\n    plant: Plant\r\n  ): void => {\r\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\r\n    switch (target.name) {\r\n      case \"name\":\r\n        clonedPlant.name = target.value;\r\n        break;\r\n      case \"description\":\r\n        clonedPlant.description = target.value;\r\n        break;\r\n      case \"size\":\r\n        clonedPlant.size = target.value as unknown as number;\r\n        break;\r\n      case \"location\":\r\n        clonedPlant.location = target.value;\r\n        break;\r\n      case \"price\":\r\n        clonedPlant.price = target.value as unknown as number;\r\n    }\r\n    dispatch(setPlant(clonedPlant));\r\n  };\r\n\r\n  const handlePlantImageChange = (\r\n    { target }: React.ChangeEvent<HTMLInputElement>,\r\n    { imagePublicId }: Plant\r\n  ): void => {\r\n    const image = (target.files as any)[0];\r\n    dispatch(setDestroyImageData({ imagePublicId }));\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    createImage(\r\n      uploadForm,\r\n      ({ imageUrl, imagePublicId }: UploadImageData): void => {\r\n        const clonedPlant = JSON.parse(JSON.stringify(plant));\r\n        clonedPlant.imagePublicId = imagePublicId;\r\n        clonedPlant.imageUrl = imageUrl;\r\n        dispatch(setPlant(clonedPlant));\r\n      }\r\n    );\r\n  };\r\n\r\n  const handleUpdatePlant = () => {\r\n    if (destroyImageData) {\r\n      deleteImage(destroyImageData);\r\n    }\r\n    updatePlant(plant, (): void => {\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant\r\n      ? true\r\n      : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mt-5 mb-4 text-left\">\r\n          {t(\"texts.plants.updatePlant.form.headline\")}\r\n        </h2>\r\n        <div className=\"card is-card-width-large mb-5\">\r\n          {isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant ? (\r\n            <WaitSpinner />\r\n          ) : (\r\n            <img\r\n              src={imageUrl}\r\n              loading=\"lazy\"\r\n              alt={name}\r\n              className=\"mb-2 is-image-size-medium\"\r\n            />\r\n          )}\r\n          <div className=\"card-body\">\r\n            <label htmlFor=\"updateName\">\r\n              {t(\"texts.plants.updatePlant.form.name\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateName\"\r\n              name=\"name\"\r\n              value={name}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateDescription\">\r\n              {t(\"texts.plants.updatePlant.form.description\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateDescription\"\r\n              name=\"description\"\r\n              value={description}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateSize\">\r\n              {t(\"texts.plants.updatePlant.form.size\")}\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updateSize\"\r\n              name=\"size\"\r\n              value={size}\r\n              min=\"1\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateLocation\">\r\n              {t(\"texts.plants.updatePlant.form.location\")}\r\n            </label>\r\n            <select\r\n              ref={selectElementRef}\r\n              id=\"updateLocation\"\r\n              name=\"location\"\r\n              className=\"mb-4 form-control px-2\"\r\n              onChange={(event: React.ChangeEvent<HTMLSelectElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            >\r\n              <option value=\"sun\">{t(\"select.location.sun\")}</option>\r\n              <option value=\"shade\">{t(\"select.location.shade\")}</option>\r\n              <option value=\"sun and shade\">\r\n                {t(\"select.location.sunAndShade\")}\r\n              </option>\r\n            </select>\r\n            <label htmlFor=\"updatePrice\">\r\n              {t(\"texts.plants.updatePlant.form.price\")}\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updatePrice\"\r\n              name=\"price\"\r\n              value={price}\r\n              min=\"1\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateImage\">\r\n              {t(\"texts.plants.updatePlant.form.image\")}\r\n            </label>\r\n            <input\r\n              type=\"file\"\r\n              id=\"updateImage\"\r\n              name=\"plantImage\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\r\n                handlePlantImageChange(event, plant);\r\n              }}\r\n            />\r\n            <div className=\"col-12 text-right pr-0\">\r\n              <button\r\n                disabled={buttonState()}\r\n                className=\"btn btn-sm ml-4 form-control is-width-medium mb-2\"\r\n                onClick={handleUpdatePlant}\r\n              >\r\n                {t(\"button.save\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantUpdateForm;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useHandlePayment } from \"../../app/custom-hooks/useHandlePayment\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport {\r\n  scrollToPlants,\r\n  selectClientSecret,\r\n  selectPlant,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../../app/typeDefinitions\";\r\nimport { Stripe } from \"@stripe/stripe-js\";\r\n\r\ntype CardStyle = {\r\n  style: {\r\n    base: {\r\n      color: string;\r\n      fontFamily: string;\r\n      fontSmoothing: string;\r\n      fontSize: string;\r\n      \"::placeholder\": { color: string };\r\n    };\r\n    invalid: {\r\n      color: string;\r\n      iconColor: string;\r\n    };\r\n  };\r\n};\r\n\r\nconst CheckoutForm = (): JSX.Element => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(\"\");\r\n  const clientSecret = useAppSelector(selectClientSecret);\r\n  const plant = useAppSelector(selectPlant);\r\n  const dispatch = useAppDispatch();\r\n  const { push } = useHistory();\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const { initializePayment } = useHandlePayment();\r\n  const { t } = useTranslation();\r\n  const { _id, name, price } = plant as Plant;\r\n  const cardStyle: CardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    initializePayment(plant);\r\n    return (): void => {\r\n      push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    };\r\n  }, []);\r\n\r\n  const handleInputChanges = async (event: any): Promise<void> => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    // Stripe.js has not yet been loaded\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n    setIsProcessing(true);\r\n    const payload = await (stripe as Stripe).confirmCardPayment(clientSecret, {\r\n      payment_method: { card: elements.getElement(CardElement) } as any,\r\n    });\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    } else {\r\n      setPaymentError(\"\");\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n\r\n  const messageVisibility = (): string => {\r\n    return isSucceeded ? \"result-message text-center\" : \"is-hidden\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"container col-md-9 col-sm-12\">\r\n      <h2 className=\"mb-4 is-word-break\">{name}</h2>\r\n      <h3 className=\"mb-4\">\r\n        {t(\"texts.plants.checkout.form.price\")} {price}{\" \"}\r\n        {t(\"texts.plants.checkout.form.currency\")}\r\n      </h3>\r\n      <form\r\n        id=\"payment-form\"\r\n        className=\"checkoutForm form-style mt-5\"\r\n        onSubmit={handleSubmitPayment}\r\n      >\r\n        <CardElement\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          className=\"p-2\"\r\n          onChange={handleInputChanges}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            type=\"submit\"\r\n            id=\"submit\"\r\n            disabled={isProcessing || isDisabled || isSucceeded}\r\n            className=\"btn btn-sm mt-5 mb-4 card-button\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isProcessing ? (\r\n                <div id=\"spinner\" className=\"spinner is-text-bold\" />\r\n              ) : (\r\n                t(\"texts.plants.checkout.form.payNow\")\r\n              )}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {/* Show any error that happens when processing the payment */}\r\n        {paymentError && (\r\n          <div role=\"alert\" className=\"card-error\">\r\n            {paymentError}\r\n          </div>\r\n        )}\r\n        {/* Show success message upon completion */}\r\n        <p className={messageVisibility()}>\r\n          {t(\"texts.plants.checkout.form.paymentSuccessful\")}\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {isSucceeded ? (\r\n          <Link\r\n            to={\"/\"}\r\n            onClick={(): void => {\r\n              dispatch(scrollToPlants());\r\n            }}\r\n            className=\"is-link\"\r\n          >\r\n            <button className=\"btn btn-sm form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        ) : (\r\n          <Link to={`/plants/fetch/${_id}`} className=\"is-link\">\r\n            <button className=\"btn btn-sm form-control pl-3 pr-3\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n","import { useAppDispatch } from \"../hooks\";\r\nimport {\r\n  createPayment,\r\n  setClientSecret,\r\n  setErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\ntype HandlePayment = {\r\n  initializePayment: Function;\r\n};\r\n\r\nexport const useHandlePayment = (): HandlePayment => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handlePayment = {\r\n    initializePayment: (plant: Plant): void => {\r\n      dispatch(createPayment(plant))\r\n        .unwrap()\r\n        .then((payment: any): void => {\r\n          dispatch(setClientSecret(payment.clientSecret));\r\n        })\r\n        .catch((rejectedValue: any): void => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    },\r\n  };\r\n  return handlePayment;\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { selectLoggedInUser } from \"../../reducer/jungleSwapSlice\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"../../components/apis/CheckoutForm\";\r\n\r\nconst stripePromise = loadStripe(\r\n  \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n);\r\n\r\nconst CheckoutView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const { protectRoute } = useRouting();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5\">\r\n        <Elements stripe={stripePromise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutView;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { User, Message, Plant } from \"../../app/typeDefinitions\";\r\n\r\ntype RequestThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst RequestTile = ({ message }: RequestThumbnailProps): JSX.Element => {\r\n  const { t } = useTranslation();\r\n  const { _id, buyer, plant } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <div className=\"card p-3 mt-4\">\r\n      <h4>\r\n        {t(\"texts.requests.requestTile.subheadline\")} {name}\r\n      </h4>\r\n      <h5>{username}</h5>\r\n      <div className=\"text-center\">\r\n        <Link\r\n          to={`/requests/fetch/${_id}`}\r\n          className=\"btn is-width-medium form-control is-link\"\r\n        >\r\n          {t(\"link.details\")}\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestTile;\r\n","import { useAppSelector } from \"../../app/hooks\";\r\nimport {\r\n  selectLoggedInUser,\r\n  selectMessages,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Message, User } from \"../../app/typeDefinitions\";\r\nimport RequestTile from \"./RequestTile\";\r\n\r\nconst RequestsCollection = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const messages = useAppSelector(selectMessages);\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((message: Message): JSX.Element | null => {\r\n        const { _id, seller, messageState } = message;\r\n        return (seller as User)._id === (loggedInUser as User)._id &&\r\n          messageState === true ? (\r\n          <RequestTile message={message} key={_id} />\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsCollection;\r\n","import { useNavigation } from \"../../app/custom-hooks/useNavigation\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst GoBackButton = (): JSX.Element => {\r\n  const { goToHome } = useNavigation();\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"text-right pr-2\">\r\n      <button\r\n        className=\"btn btn-sm mt-4 is-width-medium form-control\"\r\n        onClick={(): void => {\r\n          goToHome();\r\n        }}\r\n      >\r\n        {t(\"button.goBack\")}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoBackButton;\r\n","import { useHistory } from \"react-router\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\n\r\ntype Navigation = {\r\n  goToHome: Function;\r\n};\r\n\r\nexport const useNavigation = (): Navigation => {\r\n  const { push } = useHistory();\r\n  const { scrollToTop } = scroll;\r\n\r\n  const navigation = {\r\n    goToHome: (): void => {\r\n      push(\"/\");\r\n      scrollToTop();\r\n    },\r\n  };\r\n  return navigation;\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport {\r\n  selectAmountOfRequests,\r\n  selectiIsFetchingMessages,\r\n  selectIsUserChange,\r\n  selectLoggedInUser,\r\n  setIsNewRequest,\r\n  setStartAmountOfRequests,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport RequestsCollection from \"../../components/requests/RequestsCollection\";\r\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\r\n\r\nconst RequestsView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isUserChange = useAppSelector(selectIsUserChange);\r\n  const isFetchingMessages = useAppSelector(selectiIsFetchingMessages);\r\n  const amountOfRequests = useAppSelector(selectAmountOfRequests);\r\n  const dispatch = useAppDispatch();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchMessages } = useHandleMessage();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    const resetRequestVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewRequest(false));\r\n      scrollToTop();\r\n    };\r\n\r\n    protectRoute((): void => {\r\n      fetchMessages((): void => {\r\n        isUserChange && dispatch(setStartAmountOfRequests());\r\n        resetRequestVariableAndScrollToTop();\r\n      });\r\n    });\r\n    return () => {\r\n      resetRequestVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2>{t(\"texts.requests.overview.headline\")}</h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <GoBackButton />\r\n        {isFetchingMessages ? <WaitSpinner /> : <RequestsCollection />}\r\n        {amountOfRequests !== 0 && <GoBackButton />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsView;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { User, Plant, Message } from \"../../app/typeDefinitions\";\r\n\r\ntype ReplyThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst ReplyThumbnail = ({ message }: ReplyThumbnailProps): JSX.Element => {\r\n  const { _id, seller, plant } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"card p-3 mt-4 \">\r\n      <h4>\r\n        {t(\"texts.replies.replyTile.headline\")} {name}\r\n      </h4>\r\n      <h5>\r\n        {t(\"texts.replies.replyTile.subheadline\")} {username}\r\n      </h5>\r\n      <div className=\"text-center\">\r\n        <Link\r\n          to={`/replies/fetch/${_id}`}\r\n          className=\"btn is-width-medium form-control is-link\"\r\n        >\r\n          {t(\"link.details\")}\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyThumbnail;\r\n","import { useAppSelector } from \"../../app/hooks\";\r\nimport {\r\n  selectLoggedInUser,\r\n  selectMessages,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Message, User } from \"../../app/typeDefinitions\";\r\nimport ReplyTile from \"./ReplyTile\";\r\n\r\nconst RepliesCollection = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const messages = useAppSelector(selectMessages);\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((message: Message): JSX.Element | null => {\r\n        const { _id, buyer, reply } = message;\r\n        return (buyer as User)._id === (loggedInUser as User)._id &&\r\n          reply !== \"\" ? (\r\n          <ReplyTile message={message} key={_id} />\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesCollection;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport {\r\n  selectAmountOfReplies,\r\n  selectiIsFetchingMessages,\r\n  selectIsUserChange,\r\n  selectLoggedInUser,\r\n  setIsNewReply,\r\n  setStartAmountOfReplies,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport RepliesCollection from \"../../components/replies/RepliesCollection\";\r\nimport GoBackButton from \"../../components/helpers/GoBackButton\";\r\n\r\nconst RepliesView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isUserChange = useAppSelector(selectIsUserChange);\r\n  const isFetchingMessages = useAppSelector(selectiIsFetchingMessages);\r\n  const amountOfReplies = useAppSelector(selectAmountOfReplies);\r\n  const dispatch = useAppDispatch();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchMessages } = useHandleMessage();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    const resetReplyVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewReply(false));\r\n      scrollToTop();\r\n    };\r\n\r\n    protectRoute((): void => {\r\n      fetchMessages((): void => {\r\n        isUserChange && dispatch(setStartAmountOfReplies());\r\n        resetReplyVariableAndScrollToTop();\r\n      });\r\n    });\r\n    return () => {\r\n      resetReplyVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2>{t(\"texts.replies.overview.headline\")}</h2>\r\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\r\n        <GoBackButton />\r\n        {isFetchingMessages ? <WaitSpinner /> : <RepliesCollection />}\r\n        {amountOfReplies !== 0 && <GoBackButton />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesView;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport {\r\n  selectErrorMessage,\r\n  selectIsCreatingMessage,\r\n  selectLoggedInUser,\r\n  selectPlant,\r\n  setErrorMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message } from \"../../app/typeDefinitions\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst RequestCreateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const plant = useAppSelector(selectPlant);\r\n  const isCreatingMessage = useAppSelector(selectIsCreatingMessage);\r\n  const errorMessage = useAppSelector(selectErrorMessage);\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { protectRoute } = useRouting();\r\n  const { createMessage } = useHandleMessage();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n  const { name } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      dispatch(setErrorMessage(null));\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const handleCreateMessageForRequest = (\r\n    event: React.FormEvent<HTMLFormElement>,\r\n    { _id, creator }: Plant\r\n  ): void => {\r\n    const { request } = event.target as any;\r\n    const newMessage: Message = {\r\n      seller: (creator as User)._id,\r\n      plant: _id,\r\n      request: request.value,\r\n    };\r\n    event.preventDefault();\r\n    createMessage(newMessage, (): void => {\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Request text missing\":\r\n        return t(\"errorTexts.messages.createRequest.form.requestTextMissing\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isCreatingMessage ? true : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\">\r\n          {t(\"texts.requests.createRequest.form.headline\")}\r\n        </h2>\r\n        <h3 className=\"mb-4\">\r\n          {t(\"texts.requests.createRequest.form.subheadline\")} {name}\r\n        </h3>\r\n        <form\r\n          className=\"pl-0 form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleCreateMessageForRequest(event, plant);\r\n          }}\r\n        >\r\n          <div>\r\n            <textarea\r\n              name=\"request\"\r\n              cols={35}\r\n              rows={7}\r\n              className=\"mb-4 form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <ErrorMessage\r\n            message={errorMessage}\r\n            outputFunction={convertErrorMessage}\r\n          />\r\n          <div className=\"text-right\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={buttonState()}\r\n              className=\"btn btn-sm mx-2 form-control is-width-medium\"\r\n            >\r\n              {t(\"button.send\")}\r\n            </button>\r\n            <button\r\n              className=\"btn btn-sm mx-2 form-control is-width-medium\"\r\n              onClick={(): void => {\r\n                goBack();\r\n              }}\r\n            >\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestCreateForm;\r\n","import WaitSpinner from \"./WaitSpinner\";\r\n\r\ntype WaitSpinnerTextProps = {\r\n  text: string;\r\n};\r\n\r\nconst WaitSpinnerText = ({ text }: WaitSpinnerTextProps): JSX.Element => {\r\n  return (\r\n    <div className=\"container d-flex align-items-center justify-content-center mt-5\">\r\n      <WaitSpinner />\r\n      <span className=\"is-text-bold\">{text}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitSpinnerText;\r\n","type ReplyProps = {\r\n  headline: string;\r\n  text: string | undefined;\r\n};\r\n\r\nconst Reply = ({ headline, text }: ReplyProps): JSX.Element | null => {\r\n  if (!text) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h5>{headline}</h5>\r\n      <p className=\"text-field p-3 mb-4\">{text}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reply;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport {\r\n  setMessage,\r\n  decreaseAmountOfRequests,\r\n  selectLoggedInUser,\r\n  selectIsFetchingMessage,\r\n  selectMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../../app/typeDefinitions\";\r\nimport WaitSpinnerText from \"../../components/spinners/WaitSpinnerText\";\r\nimport Reply from \"../../components/replies/Reply\";\r\n\r\nconst RequestDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isFetchingMessage = useAppSelector(selectIsFetchingMessage);\r\n  const message = useAppSelector(selectMessage);\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchMessage, updateMessage } = useHandleMessage();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n  const { _id, buyer, plant, request, reply } = message as Message;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      fetchMessage(messageId, (): void => {\r\n        scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const handleChangeMessageState = (message: Message): void => {\r\n    const setBuyerMessageInactive = (message: Message): Message => {\r\n      const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n      clonedMessage.messageState = false;\r\n      dispatch(setMessage(clonedMessage));\r\n      return clonedMessage;\r\n    };\r\n\r\n    const updateBuyerMessage = (updatedMessage: Message) => {\r\n      updateMessage(\r\n        updatedMessage._id as MessageId,\r\n        updatedMessage,\r\n        (): void => {\r\n          dispatch(decreaseAmountOfRequests());\r\n          goBack();\r\n        }\r\n      );\r\n    };\r\n\r\n    const updatedMessage = setBuyerMessageInactive(message);\r\n    updateBuyerMessage(updatedMessage);\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  if (isFetchingMessage || !buyer || !plant) {\r\n    return <WaitSpinnerText text={\"Loading request\"} />;\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">\r\n          {t(\"texts.requests.requestDetails.headline\")} {name}\r\n        </h2>\r\n        <h5>\r\n          {t(\"texts.requests.requestDetails.subheadline\")} {username}\r\n        </h5>\r\n        <p className=\"text-field p-3 mb-4\">{request}</p>\r\n        <Reply\r\n          headline={t(\"texts.requests.requestDetails.yourReply\")}\r\n          text={reply}\r\n        />\r\n        <div className=\"text-right px-3\">\r\n          {!reply && (\r\n            <Link to={`/messages/update/${_id}`} className=\"is-link\">\r\n              <button className=\"btn btn-sm ml-2 is-width-medium form-control mb-1\">\r\n                {t(\"button.reply\")}\r\n              </button>\r\n            </Link>\r\n          )}\r\n          <button\r\n            className=\"btn btn-sm ml-2 is-width-medium form-control mb-1\"\r\n            onClick={(): void => {\r\n              handleChangeMessageState(message);\r\n            }}\r\n          >\r\n            {t(\"button.done\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link\r\n            to={\"/requests/fetch-all\"}\r\n            className=\"is-link\"\r\n            onClick={scrollToTop}\r\n          >\r\n            <button className=\"btn btn-sm mt-4 is-width-medium form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport {\r\n  decreaseAmountOfReplies,\r\n  selectIsDeletingMessage,\r\n  selectIsFetchingMessage,\r\n  selectLoggedInUser,\r\n  selectMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../../app/typeDefinitions\";\r\nimport WaitSpinnerText from \"../../components/spinners/WaitSpinnerText\";\r\nimport Reply from \"../../components/replies/Reply\";\r\n\r\nconst ReplyDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const message = useAppSelector(selectMessage);\r\n  const isFetchingMessage = useAppSelector(selectIsFetchingMessage);\r\n  const isDeletingMessage = useAppSelector(selectIsDeletingMessage);\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { protectRoute } = useRouting();\r\n  const { fetchMessage, deleteMessage } = useHandleMessage();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n  const { _id, seller, plant, request, reply } = message as Message;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      fetchMessage(messageId, (): void => {\r\n        scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const handleDeleteMessage = (messageId: MessageId): void => {\r\n    deleteMessage(messageId, (): void => {\r\n      dispatch(decreaseAmountOfReplies());\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isDeletingMessage ? true : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  if (isFetchingMessage || !seller || !plant) {\r\n    return <WaitSpinnerText text={\"Loading reply\"} />;\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">\r\n          {t(\"texts.replies.replyDetails.headline\")} {name}\r\n        </h2>\r\n        <p className=\"text-field p-3 mb-4\">{request}</p>\r\n        <Reply\r\n          headline={`${t(\"texts.replies.replyDetails.replyBy\")} ${username}`}\r\n          text={reply}\r\n        />\r\n        <div className=\"text-right px-3\">\r\n          <button\r\n            disabled={buttonState()}\r\n            className=\"btn btn-sm ml-2 is-width-medium form-control mb-1\"\r\n            onClick={(): void => {\r\n              handleDeleteMessage(_id as MessageId);\r\n            }}\r\n          >\r\n            {t(\"button.delete\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link\r\n            to={\"/replies/fetch-all\"}\r\n            className=\"is-link\"\r\n            onClick={scrollToTop}\r\n          >\r\n            <button className=\"btn btn-sm mt-4 is-width-medium form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyDetails;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandleMessage } from \"../../app/custom-hooks/useHandleMessage\";\r\nimport {\r\n  selectErrorMessage,\r\n  selectIsUpdatingMessage,\r\n  selectLoggedInUser,\r\n  selectMessage,\r\n  setMessage,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Message, MessageId } from \"../../app/typeDefinitions\";\r\nimport ErrorMessage from \"../../components/helpers/ErrorMessage\";\r\n\r\nconst RequestUpdateForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const message = useAppSelector(selectMessage);\r\n  const isUpdatingMessage = useAppSelector(selectIsUpdatingMessage);\r\n  const errorMessage = useAppSelector(selectErrorMessage);\r\n  const dispatch = useAppDispatch();\r\n  const { goBack } = useHistory();\r\n  const { protectRoute } = useRouting();\r\n  const { updateMessage } = useHandleMessage();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n  const { request } = message as Message;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      scrollToTop();\r\n    });\r\n  }, []);\r\n\r\n  const handleCreateReply = (\r\n    { target }: React.ChangeEvent<HTMLTextAreaElement>,\r\n    message: Message\r\n  ): void => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.reply = target.value;\r\n    dispatch(setMessage(clonedMessage));\r\n  };\r\n\r\n  const handleUpdateMessage = (updatedMessage: Message): void => {\r\n    updateMessage(updatedMessage._id as MessageId, updatedMessage, (): void => {\r\n      goBack();\r\n    });\r\n  };\r\n\r\n  const convertErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Reply text missing\":\r\n        return t(\"errorTexts.messages.updateRequest.form.replyTextMissing\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  const buttonState = (): boolean => {\r\n    return isUpdatingMessage ? true : false;\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\">\r\n          {t(\"texts.requests.updateRequest.form.headline\")}\r\n        </h2>\r\n        <div className=\"card is-card-width-small mb-5\">\r\n          <div className=\"card-body\">\r\n            <p>{request}</p>\r\n            <textarea\r\n              name=\"reply\"\r\n              placeholder={t(\r\n                \"texts.requests.updateRequest.form.replyPlaceholder\"\r\n              )}\r\n              cols={31}\r\n              rows={6}\r\n              className=\"mb-4 form-control is-width-full\"\r\n              onChange={(\r\n                event: React.ChangeEvent<HTMLTextAreaElement>\r\n              ): void => {\r\n                handleCreateReply(event, message);\r\n              }}\r\n            />\r\n            <ErrorMessage\r\n              message={errorMessage}\r\n              outputFunction={convertErrorMessage}\r\n            />\r\n            <div className=\"row justify-content-end px-3\">\r\n              <button\r\n                disabled={buttonState()}\r\n                className=\"btn btn-sm is-width-medium form-control mr-3 mb-2\"\r\n                onClick={(): void => {\r\n                  handleUpdateMessage(message);\r\n                }}\r\n              >\r\n                {t(\"button.submit\")}\r\n              </button>\r\n              <button\r\n                className=\"btn btn-sm is-width-medium form-control mb-2\"\r\n                onClick={(): void => {\r\n                  goBack();\r\n                }}\r\n              >\r\n                {t(\"button.goBack\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestUpdateForm;\r\n","import { useTranslation } from \"react-i18next\";\r\n\r\nconst Unauthorized = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"unauthorized has-background-image2\">\r\n      <div>\r\n        <h1>{t(\"texts.unauthorized.headline\")}</h1>\r\n        <h2>{t(\"texts.unauthorized.subheadline1\")}</h2>\r\n        <h3>{t(\"texts.unauthorized.subheadline2\")}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Unauthorized;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"not-found has-background-image2\">\r\n      <div>\r\n        <h1>{t(\"texts.notFound.headline\")}</h1>\r\n        <h2>{t(\"texts.notFound.subheadline1\")}</h2>\r\n        <h3>{t(\"texts.notFound.subheadline2\")}</h3>\r\n        <Link to={\"/\"} className=\"is-link\">\r\n          <button className=\"ml-2 btn btn-sm is-width-medium form-control\">\r\n            {t(\"button.takeMeHome\")}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useEffect } from \"react\";\r\n\r\ntype KommunicateSettings = {\r\n  appId: string;\r\n  popupWidget: boolean;\r\n  automaticChatOpenOnNavigation: boolean;\r\n};\r\n\r\nconst KommunicateChat = (): JSX.Element => {\r\n  useEffect(() => {\r\n    const createLauncherIcon = (htmlDocument: Document, method: any): void => {\r\n      const kommunicateSettings: KommunicateSettings = {\r\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      const scriptElement = htmlDocument.createElement(\"script\");\r\n      scriptElement.type = \"text/javascript\";\r\n      scriptElement.async = true;\r\n      scriptElement.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      const headElement = htmlDocument.getElementsByTagName(\"head\")[0];\r\n      headElement.appendChild(scriptElement);\r\n      (window as any).kommunicate = method;\r\n      method._globals = kommunicateSettings;\r\n    };\r\n\r\n    createLauncherIcon(document, (window as any).kommunicate || {});\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default KommunicateChat;\r\n","import { useAppSelector } from \"../../app/hooks\";\r\nimport {\r\n  selectLoggedInUser,\r\n  selectPlants,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport { Plant, User } from \"../../app/typeDefinitions\";\r\nimport PlantThumbnail from \"./PlantThumbnail\";\r\n\r\nconst PlantsCreatedCollection = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const plants = useAppSelector(selectPlants);\r\n\r\n  return (\r\n    <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-2 row-cols-xl-3 row-cols-xxl-3\">\r\n      {plants.map((plant: Plant): JSX.Element | null => {\r\n        const { _id, creator } = plant;\r\n        return (creator as User)._id === (loggedInUser as User)._id ? (\r\n          <PlantThumbnail plant={plant} key={_id} />\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCreatedCollection;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\nimport { useRouting } from \"../../app/custom-hooks/useRouting\";\r\nimport { useHandlePlant } from \"../../app/custom-hooks/useHandlePlant\";\r\nimport {\r\n  selectIsFetchingPlants,\r\n  selectLoggedInUser,\r\n} from \"../../reducer/jungleSwapSlice\";\r\nimport WaitSpinner from \"../../components/spinners/WaitSpinner\";\r\nimport PlantsCreatedCollection from \"../../components/plants/PlantsCreatedCollection\";\r\n\r\nconst PlantsCreatedView = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(selectLoggedInUser);\r\n  const isFetchingPlants = useAppSelector(selectIsFetchingPlants);\r\n  const { protectRoute } = useRouting();\r\n  const { fetchPlants } = useHandlePlant();\r\n  const { t } = useTranslation();\r\n  const { scrollToTop } = scroll;\r\n\r\n  useEffect(() => {\r\n    protectRoute((): void => {\r\n      fetchPlants((): void => {\r\n        scrollToTop();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-5\">\r\n        <h2>{t(\"texts.plants.myPlants.headline\")}</h2>\r\n      </div>\r\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsCreatedCollection />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsCreatedView;\r\n","import { useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch } from \"../../app/hooks\";\r\nimport { setErrorMessage } from \"../../reducer/jungleSwapSlice\";\r\n\r\ntype ModalBodyProps = {\r\n  headline: string;\r\n  subheadline: string;\r\n  text: string;\r\n  isClose: boolean;\r\n};\r\n\r\nconst ModalBody = ({\r\n  headline,\r\n  subheadline,\r\n  text,\r\n  isClose,\r\n}: ModalBodyProps): JSX.Element => {\r\n  const divElementRef = useRef<HTMLDivElement | null>(null);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  const handleCloseModal = (): void => {\r\n    dispatch(setErrorMessage(null));\r\n  };\r\n\r\n  const handleClickOutside = ({ target }: any): void => {\r\n    if (divElementRef.current === target) {\r\n      handleCloseModal();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={divElementRef}\r\n      className=\"error-modal fade-error-modal-in\"\r\n      onClick={(event: any): void => {\r\n        isClose && handleClickOutside(event);\r\n      }}\r\n    >\r\n      <div className=\"error-modal-box\">\r\n        <h1>{headline}</h1>\r\n        <h2>{subheadline}</h2>\r\n        <h3>{text}</h3>\r\n        {isClose && (\r\n          <button\r\n            className=\"btn form-control is-width-small mt-4 mb-3\"\r\n            onClick={handleCloseModal}\r\n          >\r\n            {t(\"button.proceed\")}\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalBody;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport ModalBody from \"./ModalBody\";\r\n\r\ntype ErrorModalProps = {\r\n  message: string | null;\r\n};\r\n\r\nconst ErrorModal = ({ message }: ErrorModalProps): JSX.Element | null => {\r\n  const { t } = useTranslation();\r\n\r\n  const convertErrorMessage = (message: string): string => {\r\n    switch (message) {\r\n      // Authentification\r\n      case \"Error while creating user\":\r\n        return t(\"errorTexts.authentification.signUp.errorWhileCreatingUser\");\r\n      case \"User does not exist\":\r\n        return t(\"errorTexts.authentification.signIn.userUnknown\");\r\n      case \"Could not update user\":\r\n        return t(\"errorTexts.authentification.logOut.noUserUpdate\");\r\n      // Plants\r\n      case \"Create plant failed\":\r\n        return t(\"errorTexts.plants.createPlantFailed\");\r\n      case \"Fetch plant failed\":\r\n        return t(\"errorTexts.plants.fetchPlantFailed\");\r\n      case \"Fetch all plants failed\":\r\n        return t(\"errorTexts.plants.techAllPlantsFailed\");\r\n      case \"Search plant failed\":\r\n        return t(\"errorTexts.plants.searchPlantFailed\");\r\n      case \"Update plant failed\":\r\n        return t(\"errorTexts.plants.updatePlantFailed\");\r\n      case \"Delete plant failed\":\r\n        return t(\"errorTexts.plants.deletePlantFailed\");\r\n      // Messages\r\n      case \"Create message failed\":\r\n        return t(\"errorTexts.messages.createMessageFailed\");\r\n      case \"Fetch message failed\":\r\n        return t(\"errorTexts.messages.fetchMessageFailed\");\r\n      case \"Fetch all messages failed\":\r\n        return t(\"errorTexts.messages.fetchAllMessagesFailed\");\r\n      case \"Update message failed\":\r\n        return t(\"errorTexts.updateMessageFailed\");\r\n      case \"Delete message failed\":\r\n        return t(\"errorTexts.deleteMessageFailed\");\r\n      default:\r\n        return t(\"errorTexts.general\");\r\n    }\r\n  };\r\n\r\n  if (!message || message.includes(\"Form\")) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ModalBody\r\n      headline={t(\"texts.errorModal.headline\")}\r\n      subheadline={t(\"texts.errorModal.subheadline\")}\r\n      text={convertErrorMessage(message)}\r\n      isClose={true}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorModal;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport ModalBody from \"./ModalBody\";\r\n\r\ntype OfflineModalProps = {\r\n  isOnline: boolean;\r\n};\r\n\r\nconst OfflineModal = ({ isOnline }: OfflineModalProps): JSX.Element | null => {\r\n  const { t } = useTranslation();\r\n\r\n  if (isOnline) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ModalBody\r\n      headline={t(\"texts.offlineModal.headline\")}\r\n      subheadline={t(\"texts.offlineModal.subheadline\")}\r\n      text={t(\"errorTexts.offline\")}\r\n      isClose={false}\r\n    />\r\n  );\r\n};\r\n\r\nexport default OfflineModal;\r\n","import { useAppSelector } from \"../../app/hooks\";\r\nimport { useOnlineStatus } from \"../../app/custom-hooks/useOnlineStatus\";\r\nimport ErrorModal from \"./ErrorModal\";\r\nimport OfflineModal from \"./OfflineModal\";\r\nimport { selectErrorMessage } from \"../../reducer/jungleSwapSlice\";\r\n\r\nconst Modals = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(selectErrorMessage);\r\n  const isOnline = useOnlineStatus();\r\n\r\n  if (isOnline) {\r\n    return <ErrorModal message={errorMessage} />;\r\n  }\r\n  return <OfflineModal isOnline={isOnline} />;\r\n};\r\n\r\nexport default Modals;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useOnlineStatus = (): boolean => {\r\n  const [isOnline, setIsOnline] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    const handleOfflineEventCallback = (): void => {\r\n      setIsOnline(false);\r\n    };\r\n\r\n    const handleOnlineEventCallback = (): void => {\r\n      setIsOnline(true);\r\n    };\r\n\r\n    window.addEventListener(\"offline\", handleOfflineEventCallback);\r\n    window.addEventListener(\"online\", handleOnlineEventCallback);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"offline\", handleOfflineEventCallback);\r\n      window.removeEventListener(\"online\", handleOnlineEventCallback);\r\n    };\r\n  }, []);\r\n\r\n  return isOnline;\r\n};\r\n","import { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport NavBar from \"./components/navigation/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./views/home/Home\";\r\nimport SignUp from \"./views/authentification/SignUp\";\r\nimport SignIn from \"./views/authentification/SignIn\";\r\nimport LogOut from \"./components/authentification/LogOut\";\r\nimport CreatePlantForm from \"./views/plants/PlantCreateForm\";\r\nimport PlantDetails from \"./views/plants/PlantDetails\";\r\nimport UpdatePlantForm from \"./views/plants/PlantUpdateForm\";\r\nimport CheckoutPage from \"./views/apis/CheckoutView\";\r\nimport RequestsOverview from \"./views/requests/RequestsView\";\r\nimport RepliesOverview from \"./views/replies/RepliesView\";\r\nimport CreateRequestForm from \"./views/requests/RequestCreateForm\";\r\nimport RequestDetails from \"./views/requests/RequestDetails\";\r\nimport ReplyDetails from \"./views/replies/ReplyDetails\";\r\nimport UpdateRequestForm from \"./views/requests/RequestUpdateForm\";\r\nimport Unauthorized from \"./views/authentification/Unauthorized\";\r\nimport NotFound from \"./views/errors/NotFound\";\r\nimport KommunicateChat from \"./components/apis/KommunicateChat\";\r\nimport MyPlants from \"./views/plants/PlantsCreatedView\";\r\nimport Modals from \"./components/modals/Modals\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n\r\n        <Route path=\"/auth/sign-up\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/auth/sign-in\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/auth/log-out\">\r\n          <LogOut />\r\n        </Route>\r\n        <Route path=\"/auth/unauthorized\">\r\n          <Unauthorized />\r\n        </Route>\r\n\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/fetch/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n        <Route path=\"/plants/my-own\">\r\n          <MyPlants />\r\n        </Route>\r\n\r\n        <Route path=\"/messages/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/messages/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch-all\">\r\n          <RequestsOverview />\r\n        </Route>\r\n        <Route path=\"/requests/fetch/:messageId\">\r\n          <RequestDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/replies/fetch-all\">\r\n          <RepliesOverview />\r\n        </Route>\r\n        <Route path=\"/replies/fetch/:messageId\">\r\n          <ReplyDetails />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Modals />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"../reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","const en = {\r\n  translations: {\r\n    link: {\r\n      jungleSwap: \"JungleSwap\",\r\n      allPlants: \"All Plants\",\r\n      myPlants: \"My Plants\",\r\n      createPlant: \"Create Plant\",\r\n      requests: \"Requests\",\r\n      replies: \"Replies\",\r\n      logOut: \"Log out\",\r\n      tryIt: \"Try it!\",\r\n      signIn: \"Sign in\",\r\n      signUp: \"Sign up\",\r\n      details: \"Details\",\r\n      tooltipps: {\r\n        newRequest: \"new request\",\r\n        newReply: \"new reply\",\r\n        search: \"search plant\",\r\n      },\r\n    },\r\n\r\n    button: {\r\n      signIn: \"Sign in\",\r\n      signUp: \"Sign up\",\r\n      create: \"Create\",\r\n      update: \"Update\",\r\n      save: \"Save\",\r\n      delete: \"Delete\",\r\n      send: \"Send\",\r\n      submit: \"Submit\",\r\n      buy: \"Buy\",\r\n      swap: \"Swap\",\r\n      reply: \"Reply\",\r\n      done: \"Done\",\r\n      goBack: \"Back\",\r\n      more: \"More\",\r\n      proceed: \"Proceed\",\r\n      takeMeHome: \"Take me home\",\r\n    },\r\n\r\n    select: {\r\n      location: {\r\n        title: \"Select location\",\r\n        sun: \"sun\",\r\n        shade: \"shade\",\r\n        sunAndShade: \"sun and shade\",\r\n      },\r\n    },\r\n\r\n    texts: {\r\n      home: {\r\n        title: {\r\n          headline: \"JungleSwap\",\r\n          subheadline: \"Share your green heart\",\r\n        },\r\n        about: {\r\n          headline: \"Welcome to JungleSwap!\",\r\n          subheadline: \"Add green to your Home\",\r\n          paragraph: {\r\n            line1: \"It's easy-peasy.\",\r\n            line2: \"Share your plant offshoots.\",\r\n            line3: \"Make money!\",\r\n            line4: \"Or swap them for another plant.\",\r\n            line5: \"Don't have any baby plants?\",\r\n            line6: \"You can simply shop and give a plant a new home.\",\r\n          },\r\n        },\r\n        allPlants: {\r\n          headline: \"Plants\",\r\n        },\r\n        searchPlant: {\r\n          headline: \"Search a plant\",\r\n          namePlaceholder: \"Enter name\",\r\n        },\r\n      },\r\n      authentification: {\r\n        signIn: {\r\n          headline: \"Sign In\",\r\n          email: \"Email address\",\r\n          password: \"Password\",\r\n          enterPlaceholder: \"Enter\",\r\n        },\r\n        signUp: {\r\n          headline: \"Sign Up\",\r\n          username: \"Username\",\r\n          email: \"Email address\",\r\n          password: \"Password\",\r\n          enterPlaceholder: \"Enter\",\r\n          alreadyAccountCreated: \"Already have an account?\",\r\n        },\r\n      },\r\n      plants: {\r\n        myPlants: {\r\n          headline: \"My plants\",\r\n        },\r\n        createPlant: {\r\n          form: {\r\n            headline: \"Create a plant\",\r\n            name: \"Name\",\r\n            description: \"Description\",\r\n            size: \"Size (cm)\",\r\n            location: \"Location\",\r\n            price: \"Price (EUR)\",\r\n            image: \"Image\",\r\n            enterPlaceholder: \"Enter\",\r\n          },\r\n        },\r\n        updatePlant: {\r\n          form: {\r\n            headline: \"Update your plant\",\r\n            name: \"Name\",\r\n            description: \"Description\",\r\n            size: \"Size (cm)\",\r\n            location: \"Location\",\r\n            price: \"Price (EUR)\",\r\n            image: \"Image\",\r\n          },\r\n        },\r\n        plantThumbnail: {\r\n          currency: \"€\",\r\n        },\r\n        plantDetails: {\r\n          headline: \"Plant details\",\r\n          name: \"Name:\",\r\n          description: \"Description:\",\r\n          size: \"Size:\",\r\n          sizeUnit: \"cm\",\r\n          likes: \"Likes:\",\r\n          price: \"Price:\",\r\n          currency: \"€\",\r\n        },\r\n        checkout: {\r\n          form: {\r\n            price: \" Price:\",\r\n            currency: \"€\",\r\n            payNow: \"Pay now\",\r\n            paymentSuccessful: \"Payment succeeded.\",\r\n          },\r\n        },\r\n      },\r\n      requests: {\r\n        createRequest: {\r\n          form: {\r\n            headline: \"Your request\",\r\n            subheadline: \"for\",\r\n          },\r\n        },\r\n        updateRequest: {\r\n          form: {\r\n            headline: \"Reply your request\",\r\n            replyPlaceholder: \"Your reply\",\r\n          },\r\n        },\r\n        overview: {\r\n          headline: \"Requests for your plants\",\r\n        },\r\n        requestDetails: {\r\n          headline: \"Request for\",\r\n          subheadline: \"by\",\r\n          yourReply: \"Your reply\",\r\n        },\r\n        requestTile: {\r\n          headline: \"Request for\",\r\n          subheadline: \"by\",\r\n        },\r\n      },\r\n      replies: {\r\n        overview: {\r\n          headline: \"Replies for your requests\",\r\n        },\r\n        replyDetails: {\r\n          headline: \"Your request for\",\r\n          replyBy: \"Reply by\",\r\n        },\r\n        replyTile: {\r\n          headline: \"Reply for\",\r\n          subheadline: \"by\",\r\n        },\r\n      },\r\n      notFound: {\r\n        headline: \"Oh-oh!\",\r\n        subheadline1: \"We think you got lost in the jungle!\",\r\n        subheadline2: \"404 Not Found\",\r\n      },\r\n      unauthorized: {\r\n        headline: \"Oh-oh!\",\r\n        subheadline1: \"We think you reached the forbidden part of the jungle!\",\r\n        subheadline2: \"401 Unauthorized\",\r\n      },\r\n      footer: {\r\n        copyright: \"©\",\r\n        appAuthor1: \"Christian Gerbig\",\r\n        appAuthor2: \"Lisa Montebaur\",\r\n      },\r\n      errorModal: {\r\n        headline: \"Oh-oh!\",\r\n        subheadline: \"Something went wrong in the jungle!\",\r\n      },\r\n      offlineModal: {\r\n        headline: \"Oh-oh!\",\r\n        subheadline: \"You lost your roots in the jungle!\",\r\n      },\r\n    },\r\n\r\n    errorTexts: {\r\n      authentification: {\r\n        unauthorized: \"Unauthorized user\",\r\n        signUp: {\r\n          form: {\r\n            usernameMissing: \"Please enter username\",\r\n            emailMissing: \"Please enter email\",\r\n            passwordMissing: \"Please enter password\",\r\n            emailFormatInvalid: \"The email format is invalid\",\r\n            passwordInvalid:\r\n              \"The password needs to have 8 characters, a number, a special character and an uppercase alphabet\",\r\n            userAlreadyExists: \"Username or email already exists\",\r\n          },\r\n          errorWhileCreatingUser: \"Error while creating user\",\r\n        },\r\n        signIn: {\r\n          form: {\r\n            emailMissing: \"Please enter email\",\r\n            passwordMissing: \"Please enter password\",\r\n            emailFormatInvalid: \"The email format is invalid\",\r\n            noMatchPasswords: \"Passwords don't match\",\r\n          },\r\n          userUnknown: \"User does not exist\",\r\n        },\r\n        logOut: {\r\n          noUserUpdate: \"Could not update user\",\r\n        },\r\n      },\r\n      plants: {\r\n        createPlant: {\r\n          form: {\r\n            nameMissing: \"Please enter name\",\r\n            descriptionMissing: \"Please enter description\",\r\n            sizeMissing: \"Please enter size\",\r\n            locationMissing: \"Please enter location\",\r\n            priceMissing: \"Please enter price\",\r\n            imageMissing: \"Please choose an image\",\r\n            noImageSelected: \"Please choose an image to delete\",\r\n          },\r\n        },\r\n        createPlantFailed: \"Creating the plant failed\",\r\n        fetchPlantFailed: \"Fetching the plant failed\",\r\n        fetchAllPlantsFailed: \"Fetching all plants failed\",\r\n        updatePlantFailed: \"Updating the plant failed\",\r\n        deletePlantFailed: \"Delete plant failed\",\r\n      },\r\n      messages: {\r\n        createRequest: {\r\n          form: {\r\n            requestTextMissing: \"Please enter request text\",\r\n          },\r\n        },\r\n        updateRequest: {\r\n          form: {\r\n            replyTextMissing: \"Please enter reply text\",\r\n          },\r\n        },\r\n        createMessageFailed: \"Creating message failed\",\r\n        fetchMessageFailed: \"Fetching message failed\",\r\n        fetchAllMessagesFailed: \"Fetching all messages failed\",\r\n        updateMessageFailed: \"Updating the message failed\",\r\n        deleteMessageFailed: \"Delete message failed\",\r\n      },\r\n      offline: \"No internet connection\",\r\n      general: \"An error occured\",\r\n    },\r\n  },\r\n};\r\n\r\nexport default en;\r\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport en from \"./locales/en\";\r\n\r\ni18n.use(initReactI18next).init({\r\n  resources: {\r\n    en: en,\r\n  },\r\n  fallbackLng: \"en\",\r\n  debug: false,\r\n  ns: [\"translations\"],\r\n  defaultNS: \"translations\",\r\n  interpolation: {\r\n    escapeValue: false,\r\n  },\r\n});\r\n\r\nexport default i18n;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./app/store\";\r\n\r\nimport \"./app/i18n\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}