{"version":3,"sources":["hooks.ts","reducer/jungleSwapSlice.ts","config.ts","lib/IntervalCounter.ts","components/NavLoggedInUserItems.tsx","components/NavAuthentificationItems.tsx","components/NavBar.tsx","components/Footer.tsx","lib/externalLinkPaths.ts","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/About.tsx","components/WaitSpinner.tsx","lib/plantIO.ts","components/SearchPlant.tsx","components/PlantThumbnail.tsx","components/PlantsOverview.tsx","components/AllPlants.tsx","components/Title.tsx","views/Home.tsx","views/SignUp.tsx","views/SignIn.tsx","components/LogOut.tsx","lib/routing.ts","views/CreatePlantForm.tsx","lib/plantImageIO.ts","views/PlantDetails.tsx","views/UpdatePlantForm.tsx","components/CheckoutForm.tsx","views/CheckoutPage.tsx","lib/messageIO.ts","components/RequestTile.tsx","components/RequestsOverview.tsx","lib/MainPageScrolling.ts","components/GoBackButton.tsx","views/RequestsPage.tsx","components/ReplyTile.tsx","components/RepliesOverview.tsx","views/RepliesPage.tsx","views/CreateRequestForm.tsx","components/WaitSpinnerText.tsx","views/RequestDetails.tsx","views/ReplyDetails.tsx","views/UpdateRequestForm.tsx","views/Unauthorized.tsx","views/NotFound.tsx","components/Chat.tsx","components/MyPlantsOverview.tsx","views/MyPlants.tsx","App.tsx","store.ts","locales/en.ts","i18n.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","apiPath","process","rejectWithValue","data","Error","signUp","createAsyncThunk","newUser","a","axios","post","response","error","signIn","user","withCredentials","logOut","checkUserLoggedIn","get","createPlant","newPlant","fetchAllPlants","fetchQueryPlants","query","fetchPlant","plantId","updatePlant","updatedPlant","patch","deletePlant","delete","uploadPlantImage","uploadForm","deletePlantImage","destroyImageData","createPayment","plant","price","createMessage","newMessage","fetchAllMessages","fetchMessage","messageId","updateMessage","updatedMessage","deleteMessage","jungleSwapSlice","createSlice","name","initialState","isUserChange","loggedInUser","isCreatingPlant","isFetchingPlants","isFetchingPlant","isUpdatingPlant","isDeletingPlant","plants","filteredPlants","isUploadingPlantImage","isDeletingPlantImage","clientSecret","isCreatingMessage","isFetchingMessages","isFetchingMessage","isUpdatingMessage","isDeletingMessage","messages","message","isNewRequest","isNewReply","amountOfRequests","amountOfReplies","intervalId","delayCounter","titleSectionHeight","aboutSectionHeight","errorMessage","reducers","setIsUserChange","state","action","payload","setLoggedInUser","setIsCreatingPlant","setIsFetchingPlants","setIsFetchingPlant","setIsUpdatingPlant","setIsDeletingPlant","addPlant","push","setPlant","setPlants","setFilteredPlants","setPlantChanges","_id","description","size","imageUrl","imagePublicId","location","map","singlePlant","removePlant","filter","setIsUploadingPlantImage","setIsDeletingPlantImage","setDestroyImageData","setClientSecret","setIsCreatingMessage","setIsFetchingMessages","setIsFetchingMessage","setIsUpdatingMessage","setIsDeletingMessage","addMessage","setMessages","setMessage","setMessageChanges","buyer","seller","request","reply","messageState","singleMessage","removeMessage","setIsNewRequest","setIsNewReply","setStartAmountOfRequests","setStartAmountOfReplies","setAmountOfRequests","setAmountOfReplies","decreaseAmountOfRequests","decreaseAmountOfReplies","setIntervalId","setDelayCounter","increaseDelayCounter","setTitleSectionHeight","setAboutSectionHeight","scrollToAbout","scroll","scrollTo","scrollToPlants","setErrorMessage","extraReducers","builder","addCase","fulfilled","rejected","actions","IntervalCounter","dispatch","stop","clearInterval","this","NavLoggedInUserItems","jungleSwap","t","useTranslation","to","className","title","icon","faBell","username","NavAuthentificationItems","NavBar","useEffect","unwrap","then","setMessageVariables","setInterval","startInterval","setMessageVariablesAndStartInterval","catch","rejectedValue","console","log","currentAmountOfRequests","checkAmountOfRequests","length","calculateAmountOfRequests","checkNewRequests","currentAmountOfReplies","checkAmountOfReplies","calculateAmountOfReplies","checkNewReplies","setMessagesVariableAndCheckNewRequestsReplies","Navbar","variant","expand","fixed","Brand","onClick","scrollToTop","Toggle","aria-controls","Collapse","id","Nav","faSearch","Footer","year","Date","getFullYear","pathname","target","rel","About","src","plantsImage","alt","plantPotIcon","WaitSpinner","role","PlantIO","fetchAll","SearchPlant","useState","setQuery","setFilter","fetchPlantQueryByName","filterPlantsByLocation","type","placeholder","value","onChange","event","PlantThumbnail","PlantsOverview","index","AllPlants","Title","Home","elementRef","useRef","elementHeight","Math","round","getBoundingClientRect","height","current","ref","titleSection","aboutSection","SignUp","history","useHistory","handleSignUp","preventDefault","email","password","toLowerCase","setUserVariablesAndReturnToHomePage","onSubmit","htmlFor","formNoValidate","SignIn","handleSignIn","LogOut","resetRequestReplyVariablesAndReturnToHomePage","updateUserData","clonedUser","JSON","parse","stringify","updateUserRequestsReplies","logOutUser","Routing","protect","CreatePlantForm","handleCreatePlant","scrollToBottom","addPlantAndReturnToHomePage","image","plantImage","files","FormData","append","handleUploadPlantImage","min","disabled","goBack","PlantImageIO","PlantDetails","useParams","setPlantAndScrollToTop","fetchPlantData","handleDeletePlant","removePlantAndReturnToPlantsSection","creator","forEach","handleDeleteRemainingMessages","UpdatePlantForm","selectElementRef","setPlantLocation","handlePlantEntryChange","clonedPlant","handlePlantImageChange","setImageDataForPlant","handleUpdatePlant","setPlantChangesAndReturnToPlantsSection","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","payment","initializePayment","handleCardElementInputChanges","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","stripePromise","loadStripe","CheckoutPage","MessageIO","fetch","RequestThumbnail","RequestsOverview","RequestTile","MainPageScrolling","toTop","GoBackButton","RequestsPage","resetRequestVariableAndScrollToTop","ReplyThumbnail","RepliesOverview","ReplyTile","RepliesPage","resetReplyVariableAndScrollToTop","CreateRequestForm","handleCreateMessageForRequest","addMessageAndReturnToPlantDetailsPage","cols","rows","WaitSpinnerText","text","RequestDetails","handleChangeMessageState","setMessageChangesAndReturnToRequestsPage","updateBuyerMessage","clonedMessage","setBuyerMessageInactive","ReplyDetails","handleDeleteMessage","removeMessageReplyAndReturnToRepliesPage","UpdateRequestForm","handleUpdateMessage","setMessageChangesAndReturnToRequestPage","handleCreateReply","Unauthorized","NotFound","KommunicateChat","htmlDocument","method","scriptElement","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","createLauncherIcon","document","MyPlantsOverview","MyPlants","withRouter","exact","path","component","store","configureStore","reducer","en","translations","link","allPlants","myPlants","requests","replies","tryIt","details","takeMeHome","button","create","update","save","send","submit","buy","swap","done","selectLocation","sun","shade","sunAndShade","headline","subheadline","about","paragraph","line1","line2","line3","line4","line5","line6","searchPlants","namePlaceholder","enterPlaceholder","alreadyAccountCreated","createPlantForm","updatePlantForm","plantThumbnail","currency","plantDetails","sizeUnit","likes","checkForm","paymentSuccessful","createRequestForm","updateRequestForm","replyPlaceholder","requestsPage","requestDetails","yourReply","requestTile","repliesPage","replyDetails","replyBy","replyTile","footer","copyright","appAuthor1","appAuthor2","notFound","subheadline1","subheadline2","unauthorized","i18n","use","initReactI18next","init","resources","fallbackLng","debug","ns","defaultNS","interpolation","escapeValue","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.e40b062e.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  User,\r\n  Plant,\r\n  PlantId,\r\n  Message,\r\n  MessageId,\r\n  DestroyImageData,\r\n  IntervalId,\r\n} from \"../typeDefinitions\";\r\n\r\ntype ErrorMessage = string | null;\r\n\r\ninterface InitialState {\r\n  // ----- User authentication -----\r\n  isUserChange: boolean;\r\n  loggedInUser: User | null;\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: boolean;\r\n  isFetchingPlants: boolean;\r\n  isFetchingPlant: boolean;\r\n  isUpdatingPlant: boolean;\r\n  isDeletingPlant: boolean;\r\n  plant: Plant | {};\r\n  plants: Plant[];\r\n  filteredPlants: Plant[];\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: boolean;\r\n  isDeletingPlantImage: boolean;\r\n  destroyImageData: DestroyImageData | null;\r\n\r\n  // ----- Payment -----\r\n  clientSecret: string;\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: boolean;\r\n  isFetchingMessages: boolean;\r\n  isFetchingMessage: boolean;\r\n  isUpdatingMessage: boolean;\r\n  isDeletingMessage: boolean;\r\n  messages: Message[];\r\n  message: Message | {};\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: boolean;\r\n  isNewReply: boolean;\r\n  amountOfRequests: number;\r\n  amountOfReplies: number;\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: IntervalId;\r\n  delayCounter: number;\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: number;\r\n  aboutSectionHeight: number;\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: ErrorMessage;\r\n}\r\n\r\ninterface UpdatePlantParameters {\r\n  plantId: PlantId;\r\n  updatedPlant: Plant;\r\n}\r\n\r\ninterface UpdateMessageParameters {\r\n  messageId: MessageId;\r\n  updatedMessage: Message;\r\n}\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\nconst initialState: InitialState = {\r\n  // ----- User authentication -----\r\n  isUserChange: false,\r\n  loggedInUser: null,\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: false,\r\n  isFetchingPlants: false,\r\n  isFetchingPlant: false,\r\n  isUpdatingPlant: false,\r\n  isDeletingPlant: false,\r\n  plant: {},\r\n  plants: [],\r\n  filteredPlants: [],\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: false,\r\n  isDeletingPlantImage: false,\r\n  destroyImageData: null,\r\n\r\n  // ----- Payment -----\r\n  clientSecret: \"\",\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: false,\r\n  isFetchingMessages: false,\r\n  isFetchingMessage: false,\r\n  isUpdatingMessage: false,\r\n  isDeletingMessage: false,\r\n  messages: [],\r\n  message: {},\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: false,\r\n  isNewReply: false,\r\n  amountOfRequests: 0,\r\n  amountOfReplies: 0,\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: null,\r\n  delayCounter: 0,\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: 0,\r\n  aboutSectionHeight: 0,\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: null,\r\n};\r\n\r\nconst rejectWithValue = (data: any): void | PromiseLike<void> => {\r\n  throw new Error(data);\r\n};\r\n\r\n// ----- User authentification -----\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (newUser: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-up`, newUser);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async (user: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-in`, user, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (user: User): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/auth/log-out`, user, {\r\n        withCredentials: true,\r\n      });\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const checkUserLoggedIn = createAsyncThunk(\r\n  \"jungleSwap/checkUserLoggedIn\",\r\n  async (): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/auth/check-user`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Plants -----\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async (newPlant: Plant): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/plants/create`, newPlant, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async (): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query: string): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchPlant = createAsyncThunk(\r\n  \"jungleSwap/fetchPlant\",\r\n  async (plantId: PlantId): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async ({\r\n    plantId,\r\n    updatedPlant,\r\n  }: UpdatePlantParameters): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (plantId: PlantId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Images -----\r\nexport const uploadPlantImage = createAsyncThunk(\r\n  \"jungleSwap/uploadPlantImage\",\r\n  async (uploadForm: FormData): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/cloudinary/upload`,\r\n        uploadForm\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlantImage = createAsyncThunk(\r\n  \"jungleSwap/deletePlantImage\",\r\n  async (destroyImageData: DestroyImageData): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/cloudinary/destroy`, destroyImageData);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Payment -----\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant: Plant): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/stripe/create-payment-intent`,\r\n        {\r\n          price: plant.price,\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Messages -----\r\nexport const createMessage = createAsyncThunk(\r\n  \"jungleSwap/createMessage\",\r\n  async (newMessage: Message): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/messages/create`,\r\n        newMessage,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllMessages = createAsyncThunk(\r\n  \"jungleSwap/fetchAllMessages\",\r\n  async (): Promise<Message[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/messages/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchMessage = createAsyncThunk(\r\n  \"jungleSwap/fetchMessage\",\r\n  async (messageId: MessageId): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${apiPath}/messages/fetch/${messageId}`,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updateMessage = createAsyncThunk(\r\n  \"jungleSwap/updateMessage\",\r\n  async ({\r\n    messageId,\r\n    updatedMessage,\r\n  }: UpdateMessageParameters): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/messages/update/${messageId}`,\r\n        updatedMessage\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteMessage = createAsyncThunk(\r\n  \"jungleSwap/deleteMessage\",\r\n  async (messageId: MessageId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    // ----- User authentication ------\r\n    setIsUserChange: (state, action: PayloadAction<boolean>) => {\r\n      state.isUserChange = action.payload;\r\n    },\r\n    setLoggedInUser: (state, action: PayloadAction<User | null>) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n\r\n    // ----- Plants ------\r\n    setIsCreatingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isCreatingPlant = action.payload;\r\n    },\r\n    setIsFetchingPlants: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingPlants = action.payload;\r\n    },\r\n    setIsFetchingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingPlant = action.payload;\r\n    },\r\n    setIsUpdatingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isUpdatingPlant = action.payload;\r\n    },\r\n    setIsDeletingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingPlant = action.payload;\r\n    },\r\n    addPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plants.push(action.payload);\r\n    },\r\n    setPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plant = action.payload;\r\n    },\r\n    setPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.plants = action.payload;\r\n    },\r\n    setFilteredPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.filteredPlants = action.payload;\r\n    },\r\n    setPlantChanges: (state, action: PayloadAction<Plant>) => {\r\n      const {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      } = action.payload;\r\n      state.plants = state.plants.map((singlePlant: Plant): Plant => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, action: PayloadAction<PlantId>) => {\r\n      state.plants = state.plants.filter(\r\n        (plant: Plant): boolean => plant._id !== action.payload\r\n      );\r\n    },\r\n\r\n    // ----- Images -----\r\n    setIsUploadingPlantImage: (state, action: PayloadAction<boolean>) => {\r\n      state.isUploadingPlantImage = action.payload;\r\n    },\r\n    setIsDeletingPlantImage: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingPlantImage = action.payload;\r\n    },\r\n    setDestroyImageData: (\r\n      state,\r\n      action: PayloadAction<DestroyImageData | null>\r\n    ) => {\r\n      state.destroyImageData = action.payload;\r\n    },\r\n\r\n    // ----- Payment -----\r\n    setClientSecret: (state, action: PayloadAction<string>) => {\r\n      state.clientSecret = action.payload;\r\n    },\r\n\r\n    // ----- Messages -----\r\n    setIsCreatingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isCreatingMessage = action.payload;\r\n    },\r\n    setIsFetchingMessages: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingMessages = action.payload;\r\n    },\r\n    setIsFetchingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingMessage = action.payload;\r\n    },\r\n    setIsUpdatingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isUpdatingMessage = action.payload;\r\n    },\r\n    setIsDeletingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingMessage = action.payload;\r\n    },\r\n    addMessage: (state, action: PayloadAction<Message>) => {\r\n      state.messages.push(action.payload);\r\n    },\r\n    setMessages: (state, action: PayloadAction<Message[]>) => {\r\n      state.messages = action.payload;\r\n    },\r\n    setMessage: (state, action: PayloadAction<Message>) => {\r\n      state.message = action.payload;\r\n    },\r\n    setMessageChanges: (state, action: PayloadAction<Message>) => {\r\n      const { _id, buyer, seller, plant, request, reply, messageState } =\r\n        action.payload;\r\n      state.messages = state.messages.map((singleMessage) => {\r\n        if (singleMessage._id === _id) {\r\n          singleMessage.buyer = buyer;\r\n          singleMessage.seller = seller;\r\n          singleMessage.plant = plant;\r\n          singleMessage.request = request;\r\n          singleMessage.reply = reply;\r\n          singleMessage.messageState = messageState;\r\n        }\r\n        return singleMessage;\r\n      });\r\n    },\r\n    removeMessage: (state, action: PayloadAction<MessageId>) => {\r\n      state.messages = state.messages.filter((message: Message): boolean => {\r\n        return message._id !== action.payload;\r\n      });\r\n    },\r\n\r\n    // ----- Requests/Replies check ------\r\n    setIsNewRequest: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewRequest = action.payload;\r\n    },\r\n    setIsNewReply: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewReply = action.payload;\r\n    },\r\n    setStartAmountOfRequests: (state) => {\r\n      state.amountOfRequests = (state.loggedInUser as any).amountOfRequests;\r\n    },\r\n    setStartAmountOfReplies: (state) => {\r\n      state.amountOfReplies = (state.loggedInUser as any).amountOfReplies;\r\n    },\r\n    setAmountOfRequests: (state, action: PayloadAction<number>) => {\r\n      state.amountOfRequests = action.payload;\r\n    },\r\n    setAmountOfReplies: (state, action: PayloadAction<number>) => {\r\n      state.amountOfReplies = action.payload;\r\n    },\r\n    decreaseAmountOfRequests: (state) => {\r\n      state.amountOfRequests -= 1;\r\n    },\r\n    decreaseAmountOfReplies: (state) => {\r\n      state.amountOfReplies -= 1;\r\n    },\r\n\r\n    // ----- Interval counter -----\r\n    setIntervalId: (state, action: PayloadAction<IntervalId>) => {\r\n      state.intervalId = action.payload;\r\n    },\r\n    setDelayCounter: (state, action: PayloadAction<number>) => {\r\n      state.delayCounter = action.payload;\r\n    },\r\n    increaseDelayCounter: (state) => {\r\n      state.delayCounter += 1;\r\n    },\r\n\r\n    // ----- Pages handling -----\r\n    setTitleSectionHeight: (state, action: PayloadAction<number>) => {\r\n      state.titleSectionHeight = action.payload;\r\n    },\r\n    setAboutSectionHeight: (state, action: PayloadAction<number>) => {\r\n      state.aboutSectionHeight = action.payload;\r\n    },\r\n    scrollToAbout: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight);\r\n    },\r\n    scrollToPlants: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight + state.aboutSectionHeight);\r\n    },\r\n\r\n    // ----- Error handling -----\r\n    setErrorMessage: (state, action: PayloadAction<ErrorMessage>) => {\r\n      state.errorMessage = action.payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    // ----- Plants ------\r\n    builder.addCase(createPlant.fulfilled, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(createPlant.rejected, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchPlant.fulfilled, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(fetchPlant.rejected, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.fulfilled, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.rejected, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.fulfilled, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.rejected, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n\r\n    // ----- Images -----\r\n    builder.addCase(uploadPlantImage.fulfilled, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(uploadPlantImage.rejected, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.fulfilled, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.rejected, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n\r\n    // ----- Messages -----\r\n    builder.addCase(createMessage.fulfilled, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(createMessage.rejected, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.fulfilled, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.rejected, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchMessage.fulfilled, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(fetchMessage.rejected, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.fulfilled, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.rejected, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.fulfilled, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.rejected, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n  },\r\n});\r\n\r\n// ----- Slice actions -----\r\nexport const {\r\n  // ----- User authentification -----\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n\r\n  // ----- Plants -----\r\n  setIsCreatingPlant,\r\n  setIsFetchingPlants,\r\n  setIsFetchingPlant,\r\n  setIsUpdatingPlant,\r\n  setIsDeletingPlant,\r\n  addPlant,\r\n  setPlants,\r\n  setFilteredPlants,\r\n  setPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n\r\n  // ----- Images -----\r\n  setIsUploadingPlantImage,\r\n  setIsDeletingPlantImage,\r\n  setDestroyImageData,\r\n\r\n  // ----- Payment -----\r\n  setClientSecret,\r\n\r\n  // ----- Messages -----\r\n  setIsCreatingMessage,\r\n  setIsFetchingMessages,\r\n  setIsFetchingMessage,\r\n  setIsUpdatingMessage,\r\n  setIsDeletingMessage,\r\n  addMessage,\r\n  setMessages,\r\n  setMessage,\r\n  setMessageChanges,\r\n  removeMessage,\r\n\r\n  // ----- Requests/Replies check -----\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  decreaseAmountOfRequests,\r\n  decreaseAmountOfReplies,\r\n\r\n  // ----- Interval counter -----\r\n  setIntervalId,\r\n  setDelayCounter,\r\n  increaseDelayCounter,\r\n\r\n  // ----- Pages handling -----\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n\r\n  // ----- Error handling -----\r\n  setErrorMessage,\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import { setDelayCounter, setIntervalId } from \"../reducer/jungleSwapSlice\";\r\n\r\nexport class IntervalCounter {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n  stop = (intervalId: NodeJS.Timeout): void => {\r\n    clearInterval(intervalId);\r\n    this.dispatch(setIntervalId(null));\r\n    this.dispatch(setDelayCounter(0));\r\n  };\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NavLoggedInUserItems = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const { t } = useTranslation();\r\n\r\n  const loggedInUserTitle = () => {\r\n    return loggedInUser ? loggedInUser.username : \"\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/plants/my-own\" className=\"p-2\">\r\n        {t(\"link.myPlants\")}\r\n      </Link>\r\n      <Link to=\"/plants/create\" className=\"p-2\">\r\n        {t(\"link.createPlant\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/requests/fetch-all\"\r\n        title={isNewRequest ? \"new request\" : \"\"}\r\n        className=\"p-2\"\r\n      >\r\n        {isNewRequest && <FontAwesomeIcon icon={faBell} />}\r\n        {t(\"link.requests\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/replies/fetch-all\"\r\n        title={isNewReply ? \"new reply\" : \"\"}\r\n        className=\"p-2\"\r\n      >\r\n        {isNewReply && <FontAwesomeIcon icon={faBell} />}\r\n        {t(\"link.replies\")}\r\n      </Link>\r\n      <Link to=\"/auth/log-out\" title={loggedInUserTitle()} className=\"p-2\">\r\n        {t(\"link.logOut\")}\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavLoggedInUserItems;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst NavAuthentificationItems = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/auth/sign-in\" className=\"p-2\">\r\n        {t(\"link.signIn\")}\r\n      </Link>\r\n      <Link to=\"/auth/sign-up\" className=\"p-2\">\r\n        {t(\"link.signUp\")}\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavAuthentificationItems;\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  setIsUserChange,\r\n  setIntervalId,\r\n  increaseDelayCounter,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  scrollToPlants,\r\n  setMessages,\r\n  setIsFetchingMessages,\r\n  fetchAllMessages,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { IntervalCounter } from \"../lib/IntervalCounter\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell, faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport NavLoggedInUserItems from \"./NavLoggedInUserItems\";\r\nimport NavAuthentificationItems from \"./NavAuthentificationItems\";\r\n\r\nconst NavBar = (): JSX.Element => {\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const delayCounter = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.delayCounter\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalId) {\r\n        const intervalCounter = new IntervalCounter(dispatch);\r\n        intervalCounter.stop(intervalId);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchMessagesAndStartRequestsRepliesCheck = (): void => {\r\n      const setMessageVariablesAndStartInterval = (\r\n        messages: Message[]\r\n      ): void => {\r\n        const setMessageVariables = (messages: Message[]): void => {\r\n          dispatch(setMessages(messages));\r\n          dispatch(setStartAmountOfRequests());\r\n          dispatch(setStartAmountOfReplies());\r\n          dispatch(setIsUserChange(false));\r\n        };\r\n\r\n        const startInterval = (): void => {\r\n          const intervalId = setInterval(\r\n            () => {\r\n              dispatch(increaseDelayCounter());\r\n            },\r\n            1000 // every second\r\n          );\r\n          dispatch(setIntervalId(intervalId));\r\n          dispatch(increaseDelayCounter());\r\n        };\r\n\r\n        setMessageVariables(messages);\r\n        startInterval();\r\n      };\r\n\r\n      dispatch(setIsFetchingMessages(true));\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages: Message[]) => {\r\n          setMessageVariablesAndStartInterval(messages);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    isUserChange && fetchMessagesAndStartRequestsRepliesCheck();\r\n  }, [isUserChange]);\r\n\r\n  useEffect(() => {\r\n    const fetchMessagesAndCheckNewRequestsReplies = (): void => {\r\n      const setMessagesVariableAndCheckNewRequestsReplies = (\r\n        messages: Message[]\r\n      ): void => {\r\n        const checkNewRequests = (messages: Message[]): void => {\r\n          const calculateAmountOfRequests = (messages: Message[]): number => {\r\n            const currentAmountOfRequests = messages.filter(\r\n              (message: Message): boolean => {\r\n                const { seller, messageState } = message;\r\n                return (\r\n                  (seller as User)._id === (loggedInUser as User)._id &&\r\n                  messageState === true\r\n                );\r\n              }\r\n            ).length;\r\n            return currentAmountOfRequests;\r\n          };\r\n\r\n          const checkAmountOfRequests = (\r\n            currentAmountOfRequests: number,\r\n            amountOfRequests: number\r\n          ): void => {\r\n            if (amountOfRequests < currentAmountOfRequests) {\r\n              dispatch(setIsNewRequest(true));\r\n            }\r\n            if (amountOfRequests !== currentAmountOfRequests) {\r\n              dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n            }\r\n          };\r\n\r\n          const currentAmountOfRequests = calculateAmountOfRequests(messages);\r\n          checkAmountOfRequests(currentAmountOfRequests, amountOfRequests);\r\n        };\r\n\r\n        const checkNewReplies = (messages: Message[]): void => {\r\n          const calculateAmountOfReplies = (messages: Message[]): number => {\r\n            const currentAmountOfReplies = messages.filter(\r\n              (message: Message): boolean => {\r\n                const { buyer, reply } = message;\r\n                return (\r\n                  (buyer as User)._id === (loggedInUser as User)._id &&\r\n                  reply !== \"\"\r\n                );\r\n              }\r\n            ).length;\r\n            return currentAmountOfReplies;\r\n          };\r\n\r\n          const checkAmountOfReplies = (\r\n            currentAmountOfReplies: number,\r\n            amountOfReplies: number\r\n          ): void => {\r\n            if (amountOfReplies < currentAmountOfReplies) {\r\n              dispatch(setIsNewReply(true));\r\n            }\r\n            if (amountOfReplies !== currentAmountOfReplies) {\r\n              dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n            }\r\n          };\r\n\r\n          const currentAmountOfReplies = calculateAmountOfReplies(messages);\r\n          checkAmountOfReplies(currentAmountOfReplies, amountOfReplies);\r\n        };\r\n\r\n        dispatch(setMessages(messages));\r\n        checkNewRequests(messages);\r\n        checkNewReplies(messages);\r\n      };\r\n\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages: Message[]) => {\r\n          setMessagesVariableAndCheckNewRequestsReplies(messages);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    if (isUserChange) {\r\n      dispatch(setStartAmountOfRequests());\r\n      dispatch(setStartAmountOfReplies());\r\n    }\r\n    loggedInUser && fetchMessagesAndCheckNewRequestsReplies();\r\n  }, [delayCounter]);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar variant=\"dark\" expand=\"lg\" fixed=\"top\" className=\"pl-5\">\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" onClick={scroll.scrollToTop}>\r\n            {t(\"link.jungleSwap\")}\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\r\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\r\n        </Navbar.Toggle>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Link\r\n              to=\"/\"\r\n              className=\"p-2\"\r\n              onClick={() => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              {t(\"link.allPlants\")}\r\n            </Link>\r\n            {loggedInUser ? (\r\n              <NavLoggedInUserItems />\r\n            ) : (\r\n              <NavAuthentificationItems />\r\n            )}\r\n            <Link\r\n              to=\"/\"\r\n              className=\"p-2\"\r\n              onClick={() => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              <FontAwesomeIcon icon={faSearch} />\r\n            </Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { linkedInPath1, linkedInPath2 } from \"../lib/externalLinkPaths\";\r\n\r\nconst Footer = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n  const currentTime = new Date();\r\n  const year = currentTime.getFullYear();\r\n\r\n  return (\r\n    <div className=\"footer-row\">\r\n      <footer>\r\n        {t(\"footer.copyright\")} {year}{\" \"}\r\n        <Link\r\n          to={{ pathname: linkedInPath1 }}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n        >\r\n          {t(\"footer.appAuthor1\")}\r\n        </Link>\r\n        {\" \"}&amp;{\" \"}\r\n        <Link\r\n          to={{ pathname: linkedInPath2 }}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n        >\r\n          {t(\"footer.appAuthor2\")}\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","// LinkedIn\r\n\r\nexport const linkedInPath1: string = \"https://www.linkedin.com/in/christian-gerbig/\";\r\nexport const linkedInPath2: string = \"https://www.linkedin.com/in/lisa-montebaur/\";\r\n\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import { useTranslation } from \"react-i18next\";\r\nimport plantsImage from \"../images/JungleSwap_Home.png\";\r\nimport plantPotIcon from \"../images/JungleSwap_Icon.png\";\r\n\r\nconst About = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"about centered container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n          <img src={plantsImage} alt=\"plants\" className=\"image\" />\r\n        </div>\r\n        <br />\r\n        <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 noOverflow\">\r\n          <article>\r\n            <header>\r\n              <h4> {t(\"about.headline\")} </h4>\r\n              <h5> {t(\"about.subheadline\")} </h5>\r\n            </header>\r\n            <p>\r\n              {t(\"about.paragraph.line1\")} <br />\r\n              {t(\"about.paragraph.line2\")} <br />\r\n              {t(\"about.paragraph.line3\")} <br />\r\n              {t(\"about.paragraph.line4\")} <br />\r\n              {t(\"about.paragraph.line5\")} <br />\r\n              {t(\"about.paragraph.line6\")}\r\n            </p>\r\n            <img src={plantPotIcon} alt=\"plant pot\" className=\"icon\" />\r\n          </article>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","const WaitSpinner = (): JSX.Element => {\r\n  return (\r\n    <div className=\"d-flex align-items-center justify-content-center\">\r\n      <div role=\"status\" className=\"spinner-border m-3 loadingWaitSpinner\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitSpinner;\r\n","import {\r\n  fetchAllPlants,\r\n  setIsFetchingPlants,\r\n  setPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\nexport class PlantIO {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n  fetchAll = (): void => {\r\n    this.dispatch(setIsFetchingPlants(true));\r\n    this.dispatch(fetchAllPlants())\r\n      .unwrap()\r\n      .then((plants: Plant[]) => {\r\n        this.dispatch(setPlants(plants));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { PlantIO } from \"../lib/plantIO\";\r\nimport {\r\n  fetchQueryPlants,\r\n  setFilteredPlants,\r\n  setIsFetchingPlants,\r\n  setPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\nconst SearchPlant = (): JSX.Element => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [filter, setFilter] = useState(\"\");\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const fetchPlantQueryByName = (query: string): void => {\r\n      if (query) {\r\n        dispatch(setIsFetchingPlants(true));\r\n        dispatch(fetchQueryPlants(query))\r\n          .unwrap()\r\n          .then((plants: Plant[]) => {\r\n            dispatch(setPlants(plants));\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      } else {\r\n        const plantIO = new PlantIO(dispatch);\r\n        plantIO.fetchAll();\r\n      }\r\n    };\r\n\r\n    fetchPlantQueryByName(query);\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    const filterPlantsByLocation = (filter: string, plants: Plant[]): void => {\r\n      const filteredPlants = plants.filter(({ location }: Plant): boolean => {\r\n        return filter === location || filter === \"\";\r\n      });\r\n      dispatch(setFilteredPlants(filteredPlants));\r\n    };\r\n\r\n    filterPlantsByLocation(filter, plants);\r\n  }, [filter]);\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <hr />\r\n      <h4> {t(\"searchPlants.headline\")} </h4>\r\n      <div className=\"d-flex\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder={t(\"searchPlant.namePlaceholder\")}\r\n          value={query}\r\n          className=\"smallWidth form-control\"\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n            setQuery(event.target.value);\r\n          }}\r\n        />\r\n        <select\r\n          name=\"location\"\r\n          className=\"locationFilter form-control ml-4\"\r\n          onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {\r\n            setFilter(event.target.value);\r\n          }}\r\n        >\r\n          <option value=\"\">{t(\"selectLocation.title\")}</option>\r\n          <option value=\"sun\">{t(\"selectLocation.sun\")}</option>\r\n          <option value=\"shade\">{t(\"selectLocation.shade\")}</option>\r\n          <option value=\"sun and shade\">\r\n            {t(\"selectLocation.sunAndShade\")}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPlant;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\ntype PlantThumbnailProps = {\r\n  plant: Plant;\r\n};\r\n\r\nconst PlantThumbnail = ({ plant }: PlantThumbnailProps): JSX.Element => {\r\n  const { _id, name, imageUrl, price } = plant;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"col mb-5\">\r\n      <div className=\"card card-medium-width text-center h-100\">\r\n        <img src={imageUrl} alt={name} className=\"card-img-top mediumPicSize\" />\r\n        <div className=\"card-body mb-5\">\r\n          <h5> {name} </h5>\r\n          <p>\r\n            {price} {t(\"plantThumbnail.currency\")}\r\n          </p>\r\n          <Link\r\n            className=\"btn form-control smallWidth\"\r\n            to={`/plants/fetch/${_id}`}\r\n          >\r\n            {t(\"link.details\")}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantThumbnail;\r\n","import { useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { Plant } from \"../typeDefinitions\";\r\nimport PlantThumbnail from \"./PlantThumbnail\";\r\n\r\nconst PlantsOverview = (): JSX.Element => {\r\n  const filteredPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.filteredPlants\r\n  );\r\n\r\n  return (\r\n    <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n      {filteredPlants.map((plant: Plant, index: number): JSX.Element => {\r\n        return <PlantThumbnail plant={plant} key={index} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsOverview;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport WaitSpinner from \"./WaitSpinner\";\r\nimport SearchPlant from \"./SearchPlant\";\r\nimport PlantsOverview from \"./PlantsOverview\";\r\n\r\nconst AllPlants = (): JSX.Element => {\r\n  const isFetchingPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlants\r\n  );\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-3\">\r\n        <h2> {t(\"allPlants.headline\")} </h2>\r\n      </div>\r\n      <SearchPlant />\r\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsOverview />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllPlants;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport { scrollToAbout } from \"../reducer/jungleSwapSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst Title = (): JSX.Element => {\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"row my-5\">\r\n      <div className=\"col-6 offset-3 my-5 borderAround\">\r\n        <h2 className=\"title mb-2\">{t(\"title.headline\")}</h2>\r\n        <h5 className=\"mt-3 mb-5\">{t(\"title.subheadline\")}</h5>\r\n        <div className=\"mb-5\">\r\n          <Link\r\n            to={\"/\"}\r\n            className=\"biggerFontSize\"\r\n            onClick={() => {\r\n              dispatch(scrollToAbout());\r\n            }}\r\n          >\r\n            {t(\"link.tryIt\")}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  setFilteredPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport About from \"../components/About\";\r\nimport AllPlants from \"../components/AllPlants\";\r\nimport Title from \"../components/Title\";\r\nimport { RootState } from \"../store\";\r\nimport { PlantIO } from \"../lib/plantIO\";\r\n\r\nconst Home = (): JSX.Element => {\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n  const elementRef = useRef<HTMLElement[]>([]);\r\n\r\n  useEffect(() => {\r\n    const elementHeight = (elementRef: HTMLElement): number => {\r\n      return Math.round(elementRef.getBoundingClientRect().height);\r\n    };\r\n\r\n    const plantIO = new PlantIO(dispatch);\r\n    plantIO.fetchAll();\r\n    const titleSectionHeight = elementHeight(elementRef.current[0]);\r\n    dispatch(setTitleSectionHeight(titleSectionHeight));\r\n    const aboutSectionHeight = elementHeight(elementRef.current[1]);\r\n    dispatch(setAboutSectionHeight(aboutSectionHeight));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(setFilteredPlants(plants));\r\n  }, [plants]);\r\n\r\n  return (\r\n    <div>\r\n      <section\r\n        ref={(titleSection) => {\r\n          (elementRef.current[0] as HTMLElement | null) = titleSection;\r\n        }}\r\n        className=\"text-center pt-5 pb-5 headerImg\"\r\n      >\r\n        <Title />\r\n      </section>\r\n\r\n      <section\r\n        ref={(aboutSection) => {\r\n          (elementRef.current[1] as HTMLElement | null) = aboutSection;\r\n        }}\r\n      >\r\n        <About />\r\n      </section>\r\n\r\n      <section>\r\n        <AllPlants />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n  signUp,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { User } from \"../typeDefinitions\";\r\n\r\nconst SignUp = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignUp = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    const setUserVariablesAndReturnToHomePage = (user: User): void => {\r\n      dispatch(setLoggedInUser(user));\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    };\r\n\r\n    event.preventDefault();\r\n    const { username, email, password } = event.target as any;\r\n    const newUser: User = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    dispatch(signUp(newUser))\r\n      .unwrap()\r\n      .then((user) => {\r\n        setUserVariablesAndReturnToHomePage(user);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> {t(\"signUp.headline\")} </h2>\r\n        <form\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleSignUp(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\"> {t(\"signUp.username\")} </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n              placeholder={t(\"signUp.enterPlaceholder\")}\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> {t(\"signUp.email\")} </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder={t(\"signUp.enterPlaceholder\")}\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> {t(\"signUp.password\")} </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder={t(\"signUp.enterPlaceholder\")}\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n          {errorMessage && (\r\n            <span className=\"warningColor\">{errorMessage}</span>\r\n          )}\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n          >\r\n            {t(\"button.signUp\")}\r\n          </button>\r\n          <p className=\"padding\"> {t(\"signUp.alreadyAccountCreated\")} </p>\r\n          <div className=\"text-right\">\r\n            <Link to={\"/auth/sign-in\"}>\r\n              <button className=\"btn btn-sm ml-4 smallWidth form-control mt-0 mb-2\">\r\n                {t(\"button.signIn\")}\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n  signIn,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst SignIn = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignIn = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    const setUserVariablesAndReturnToHomePage = (user: User): void => {\r\n      dispatch(setLoggedInUser(user));\r\n      dispatch(setIsUserChange(true));\r\n      const { amountOfRequests, amountOfReplies } = user;\r\n      dispatch(setAmountOfRequests(amountOfRequests as number));\r\n      dispatch(setAmountOfReplies(amountOfReplies as number));\r\n      history.push(\"/\");\r\n    };\r\n\r\n    event.preventDefault();\r\n    const { email, password } = event.target as any;\r\n    const user: User = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    dispatch(signIn(user))\r\n      .unwrap()\r\n      .then((user) => {\r\n        setUserVariablesAndReturnToHomePage(user);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> {t(\"signIn.headline\")} </h2>\r\n        <form\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleSignIn(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> {t(\"signIn.email\")} </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder={t(\"signIn.enterPlaceholder\")}\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> {t(\"signIn.password\")} </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder={t(\"signIn.enterPlaceholder\")}\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n          {errorMessage && (\r\n            <span className=\"warningColor\">{errorMessage}</span>\r\n          )}\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n          >\r\n            {t(\"button.signIn\")}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setLoggedInUser,\r\n  logOut,\r\n  setIsNewRequest,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { IntervalCounter } from \"../lib/IntervalCounter\";\r\n\r\nconst LogOut = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const logOutUser = (\r\n      loggedInUser: User,\r\n      intervalId: NodeJS.Timeout\r\n    ): void => {\r\n      const updateUserRequestsReplies = (loggedInUser: User): User => {\r\n        const clonedUser: User = JSON.parse(JSON.stringify(loggedInUser));\r\n        clonedUser.amountOfRequests = amountOfRequests;\r\n        clonedUser.amountOfReplies = amountOfReplies;\r\n        dispatch(setLoggedInUser(clonedUser));\r\n        return clonedUser;\r\n      };\r\n\r\n      const updateUserData = (loggedInUser: User): void => {\r\n        const resetRequestReplyVariablesAndReturnToHomePage = (\r\n          intervalId: NodeJS.Timeout\r\n        ): void => {\r\n          const resetRequestReplyVariables = (): void => {\r\n            dispatch(setIsNewRequest(false));\r\n            dispatch(setAmountOfRequests(0));\r\n            dispatch(setAmountOfReplies(0));\r\n          };\r\n\r\n          const returnToHomePage = (): void => {\r\n            history.push(\"/\");\r\n            scroll.scrollToTop();\r\n          };\r\n\r\n          dispatch(setLoggedInUser(null));\r\n          const intervalCounter = new IntervalCounter(dispatch);\r\n          intervalCounter.stop(intervalId);\r\n          resetRequestReplyVariables();\r\n          returnToHomePage();\r\n        };\r\n\r\n        dispatch(logOut(loggedInUser))\r\n          .unwrap()\r\n          .then(() => {\r\n            resetRequestReplyVariablesAndReturnToHomePage(intervalId);\r\n          });\r\n      };\r\n\r\n      const updatedUser = updateUserRequestsReplies(loggedInUser);\r\n      updateUserData(updatedUser);\r\n    };\r\n\r\n    logOutUser(loggedInUser as User, intervalId as NodeJS.Timeout);\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import { checkUserLoggedIn, setLoggedInUser } from \"../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\n\r\nexport class Routing {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n  protect = (): void => {\r\n    this.dispatch(checkUserLoggedIn())\r\n      .unwrap()\r\n      .then((user: User) => {\r\n        this.dispatch(setLoggedInUser(user));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  addPlant,\r\n  createPlant,\r\n  setErrorMessage,\r\n  uploadPlantImage,\r\n  setIsUploadingPlantImage,\r\n  setIsCreatingPlant,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant, UploadImageData } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\n\r\nconst CreatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingPlantImage\r\n  );\r\n  const isCreatingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isCreatingPlant\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      dispatch(setErrorMessage(null));\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handleCreatePlant = (\r\n    { name, description, size, location, price }: any,\r\n    { imageUrl, imagePublicId }: UploadImageData\r\n  ): void => {\r\n    const addPlantAndReturnToHomePage = (plant: Plant): void => {\r\n      dispatch(addPlant(plant));\r\n      history.push(\"/\");\r\n      scroll.scrollToBottom();\r\n    };\r\n\r\n    const newPlant: Plant = {\r\n      name: name.value,\r\n      description: description.value,\r\n      size: size.value,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location: location.value,\r\n      price: price.value,\r\n    };\r\n    dispatch(setIsCreatingPlant(true));\r\n    dispatch(createPlant(newPlant))\r\n      .unwrap()\r\n      .then((plant: Plant) => {\r\n        addPlantAndReturnToHomePage(plant);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  const handleUploadPlantImage = (\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ): void => {\r\n    event.preventDefault();\r\n    const { plantImage } = event.target as any;\r\n    const image = plantImage.files[0];\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    dispatch(setIsUploadingPlantImage(true));\r\n    dispatch(uploadPlantImage(uploadForm))\r\n      .unwrap()\r\n      .then(({ imageUrl, imagePublicId }: UploadImageData) => {\r\n        handleCreatePlant(event.target, { imageUrl, imagePublicId });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mb-5 text-left\"> Create a plant </h2>\r\n        <form\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\r\n            handleUploadPlantImage(event);\r\n          }}\r\n        >\r\n          <label htmlFor=\"enterName\"> {t(\"createPlantForm.name\")} </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterName\"\r\n            name=\"name\"\r\n            placeholder={t(\"createPlantForm.enterPlaceholder\")}\r\n            className=\"mb-4 form-control\"\r\n          />\r\n          <label htmlFor=\"enterDescription\"> {t(\"createPlantForm.description\")} </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterDescription\"\r\n            name=\"description\"\r\n            placeholder={t(\"createPlantForm.enterPlaceholder\")}\r\n            className=\"mb-4 form-control\"\r\n          />\r\n          <label htmlFor=\"enterSize\"> {t(\"createPlantForm.size\")} </label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterSize\"\r\n            name=\"size\"\r\n            placeholder={t(\"createPlantForm.enterPlaceholder\")}\r\n            min=\"1\"\r\n            className=\"mb-4 form-control\"\r\n          />\r\n          <label htmlFor=\"enterLocation\"> {t(\"createPlantForm.location\")} </label>\r\n          <select\r\n            id=\"enterLocation\"\r\n            name=\"location\"\r\n            className=\"mb-4 form-control p-2\"\r\n          >\r\n            <option> {t(\"selectLocation.title\")} </option>\r\n            <option value=\"sun\"> {t(\"selectLocation.sun\")} </option>\r\n            <option value=\"shade\"> {t(\"selectLocation.shade\")} </option>\r\n            <option value=\"sun and shade\"> {t(\"selectLocation.sunAndShade\")} </option>\r\n          </select>\r\n          <label htmlFor=\"enterPrice\"> {t(\"createPlantForm.price\")} </label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterPrice\"\r\n            name=\"price\"\r\n            placeholder={t(\"createPlantForm.enterPlaceholder\")}\r\n            min=\"1\"\r\n            className=\"mb-4 form-control\"\r\n          />\r\n          <label htmlFor=\"enterImage\"> {t(\"createPlantForm.image\")} </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"enterImage\"\r\n            name=\"plantImage\"\r\n            className=\"mb-4 form-control\"\r\n          />\r\n          {errorMessage && <span className=\"warningColor\">{errorMessage}</span>}\r\n          <div className=\"col-12 text-right pr-0\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isUploadingPlantImage || isCreatingPlant ? true : false}\r\n              className=\"btn btn-sm form-control smallWidth ml-4 mb-2\"\r\n            >\r\n              {t(\"button.create\")}\r\n            </button>\r\n            <button\r\n              className=\"btn btn-sm form-control smallWidth ml-4 mb-2\"\r\n              onClick={() => {\r\n                history.goBack();\r\n              }}\r\n            >\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePlantForm;\r\n","import {\r\n  deletePlantImage,\r\n  setIsDeletingPlantImage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { DestroyImageData } from \"../typeDefinitions\";\r\n\r\nexport class PlantImageIO {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n  delete = (destroyImageData: DestroyImageData): void => {\r\n    this.dispatch(setIsDeletingPlantImage(true));\r\n    this.dispatch(deletePlantImage(destroyImageData))\r\n      .unwrap()\r\n      .then(() => {\r\n        return;\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport WaitSpinner from \"../components/WaitSpinner\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsFetchingPlant,\r\n  fetchPlant,\r\n  setPlant,\r\n  setIsDeletingPlant,\r\n  deletePlant,\r\n  removePlant,\r\n  setIsDeletingMessage,\r\n  deleteMessage,\r\n  removeMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, PlantId, Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { PlantImageIO } from \"../lib/plantImageIO\";\r\n\r\nconst PlantDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isFetchingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlant\r\n  );\r\n  const isDeletingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlant\r\n  );\r\n  const isDeletingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlantImage\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const isDeletingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingMessage\r\n  );\r\n  const { plantId } = useParams<{ plantId: PlantId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const fetchPlantData = (plantId: PlantId): void => {\r\n      const setPlantAndScrollToTop = (plant: Plant): void => {\r\n        dispatch(setPlant(plant));\r\n        scroll.scrollToTop();\r\n      };\r\n\r\n      dispatch(setIsFetchingPlant(true));\r\n      dispatch(fetchPlant(plantId))\r\n        .unwrap()\r\n        .then((plant: Plant) => {\r\n          setPlantAndScrollToTop(plant);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    loggedInUser && fetchPlantData(plantId);\r\n  }, []);\r\n\r\n  const handleDeleteRemainingMessages = (\r\n    messages: Message[],\r\n    plantId: PlantId\r\n  ): void => {\r\n    messages.forEach((message: Message): void => {\r\n      const { _id, plant } = message;\r\n      if ((plant as Plant)._id === plantId) {\r\n        dispatch(setIsDeletingMessage(true));\r\n        dispatch(deleteMessage(_id as PlantId))\r\n          .unwrap()\r\n          .then(() => {\r\n            dispatch(removeMessage(_id as PlantId));\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            console.log(rejectedValue.message);\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleDeletePlant = (plantId: PlantId): void => {\r\n    const removePlantAndReturnToPlantsSection = (plantId: PlantId): void => {\r\n      dispatch(removePlant(plantId));\r\n      history.goBack();\r\n    };\r\n\r\n    dispatch(setIsDeletingPlant(true));\r\n    dispatch(deletePlant(plantId))\r\n      .unwrap()\r\n      .then(() => {\r\n        removePlantAndReturnToPlantsSection(plantId);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/sign-up\"} />;\r\n  }\r\n  const {\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n    creator,\r\n  } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2> {t(\"plantDetails.headline\")} </h2>\r\n      </div>\r\n      {isFetchingPlant || !creator ? (\r\n        <WaitSpinner />\r\n      ) : (\r\n        <div className=\"col\">\r\n          <div className=\"card cardMediumWidth\">\r\n            <img\r\n              src={imageUrl}\r\n              alt={name}\r\n              className=\"card-img-top mediumPicSize\"\r\n            />\r\n            <div className=\"ml-2 mt-2\">\r\n              <span>{t(\"plantDetails.name\")}</span>{name}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span>{t(\"plantDetails.description\")}</span>{description}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span>{t(\"plantDetails.size\")}</span>{size}{\" \"}\r\n              {t(\"plantDetails.sizeUnit\")}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span>{t(\"plantDetails.likes\")}</span>{location}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span>{t(\"plantDetails.price\")}</span>{price}{\" \"}\r\n              {t(\"plantDetails.currency\")}\r\n            </div>\r\n            <div className=\"ml-2 mt-2 col justify-content-center\">\r\n              <div className=\"row-2 justify-content-center\">\r\n                <div className=\"card-body text-right pt-0\">\r\n                  {loggedInUser._id === (creator as User)._id ? (\r\n                    <div className=\"p-0\">\r\n                      <Link to={\"/plants/update\"}>\r\n                        <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                          {t(\"button.update\")}\r\n                        </button>\r\n                      </Link>\r\n                      <button\r\n                        disabled={\r\n                          isDeletingMessage ||\r\n                          isDeletingPlantImage ||\r\n                          isDeletingPlant\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        className=\"btn btn-sm ml-2 form-control smallWidth mb-2\"\r\n                        onClick={() => {\r\n                          handleDeleteRemainingMessages(\r\n                            messages,\r\n                            _id as PlantId\r\n                          );\r\n                          const handlePlantImageIO = new PlantImageIO(dispatch);\r\n                          handlePlantImageIO.delete({ imagePublicId });\r\n                          handleDeletePlant(_id as PlantId);\r\n                        }}\r\n                      >\r\n                        {t(\"button.delete\")}\r\n                      </button>\r\n                    </div>\r\n                  ) : (\r\n                    <div>\r\n                      <Link to=\"/plants/checkout\">\r\n                        <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                          {t(\"button.buy\")}\r\n                        </button>\r\n                      </Link>\r\n                      <Link to=\"/messages/create\">\r\n                        <button className=\"btn btn-sm ml-2 form-control smallWidth mb-2\">\r\n                          {t(\"button.swap\")}\r\n                        </button>\r\n                      </Link>\r\n                    </div>\r\n                  )}\r\n                  <button\r\n                    className=\"btn btn-sm ml-2 form-control smallWidth mb-3\"\r\n                    onClick={() => {\r\n                      history.goBack();\r\n                    }}\r\n                  >\r\n                    {t(\"button.goBack\")}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setPlant,\r\n  setIsUpdatingPlant,\r\n  updatePlant,\r\n  setPlantChanges,\r\n  setIsUploadingPlantImage,\r\n  uploadPlantImage,\r\n  setDestroyImageData,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant, PlantId, UploadImageData } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { PlantImageIO } from \"../lib/plantImageIO\";\r\nimport WaitSpinner from \"../components/WaitSpinner\";\r\n\r\nconst UpdatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingPlantImage\r\n  );\r\n  const isDeletingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlantImage\r\n  );\r\n  const destroyImageData = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.destroyImageData\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isUpdatingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUpdatingPlant\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const selectElementRef = useRef<HTMLSelectElement | null>(null);\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const setPlantLocation = ({ location }: Plant): void => {\r\n      if (location) {\r\n        (selectElementRef.current as HTMLSelectElement).value = location;\r\n      }\r\n    };\r\n\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      setPlantLocation(plant);\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handlePlantEntryChange = (\r\n    { target }: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\r\n    plant: Plant\r\n  ): void => {\r\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\r\n    switch (target.name) {\r\n      case \"name\":\r\n        clonedPlant.name = target.value;\r\n        break;\r\n      case \"description\":\r\n        clonedPlant.description = target.value;\r\n        break;\r\n      case \"size\":\r\n        clonedPlant.size = target.value as unknown as number;\r\n        break;\r\n      case \"location\":\r\n        clonedPlant.location = target.value;\r\n        break;\r\n      case \"price\":\r\n        clonedPlant.price = target.value as unknown as number;\r\n    }\r\n    dispatch(setPlant(clonedPlant));\r\n  };\r\n\r\n  const handlePlantImageChange = (\r\n    { target }: React.ChangeEvent<HTMLInputElement>,\r\n    plant: Plant\r\n  ): void => {\r\n    const setImageDataForPlant = (\r\n      plant: Plant,\r\n      { imageUrl, imagePublicId }: UploadImageData\r\n    ) => {\r\n      const clonedPlant = JSON.parse(JSON.stringify(plant));\r\n      clonedPlant.imagePublicId = imagePublicId;\r\n      clonedPlant.imageUrl = imageUrl;\r\n      dispatch(setPlant(clonedPlant));\r\n    };\r\n\r\n    const image = (target.files as any)[0];\r\n    const { imagePublicId } = plant as Plant;\r\n    dispatch(setDestroyImageData({ imagePublicId }));\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    dispatch(setIsUploadingPlantImage(true));\r\n    dispatch(uploadPlantImage(uploadForm))\r\n      .unwrap()\r\n      .then(({ imageUrl, imagePublicId }: UploadImageData) => {\r\n        setImageDataForPlant(plant, { imageUrl, imagePublicId });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  const handleUpdatePlant = ({\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n  }: Plant): void => {\r\n    const setPlantChangesAndReturnToPlantsSection = (\r\n      updatedPlant: Plant\r\n    ): void => {\r\n      dispatch(setPlantChanges(updatedPlant));\r\n      history.goBack();\r\n    };\r\n\r\n    const updatedPlant: Plant = {\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    };\r\n    dispatch(setIsUpdatingPlant(true));\r\n    dispatch(updatePlant({ plantId: _id as PlantId, updatedPlant }))\r\n      .unwrap()\r\n      .then((updatedPlant) => {\r\n        setPlantChangesAndReturnToPlantsSection(updatedPlant);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n  const { name, description, size, imageUrl, price } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mt-5 mb-4 text-left\">\r\n          {t(\"updatePlantForm.headline\")}\r\n        </h2>\r\n        <div className=\"card cardMediumWidth mb-5\">\r\n          {isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant ? (\r\n            <WaitSpinner />\r\n          ) : (\r\n            <img src={imageUrl} alt={name} className=\"mb-2 smallPicSize\" />\r\n          )}\r\n          <div className=\"card-body\">\r\n            <label htmlFor=\"updateName\"> {t(\"updatePlantForm.name\")} </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateName\"\r\n              name=\"name\"\r\n              value={name}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateDescription\">\r\n              {t(\"updatePlantForm.description\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateDescription\"\r\n              name=\"description\"\r\n              value={description}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateSize\"> {t(\"updatePlantForm.size\")} </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updateSize\"\r\n              name=\"size\"\r\n              value={size}\r\n              min=\"1\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateLocation\">\r\n              {t(\"updatePlantForm.location\")}\r\n            </label>\r\n            <select\r\n              ref={selectElementRef}\r\n              id=\"updateLocation\"\r\n              name=\"location\"\r\n              className=\"mb-4 form-control px-2\"\r\n              onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            >\r\n              <option value=\"sun\"> {t(\"selectLocation.sun\")} </option>\r\n              <option value=\"shade\"> {t(\"selectLocation.shade\")} </option>\r\n              <option value=\"sun and shade\">\r\n                {t(\"selectLocation.sunAndShade\")}\r\n              </option>\r\n            </select>\r\n            <label htmlFor=\"updatePrice\"> {t(\"updatedPlantForm.price\")} </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updatePrice\"\r\n              name=\"price\"\r\n              value={price}\r\n              min=\"1\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateImage\"> {t(\"updatedPlantForm.image\")} </label>\r\n            <input\r\n              type=\"file\"\r\n              id=\"updateImage\"\r\n              name=\"plantImage\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                handlePlantImageChange(event, plant);\r\n              }}\r\n            />\r\n            <div className=\"col-12 text-right pr-0\">\r\n              <button\r\n                disabled={\r\n                  isUploadingPlantImage ||\r\n                  isDeletingPlantImage ||\r\n                  isUpdatingPlant\r\n                    ? true\r\n                    : false\r\n                }\r\n                className=\"btn btn-sm ml-4 form-control smallWidth mb-2\"\r\n                onClick={() => {\r\n                  if (destroyImageData) {\r\n                    const handlePlantImageIO = new PlantImageIO(dispatch);\r\n                    handlePlantImageIO.delete(destroyImageData);\r\n                  }\r\n                  handleUpdatePlant(plant);\r\n                }}\r\n              >\r\n                {t(\"button.save\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdatePlantForm;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport {\r\n  setClientSecret,\r\n  createPayment,\r\n  scrollToPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Stripe } from \"@stripe/stripe-js\";\r\n\r\ninterface CardStyle {\r\n  style: {\r\n    base: {\r\n      color: string;\r\n      fontFamily: string;\r\n      fontSmoothing: string;\r\n      fontSize: string;\r\n      \"::placeholder\": { color: string };\r\n    };\r\n    invalid: {\r\n      color: string;\r\n      iconColor: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst CheckoutForm = (): JSX.Element => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(\"\");\r\n  const clientSecret = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.clientSecret\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const { t } = useTranslation();\r\n\r\n  const cardStyle: CardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initializePayment = (plant: Plant): void => {\r\n      dispatch(createPayment(plant))\r\n        .unwrap()\r\n        .then((payment: any) => {\r\n          dispatch(setClientSecret(payment.clientSecret));\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    initializePayment(plant);\r\n\r\n    return () => {\r\n      const returnToPlantsSection = (): void => {\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      };\r\n\r\n      returnToPlantsSection();\r\n    };\r\n  }, []);\r\n\r\n  const handleCardElementInputChanges = async (event: any): Promise<void> => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    // Stripe.js has not yet loaded\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n    setIsProcessing(true);\r\n    const payload = await (stripe as Stripe).confirmCardPayment(clientSecret, {\r\n      payment_method: { card: elements.getElement(CardElement) } as any,\r\n    });\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    } else {\r\n      setPaymentError(\"\");\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n  const { _id, name, price } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container col-9\">\r\n      <form\r\n        id=\"payment-form\"\r\n        className=\"checkoutForm mt-5\"\r\n        onSubmit={handleSubmitPayment}\r\n      >\r\n        <h2 className=\"text-left mb-2 p-2\">{name}</h2>\r\n        <h3 className=\"text-left mb-4 p-2\">\r\n          {t(\"checkForm.price\")} {price} {t(\"checkForm.currency\")}\r\n        </h3>\r\n        <CardElement\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          className=\"p-2\"\r\n          onChange={handleCardElementInputChanges}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            type=\"submit\"\r\n            id=\"submit\"\r\n            disabled={isProcessing || isDisabled || isSucceeded}\r\n            className=\"btn btn-sm mt-5 mb-4\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isProcessing ? (\r\n                <div id=\"spinner\" className=\"spinner\" />\r\n              ) : (\r\n                \"Pay now\"\r\n              )}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {/* Show any error that happens when processing the payment */}\r\n        {paymentError && (\r\n          <div role=\"alert\" className=\"card-error\">\r\n            {paymentError}\r\n          </div>\r\n        )}\r\n        {/* Show success message upon completion */}\r\n        <p\r\n          className={\r\n            isSucceeded\r\n              ? \"result-message text-center\"\r\n              : \"result-message hidden text-center\"\r\n          }\r\n        >\r\n          {t(\"checkoutForm.paymentSccessful\")}\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {isSucceeded ? (\r\n          <Link\r\n            to={\"/\"}\r\n            onClick={() => {\r\n              dispatch(scrollToPlants());\r\n            }}\r\n          >\r\n            <button className=\"btn btn-sm form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        ) : (\r\n          <Link to={`/plants/fetch/${_id}`}>\r\n            <button className=\"btn btn-sm form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"../components/CheckoutForm\";\r\n\r\nconst stripePromise = loadStripe(\r\n  \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n);\r\n\r\nconst CheckoutPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    loggedInUser && scroll.scrollToTop();\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5 App\">\r\n        <Elements stripe={stripePromise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutPage;\r\n","import {\r\n  fetchAllMessages,\r\n  fetchMessage,\r\n  setIsFetchingMessage,\r\n  setIsFetchingMessages,\r\n  setMessage,\r\n  setMessages,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Message, MessageId } from \"../typeDefinitions\";\r\n\r\nexport class MessageIO {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n  fetch = (messageId: MessageId): void => {\r\n    this.dispatch(setIsFetchingMessage(true));\r\n    this.dispatch(fetchMessage(messageId))\r\n      .unwrap()\r\n      .then((message: Message) => {\r\n        this.dispatch(setMessage(message));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  fetchAll = (): void => {\r\n    this.dispatch(setIsFetchingMessages(true));\r\n    this.dispatch(fetchAllMessages())\r\n      .unwrap()\r\n      .then((messages: Message[]) => {\r\n        this.dispatch(setMessages(messages));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { User, Message, Plant } from \"../typeDefinitions\";\r\n\r\ntype RequestThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst RequestThumbnail = ({ message }: RequestThumbnailProps): JSX.Element => {\r\n  const { _id, buyer, plant } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"card p-3 mt-4\">\r\n      <h4>\r\n        {t(\"requestTile.subheadline\")} {name}\r\n      </h4>\r\n      <h5> {username} </h5>\r\n      <div className=\"text-center\">\r\n        <Link\r\n          className=\"btn smallWidth form-control\"\r\n          to={`/requests/fetch/${_id}`}\r\n        >\r\n          {t(\"link.details\")}\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestThumbnail;\r\n","import { useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { Message, User } from \"../typeDefinitions\";\r\nimport RequestTile from \"./RequestTile\";\r\n\r\nconst RequestsOverview = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((message: Message, index: number): JSX.Element => {\r\n        const { seller, messageState } = message;\r\n        return (seller as User)._id === (loggedInUser as User)._id &&\r\n          messageState === true ? (\r\n          <RequestTile message={message} key={index} />\r\n        ) : (\r\n          <></>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsOverview;\r\n","import { animateScroll as scroll } from \"react-scroll\";\r\n\r\nexport class MainPageScrolling {\r\n  history: any;\r\n  constructor(history: any) {\r\n    this.history = history;\r\n  }\r\n\r\n  toTop = (): void => {\r\n    this.history.push(\"/\");\r\n    scroll.scrollToTop();\r\n  };\r\n}\r\n","import { useHistory } from \"react-router\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { MainPageScrolling } from \"../lib/MainPageScrolling\";\r\n\r\nconst GoBackButton = () => {\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  const handleGoBack = () => {\r\n    const pageScrolling = new MainPageScrolling(history);\r\n    pageScrolling.toTop();\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-right pr-2\">\r\n      <button\r\n        className=\"btn btn-sm mt-4 smallWidth form-control\"\r\n        onClick={handleGoBack}\r\n      >\r\n        {t(\"button.goBack\")}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoBackButton;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsNewRequest,\r\n  setStartAmountOfRequests,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { MessageIO } from \"../lib/messageIO\";\r\nimport WaitSpinner from \"../components/WaitSpinner\";\r\nimport RequestsOverview from \"../components/RequestsOverview\";\r\nimport GoBackButton from \"../components/GoBackButton\";\r\n\r\nconst RequestsPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const resetRequestVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetchAll();\r\n      isUserChange && dispatch(setStartAmountOfRequests());\r\n      resetRequestVariableAndScrollToTop();\r\n    }\r\n\r\n    return () => {\r\n      resetRequestVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> {t(\"requestsPage.headline\")} </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <GoBackButton />\r\n        {isFetchingMessages ? <WaitSpinner /> : <RequestsOverview />}\r\n        {amountOfRequests !== 0 ? <GoBackButton /> : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsPage;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { User, Plant, Message } from \"../typeDefinitions\";\r\n\r\ntype ReplyThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst ReplyThumbnail = ({ message }: ReplyThumbnailProps): JSX.Element => {\r\n  const { _id, seller, plant } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"card p-3 mt-4 \">\r\n      <h4>\r\n        {t(\"replyTile.headline\")} {name}\r\n      </h4>\r\n      <h5>\r\n        {t(\"replyTile.subheadline\")} {username}\r\n      </h5>\r\n      <div className=\"text-center\">\r\n        <Link\r\n          to={`/replies/fetch/${_id}`}\r\n          className=\"btn smallWidth form-control\"\r\n        >\r\n          {t(\"link.details\")}\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyThumbnail;\r\n","import { useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { Message, User } from \"../typeDefinitions\";\r\nimport ReplyTile from \"./ReplyTile\";\r\n\r\nconst RepliesOverview = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((message: Message, index: number): JSX.Element => {\r\n        const { buyer, reply } = message;\r\n        return (buyer as User)._id === (loggedInUser as User)._id &&\r\n          reply !== \"\" ? (\r\n          <ReplyTile message={message} key={index} />\r\n        ) : (\r\n          <></>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesOverview;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsNewReply,\r\n  setStartAmountOfReplies,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { MessageIO } from \"../lib/messageIO\";\r\nimport WaitSpinner from \"../components/WaitSpinner\";\r\nimport RepliesOverview from \"../components/RepliesOverview\";\r\nimport GoBackButton from \"../components/GoBackButton\";\r\n\r\nconst RepliesPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const resetReplyVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewReply(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetchAll();\r\n      isUserChange && dispatch(setStartAmountOfReplies());\r\n      resetReplyVariableAndScrollToTop();\r\n    }\r\n\r\n    return () => {\r\n      resetReplyVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> {t(\"repliesPage.headline\")} </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\r\n        <GoBackButton />\r\n        {isFetchingMessages ? <WaitSpinner /> : <RepliesOverview />}\r\n        {amountOfReplies !== 0 ? <GoBackButton /> : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesPage;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsCreatingMessage,\r\n  createMessage,\r\n  addMessage,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\n\r\nconst CreateRequestForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isCreatingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isCreatingMessage\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      dispatch(setErrorMessage(null));\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handleCreateMessageForRequest = (\r\n    event: React.FormEvent<HTMLFormElement>,\r\n    plant: Plant\r\n  ): void => {\r\n    const addMessageAndReturnToPlantDetailsPage = (message: Message): void => {\r\n      dispatch(addMessage(message));\r\n      history.goBack();\r\n    };\r\n\r\n    event.preventDefault();\r\n    const { request } = event.target as any;\r\n    const { _id, creator } = plant;\r\n    const newMessage: Message = {\r\n      seller: (creator as User)._id,\r\n      plant: _id,\r\n      request: request.value,\r\n    };\r\n    dispatch(setIsCreatingMessage(true));\r\n    dispatch(createMessage(newMessage))\r\n      .unwrap()\r\n      .then((message) => {\r\n        addMessageAndReturnToPlantDetailsPage(message);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n  const { name } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\"> {t(\"createRequestForm.headline\")} </h2>\r\n        <h3 className=\"mb-4\">\r\n          {t(\"createRequestForm.subheadline\")} {name}\r\n        </h3>\r\n        <form\r\n          className=\"pl-0\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\r\n            handleCreateMessageForRequest(event, plant);\r\n          }}\r\n        >\r\n          <div>\r\n            <textarea\r\n              name=\"request\"\r\n              cols={35}\r\n              rows={7}\r\n              className=\"mb-4 form-control\"\r\n            />\r\n          </div>\r\n          {errorMessage && (\r\n            <span className=\"warningColor\">{errorMessage}</span>\r\n          )}\r\n          <div className=\"text-right\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isCreatingMessage ? true : false}\r\n              className=\"btn btn-sm mx-2 form-control smallWidth\"\r\n            >\r\n              {t(\"button.send\")}\r\n            </button>\r\n            <button\r\n              className=\"btn btn-sm mx-2 form-control smallWidth\"\r\n              onClick={() => {\r\n                history.goBack();\r\n              }}\r\n            >\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRequestForm;\r\n","import WaitSpinner from \"./WaitSpinner\";\r\n\r\ninterface WaitSpinnerTextProps {\r\n  text: string;\r\n}\r\n\r\nconst WaitSpinnerText = ({ text }: WaitSpinnerTextProps): JSX.Element => {\r\n  return (\r\n    <div className=\"container d-flex align-items-center justify-content-center mt-5\">\r\n      <WaitSpinner />\r\n      <span>{text}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitSpinnerText;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setMessage,\r\n  updateMessage,\r\n  setMessageChanges,\r\n  decreaseAmountOfRequests,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { MessageIO } from \"../lib/messageIO\";\r\nimport WaitSpinnerText from \"../components/WaitSpinnerText\";\r\n\r\nconst RequestDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetch(messageId);\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handleChangeMessageState = (message: Message): void => {\r\n    const setBuyerMessageInactive = (message: Message): Message => {\r\n      const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n      clonedMessage.messageState = false;\r\n      dispatch(setMessage(clonedMessage));\r\n      return clonedMessage;\r\n    };\r\n\r\n    const updateBuyerMessage = ({\r\n      _id,\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    }: Message) => {\r\n      const setMessageChangesAndReturnToRequestsPage = (\r\n        message: Message\r\n      ): void => {\r\n        dispatch(setMessageChanges(message));\r\n        dispatch(decreaseAmountOfRequests());\r\n        history.goBack();\r\n      };\r\n\r\n      const updatedMessage: Message = {\r\n        buyer,\r\n        seller,\r\n        plant,\r\n        request,\r\n        reply,\r\n        messageState,\r\n      };\r\n      dispatch(updateMessage({ messageId: _id as MessageId, updatedMessage }))\r\n        .unwrap()\r\n        .then((message) => {\r\n          setMessageChangesAndReturnToRequestsPage(message);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          console.log(rejectedValue.message);\r\n        });\r\n    };\r\n\r\n    const updatedMessage = setBuyerMessageInactive(message);\r\n    updateBuyerMessage(updatedMessage);\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, buyer, plant, request, reply } = message as Message;\r\n  if (isFetchingMessage || !buyer || !plant) {\r\n    return <WaitSpinnerText text={\"Loading request\"} />;\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">\r\n          {t(\"requestDetails.headline\")} {name}\r\n        </h2>\r\n        <h5>\r\n          {t(\"requestDetails.subheadline\")} {username}\r\n        </h5>\r\n        <p className=\"textField p-3 mb-4\"> {request} </p>\r\n        {reply ? (\r\n          <div>\r\n            <h5> {t(\"requestDetails.yourReply\")} </h5>\r\n            <p className=\"textField p-3 mb-4\"> {reply} </p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"text-right px-3\">\r\n          {!reply ? (\r\n            <Link to={`/messages/update/${_id}`}>\r\n              <button className=\"btn btn-sm ml-2 smallWidth form-control mb-1\">\r\n                {t(\"button.reply\")}\r\n              </button>\r\n            </Link>\r\n          ) : null}\r\n          <button\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => {\r\n              handleChangeMessageState(message);\r\n            }}\r\n          >\r\n            {t(\"button.done\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/requests/fetch-all\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsDeletingMessage,\r\n  deleteMessage,\r\n  removeMessage,\r\n  decreaseAmountOfReplies,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { MessageIO } from \"../lib/messageIO\";\r\nimport WaitSpinnerText from \"../components/WaitSpinnerText\";\r\n\r\nconst ReplyDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const isDeletingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingMessage\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetch(messageId);\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handleDeleteMessage = (messageId: MessageId): void => {\r\n    const removeMessageReplyAndReturnToRepliesPage = (\r\n      messageId: MessageId\r\n    ): void => {\r\n      dispatch(removeMessage(messageId));\r\n      dispatch(decreaseAmountOfReplies());\r\n      history.goBack();\r\n    };\r\n\r\n    dispatch(setIsDeletingMessage(true));\r\n    dispatch(deleteMessage(messageId))\r\n      .unwrap()\r\n      .then(() => {\r\n        removeMessageReplyAndReturnToRepliesPage(messageId);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, seller, plant, request, reply } = message as Message;\r\n  if (isFetchingMessage || !seller || !plant) {\r\n    return <WaitSpinnerText text={\"Loading reply\"} />;\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">\r\n          {t(\"replyDetails.headline\")} {name}\r\n        </h2>\r\n        <p className=\"textField p-3 mb-4\"> {request} </p>\r\n        {reply ? (\r\n          <div>\r\n            <h5>\r\n              {t(\"replyDetails.replyBy\")} {username}\r\n            </h5>\r\n            <p className=\"textField p-3 mb-4\"> {reply} </p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"text-right px-3\">\r\n          <button\r\n            disabled={isDeletingMessage ? true : false}\r\n            className=\"btn btn-sm ml-2 smallWidth form-control mb-1\"\r\n            onClick={() => {\r\n              handleDeleteMessage(_id as MessageId);\r\n            }}\r\n          >\r\n            {t(\"button.delete\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link to={\"/replies/fetch-all\"} onClick={scroll.scrollToTop}>\r\n            <button className=\"btn btn-sm mt-4 smallWidth form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyDetails;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setMessage,\r\n  setIsUpdatingMessage,\r\n  updateMessage,\r\n  setMessageChanges,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Message, MessageId } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\n\r\nconst UpdateRequestForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const isUpdatingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUpdatingMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    loggedInUser && scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const handleCreateReply = (\r\n    { target }: React.ChangeEvent<HTMLTextAreaElement>,\r\n    message: Message\r\n  ): void => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.reply = target.value;\r\n    dispatch(setMessage(clonedMessage));\r\n  };\r\n\r\n  const handleUpdateMessage = ({\r\n    _id,\r\n    buyer,\r\n    seller,\r\n    plant,\r\n    request,\r\n    reply,\r\n    messageState,\r\n  }: Message): void => {\r\n    const setMessageChangesAndReturnToRequestPage = (\r\n      message: Message\r\n    ): void => {\r\n      dispatch(setMessageChanges(message));\r\n      history.goBack();\r\n    };\r\n\r\n    const updatedMessage: Message = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    };\r\n    dispatch(setIsUpdatingMessage(true));\r\n    dispatch(updateMessage({ messageId: _id as MessageId, updatedMessage }))\r\n      .unwrap()\r\n      .then((message) => {\r\n        setMessageChangesAndReturnToRequestPage(message);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(rejectedValue.message);\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n  const { request } = message as Message;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> {t(\"updateRequestForm.headline\")} </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <div className=\"card-body\">\r\n            <p> {request} </p>\r\n            <textarea\r\n              name=\"reply\"\r\n              placeholder={t(\"updateRequestForm.replyPlaceholder\")}\r\n              cols={31}\r\n              rows={6}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n                handleCreateReply(event, message);\r\n              }}\r\n            />\r\n            <div className=\"row justify-content-end px-3\">\r\n              <button\r\n                disabled={isUpdatingMessage ? true : false}\r\n                className=\"btn btn-sm smallWidth form-control mr-3 mb-2\"\r\n                onClick={() => {\r\n                  handleUpdateMessage(message);\r\n                }}\r\n              >\r\n                {t(\"button.submit\")}\r\n              </button>\r\n              <button\r\n                className=\"btn btn-sm form-control mb-2\"\r\n                onClick={() => {\r\n                  history.goBack();\r\n                }}\r\n              >\r\n                {t(\"button.goBack\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateRequestForm;\r\n","import { useTranslation } from \"react-i18next\";\r\n\r\nconst Unauthorized = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"unauthorized\">\r\n      <div>\r\n        <h1> {t(\"unauthorized.headline\")} </h1>\r\n        <h2> {t(\"unauthorized.subheadline1\")} </h2>\r\n        <h3> {t(\"unauthorized.subheadline2\")} </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Unauthorized;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h1> {t(\"notFound.headline\")} </h1>\r\n        <h2> {t(\"notFound.subheadline1\")} </h2>\r\n        <h3> {t(\"notFound.subheadline2\")} </h3>\r\n        <Link to={\"/\"}>\r\n          <button className=\"btn btn-sm ml-2 smallWidth form-control\">\r\n            {t(\"link.takeMeHome\")}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useEffect } from \"react\";\r\n\r\ninterface KommunicateSettings {\r\n  appId: string;\r\n  popupWidget: boolean;\r\n  automaticChatOpenOnNavigation: boolean;\r\n}\r\n\r\nconst KommunicateChat = (): JSX.Element => {\r\n  useEffect(() => {\r\n    const createLauncherIcon = (htmlDocument: Document, method: any): void => {\r\n      const kommunicateSettings: KommunicateSettings = {\r\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      const scriptElement = htmlDocument.createElement(\"script\");\r\n      scriptElement.type = \"text/javascript\";\r\n      scriptElement.async = true;\r\n      scriptElement.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      const headElement = htmlDocument.getElementsByTagName(\"head\")[0];\r\n      headElement.appendChild(scriptElement);\r\n      (window as any).kommunicate = method;\r\n      method._globals = kommunicateSettings;\r\n    };\r\n\r\n    createLauncherIcon(document, (window as any).kommunicate || {});\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default KommunicateChat;\r\n","import { useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { Plant, User } from \"../typeDefinitions\";\r\nimport PlantThumbnail from \"./PlantThumbnail\";\r\n\r\nconst MyPlantsOverview = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n\r\n  return (\r\n    <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n      {plants.map((plant: Plant, index: number): JSX.Element => {\r\n        const { creator } = plant;\r\n        return (creator as User)._id === (loggedInUser as User)._id ? (\r\n          <PlantThumbnail plant={plant} key={index} />\r\n        ) : (\r\n          <></>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPlantsOverview;\r\n","import { useEffect } from \"react\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport WaitSpinner from \"../components/WaitSpinner\";\r\nimport MyPlantsOverview from \"../components/MyPlantsOverview\";\r\n\r\nconst MyPlants = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isFetchingPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlants\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    loggedInUser && scroll.scrollToTop();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-5\">\r\n        <h2> {t(\"myPlants.headline\")} </h2>\r\n      </div>\r\n      {isFetchingPlants ? <WaitSpinner /> : <MyPlantsOverview />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPlants;\r\n","import { Route, Switch, withRouter } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./views/Home\";\r\nimport SignUp from \"./views/SignUp\";\r\nimport SignIn from \"./views/SignIn\";\r\nimport LogOut from \"./components/LogOut\";\r\nimport CreatePlantForm from \"./views/CreatePlantForm\";\r\nimport PlantDetails from \"./views/PlantDetails\";\r\nimport UpdatePlantForm from \"./views/UpdatePlantForm\";\r\nimport CheckoutPage from \"./views/CheckoutPage\";\r\nimport RequestsPage from \"./views/RequestsPage\";\r\nimport RepliesPage from \"./views/RepliesPage\";\r\nimport CreateRequestForm from \"./views/CreateRequestForm\";\r\nimport RequestDetails from \"./views/RequestDetails\";\r\nimport ReplyDetails from \"./views/ReplyDetails\";\r\nimport UpdateRequestForm from \"./views/UpdateRequestForm\";\r\nimport Unauthorized from \"./views/Unauthorized\";\r\nimport NotFound from \"./views/NotFound\";\r\nimport KommunicateChat from \"./components/Chat\";\r\nimport MyPlants from \"./views/MyPlants\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <div className=\"main\">\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n\r\n        <Route path=\"/auth/sign-up\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/auth/sign-in\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/auth/log-out\">\r\n          <LogOut />\r\n        </Route>\r\n        <Route path=\"/auth/unauthorized\">\r\n          <Unauthorized />\r\n        </Route>\r\n\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/fetch/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n        <Route path=\"/plants/my-own\">\r\n          <MyPlants />\r\n        </Route>\r\n\r\n        <Route path=\"/messages/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/messages/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch-all\">\r\n          <RequestsPage />\r\n        </Route>\r\n        <Route path=\"/requests/fetch/:messageId\">\r\n          <RequestDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/replies/fetch-all\">\r\n          <RepliesPage />\r\n        </Route>\r\n        <Route path=\"/replies/fetch/:messageId\">\r\n          <ReplyDetails />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"./reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","const en = {\r\n  translations: {\r\n    /* General */\r\n    link: {\r\n      jungleSwap: \"JungleSwap\",\r\n      allPlants: \"All Plants\",\r\n      myPlants: \"My Plants\",\r\n      createPlant: \"Create Plant\",\r\n      requests: \"Requests\",\r\n      replies: \"Replies\",\r\n      logOut: \"Log out\",\r\n      tryIt: \"Try it!\",\r\n      signIn: \"Sign in\",\r\n      signUp: \"Sign up\",\r\n      details: \"Details\",\r\n      takeMeHome: \"Take me home\",\r\n    },\r\n    button: {\r\n      signIn: \"Sign in\",\r\n      signUp: \"Sign up\",\r\n      create: \"Create\",\r\n      update: \"Update\",\r\n      save: \"Save\",\r\n      delete: \"Delete\",\r\n      send: \"Send\",\r\n      submit: \"Submit\",\r\n      buy: \"Buy\",\r\n      swap: \"Swap\",\r\n      reply: \"Reply\",\r\n      done: \"Done\",\r\n      goBack: \"Go back\",\r\n    },\r\n    selectLocation: {\r\n      title: \"Select location\",\r\n      sun: \"sun\",\r\n      shade: \"shade\",\r\n      sunAndShade: \"sun and shade\",\r\n    },\r\n    /* Home */\r\n    title: {\r\n      headline: \"JungleSwap\",\r\n      subheadline: \"Share your green heart\",\r\n    },\r\n    about: {\r\n      headline: \"Welcome to JungleSwap!\",\r\n      subheadline: \"Add green to your Home\",\r\n      paragraph: {\r\n        line1: \"It's easy-peasy.\",\r\n        line2: \"Share your plant offshoots.\",\r\n        line3: \"Make money!\",\r\n        line4: \"Or swap them for another plant.\",\r\n        line5: \"Don't have any baby plants?\",\r\n        line6: \"You can simply shop and give a plant a new home.\",\r\n      },\r\n    },\r\n    allPlants: {\r\n      headline: \"Plants\",\r\n    },\r\n    searchPlants: {\r\n      headline: \"Search a plant\",\r\n      namePlaceholder: \"Enter name\",\r\n    },\r\n    /* Authentification */\r\n    signIn: {\r\n      headline: \"Sign In\",\r\n      email: \"Email address\",\r\n      password: \"Password\",\r\n      enterPlaceholder: \"Enter\",\r\n    },\r\n    signUp: {\r\n      headline: \"Sign Up\",\r\n      username: \"Username\",\r\n      email: \"Email address\",\r\n      password: \"Password\",\r\n      enterPlaceholder: \"Enter\",\r\n      alreadyAccountCreated: \"Already have an account?\",\r\n    },\r\n    /* Plants */\r\n    myPlants: {\r\n      headline: \"My plants\",\r\n    },\r\n    createPlantForm: {\r\n      name: \"Name\",\r\n      description: \"Description\",\r\n      size: \"Size (cm)\",\r\n      location: \"Location\",\r\n      price: \"Price (EUR)\",\r\n      image: \"Image\",\r\n      enterPlaceholder: \"Enter\",\r\n    },\r\n    updatePlantForm: {\r\n      headline: \"Update your plant\",\r\n      name: \"Name\",\r\n      description: \"Description\",\r\n      size: \"Size (cm)\",\r\n      location: \"Location\",\r\n      price: \"Price (EUR)\",\r\n      image: \"Image\",\r\n    },\r\n    plantThumbnail: {\r\n      currency: \"€\",\r\n    },\r\n    plantDetails: {\r\n      headline: \"Plant details\",\r\n      name: \"Name:\",\r\n      description: \"Description:\",\r\n      size: \"Size:\",\r\n      sizeUnit: \"cm\",\r\n      likes: \"Likes:\",\r\n      price: \"Price:\",\r\n      currency: \"€\",\r\n    },\r\n    checkForm: {\r\n      price: \" Price:\",\r\n      currency: \"€\",\r\n      paymentSuccessful: \"Payment succeeded.\",\r\n    },\r\n    /* Requests */\r\n    createRequestForm: {\r\n      headline: \"Your request\",\r\n      subheadline: \"for\",\r\n    },\r\n    updateRequestForm: {\r\n      headline: \"Reply your request\",\r\n      replyPlaceholder: \"Your reply\",\r\n    },\r\n    requestsPage: {\r\n      headline: \"Requests for your plants\",\r\n    },\r\n    requestDetails: {\r\n      headline: \"Request for\",\r\n      subheadline: \"by\",\r\n      yourReply: \"Your reply\",\r\n    },\r\n    requestTile: {\r\n      headline: \"Request for\",\r\n      subheadline: \"by\",\r\n    },\r\n    /* Replies */\r\n    repliesPage: {\r\n      headline: \"Replies for your requests\",\r\n    },\r\n    replyDetails: {\r\n      headline: \"Your request for\",\r\n      replyBy: \"Reply by\",\r\n    },\r\n    replyTile: {\r\n      headline: \"Reply for\",\r\n      subheadline: \"by\",\r\n    },\r\n    /* Others */\r\n    footer: {\r\n      copyright: \"©\",\r\n      appAuthor1: \"Christian Gerbig\",\r\n      appAuthor2: \"Lisa Montebaur\",\r\n    },\r\n    notFound: {\r\n      headline: \"Oh-oh!\",\r\n      subheadline1: \"We think you got lost in the jungle!\",\r\n      subheadline2: \"404 Not Found\",\r\n    },\r\n    unauthorized: {\r\n      headline: \"Oh-oh!\",\r\n      subheadline1: \"We think you reached the forbidden part of the jungle!\",\r\n      subheadline2: \"401 Unauthorized\",\r\n    },\r\n  },\r\n};\r\n\r\nexport default en;\r\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport en from \"./locales/en\";\r\n\r\ni18n.use(initReactI18next).init({\r\n  resources: {\r\n    en: en,\r\n  },\r\n  fallbackLng: \"en\",\r\n  debug: true,\r\n  ns: [\"translations\"],\r\n  defaultNS: \"translations\",\r\n  interpolation: {\r\n    escapeValue: false,\r\n  },\r\n});\r\n\r\nexport default i18n;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\nimport \"./i18n\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}