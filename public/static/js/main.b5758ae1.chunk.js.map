{"version":3,"sources":["Reducer/jungleSwapSlice.js","config.js","components/NavBar.js","components/Footer.js","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/Home.js","components/SignUp.js","components/SignIn.js","components/LogOut.js","components/CreatePlantForm.js","components/PlantDetails.js","components/UpdatePlantForm.js","components/CheckoutForm.js","components/CheckoutPage.js","components/RequestsPage.js","components/CreateRequestForm.js","components/RequestDetails.js","components/UpdateRequestForm.js","components/NotFound.js","components/Chat.js","App.js","store.js","index.js"],"names":["rootPath","process","fetchAllPlants","createAsyncThunk","options","a","dispatch","axios","get","response","setPlants","data","console","log","fetchQueryPlants","query","err","createPlant","uploadForm","plant","history","name","description","size","location","price","post","responseImage","imageUrl","imagePublicId","newPlant","withCredentials","responsePlant","addPlant","push","setError","error","responseInmage","readPlant","plantId","setPlant","imageChange","destroyImageData","image","FormData","append","clonePlant","JSON","parse","stringify","updatePlant","updatedPlant","patch","setPlantChanges","scrollToPlants","deletePlant","delete","removePlant","createPayment","setClientSecret","clientSecret","payPlant","fetchAllRequests","setRequests","createRequest","newRequest","addRequest","_id","readRequest","requestId","setRequest","updateRequest","updatedRequest","setRequestChanges","deleteRequest","removeRequest","readUser","setLoggedInUser","setIsFetchingUser","signUp","newUser","setIsUserChange","signIn","user","logOut","intervalId","clearInterval","setIntervalId","setMinutesCounter","setIsNewRequest","scroll","scrollToTop","jungleSwapSlice","createSlice","initialState","isFetchingUser","loggedInUser","isUserChange","plants","requests","request","amountOfRequests","isNewRequest","minutesCounter","headerContainerHeight","aboutContainerHeight","reducers","state","action","payload","map","singlePlant","filter","buyer","seller","message","reply","singleRequest","setAmountOfRequests","increaseMinutesCounter","decreaseAmountOfRequests","setHeaderContainerHeight","setAboutContainerHeight","scrollToAbout","scrollTo","actions","setPaymentPromise","NavBar","useSelector","jungleSwap","useDispatch","useEffect","currentRequest","length","setInterval","currentAmountOfRequests","Navbar","className","variant","expand","fixed","Brand","to","onClick","Toggle","aria-controls","Collapse","id","Nav","title","username","Footer","href","Home","useState","setQuery","Math","round","document","querySelector","getBoundingClientRect","height","class","role","src","alt","icon","type","placeholder","value","onChange","event","target","SignUp","useHistory","onSubmit","preventDefault","email","password","toLowerCase","htmlFor","formnovalidate","SignIn","LogOut","CreatePlantForm","plantImage","files","min","PlantDetails","useParams","creator","handleDeletePlant","UpdatePlantForm","handlePlantEntryChange","itemNumber","handleImageChange","handleUpdatePlant","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","handleChange","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handlePayPlant","disabled","promise","loadStripe","CheckoutPage","RequestsPage","handleResetAll","CreateRequestForm","handleCreateRequest","cols","rows","RequestDetails","handleDeleteRequest","UpdateRequestForm","cloneRequest","handleCreateReply","handleUpdateRequest","NotFound","KommunicateChat","d","m","s","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","withRouter","exact","path","component","store","configureStore","reducer","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b5758ae1.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport config from \"../config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\n\r\nconst initialState = {\r\n  isFetchingUser: true,\r\n  loggedInUser: null,\r\n  isUserChange: false,\r\n  plants: [],\r\n  plant: {},\r\n  requests: [],\r\n  request: {},\r\n  amountOfRequests: 0,\r\n  isNewRequest: false,\r\n  intervalId: null,\r\n  minutesCounter: 0,\r\n  headerContainerHeight: 0,\r\n  aboutContainerHeight: 0,\r\n  clientSecret: \"\",\r\n  error: null\r\n}\r\n\r\nconst rootPath = `${config.API_URL}/api`;\r\n\r\n// --------- Plants ---------\r\n// Fetch all plants\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async (options, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(`${rootPath}/plants/fetch`);\r\n      dispatch(setPlants(response.data));\r\n    }\r\n    catch (err) {\r\n      console.log(\"Fetching plants failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch query plants\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query, { dispatch }) => {\r\n    try {\r\n      const response = axios.get(`${rootPath}/plants/search?q=${query}`);\r\n      dispatch(setPlants(response.data));\r\n    }\r\n    catch (err) {\r\n      console.log(\"Fetching query plants failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async ({ uploadForm, plant, history }, { dispatch }) => {\r\n    const { name, description, size, location, price } = plant;\r\n    try {\r\n      const responseImage = await axios.post(\r\n        `${rootPath}/upload`,\r\n        uploadForm\r\n      );\r\n      const { imageUrl, imagePublicId } = responseImage.data;\r\n      const newPlant = {\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price\r\n      };\r\n      try {\r\n        const responsePlant = await axios.post(\r\n          `${rootPath}/plants/create`,\r\n          newPlant,\r\n          { withCredentials: true }\r\n        );\r\n        dispatch(addPlant(responsePlant.data));\r\n        history.push(\"/\");\r\n      }\r\n      catch (err) {\r\n        dispatch(setError(err.responsePlant.data.error));\r\n      }\r\n    }\r\n    catch (err) {\r\n      dispatch(setError(err.responseInmage.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Read plant\r\nexport const readPlant = createAsyncThunk(\r\n  \"jungleSwap/readPlant\",\r\n  async (plantId, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${rootPath}/plants/read/${plantId}`,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setPlant(response.data));\r\n    }\r\n    catch {\r\n      console.log(\"Read plant failed\");\r\n    }\r\n  }\r\n);\r\n\r\n// Plant image change\r\nexport const imageChange = createAsyncThunk(\r\n  \"jungleSwap/imageChange\",\r\n  async ({ destroyImageData, image, plant }, { dispatch }) => {\r\n    try {\r\n      await axios.post(\r\n        `${rootPath}/destroy`,\r\n        destroyImageData\r\n      );\r\n      try {\r\n        const uploadForm = new FormData();\r\n        uploadForm.append(\"image\", image);\r\n        const response = await axios.post(\r\n          `${rootPath}/upload`,\r\n          uploadForm\r\n        );\r\n        const { imagePublicId, imageUrl } = response.data;\r\n        const clonePlant = JSON.parse(JSON.stringify(plant));\r\n        clonePlant.imagePublicId = imagePublicId;\r\n        clonePlant.imageUrl = imageUrl;\r\n        dispatch(setPlant(clonePlant));\r\n      }\r\n      catch (err) {\r\n        console.log(\"Image upload failed\", err);\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.log(\"Delete old image failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Update plant\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async ({ plantId, updatedPlant, history }, { dispatch }) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${rootPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      dispatch(setPlantChanges(response.data));\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    }\r\n    catch (err) {\r\n      console.log(\"Update plant failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete Plant\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async ({ imagePublicId, plantId, history }, { dispatch }) => {\r\n    try {\r\n      const destroyImageData = {\r\n        imagePublicId\r\n      }\r\n      await axios.post(\r\n        `${rootPath}/destroy`,\r\n        destroyImageData\r\n      );\r\n      try {\r\n        await axios.delete(`${rootPath}/plants/delete/${plantId}`);\r\n        dispatch(removePlant(plantId));\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      }\r\n      catch (err) {\r\n        console.log(\"Delete plant failed\", err);\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.log(\"Delete image failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant payment\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant, { dispatch }) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${rootPath}/create-payment-intent`,\r\n        { price: plant.price }\r\n      );\r\n      dispatch(setClientSecret(response.data.clientSecret));\r\n    }\r\n    catch (err) {\r\n      console.log(\"Create payment failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Pay plant\r\nexport const payPlant = createAsyncThunk(\r\n  \"jungleSwap/payPlant\",\r\n  async ({ history }, { dispatch }) => {\r\n    try {\r\n      await axios.post(\r\n        `${rootPath}/create-payment-intent`,\r\n        {},\r\n        { withCredentials: true }\r\n      );\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    }\r\n    catch (err) {\r\n      console.log(\"Checkout failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// --------- Requests ----------\r\n// Fetch all requests\r\nexport const fetchAllRequests = createAsyncThunk(\r\n  \"jungleSwap/fetchAllRequests\",\r\n  async (options, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(`${rootPath}/requests/fetch`);\r\n      dispatch(setRequests(response.data));\r\n    }\r\n    catch (err) {\r\n      console.log(\"Fetching requests failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create request\r\nexport const createRequest = createAsyncThunk(\r\n  \"jungleSwap/createRequest\",\r\n  async ({ newRequest, history }, { dispatch }) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${rootPath}/requests/create`,\r\n        newRequest,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(addRequest(response.data));\r\n      history.push(`/plants/read/${response.data.plant._id}`);\r\n    }\r\n    catch (err) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Read request\r\nexport const readRequest = createAsyncThunk(\r\n  \"jungleSwap/readRequest\",\r\n  async (requestId, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${rootPath}/requests/read/${requestId}`,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setRequest(response.data));\r\n    }\r\n    catch {\r\n      console.log(\"Read request failed\");\r\n    }\r\n  }\r\n);\r\n\r\n// Update request\r\nexport const updateRequest = createAsyncThunk(\r\n  \"jungleSwap/updateRequest\",\r\n  async ({ requestId, updatedRequest, history }, { dispatch }) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${rootPath}/requests/update/${requestId}`,\r\n        updatedRequest\r\n      );\r\n      dispatch(setRequestChanges(response.data));\r\n      history.push(`/requests/read/${requestId}`);\r\n    }\r\n    catch (err) {\r\n      console.log(\"Update request failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete request\r\nexport const deleteRequest = createAsyncThunk(\r\n  \"jungleSwap/deleteRequest\",\r\n  async ({ requestId, history }, { dispatch }) => {\r\n    try {\r\n      await axios.delete(`${rootPath}/requests/delete/${requestId}`);\r\n      dispatch(removeRequest(requestId));\r\n      history.push(\"/requests/fetch\");\r\n    }\r\n    catch (err) {\r\n      console.log(\"Delete request failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// ---------- User authentification ----------\r\n// Read user\r\nexport const readUser = createAsyncThunk(\r\n  \"jungleSwap/readUserData\",\r\n  async (options, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${rootPath}/user`,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsFetchingUser(false));\r\n    }\r\n    catch (err) {\r\n      console.log(\"Initializing fetching failed\", err);\r\n      dispatch(setIsFetchingUser(false));\r\n    }\r\n  }\r\n);\r\n\r\n// Sign up\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async ({ newUser, history }, { dispatch }) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${rootPath}/signup`,\r\n        newUser\r\n      );\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    }\r\n    catch (err) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Sign in\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async ({ user, history }, { dispatch }) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${rootPath}/signin`,\r\n        user,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    }\r\n    catch (err) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// LogOut\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async ({ intervalId, history }, { dispatch }) => {\r\n    try {\r\n      await axios.post(\r\n        `${rootPath}/logout`,\r\n        {},\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setLoggedInUser(null));\r\n      clearInterval(intervalId);\r\n      dispatch(setIntervalId(null));\r\n      dispatch(setMinutesCounter(0));\r\n      dispatch(setIsNewRequest(false));\r\n      history.push(\"/\");\r\n      scroll.scrollToTop();\r\n    }\r\n    catch (err) {\r\n      console.log(\"Logout failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n\r\n// ---------- Slices -----------\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n  reducers: {\r\n\r\n    // --------- Plants ----------\r\n    setPlants: (state, action) => {\r\n      state.plants = action.payload;\r\n    },\r\n    setPlant: (state, action) => {\r\n      state.plant = action.payload;\r\n    },\r\n    addPlant: (state, action) => {\r\n      state.plants.push(action.payload);\r\n    },\r\n    setPlantChanges: (state, action) => {\r\n      const { _id, name, description, size, imageUrl, imagePublicId, location, price } = action.payload;\r\n      state.plants = state.plants.map(\r\n        singlePlant => {\r\n          if (singlePlant._id === _id) {\r\n            singlePlant.name = name;\r\n            singlePlant.description = description;\r\n            singlePlant.size = size;\r\n            singlePlant.imageUrl = imageUrl;\r\n            singlePlant.imagePublicId = imagePublicId;\r\n            singlePlant.location = location;\r\n            singlePlant.price = price;\r\n          }\r\n          return singlePlant;\r\n        }\r\n      );\r\n    },\r\n    removePlant: (state, action) => {\r\n      state.plants = state.plants.filter(plant => plant._id !== action.payload);\r\n    },\r\n    setClientSecret: (state, action) => {\r\n      state.clientSecret = action.payload;\r\n    },\r\n\r\n    // ---------- Requests ----------\r\n    setRequests: (state, action) => {\r\n      state.requests = action.payload;\r\n    },\r\n    setRequest: (state, action) => {\r\n      state.request = action.payload;\r\n    },\r\n    addRequest: (state, action) => {\r\n      state.requests.push(action.payload);\r\n    },\r\n    setRequestChanges: (state, action) => {\r\n      const { _id, buyer, seller, plant, message, reply } = action.payload;\r\n      state.requests = state.requests.map(\r\n        singleRequest => {\r\n          if (singleRequest._id === _id) {\r\n            singleRequest.buyer = buyer;\r\n            singleRequest.seller = seller;\r\n            singleRequest.plant = plant;\r\n            singleRequest.message = message;\r\n            singleRequest.reply = reply;\r\n          }\r\n          return singleRequest;\r\n        }\r\n      )\r\n    },\r\n    removeRequest: (state, action) => {\r\n      state.requests = state.requests.filter(request => request._id !== action.payload);\r\n    },\r\n    setAmountOfRequests: (state, action) => {\r\n      state.amountOfRequests = action.payload;\r\n    },\r\n    setIsNewRequest: (state, action) => {\r\n      state.isNewRequest = action.payload;\r\n    },\r\n    setIntervalId: (state, action) => {\r\n      state.intervalId = action.payload;\r\n    },\r\n    setMinutesCounter: (state, action) => {\r\n      state.minutesCounter = action.payload;\r\n    },\r\n    increaseMinutesCounter: (state, action) => {\r\n      let minutesCounter = state.minutesCounter;\r\n      minutesCounter += 1;\r\n      state.minutesCounter = minutesCounter;\r\n    },\r\n    decreaseAmountOfRequests: (state, action) => {\r\n      let amountOfRequests = state.amountOfRequests;\r\n      amountOfRequests -= 1;\r\n      state.amountOfRequests = amountOfRequests;\r\n    },\r\n\r\n\r\n    // ---------- User authentification ----------\r\n    setLoggedInUser: (state, action) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n    setIsFetchingUser: (state, action) => {\r\n      state.isFetchingUser = action.payload;\r\n    },\r\n    setIsUserChange: (state, action) => {\r\n      state.isUserChange = action.payload;\r\n    },\r\n    setError: (state, action) => {\r\n      state.error = action.payload;\r\n    },\r\n\r\n    // ---------- HTML elements ----------\r\n    setHeaderContainerHeight: (state, action) => {\r\n      state.headerContainerHeight = action.payload;\r\n    },\r\n    setAboutContainerHeight: (state, action) => {\r\n      state.aboutContainerHeight = action.payload;\r\n    },\r\n    scrollToAbout: (state, action) => {\r\n      scroll.scrollTo(state.headerContainerHeight);\r\n    },\r\n    scrollToPlants: (state, action) => {\r\n      scroll.scrollTo((state.headerContainerHeight + state.aboutContainerHeight));\r\n    },\r\n\r\n  }\r\n});\r\n\r\nexport const {\r\n\r\n  // ----------- Plants ----------\r\n  setPlants,\r\n  setPlant,\r\n  addPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n  setPaymentPromise,\r\n  setClientSecret,\r\n\r\n  // ---------- Requests ----------\r\n  setRequests,\r\n  setRequest,\r\n  addRequest,\r\n  setRequestChanges,\r\n  removeRequest,\r\n  setAmountOfRequests,\r\n  setIsNewRequest,\r\n  setIntervalId,\r\n  setMinutesCounter,\r\n  increaseMinutesCounter,\r\n  decreaseAmountOfRequests,\r\n\r\n  // ---------- User authentification ----------\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n  setIsUserChange,\r\n  setError,\r\n\r\n  // ---------- HTML elements ----------\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;","export default {API_URL: process.env.REACT_APP_SERVER_URL};","import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { fetchAllRequests, setIsUserChange, setIntervalId, increaseMinutesCounter, setMinutesCounter, setAmountOfRequests, setIsNewRequest, scrollToPlants } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst NavBar = () => {\r\n  const loggedInUser = useSelector(state => state.jungleSwap.loggedInUser);\r\n  const isUserChange = useSelector(state => state.jungleSwap.isUserChange);\r\n  const requests = useSelector(state => state.jungleSwap.requests);\r\n  const isNewRequest = useSelector(state => state.jungleSwap.isNewRequest);\r\n  const intervalId = useSelector(state => state.jungleSwap.intervalId);\r\n  const minutesCounter = useSelector(state => state.jungleSwap.minutesCounter);\r\n  const amountOfRequests = useSelector(state => state.jungleSwap.amountOfRequests);\r\n  const dispatch = useDispatch();\r\n\r\n  // Stop interval at cleanup\r\n  useEffect(\r\n    () => {\r\n      return () => {\r\n        if (intervalId) {\r\n          clearInterval(intervalId);\r\n          dispatch(setIntervalId(null));\r\n          dispatch(setMinutesCounter(0));\r\n        }\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  // Start request check if user changes\r\n  useEffect(\r\n    () => {\r\n      if (isUserChange) {\r\n        dispatch(fetchAllRequests());\r\n        dispatch(setAmountOfRequests(requests.filter(currentRequest => currentRequest.seller._id === loggedInUser._id).length));\r\n        dispatch(setIntervalId(setInterval(\r\n          () => dispatch(increaseMinutesCounter()),\r\n          10000 // every minute\r\n        )));\r\n        dispatch(setIsUserChange(false));\r\n      }\r\n    },\r\n    [loggedInUser]\r\n  );\r\n\r\n  // Check new requests for logged in user every minute\r\n  useEffect(\r\n    () => {\r\n      dispatch(fetchAllRequests());\r\n      const currentAmountOfRequests = requests.filter(currentRequest => currentRequest.seller._id === loggedInUser._id).length;\r\n      if (amountOfRequests < currentAmountOfRequests) {\r\n        dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n        dispatch(setIsNewRequest(true));\r\n      }\r\n    },\r\n    [minutesCounter]\r\n  );\r\n  \r\n  return (\r\n    <div>\r\n      <Navbar className=\"pl-5\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\r\n        <Navbar.Brand> <Link to=\"/\" onClick={scroll.scrollToTop}> JungleSwap </Link> </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <div>\r\n              <Link to=\"/\" className=\"p-2\" onClick={() => dispatch(scrollToPlants())}> All Plants </Link>\r\n            </div>\r\n            {\r\n              loggedInUser && (\r\n                <div>\r\n                  <Link className=\"p-2\" to=\"/plants/create\"> Create Plant </Link>\r\n                  <Link className={isNewRequest ? \"p-2 alertColor\" : \"p-2\"} to=\"/requests/fetch\" title={isNewRequest ? \"new message\" : null}> Messages </Link>\r\n                </div>\r\n              )\r\n            }\r\n            {\r\n              loggedInUser ? (\r\n                <div>\r\n                  <Link className=\"p-2\" to=\"/logout\" title={loggedInUser.username}> Log out </Link>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <Link className=\"p-2\" to=\"/signin\"> Sign in </Link>\r\n                  <Link className=\"p-2\" to=\"/signup\"> Sign up </Link>\r\n                </div>\r\n              )\r\n            }\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer-row\">\r\n      <footer>\r\n        © 2021\r\n        <Link href=\"https://www.linkedin.com/in/christian-gerbig/\"> Christian Gerbig </Link>\r\n        &\r\n        <Link href=\"https://www.linkedin.com/in/lisa-montebaur/\"> Lisa Montebaur </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchAllPlants, fetchQueryPlants, readUser, setHeaderContainerHeight, setAboutContainerHeight, scrollToAbout } from \"../Reducer/jungleSwapSlice\";\r\nimport image from \"../images/JungleSwap_Home.png\";\r\nimport icon from \"../images/JungleSwap_Icon.png\";\r\n\r\nconst Home = () => {\r\n  const isFetchingUser = useSelector(state => state.jungleSwap.isFetchingUser);\r\n  const loggedInUser = useSelector(state => state.jungleSwap.loggedInUser);\r\n  const plants = useSelector(state => state.jungleSwap.plants);\r\n  const [query, setQuery] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  // Load plants and user data as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(fetchAllPlants());\r\n      !loggedInUser && dispatch(readUser());\r\n      const headerContainerHeight = Math.round(document.querySelector(\"#titleId\").getBoundingClientRect().height);\r\n      dispatch(setHeaderContainerHeight(headerContainerHeight));\r\n      const aboutContainerHeight = Math.round(document.querySelector(\"#aboutId\").getBoundingClientRect().height);\r\n      dispatch(setAboutContainerHeight(aboutContainerHeight));\r\n    },\r\n    []\r\n  );\r\n\r\n  // Handle plant search result if user types in query\r\n  useEffect(\r\n    () => {\r\n      dispatch(fetchQueryPlants(query));\r\n      query ? dispatch(fetchQueryPlants(query)) : dispatch(fetchAllPlants())\r\n    },\r\n    [query]\r\n  );\r\n\r\n  // Search plant\r\n  const handleSearchPlant = event => setQuery(event.target.value)\r\n\r\n  return (\r\n    <div>\r\n\r\n      {!plants && (\r\n        <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span class=\"visually-hidden\"> <br /> <br /> Loading plants... </span>\r\n        </div>\r\n      )}\r\n\r\n      {isFetchingUser && (\r\n        <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span class=\"visually-hidden\"> <br /> <br /> Loading user data... </span>\r\n        </div>\r\n      )}\r\n\r\n      <header className=\"text-center pt-5 pb-5 headerImg\" id=\"titleId\">\r\n        <div className=\"row my-5\">\r\n          <div className=\"col-6 offset-3 my-5 borderAround\">\r\n            <h2 className=\"title mb-2\"> JungleSwap </h2>\r\n            <h5 className=\"mt-3 mb-5\"> Share your green heart </h5>\r\n            <div className=\"mb-5\">\r\n              <Link className=\"biggerFontSize\" onClick={() => dispatch(scrollToAbout())}> Try it! </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <section id=\"aboutId\">\r\n        <div className=\"about centered container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n              <img className=\"image\" src={image} alt=\"plants\" />\r\n            </div>\r\n            <br />\r\n            <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 noOverflow\">\r\n              <h4> Welcome to JungleSwap! </h4>\r\n              <h5> Add green to your Home </h5>\r\n              <p> It\"s easy-peasy. <br />\r\n                Share your plant offshoots. <br />\r\n                Make money! <br />\r\n                Or swap them for another plant. <br />\r\n                Don\"t have any baby plants? <br />\r\n                You can simply shop and give a plant a new home.\r\n              </p>\r\n              <img className=\"icon\" src={icon} alt=\"icon\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section>\r\n        <div className=\"container mt-5\">\r\n          <div className=\"mt-5 mb-3\">\r\n            <h2> Plants </h2>\r\n            <hr />\r\n            <h4> Search a plant </h4>\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <input className=\"smallWidth form-control\" type=\"text\" placeholder=\"Search...\" value={query} onChange={handleSearchPlant} />\r\n          </div>\r\n          <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n            {\r\n              plants && (\r\n                plants.map(\r\n                  plant => {\r\n                    const { _id, name, imageUrl, price } = plant;\r\n                    return (\r\n                      <div className=\"col mb-5\" key={_id}>\r\n                        <div className=\"card card-medium-width text-center h-100\">\r\n                          <img className=\"card-img-top mediumPicSize\" src={imageUrl} alt={name} />\r\n                          <div className=\"card-body mb-5\">\r\n                            <h5> {name} </h5>\r\n                            <p> {price} € </p>\r\n                            <Link className=\"btn btn-outline-dark\" to={`/plants/read/${_id}`}> Details </Link>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  }\r\n                )\r\n              )\r\n            }\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React, { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { setError, setIsNewRequest, signUp } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst SignUp = () => {\r\n  const error = useSelector(state => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(setError(null));\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    },\r\n    []\r\n  );\r\n\r\n  // Sign up\r\n  const handleSignUp = event => {\r\n    event.preventDefault();\r\n    const { username, email, password } = event.target;\r\n    const newUser = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value\r\n    };\r\n    dispatch(signUp({ newUser, history }));\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign Up </h2>\r\n        <form onSubmit={handleSignUp}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\"> Username </label>\r\n            <input type=\"text\" className=\"form-control\" id=\"InputUsername\" name=\"username\" />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input type=\"email\" className=\"form-control\" id=\"InputEmail\" name=\"email\" />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input name=\"password\" type=\"password\" className=\"form-control\" id=\"InputPassword\" />\r\n          </div>\r\n          {error && (<p className=\"warningColor\"> {error} </p>)}\r\n          <button type=\"submit\" className=\"btn btn-primary mt-4 btn-outline-dark\" formnovalidate=\"formnovalidate\"> Sign up </button>\r\n          <p className=\"padding\"> Already have an account? </p>\r\n          <Link to={\"/signin\"}> Sign in </Link>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUp;","import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { setError, setIsNewRequest, signIn } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst SignIn = () => {\r\n  const error = useSelector(state => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(setError(null));\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    },\r\n    []\r\n  );\r\n\r\n  // Sign in\r\n  const handleSignIn = event => {\r\n    event.preventDefault();\r\n    const { email, password } = event.target;\r\n    const user = {\r\n      email: email.value,\r\n      password: password.value\r\n    };\r\n    dispatch(signIn({ user, history }));\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign In </h2>\r\n        <form onSubmit={handleSignIn}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input type=\"email\" className=\"form-control\" id=\"InputEmail\" name=\"email\" />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input name=\"password\" type=\"password\" className=\"form-control\" id=\"InputPassword\" />\r\n          </div>\r\n          {error && (<p className=\"warningColor\"> {error} </p>)}\r\n          <button type=\"submit\" className=\"btn btn-primary mt-4 btn-outline-dark\" formnovalidate=\"formnovalidate\"> Sign in </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignIn;","import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { logOut } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst LogOut = () => {\r\n  const intervalId = useSelector(state => state.jungleSwap.intervalId);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Log out, stop interval, reset variables and scroll to top as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(logOut({ intervalId, history }));\r\n    },\r\n    []\r\n  );\r\n\r\n  return (<div />);\r\n}\r\n\r\nexport default LogOut;","import React, { useEffect } from \"react\";\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { createPlant, setError, scrollToPlants } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst CreatePlantForm = () => {\r\n  const loggedInUser = useSelector(state => state.jungleSwap.loggedInUser);\r\n  const error = useSelector(state => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads and scroll to plants section during cleanup\r\n  useEffect(\r\n    () => {\r\n      dispatch(setError(null));\r\n      scroll.scrollToTop();\r\n      return () => dispatch(scrollToPlants);\r\n    },\r\n    []\r\n  );\r\n\r\n  // Create plant\r\n  const handleCreatePlant = event => {\r\n    event.preventDefault();\r\n    const { name, description, size, plantImage, location, price } = event.target;\r\n    const image = plantImage.files[0];\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    const plant = {\r\n      name: name.value,\r\n      description: description.value,\r\n      size: size.value,\r\n      location: location.value,\r\n      price: price.value\r\n    }\r\n    dispatch(createPlant({ uploadForm, plant, history }));\r\n  }\r\n\r\n  if (!loggedInUser) return (<Redirect to={\"/signup\"} />);\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-6\">\r\n        <h2 className=\"mb-5\"> Create a plant </h2>\r\n        <form onSubmit={handleCreatePlant}>\r\n          <input className=\"mb-4\" name=\"name\" type=\"text\" placeholder=\"Enter name\" />\r\n          <input className=\"mb-4\" name=\"description\" type=\"text\" placeholder=\"Enter description\" />\r\n          <input className=\"mb-4 smallWidth\" name=\"size\" type=\"number\" min=\"1\" placeholder=\"Size\" /> cm <br />\r\n          <select className=\"mb-4 p-1\" name=\"location\" type=\"text\">\r\n            <option> Select location </option>\r\n            <option value=\"sun\"> sun </option>\r\n            <option value=\"shade\"> shade </option>\r\n            <option value=\"sun and shade\"> sun and shade </option>\r\n          </select>\r\n          <br />\r\n          <input className=\"mb-4 smallWidth\" name=\"price\" type=\"number\" min=\"1\" placeholder=\"Price\" /> € <br />\r\n          <input className=\"mb-4\" name=\"plantImage\" type=\"file\" />\r\n          {error && (<p className=\"warningColor\"> {error} </p>)}\r\n          <div className=\"col-12\">\r\n            <button className=\"btn btn-sm btn-outline-dark\" type=\"submit\" > Create </button>\r\n            <Link to={\"/\"}> <button className=\"btn btn-sm mx-5\"> Go back </button> </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreatePlantForm;","import React, { useEffect } from \"react\";\r\nimport { Link, Redirect, useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { readPlant, deletePlant, scrollToPlants } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst PlantDetails = () => {\r\n  const loggedInUser = useSelector(state => state.jungleSwap.loggedInUser);\r\n  const plant = useSelector(state => state.jungleSwap.plant);\r\n  const { plantId } = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read plant data and scroll to top as soon as page loads  \r\n  useEffect(\r\n    () => {\r\n      dispatch(readPlant(plantId));\r\n      scroll.scrollToTop();\r\n    },\r\n    []\r\n  );\r\n\r\n  // Delete plant\r\n  const handleDeletePlant = (imagePublicId, plantId, history) => {\r\n    dispatch(deletePlant({ imagePublicId, plantId, history }));\r\n  }\r\n\r\n  if (!loggedInUser) return (<Redirect to={\"/signup\"} />);\r\n\r\n  const { _id, name, description, size, imageUrl, imagePublicId, location, price, creator } = plant;\r\n  if (!creator) return (\r\n    <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n      <span class=\"visually-hidden\"> <br /> <br /> Loading plant details... </span>\r\n    </div>\r\n  );\r\n\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2> Plant details </h2>\r\n      </div>\r\n      <div className=\"col\">\r\n        <div className=\"card cardMediumWidth\">\r\n          {imageUrl && (<img className=\"card-img-top mediumPicSize\" src={imageUrl} alt={name} />)}\r\n          <div className=\"ml-2 mt-2\"> <span> Name: </span> {name} </div>\r\n          <div className=\"ml-2 mt-2\"> <span> Description: </span> {description} </div>\r\n          <div className=\"ml-2 mt-2\"> <span> Size: </span> {size} cm </div>\r\n          <div className=\"ml-2 mt-2\"> <span> Likes: </span> {location} </div>\r\n          <div className=\"ml-2 mt-2\"> <span> Price: </span> {price} € </div>\r\n          <div className=\"ml-2 mt-2 col justify-content-center\">\r\n            <div className=\"row-2 justify-content-center\">\r\n              <div className=\"card-body\">\r\n                {\r\n                  loggedInUser._id === creator._id ? (\r\n                    <div>\r\n                      <Link to={\"/plants/update\"}> <button className=\"btn btn-sm ml-2 btn-outline-dark\"> Update </button> </Link>\r\n                      <button className=\"btn btn-sm ml-2 btn-outline-dark\" onClick={() => handleDeletePlant(imagePublicId, _id, history)}> Delete </button>\r\n                    </div>\r\n                  ) : (\r\n                    <div>\r\n                      <Link to=\"/plants/checkout\"> <button className=\"btn btn-sm ml-2 btn-outline-dark\"> Buy </button> </Link>\r\n                      <Link to=\"/requests/create\"> <button className=\"btn btn-sm ml-2 btn-outline-dark\"> Swap </button> </Link>\r\n                    </div>\r\n                  )\r\n                }\r\n                <Link to={\"/\"} onClick={() => dispatch(scrollToPlants())}> <button className=\"btn btn-sm ml-2\"> Go back </button> </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlantDetails;","import React, { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { imageChange, updatePlant, setPlant, scrollToPlants } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst UpdatePlantForm = () => {\r\n  const plant = useSelector(state => state.jungleSwap.plant);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(\r\n    () => scroll.scrollToTop(),\r\n    []\r\n  );\r\n\r\n  // Check which plant values changed\r\n  const handlePlantEntryChange = ({ target }, plant, itemNumber) => {\r\n    const clonePlant = JSON.parse(JSON.stringify(plant));\r\n    // eslint-disable-next-line default-case\r\n    switch (itemNumber) {\r\n      case 0:\r\n        clonePlant.name = target.value;\r\n        break;\r\n      case 1:\r\n        clonePlant.description = target.value;\r\n        break;\r\n      case 2:\r\n        clonePlant.size = target.value;\r\n        break;\r\n      case 3:\r\n        clonePlant.location = target.value;\r\n        break;\r\n      case 4:\r\n        clonePlant.price = target.value;\r\n    }\r\n    dispatch(setPlant(clonePlant));\r\n  }\r\n\r\n  // Plant image changed\r\n  const handleImageChange = ({ target }, plant) => {\r\n    const image = target.files[0];\r\n    const { imagePublicId } = plant;\r\n    const destroyImageData = {\r\n      imagePublicId\r\n    }\r\n    dispatch(imageChange({ destroyImageData, image, plant }));\r\n  }\r\n\r\n  const handleUpdatePlant = ({ _id, name, description, size, imageUrl, imagePublicId, location, price }) => {\r\n    const updatedPlant = {\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price\r\n    };\r\n    dispatch(updatePlant({ plantId: _id, updatedPlant, history }));\r\n  }\r\n\r\n  const { _id, name, description, size, imageUrl, price } = plant;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> Update your plant </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <img className=\"mb-2 smallPicSize\" src={imageUrl} alt={name} />\r\n          <div className=\"card-body\">\r\n            <input className=\"mb-2\" onChange={event => handleImageChange(event, plant)} type=\"file\" />\r\n            <input className=\"mb-2\" type=\"text\" onChange={event => handlePlantEntryChange(event, plant, 0)} value={name} />\r\n            <input className=\"mb-2\" type=\"text\" onChange={event => handlePlantEntryChange(event, plant, 1)} value={description} />\r\n            <input className=\"mb-2 smallWidth\" type=\"number\" onChange={event => handlePlantEntryChange(event, plant, 2)} value={size} /> cm <br />\r\n            <select className=\"mb-2\" onChange={event => handlePlantEntryChange(event, plant, 3)} name=\"location\" type=\"text\" placeholder=\"Select\">\r\n              <option value=\"sun\"> sun </option>\r\n              <option value=\"shade\"> shade </option>\r\n              <option value=\"sun and shade\"> sun and shade </option>\r\n            </select> <br />\r\n            <input className=\"mb-4 smallWidth\" name=\"price\" type=\"number\" min=\"1\" onChange={event => handlePlantEntryChange(event, plant, 4)} value={price} /> €\r\n            <div className=\"row justify-content-around\">\r\n              <button className=\"btn btn-sm btn-outline-dark\" onClick={() => handleUpdatePlant(plant)}> Save changes </button>\r\n              <Link to={`/plants/read/${_id}`}> <button className=\"btn btn-sm mx-2\"> Go back </button> </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdatePlantForm;","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport { payPlant, createPayment, scrollToPlants } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst CheckoutForm = () => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(null);\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const clientSecret = useSelector(state => state.jungleSwap.clientSecret);\r\n  const plant = useSelector(state => state.jungleSwap.plant);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Create payment as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(createPayment(plant))\r\n      return () => {\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  // Card styling\r\n  const cardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" }\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\"\r\n      }\r\n    }\r\n  };\r\n\r\n  // Plant payment\r\n  const handlePayPlant = (history) => {\r\n    dispatch(payPlant(history));\r\n  }\r\n\r\n  // Listen for changes in Card element and display any errors as customer types card details\r\n  const handleChange = async event => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  // Submit payment\r\n  const handleSubmitPayment = async event => {\r\n    event.preventDefault();\r\n    setIsProcessing(true);\r\n    const payload = await stripe.confirmCardPayment(\r\n      clientSecret,\r\n      { payment_method: { card: elements.getElement(CardElement) } }\r\n    );\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    }\r\n    else {\r\n      setPaymentError(null);\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  }\r\n\r\n  const { _id, name, price } = plant;\r\n  return (\r\n    <div className=\"container col-9\">\r\n      <form className=\"checkoutForm mt-5\" id=\"payment-form\" onSubmit={handleSubmitPayment}>\r\n        <h2 className=\"text-center mb-2 p-2\"> {name} </h2>\r\n        <h3 className=\"text-center mb-4 p-2\"> {price} € </h3>\r\n        <CardElement\r\n          className=\"p-2\"\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button onClick={() => handlePayPlant(history)} className=\"btn btn-sm mt-5 mb-4\" disabled={isProcessing || isDisabled || isSucceeded} id=\"submit\">\r\n            <span id=\"button-text\">\r\n              {isProcessing ? <div className=\"spinner\" id=\"spinner\" /> : \"Pay now\"}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {/* Show any error that happens when processing the payment */\r\n          paymentError && (<div className=\"card-error\" role=\"alert\"> {paymentError} </div>)\r\n        /* Show success message upon completion */}\r\n        <p className={isSucceeded ? \"result-message text-center\" : \"result-message hidden text-center\"}>\r\n          Payment succeeded.\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {\r\n          isSucceeded ? (\r\n            <Link to={\"/\"} onClick={() => dispatch(scrollToPlants())}> <button className=\"btn btn-sm\"> Go back </button> </Link>\r\n          )\r\n            : (\r\n              <Link to={`/plants/read/${_id}`}> <button className=\"btn btn-sm\"> Go back </button> </Link>\r\n            )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckoutForm;","import React, { useEffect } from \"react\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"./CheckoutForm\";\r\n\r\nconst promise = loadStripe(\"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\");\r\n\r\nconst CheckoutPage = () => {\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(\r\n    () => scroll.scrollToTop(),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5 App\">\r\n        <Elements stripe={promise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckoutPage;","import React, { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { fetchAllRequests, setIsNewRequest } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst RequestsPage = () => {\r\n  const loggedInUser = useSelector(state => state.jungleSwap.loggedInUser);\r\n  const requests = useSelector(state => state.jungleSwap.requests);\r\n  const amountOfRequests = useSelector(state => state.jungleSwap.amountOfRequests);\r\n  const dispatch = useDispatch();\r\n\r\n  // Fetch all requests and reset values as soon as page loads and reset values during cleanup\r\n  useEffect(\r\n    () => {\r\n      const handleResetAll = () => {\r\n        dispatch(setIsNewRequest(false));\r\n        scroll.scrollToTop();\r\n      }\r\n\r\n      dispatch(fetchAllRequests());\r\n      handleResetAll();\r\n      return () => handleResetAll()\r\n    },\r\n    []\r\n  );\r\n\r\n  if (!loggedInUser) return (<Redirect to={\"/signup\"} />);\r\n\r\n  if (!requests) return (\r\n    <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n      <span class=\"visually-hidden\"> <br/> <br/> Loading requests... </span>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 > Your messages </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <Link to={\"/\"}> <button className=\"btn btn-sm mt-4\"> Go back </button> </Link>\r\n        {\r\n          requests.map(\r\n            request => {\r\n              const { _id, buyer, seller, plant } = request;\r\n              return (\r\n                seller._id === loggedInUser._id && (\r\n                  <div className=\"card p-3 mt-4 \" key={_id}>\r\n                    <h4> Request for: {plant.name} </h4>\r\n                    <h5> by: {buyer.username} </h5>\r\n                    <div>\r\n                      <Link className=\"btn btn-outline-dark\" to={`/requests/read/${_id}`}> Details </Link>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              );\r\n            }\r\n          )\r\n        }\r\n        {amountOfRequests !== 0 && (<Link to={\"/\"}> <button className=\"btn btn-sm mt-4\"> Go back </button> </Link>)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RequestsPage;","import React, { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { createRequest, setError } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst CreateRequestForm = () => {\r\n  const plant = useSelector(state => state.jungleSwap.plant);\r\n  const error = useSelector(state => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Set variable and scroll to top as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(setError(null));\r\n      scroll.scrollToTop();\r\n    },\r\n    []\r\n  );\r\n\r\n  // Create request\r\n  const handleCreateRequest = (event, { _id, creator }, history) => {\r\n    event.preventDefault();\r\n    const { message } = event.target;\r\n    const newRequest = {\r\n      seller: creator._id,\r\n      plant: _id,\r\n      message: message.value\r\n    };\r\n    dispatch(createRequest({newRequest, history}));\r\n  }\r\n\r\n  const { _id, name } = plant;\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\"> Your mesage </h2>\r\n        <h3 className=\"mb-4\"> {name} </h3>\r\n        <form onSubmit={(event) => handleCreateRequest(event, plant, history)}>\r\n          <div>\r\n            <textarea className=\"mb-4\" name=\"message\" cols=\"35\" rows=\"7\" />\r\n          </div>\r\n          {error && (<p className=\"warningColor\"> {error} </p>)}\r\n          <button className=\"btn btn-sm btn-outline-dark\" type=\"submit\"> Send </button>\r\n          <Link to={`/plants/read/${_id}`}> <button className=\"btn btn-sm mx-2\"> Go back </button> </Link>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateRequestForm;","import React, { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { readRequest, deleteRequest, decreaseAmountOfRequests } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst RequestDetails = () => {\r\n  const request = useSelector(state => state.jungleSwap.request);\r\n  const { requestId } = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read request and scroll to top as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(readRequest(requestId));\r\n      scroll.scrollToTop();\r\n    },\r\n    []\r\n  );\r\n\r\n  // Delete request\r\n  const handleDeleteRequest = (requestId, history) => {\r\n    dispatch(deleteRequest({ requestId, history }));\r\n    dispatch(decreaseAmountOfRequests());\r\n  }\r\n\r\n  const { _id, buyer, plant, message, reply } = request;\r\n  if (!buyer || !plant) return (\r\n    <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n      <span class=\"visually-hidden\"> <br /> <br /> Loading request... </span>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Your request </h2>\r\n        <h4> for: {plant.name} </h4>\r\n        <h5> by: {buyer.username} </h5>\r\n        <p> {message} </p>\r\n        {\r\n          reply && (\r\n            <div>\r\n              <h5> Your reply: </h5>\r\n              <p> {reply} </p>\r\n            </div>\r\n          )\r\n        }\r\n        <div>\r\n          {!reply && (<Link to={`/requests/update/${_id}`}> <button className=\"btn btn-sm ml-2 btn-outline-dark\"> Reply </button> </Link>)}\r\n          <button className=\"btn btn-sm ml-2 btn-outline-dark\" onClick={() => handleDeleteRequest(_id, history)}> Delete </button>\r\n        </div>\r\n        <Link to={\"/requests/fetch\"} onClick={scroll.scrollToTop}> <button className=\"btn btn-sm mt-4\"> Go back </button> </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RequestDetails;","import React, { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { setRequest, updateRequest } from \"../Reducer/jungleSwapSlice\";\r\n\r\nconst UpdateRequestForm = () => {\r\n  const request = useSelector(state => state.jungleSwap.request);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(\r\n    () => scroll.scrollToTop(),\r\n    []\r\n  );\r\n\r\n  // Create reply\r\n  const handleCreateReply = ({ target }, request) => {\r\n    const cloneRequest = JSON.parse(JSON.stringify(request));\r\n    cloneRequest.reply = target.value;\r\n    dispatch(setRequest(cloneRequest));\r\n  }\r\n\r\n  // Update request\r\n  const handleUpdateRequest = ({ _id, buyer, seller, plant, message, reply }, history) => {\r\n    const updatedRequest = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      message,\r\n      reply\r\n    };\r\n    dispatch(updateRequest({ requestId: _id, updatedRequest, history }));\r\n  }\r\n\r\n  const { _id, message } = request;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> Reply your request </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <div className=\"card-body\">\r\n            <p> {message} </p>\r\n            <textarea className=\"mb-4\" name=\"reply\" cols=\"31\" rows=\"6\" placeholder=\"Your reply\" onChange={event => handleCreateReply(event, request)} />\r\n            <div className=\"row justify-content-around\">\r\n              <button className=\"btn btn-sm btn-outline-dark\" onClick={() => handleUpdateRequest(request, history)}> Submit </button>\r\n              <Link to={`/requests/read/${_id}`}> <button className=\"btn btn-sm mx-2\"> Go back </button> </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdateRequestForm;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 404 Not Found </h3>\r\n        <Link to={\"/\"}> <button className=\"btn btn-sm ml-2\"> Take me home </button> </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;","import React, { useEffect } from \"react\";\r\n\r\nconst KommunicateChat = () => {\r\n  // Create launcher icon as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      (\r\n        (d, m) => {\r\n          const kommunicateSettings = {\r\n            \"appId\": \"10b22c52854a305b79bbdecc356bea5\",\r\n            \"popupWidget\": true,\r\n            \"automaticChatOpenOnNavigation\": true\r\n          };\r\n          const s = document.createElement(\"script\");\r\n          s.type = \"text/javascript\";\r\n          s.async = true;\r\n          s.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n          const h = document.getElementsByTagName(\"head\")[0];\r\n          h.appendChild(s);\r\n          window.kommunicate = m;\r\n          m._globals = kommunicateSettings;\r\n        }\r\n      )\r\n        (\r\n          document,\r\n          window.kommunicate || {}\r\n        );\r\n    },\r\n    []\r\n  );\r\n\r\n  return (<div />);\r\n}\r\n\r\nexport default KommunicateChat;","import React from \"react\";\r\nimport { Route, Switch, withRouter } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./components/Home\";\r\nimport SignUp from \"./components/SignUp\";\r\nimport SignIn from \"./components/SignIn\";\r\nimport LogOut from \"./components/LogOut\";\r\nimport CreatePlantForm from \"./components/CreatePlantForm\";\r\nimport PlantDetails from \"./components/PlantDetails\";\r\nimport UpdatePlantForm from \"./components/UpdatePlantForm\";\r\nimport CheckoutPage from \"./components/CheckoutPage\";\r\nimport RequestsPage from \"./components/RequestsPage\";\r\nimport CreateRequestForm from \"./components/CreateRequestForm\";\r\nimport RequestDetails from \"./components/RequestDetails\";\r\nimport UpdateRequestForm from \"./components/UpdateRequestForm\";\r\nimport NotFound from \"./components/NotFound\";\r\nimport KommunicateChat from \"./components/Chat\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div class=\"main\">\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/read/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch\">\r\n          <RequestsPage />\r\n        </Route>\r\n        <Route path=\"/requests/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/requests/read/:requestId\">\r\n          <RequestDetails />\r\n        </Route>\r\n        <Route path=\"/requests/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/signup\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/signin\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/logout\">\r\n          <LogOut />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(App);","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"./Reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({ reducer: {jungleSwap: jungleSwapSlice} });","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);"],"sourceRoot":""}