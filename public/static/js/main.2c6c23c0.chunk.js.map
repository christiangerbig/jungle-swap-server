{"version":3,"sources":["hooks.ts","reducer/jungleSwapSlice.ts","config.ts","lib/IntervalCounter.ts","components/NavLoggedInUserItems.tsx","components/NavAuthentificationItems.tsx","components/NavBar.tsx","components/Footer.tsx","lib/externalLinkPaths.ts","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","components/About.tsx","components/WaitSpinner.tsx","lib/plantIO.ts","components/SearchPlant.tsx","components/PlantThumbnail.tsx","components/PlantsOverview.tsx","components/AllPlants.tsx","components/Title.tsx","views/Home.tsx","components/ErrorMessageOutput.tsx","views/SignUp.tsx","views/SignIn.tsx","components/LogOut.tsx","lib/routing.ts","views/CreatePlantForm.tsx","lib/plantImageIO.ts","views/PlantDetails.tsx","views/UpdatePlantForm.tsx","components/CheckoutForm.tsx","views/CheckoutPage.tsx","lib/messageIO.ts","components/RequestTile.tsx","components/RequestsOverview.tsx","lib/MainPageScrolling.ts","components/GoBackButton.tsx","views/RequestsPage.tsx","components/ReplyTile.tsx","components/RepliesOverview.tsx","views/RepliesPage.tsx","views/CreateRequestForm.tsx","components/WaitSpinnerText.tsx","views/RequestDetails.tsx","views/ReplyDetails.tsx","views/UpdateRequestForm.tsx","views/Unauthorized.tsx","views/NotFound.tsx","components/Chat.tsx","components/MyPlantsOverview.tsx","views/MyPlants.tsx","components/ErrorModal.tsx","App.tsx","store.ts","locales/en.ts","i18n.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","apiPath","process","rejectWithValue","data","Error","signUp","createAsyncThunk","newUser","a","axios","post","response","error","signIn","user","withCredentials","logOut","checkUserLoggedIn","get","createPlant","newPlant","fetchAllPlants","fetchQueryPlants","query","fetchPlant","plantId","updatePlant","updatedPlant","patch","deletePlant","delete","uploadPlantImage","uploadForm","deletePlantImage","destroyImageData","createPayment","plant","price","createMessage","newMessage","fetchAllMessages","fetchMessage","messageId","updateMessage","updatedMessage","deleteMessage","jungleSwapSlice","createSlice","name","initialState","isUserChange","loggedInUser","isCreatingPlant","isFetchingPlants","isFetchingPlant","isUpdatingPlant","isDeletingPlant","plants","filteredPlants","numberOfVisibleEntries","isUploadingPlantImage","isDeletingPlantImage","clientSecret","isCreatingMessage","isFetchingMessages","isFetchingMessage","isUpdatingMessage","isDeletingMessage","messages","message","isNewRequest","isNewReply","amountOfRequests","amountOfReplies","intervalId","delayCounter","titleSectionHeight","aboutSectionHeight","errorMessage","reducers","setIsUserChange","state","action","payload","setLoggedInUser","setIsCreatingPlant","setIsFetchingPlants","setIsFetchingPlant","setIsUpdatingPlant","setIsDeletingPlant","addPlant","push","setPlant","setPlants","setFilteredPlants","setPlantChanges","_id","description","size","imageUrl","imagePublicId","location","map","singlePlant","removePlant","filter","setNumberOfVisibleEntries","setIsUploadingPlantImage","setIsDeletingPlantImage","setDestroyImageData","setClientSecret","setIsCreatingMessage","setIsFetchingMessages","setIsFetchingMessage","setIsUpdatingMessage","setIsDeletingMessage","addMessage","setMessages","setMessage","setMessageChanges","buyer","seller","request","reply","messageState","singleMessage","removeMessage","setIsNewRequest","setIsNewReply","setStartAmountOfRequests","setStartAmountOfReplies","setAmountOfRequests","setAmountOfReplies","decreaseAmountOfRequests","decreaseAmountOfReplies","setIntervalId","setDelayCounter","increaseDelayCounter","setTitleSectionHeight","setAboutSectionHeight","scrollToAbout","scroll","scrollTo","scrollToPlants","setErrorMessage","extraReducers","builder","addCase","fulfilled","rejected","actions","IntervalCounter","dispatch","stop","clearInterval","this","NavLoggedInUserItems","jungleSwap","t","useTranslation","to","className","title","icon","faBell","username","NavAuthentificationItems","NavBar","useEffect","unwrap","then","setMessageVariables","setInterval","startInterval","setMessageVariablesAndStartInterval","catch","rejectedValue","currentAmountOfRequests","checkAmountOfRequests","length","calculateAmountOfRequests","checkNewRequests","currentAmountOfReplies","checkAmountOfReplies","calculateAmountOfReplies","checkNewReplies","setMessagesVariableAndCheckNewRequestsReplies","Navbar","variant","expand","fixed","Brand","onClick","scrollToTop","Toggle","aria-controls","Collapse","id","Nav","faSearch","Footer","year","Date","getFullYear","pathname","target","rel","About","src","plantsImage","alt","plantPotIcon","WaitSpinner","role","PlantIO","fetchAll","SearchPlant","useState","setQuery","setFilter","fetchPlantQueryByName","filterPlantsByLocation","type","placeholder","value","onChange","event","PlantThumbnail","PlantsOverview","index","AllPlants","Title","Home","elementRef","useRef","elementHeight","Math","round","getBoundingClientRect","height","current","ref","titleSection","aboutSection","ErrorMessageOutput","printErrorMessage","SignUp","history","useHistory","handleSignUp","preventDefault","email","password","toLowerCase","setUserVariablesAndReturnToHomePage","onSubmit","htmlFor","includes","formNoValidate","SignIn","handleSignIn","LogOut","resetRequestReplyVariablesAndReturnToHomePage","updateUserData","clonedUser","JSON","parse","stringify","updateUserRequestsReplies","logOutUser","Routing","protect","CreatePlantForm","handleUploadPlantImage","createSinglePlant","scrollToBottom","addPlantAndReturnToHomePage","image","plantImage","files","FormData","append","min","disabled","goBack","PlantImageIO","PlantDetails","useParams","creator","setPlantAndScrollToTop","fetchPlantData","forEach","deleteRemainingMessages","removePlantAndReturnToPlantsSection","deleteSinglePlant","UpdatePlantForm","selectElementRef","setPlantLocation","handlePlantEntryChange","clonedPlant","handlePlantImageChange","setImageDataForPlant","setPlantChangesAndReturnToPlantsSection","updatePlantData","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","payment","initializePayment","handleCardElementInputChanges","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","stripePromise","loadStripe","CheckoutPage","MessageIO","fetch","RequestThumbnail","RequestsOverview","RequestTile","MainPageScrolling","toTop","GoBackButton","RequestsPage","resetRequestVariableAndScrollToTop","ReplyThumbnail","RepliesOverview","ReplyTile","RepliesPage","resetReplyVariableAndScrollToTop","CreateRequestForm","handleCreateMessageForRequest","addMessageAndReturnToPlantDetailsPage","console","log","cols","rows","WaitSpinnerText","text","RequestDetails","handleChangeMessageState","setMessageChangesAndReturnToRequestsPage","updateBuyerMessage","clonedMessage","setBuyerMessageInactive","ReplyDetails","handleDeleteMessage","removeMessageReplyAndReturnToRepliesPage","UpdateRequestForm","handleUpdateMessage","setMessageChangesAndReturnToRequestPage","handleCreateReply","Unauthorized","NotFound","KommunicateChat","htmlDocument","method","scriptElement","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","popupWidget","automaticChatOpenOnNavigation","createLauncherIcon","document","MyPlantsOverview","MyPlants","ErrorModal","divElementRef","handleCloseModal","handleClickOutside","withRouter","exact","path","component","store","configureStore","reducer","en","translations","link","allPlants","myPlants","requests","replies","tryIt","details","button","create","update","save","send","submit","buy","swap","done","more","proceed","takeMeHome","selectLocation","sun","shade","sunAndShade","errors","form","usernameMissing","emailMissing","passwordMissing","emailFormatInvalid","passwordInvalid","userAlreadyExists","errorWhileCreatingUser","noMatchPasswords","userUnknown","noUserUpdate","nameMissing","descriptionMissing","sizeMissing","locationMissing","priceMissing","imageMissing","noImageSelected","createPlantFailed","fetchPlantFailed","fetchAllPlantsFailed","updatePlantFailed","deletePlantFailed","requestTextMissing","replyTextMissing","createMessageFailed","fetchMessageFailed","fetchAllMessagesFailed","updateMessageFailed","deleteMessageFailed","general","headline","subheadline","about","paragraph","line1","line2","line3","line4","line5","line6","searchPlant","namePlaceholder","enterPlaceholder","alreadyAccountCreated","createPlantForm","updatePlantForm","plantThumbnail","currency","plantDetails","sizeUnit","likes","checkoutForm","payNow","paymentSuccessful","createRequestForm","updateRequestForm","replyPlaceholder","requestsPage","requestDetails","yourReply","requestTile","repliesPage","replyDetails","replyBy","replyTile","footer","copyright","appAuthor1","appAuthor2","notFound","subheadline1","subheadline2","unauthorized","errorModal","i18n","use","initReactI18next","init","resources","fallbackLng","debug","ns","defaultNS","interpolation","escapeValue","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.2c6c23c0.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport config from \"../config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  User,\r\n  Plant,\r\n  PlantId,\r\n  Message,\r\n  MessageId,\r\n  DestroyImageData,\r\n  IntervalId,\r\n} from \"../typeDefinitions\";\r\n\r\ntype ErrorMessage = string | null;\r\n\r\ninterface InitialState {\r\n  // ----- User authentication -----\r\n  isUserChange: boolean;\r\n  loggedInUser: User | null;\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: boolean;\r\n  isFetchingPlants: boolean;\r\n  isFetchingPlant: boolean;\r\n  isUpdatingPlant: boolean;\r\n  isDeletingPlant: boolean;\r\n  plant: Plant | {};\r\n  plants: Plant[];\r\n  filteredPlants: Plant[];\r\n  numberOfVisibleEntries: number;\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: boolean;\r\n  isDeletingPlantImage: boolean;\r\n  destroyImageData: DestroyImageData | null;\r\n\r\n  // ----- Payment -----\r\n  clientSecret: string;\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: boolean;\r\n  isFetchingMessages: boolean;\r\n  isFetchingMessage: boolean;\r\n  isUpdatingMessage: boolean;\r\n  isDeletingMessage: boolean;\r\n  messages: Message[];\r\n  message: Message | {};\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: boolean;\r\n  isNewReply: boolean;\r\n  amountOfRequests: number;\r\n  amountOfReplies: number;\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: IntervalId;\r\n  delayCounter: number;\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: number;\r\n  aboutSectionHeight: number;\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: ErrorMessage;\r\n}\r\n\r\ninterface UpdatePlantParameters {\r\n  plantId: PlantId;\r\n  updatedPlant: Plant;\r\n}\r\n\r\ninterface UpdateMessageParameters {\r\n  messageId: MessageId;\r\n  updatedMessage: Message;\r\n}\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\nconst initialState: InitialState = {\r\n  // ----- User authentication -----\r\n  isUserChange: false,\r\n  loggedInUser: null,\r\n\r\n  // ----- Plants -----\r\n  isCreatingPlant: false,\r\n  isFetchingPlants: false,\r\n  isFetchingPlant: false,\r\n  isUpdatingPlant: false,\r\n  isDeletingPlant: false,\r\n  plant: {},\r\n  plants: [],\r\n  filteredPlants: [],\r\n  numberOfVisibleEntries: 6,\r\n\r\n  // ----- Images -----\r\n  isUploadingPlantImage: false,\r\n  isDeletingPlantImage: false,\r\n  destroyImageData: null,\r\n\r\n  // ----- Payment -----\r\n  clientSecret: \"\",\r\n\r\n  // ----- Messages -----\r\n  isCreatingMessage: false,\r\n  isFetchingMessages: false,\r\n  isFetchingMessage: false,\r\n  isUpdatingMessage: false,\r\n  isDeletingMessage: false,\r\n  messages: [],\r\n  message: {},\r\n\r\n  // ----- Requests/Replies check -----\r\n  isNewRequest: false,\r\n  isNewReply: false,\r\n  amountOfRequests: 0,\r\n  amountOfReplies: 0,\r\n\r\n  // ----- Interval counter -----\r\n  intervalId: null,\r\n  delayCounter: 0,\r\n\r\n  // ----- Pages handling -----\r\n  titleSectionHeight: 0,\r\n  aboutSectionHeight: 0,\r\n\r\n  // ----- Error handling -----\r\n  errorMessage: null,\r\n};\r\n\r\nconst rejectWithValue = (data: any): void | PromiseLike<void> => {\r\n  throw new Error(data);\r\n};\r\n\r\n// ----- User authentification -----\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async (newUser: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-up`, newUser);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async (user: User): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/auth/sign-in`, user, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async (user: User): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/auth/log-out`, user, {\r\n        withCredentials: true,\r\n      });\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const checkUserLoggedIn = createAsyncThunk(\r\n  \"jungleSwap/checkUserLoggedIn\",\r\n  async (): Promise<User | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/auth/check-user`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Plants -----\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async (newPlant: Plant): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/plants/create`, newPlant, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async (): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query: string): Promise<Plant[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchPlant = createAsyncThunk(\r\n  \"jungleSwap/fetchPlant\",\r\n  async (plantId: PlantId): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async ({\r\n    plantId,\r\n    updatedPlant,\r\n  }: UpdatePlantParameters): Promise<Plant | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async (plantId: PlantId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Images -----\r\nexport const uploadPlantImage = createAsyncThunk(\r\n  \"jungleSwap/uploadPlantImage\",\r\n  async (uploadForm: FormData): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/cloudinary/upload`,\r\n        uploadForm\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deletePlantImage = createAsyncThunk(\r\n  \"jungleSwap/deletePlantImage\",\r\n  async (destroyImageData: DestroyImageData): Promise<void | any> => {\r\n    try {\r\n      await axios.post(`${apiPath}/cloudinary/destroy`, destroyImageData);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Payment -----\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant: Plant): Promise<any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/stripe/create-payment-intent`,\r\n        {\r\n          price: plant.price,\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\n// ----- Messages -----\r\nexport const createMessage = createAsyncThunk(\r\n  \"jungleSwap/createMessage\",\r\n  async (newMessage: Message): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/messages/create`,\r\n        newMessage,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchAllMessages = createAsyncThunk(\r\n  \"jungleSwap/fetchAllMessages\",\r\n  async (): Promise<Message[] | any> => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/messages/fetch-all`);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchMessage = createAsyncThunk(\r\n  \"jungleSwap/fetchMessage\",\r\n  async (messageId: MessageId): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${apiPath}/messages/fetch/${messageId}`,\r\n        { withCredentials: true }\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updateMessage = createAsyncThunk(\r\n  \"jungleSwap/updateMessage\",\r\n  async ({\r\n    messageId,\r\n    updatedMessage,\r\n  }: UpdateMessageParameters): Promise<Message | any> => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/messages/update/${messageId}`,\r\n        updatedMessage\r\n      );\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteMessage = createAsyncThunk(\r\n  \"jungleSwap/deleteMessage\",\r\n  async (messageId: MessageId): Promise<void | any> => {\r\n    try {\r\n      await axios.delete(`${apiPath}/messages/delete/${messageId}`);\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response.data.error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    // ----- User authentication ------\r\n    setIsUserChange: (state, action: PayloadAction<boolean>) => {\r\n      state.isUserChange = action.payload;\r\n    },\r\n    setLoggedInUser: (state, action: PayloadAction<User | null>) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n\r\n    // ----- Plants ------\r\n    setIsCreatingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isCreatingPlant = action.payload;\r\n    },\r\n    setIsFetchingPlants: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingPlants = action.payload;\r\n    },\r\n    setIsFetchingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingPlant = action.payload;\r\n    },\r\n    setIsUpdatingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isUpdatingPlant = action.payload;\r\n    },\r\n    setIsDeletingPlant: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingPlant = action.payload;\r\n    },\r\n    addPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plants.push(action.payload);\r\n    },\r\n    setPlant: (state, action: PayloadAction<Plant>) => {\r\n      state.plant = action.payload;\r\n    },\r\n    setPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.plants = action.payload;\r\n    },\r\n    setFilteredPlants: (state, action: PayloadAction<Plant[]>) => {\r\n      state.filteredPlants = action.payload;\r\n    },\r\n    setPlantChanges: (state, action: PayloadAction<Plant>) => {\r\n      const {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      } = action.payload;\r\n      state.plants = state.plants.map((singlePlant: Plant): Plant => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, action: PayloadAction<PlantId>) => {\r\n      state.plants = state.plants.filter(\r\n        (plant: Plant): boolean => plant._id !== action.payload\r\n      );\r\n    },\r\n    setNumberOfVisibleEntries: (state, action: PayloadAction<number>) => {\r\n      state.numberOfVisibleEntries = action.payload;\r\n    },\r\n\r\n    // ----- Images -----\r\n    setIsUploadingPlantImage: (state, action: PayloadAction<boolean>) => {\r\n      state.isUploadingPlantImage = action.payload;\r\n    },\r\n    setIsDeletingPlantImage: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingPlantImage = action.payload;\r\n    },\r\n    setDestroyImageData: (\r\n      state,\r\n      action: PayloadAction<DestroyImageData | null>\r\n    ) => {\r\n      state.destroyImageData = action.payload;\r\n    },\r\n\r\n    // ----- Payment -----\r\n    setClientSecret: (state, action: PayloadAction<string>) => {\r\n      state.clientSecret = action.payload;\r\n    },\r\n\r\n    // ----- Messages -----\r\n    setIsCreatingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isCreatingMessage = action.payload;\r\n    },\r\n    setIsFetchingMessages: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingMessages = action.payload;\r\n    },\r\n    setIsFetchingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isFetchingMessage = action.payload;\r\n    },\r\n    setIsUpdatingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isUpdatingMessage = action.payload;\r\n    },\r\n    setIsDeletingMessage: (state, action: PayloadAction<boolean>) => {\r\n      state.isDeletingMessage = action.payload;\r\n    },\r\n    addMessage: (state, action: PayloadAction<Message>) => {\r\n      state.messages.push(action.payload);\r\n    },\r\n    setMessages: (state, action: PayloadAction<Message[]>) => {\r\n      state.messages = action.payload;\r\n    },\r\n    setMessage: (state, action: PayloadAction<Message>) => {\r\n      state.message = action.payload;\r\n    },\r\n    setMessageChanges: (state, action: PayloadAction<Message>) => {\r\n      const { _id, buyer, seller, plant, request, reply, messageState } =\r\n        action.payload;\r\n      state.messages = state.messages.map((singleMessage) => {\r\n        if (singleMessage._id === _id) {\r\n          singleMessage.buyer = buyer;\r\n          singleMessage.seller = seller;\r\n          singleMessage.plant = plant;\r\n          singleMessage.request = request;\r\n          singleMessage.reply = reply;\r\n          singleMessage.messageState = messageState;\r\n        }\r\n        return singleMessage;\r\n      });\r\n    },\r\n    removeMessage: (state, action: PayloadAction<MessageId>) => {\r\n      state.messages = state.messages.filter((message: Message): boolean => {\r\n        return message._id !== action.payload;\r\n      });\r\n    },\r\n\r\n    // ----- Requests/Replies check ------\r\n    setIsNewRequest: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewRequest = action.payload;\r\n    },\r\n    setIsNewReply: (state, action: PayloadAction<boolean>) => {\r\n      state.isNewReply = action.payload;\r\n    },\r\n    setStartAmountOfRequests: (state) => {\r\n      state.amountOfRequests = (state.loggedInUser as any).amountOfRequests;\r\n    },\r\n    setStartAmountOfReplies: (state) => {\r\n      state.amountOfReplies = (state.loggedInUser as any).amountOfReplies;\r\n    },\r\n    setAmountOfRequests: (state, action: PayloadAction<number>) => {\r\n      state.amountOfRequests = action.payload;\r\n    },\r\n    setAmountOfReplies: (state, action: PayloadAction<number>) => {\r\n      state.amountOfReplies = action.payload;\r\n    },\r\n    decreaseAmountOfRequests: (state) => {\r\n      state.amountOfRequests -= 1;\r\n    },\r\n    decreaseAmountOfReplies: (state) => {\r\n      state.amountOfReplies -= 1;\r\n    },\r\n\r\n    // ----- Interval counter -----\r\n    setIntervalId: (state, action: PayloadAction<IntervalId>) => {\r\n      state.intervalId = action.payload;\r\n    },\r\n    setDelayCounter: (state, action: PayloadAction<number>) => {\r\n      state.delayCounter = action.payload;\r\n    },\r\n    increaseDelayCounter: (state) => {\r\n      state.delayCounter += 1;\r\n    },\r\n\r\n    // ----- Pages handling -----\r\n    setTitleSectionHeight: (state, action: PayloadAction<number>) => {\r\n      state.titleSectionHeight = action.payload;\r\n    },\r\n    setAboutSectionHeight: (state, action: PayloadAction<number>) => {\r\n      state.aboutSectionHeight = action.payload;\r\n    },\r\n    scrollToAbout: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight);\r\n    },\r\n    scrollToPlants: (state) => {\r\n      scroll.scrollTo(state.titleSectionHeight + state.aboutSectionHeight);\r\n    },\r\n\r\n    // ----- Error handling -----\r\n    setErrorMessage: (state, action: PayloadAction<ErrorMessage>) => {\r\n      state.errorMessage = action.payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    // ----- Plants ------\r\n    builder.addCase(createPlant.fulfilled, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(createPlant.rejected, (state) => {\r\n      state.isCreatingPlant = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchAllPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.fulfilled, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchQueryPlants.rejected, (state) => {\r\n      state.isFetchingPlants = false;\r\n    });\r\n    builder.addCase(fetchPlant.fulfilled, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(fetchPlant.rejected, (state) => {\r\n      state.isFetchingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.fulfilled, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(updatePlant.rejected, (state) => {\r\n      state.isUpdatingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.fulfilled, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n    builder.addCase(deletePlant.rejected, (state) => {\r\n      state.isDeletingPlant = false;\r\n    });\r\n\r\n    // ----- Images -----\r\n    builder.addCase(uploadPlantImage.fulfilled, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(uploadPlantImage.rejected, (state) => {\r\n      state.isUploadingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.fulfilled, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n    builder.addCase(deletePlantImage.rejected, (state) => {\r\n      state.isDeletingPlantImage = false;\r\n    });\r\n\r\n    // ----- Messages -----\r\n    builder.addCase(createMessage.fulfilled, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(createMessage.rejected, (state) => {\r\n      state.isCreatingMessage = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.fulfilled, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchAllMessages.rejected, (state) => {\r\n      state.isFetchingMessages = false;\r\n    });\r\n    builder.addCase(fetchMessage.fulfilled, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(fetchMessage.rejected, (state) => {\r\n      state.isFetchingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.fulfilled, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(updateMessage.rejected, (state) => {\r\n      state.isUpdatingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.fulfilled, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n    builder.addCase(deleteMessage.rejected, (state) => {\r\n      state.isDeletingMessage = false;\r\n    });\r\n  },\r\n});\r\n\r\n// ----- Slice actions -----\r\nexport const {\r\n  // ----- User authentification -----\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n\r\n  // ----- Plants -----\r\n  setIsCreatingPlant,\r\n  setIsFetchingPlants,\r\n  setIsFetchingPlant,\r\n  setIsUpdatingPlant,\r\n  setIsDeletingPlant,\r\n  addPlant,\r\n  setPlants,\r\n  setFilteredPlants,\r\n  setPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n  setNumberOfVisibleEntries,\r\n\r\n  // ----- Images -----\r\n  setIsUploadingPlantImage,\r\n  setIsDeletingPlantImage,\r\n  setDestroyImageData,\r\n\r\n  // ----- Payment -----\r\n  setClientSecret,\r\n\r\n  // ----- Messages -----\r\n  setIsCreatingMessage,\r\n  setIsFetchingMessages,\r\n  setIsFetchingMessage,\r\n  setIsUpdatingMessage,\r\n  setIsDeletingMessage,\r\n  addMessage,\r\n  setMessages,\r\n  setMessage,\r\n  setMessageChanges,\r\n  removeMessage,\r\n\r\n  // ----- Requests/Replies check -----\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  decreaseAmountOfRequests,\r\n  decreaseAmountOfReplies,\r\n\r\n  // ----- Interval counter -----\r\n  setIntervalId,\r\n  setDelayCounter,\r\n  increaseDelayCounter,\r\n\r\n  // ----- Pages handling -----\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n\r\n  // ----- Error handling -----\r\n  setErrorMessage,\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import { setDelayCounter, setIntervalId } from \"../reducer/jungleSwapSlice\";\r\n\r\nexport class IntervalCounter {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n  stop = (intervalId: NodeJS.Timeout): void => {\r\n    clearInterval(intervalId);\r\n    this.dispatch(setIntervalId(null));\r\n    this.dispatch(setDelayCounter(0));\r\n  };\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NavLoggedInUserItems = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const { t } = useTranslation();\r\n\r\n  const loggedInUserTitle = () => {\r\n    return loggedInUser ? loggedInUser.username : \"\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/plants/my-own\" className=\"p-2 is-link\">\r\n        {t(\"link.myPlants\")}\r\n      </Link>\r\n      <Link to=\"/plants/create\" className=\"p-2 is-link\">\r\n        {t(\"link.createPlant\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/requests/fetch-all\"\r\n        title={isNewRequest ? \"new request\" : \"\"}\r\n        className=\"p-2 is-link\"\r\n      >\r\n        {isNewRequest && <FontAwesomeIcon icon={faBell} />}\r\n        {t(\"link.requests\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/replies/fetch-all\"\r\n        title={isNewReply ? \"new reply\" : \"\"}\r\n        className=\"p-2 is-link\"\r\n      >\r\n        {isNewReply && <FontAwesomeIcon icon={faBell} />}\r\n        {t(\"link.replies\")}\r\n      </Link>\r\n      <Link\r\n        to=\"/auth/log-out\"\r\n        title={loggedInUserTitle()}\r\n        className=\"p-2 is-link\"\r\n      >\r\n        {t(\"link.logOut\")}\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavLoggedInUserItems;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst NavAuthentificationItems = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/auth/sign-in\" className=\"p-2 is-link\">\r\n        {t(\"link.signIn\")}\r\n      </Link>\r\n      <Link to=\"/auth/sign-up\" className=\"p-2 is-link\">\r\n        {t(\"link.signUp\")}\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavAuthentificationItems;\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  setIsUserChange,\r\n  setIntervalId,\r\n  increaseDelayCounter,\r\n  setIsNewRequest,\r\n  setIsNewReply,\r\n  setStartAmountOfRequests,\r\n  setStartAmountOfReplies,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  scrollToPlants,\r\n  setMessages,\r\n  setIsFetchingMessages,\r\n  fetchAllMessages,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { IntervalCounter } from \"../lib/IntervalCounter\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell, faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport NavLoggedInUserItems from \"./NavLoggedInUserItems\";\r\nimport NavAuthentificationItems from \"./NavAuthentificationItems\";\r\n\r\nconst NavBar = (): JSX.Element => {\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const delayCounter = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.delayCounter\r\n  );\r\n  const isNewRequest = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewRequest\r\n  );\r\n  const isNewReply = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isNewReply\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalId) {\r\n        const intervalCounter = new IntervalCounter(dispatch);\r\n        intervalCounter.stop(intervalId);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchMessagesAndStartRequestsRepliesCheck = (): void => {\r\n      const setMessageVariablesAndStartInterval = (\r\n        messages: Message[]\r\n      ): void => {\r\n        const setMessageVariables = (messages: Message[]): void => {\r\n          dispatch(setMessages(messages));\r\n          dispatch(setStartAmountOfRequests());\r\n          dispatch(setStartAmountOfReplies());\r\n          dispatch(setIsUserChange(false));\r\n        };\r\n\r\n        const startInterval = (): void => {\r\n          const intervalId = setInterval(\r\n            () => {\r\n              dispatch(increaseDelayCounter());\r\n            },\r\n            1000 // every second\r\n          );\r\n          dispatch(setIntervalId(intervalId));\r\n          dispatch(increaseDelayCounter());\r\n        };\r\n\r\n        setMessageVariables(messages);\r\n        startInterval();\r\n      };\r\n\r\n      dispatch(setIsFetchingMessages(true));\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages: Message[]) => {\r\n          setMessageVariablesAndStartInterval(messages);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    };\r\n\r\n    isUserChange && fetchMessagesAndStartRequestsRepliesCheck();\r\n  }, [isUserChange]);\r\n\r\n  useEffect(() => {\r\n    const fetchMessagesAndCheckNewRequestsReplies = (): void => {\r\n      const setMessagesVariableAndCheckNewRequestsReplies = (\r\n        messages: Message[]\r\n      ): void => {\r\n        const checkNewRequests = (messages: Message[]): void => {\r\n          const calculateAmountOfRequests = (messages: Message[]): number => {\r\n            const currentAmountOfRequests = messages.filter(\r\n              (message: Message): boolean => {\r\n                const { seller, messageState } = message;\r\n                return (\r\n                  (seller as User)._id === (loggedInUser as User)._id &&\r\n                  messageState === true\r\n                );\r\n              }\r\n            ).length;\r\n            return currentAmountOfRequests;\r\n          };\r\n\r\n          const checkAmountOfRequests = (\r\n            currentAmountOfRequests: number,\r\n            amountOfRequests: number\r\n          ): void => {\r\n            if (amountOfRequests < currentAmountOfRequests) {\r\n              dispatch(setIsNewRequest(true));\r\n            }\r\n            if (amountOfRequests !== currentAmountOfRequests) {\r\n              dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n            }\r\n          };\r\n\r\n          const currentAmountOfRequests = calculateAmountOfRequests(messages);\r\n          checkAmountOfRequests(currentAmountOfRequests, amountOfRequests);\r\n        };\r\n\r\n        const checkNewReplies = (messages: Message[]): void => {\r\n          const calculateAmountOfReplies = (messages: Message[]): number => {\r\n            const currentAmountOfReplies = messages.filter(\r\n              (message: Message): boolean => {\r\n                const { buyer, reply } = message;\r\n                return (\r\n                  (buyer as User)._id === (loggedInUser as User)._id &&\r\n                  reply !== \"\"\r\n                );\r\n              }\r\n            ).length;\r\n            return currentAmountOfReplies;\r\n          };\r\n\r\n          const checkAmountOfReplies = (\r\n            currentAmountOfReplies: number,\r\n            amountOfReplies: number\r\n          ): void => {\r\n            if (amountOfReplies < currentAmountOfReplies) {\r\n              dispatch(setIsNewReply(true));\r\n            }\r\n            if (amountOfReplies !== currentAmountOfReplies) {\r\n              dispatch(setAmountOfReplies(currentAmountOfReplies));\r\n            }\r\n          };\r\n\r\n          const currentAmountOfReplies = calculateAmountOfReplies(messages);\r\n          checkAmountOfReplies(currentAmountOfReplies, amountOfReplies);\r\n        };\r\n\r\n        dispatch(setMessages(messages));\r\n        checkNewRequests(messages);\r\n        checkNewReplies(messages);\r\n      };\r\n\r\n      dispatch(fetchAllMessages())\r\n        .unwrap()\r\n        .then((messages: Message[]) => {\r\n          setMessagesVariableAndCheckNewRequestsReplies(messages);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    };\r\n\r\n    if (isUserChange) {\r\n      dispatch(setStartAmountOfRequests());\r\n      dispatch(setStartAmountOfReplies());\r\n    }\r\n    loggedInUser && fetchMessagesAndCheckNewRequestsReplies();\r\n  }, [delayCounter]);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar variant=\"dark\" expand=\"lg\" fixed=\"top\" className=\"pl-5\">\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" className=\"is-link\" onClick={scroll.scrollToTop}>\r\n            {t(\"link.jungleSwap\")}\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\">\r\n          {(isNewRequest || isNewReply) && <FontAwesomeIcon icon={faBell} />}\r\n        </Navbar.Toggle>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Link\r\n              to=\"/\"\r\n              className=\"p-2 is-link\"\r\n              onClick={() => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              {t(\"link.allPlants\")}\r\n            </Link>\r\n            {loggedInUser ? (\r\n              <NavLoggedInUserItems />\r\n            ) : (\r\n              <NavAuthentificationItems />\r\n            )}\r\n            <Link\r\n              to=\"/\"\r\n              className=\"p-2 is-link\"\r\n              onClick={() => {\r\n                dispatch(scrollToPlants());\r\n              }}\r\n            >\r\n              <FontAwesomeIcon icon={faSearch} />\r\n            </Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { linkedInPath1, linkedInPath2 } from \"../lib/externalLinkPaths\";\r\n\r\nconst Footer = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n  const currentTime = new Date();\r\n  const year = currentTime.getFullYear();\r\n\r\n  return (\r\n    <div className=\"has-background-image\">\r\n      <footer>\r\n        {t(\"footer.copyright\")} {year}{\" \"}\r\n        <Link\r\n          to={{ pathname: linkedInPath1 }}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n          className=\"is-link\"\r\n        >\r\n          {t(\"footer.appAuthor1\")}\r\n        </Link>{\" \"}\r\n        &amp;{\" \"}\r\n        <Link\r\n          to={{ pathname: linkedInPath2 }}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n          className=\"is-link\"\r\n        >\r\n          {t(\"footer.appAuthor2\")}\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","// LinkedIn\r\n\r\nexport const linkedInPath1: string = \"https://www.linkedin.com/in/christian-gerbig/\";\r\nexport const linkedInPath2: string = \"https://www.linkedin.com/in/lisa-montebaur/\";\r\n\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import { useTranslation } from \"react-i18next\";\r\nimport plantsImage from \"../images/JungleSwap_Home.png\";\r\nimport plantPotIcon from \"../images/JungleSwap_Icon.png\";\r\n\r\nconst About = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"about centered container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n          <img src={plantsImage} alt=\"plants\" className=\"is-background-image\" />\r\n        </div>\r\n        <br />\r\n        <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 is-no-overflow\">\r\n          <article>\r\n            <header>\r\n              <h4>{t(\"about.headline\")}</h4>\r\n              <h5>{t(\"about.subheadline\")}</h5>\r\n            </header>\r\n            <p>\r\n              {t(\"about.paragraph.line1\")}<br />\r\n              {t(\"about.paragraph.line2\")}<br />\r\n              {t(\"about.paragraph.line3\")}<br />\r\n              {t(\"about.paragraph.line4\")}<br />\r\n              {t(\"about.paragraph.line5\")}<br />\r\n              {t(\"about.paragraph.line6\")}\r\n            </p>\r\n            <img src={plantPotIcon} alt=\"plant pot\" className=\"is-icon\" />\r\n          </article>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","const WaitSpinner = (): JSX.Element => {\r\n  return (\r\n    <div className=\"d-flex align-items-center justify-content-center\">\r\n      <div role=\"status\" className=\"spinner-border m-3 loading-wait-spinner\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitSpinner;\r\n","import {\r\n  fetchAllPlants,\r\n  setErrorMessage,\r\n  setIsFetchingPlants,\r\n  setPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\nexport class PlantIO {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n  fetchAll = (): void => {\r\n    this.dispatch(setIsFetchingPlants(true));\r\n    this.dispatch(fetchAllPlants())\r\n      .unwrap()\r\n      .then((plants: Plant[]) => {\r\n        this.dispatch(setPlants(plants));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { PlantIO } from \"../lib/plantIO\";\r\nimport {\r\n  fetchQueryPlants,\r\n  setErrorMessage,\r\n  setFilteredPlants,\r\n  setIsFetchingPlants,\r\n  setPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\nconst SearchPlant = (): JSX.Element => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [filter, setFilter] = useState(\"\");\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const fetchPlantQueryByName = (query: string): void => {\r\n      if (query) {\r\n        dispatch(setIsFetchingPlants(true));\r\n        dispatch(fetchQueryPlants(query))\r\n          .unwrap()\r\n          .then((plants: Plant[]) => {\r\n            dispatch(setPlants(plants));\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            dispatch(setErrorMessage(rejectedValue.message));\r\n          });\r\n      } else {\r\n        const plantIO = new PlantIO(dispatch);\r\n        plantIO.fetchAll();\r\n      }\r\n    };\r\n\r\n    fetchPlantQueryByName(query);\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    const filterPlantsByLocation = (filter: string, plants: Plant[]): void => {\r\n      const filteredPlants = plants.filter(({ location }: Plant): boolean => {\r\n        return filter === location || filter === \"\";\r\n      });\r\n      dispatch(setFilteredPlants(filteredPlants));\r\n    };\r\n\r\n    filterPlantsByLocation(filter, plants);\r\n  }, [filter]);\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <hr className=\"horizontal-rule\" />\r\n      <h4>{t(\"searchPlant.headline\")}</h4>\r\n      <div className=\"d-flex\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder={t(\"searchPlant.namePlaceholder\")}\r\n          value={query}\r\n          className=\"is-width-medium form-control\"\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n            setQuery(event.target.value);\r\n          }}\r\n        />\r\n        <select\r\n          name=\"location\"\r\n          className=\"location-filter form-control ml-4\"\r\n          onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {\r\n            setFilter(event.target.value);\r\n          }}\r\n        >\r\n          <option value=\"\">{t(\"selectLocation.title\")}</option>\r\n          <option value=\"sun\">{t(\"selectLocation.sun\")}</option>\r\n          <option value=\"shade\">{t(\"selectLocation.shade\")}</option>\r\n          <option value=\"sun and shade\">\r\n            {t(\"selectLocation.sunAndShade\")}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPlant;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Plant } from \"../typeDefinitions\";\r\n\r\ntype PlantThumbnailProps = {\r\n  plant: Plant;\r\n};\r\n\r\nconst PlantThumbnail = ({ plant }: PlantThumbnailProps): JSX.Element => {\r\n  const { _id, name, imageUrl, price } = plant;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"col mb-5\">\r\n      <div className=\"card card-medium-width text-center h-100\">\r\n        <img\r\n          src={imageUrl}\r\n          alt={name}\r\n          className=\"card-img-top is-image-size-large\"\r\n        />\r\n        <div className=\"card-body mb-5\">\r\n          <h5>{name}</h5>\r\n          <p>\r\n            {price} {t(\"plantThumbnail.currency\")}\r\n          </p>\r\n          <Link\r\n            className=\"btn form-control is-width-medium is-link\"\r\n            to={`/plants/fetch/${_id}`}\r\n          >\r\n            {t(\"link.details\")}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantThumbnail;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { setNumberOfVisibleEntries } from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { Plant } from \"../typeDefinitions\";\r\nimport PlantThumbnail from \"./PlantThumbnail\";\r\n\r\nconst PlantsOverview = (): JSX.Element => {\r\n  const filteredPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.filteredPlants\r\n  );\r\n  const numberOfVisibleEntries = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.numberOfVisibleEntries\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  const handleClickButton = (): void => {\r\n    dispatch(setNumberOfVisibleEntries(numberOfVisibleEntries + 6))\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-2 row-cols-xl-3 row-cols-xxl-3\">\r\n        {filteredPlants.map((plant: Plant, index: number): JSX.Element => {\r\n          const { _id } = plant;\r\n          return index < numberOfVisibleEntries ? (\r\n            <PlantThumbnail plant={plant} key={_id} />\r\n          ) : (\r\n            <></>\r\n          );\r\n        })}\r\n      </div>\r\n      {numberOfVisibleEntries < filteredPlants.length ? (\r\n        <div className=\"is-text-align-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-sm is-width-medium form-control\"\r\n            onClick={handleClickButton}\r\n          >\r\n            {t(\"button.more\")}\r\n          </button>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantsOverview;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport WaitSpinner from \"./WaitSpinner\";\r\nimport SearchPlant from \"./SearchPlant\";\r\nimport PlantsOverview from \"./PlantsOverview\";\r\n\r\nconst AllPlants = (): JSX.Element => {\r\n  const isFetchingPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlants\r\n  );\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-3\">\r\n        <h2>{t(\"allPlants.headline\")}</h2>\r\n      </div>\r\n      <SearchPlant />\r\n      {isFetchingPlants ? <WaitSpinner /> : <PlantsOverview />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllPlants;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport { scrollToAbout } from \"../reducer/jungleSwapSlice\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst Title = (): JSX.Element => {\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"row my-5\">\r\n      <div className=\"col-6 offset-3 my-5 has-border-around\">\r\n        <h2 className=\"title mb-2\">{t(\"title.headline\")}</h2>\r\n        <h5 className=\"mt-3 mb-5\">{t(\"title.subheadline\")}</h5>\r\n        <div className=\"mb-5\">\r\n          <Link\r\n            to={\"/\"}\r\n            className=\"try-it-link is-link\"\r\n            onClick={() => {\r\n              dispatch(scrollToAbout());\r\n            }}\r\n          >\r\n            {t(\"link.tryIt\")}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setTitleSectionHeight,\r\n  setAboutSectionHeight,\r\n  setFilteredPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport About from \"../components/About\";\r\nimport AllPlants from \"../components/AllPlants\";\r\nimport Title from \"../components/Title\";\r\nimport { RootState } from \"../store\";\r\nimport { PlantIO } from \"../lib/plantIO\";\r\n\r\nconst Home = (): JSX.Element => {\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n  const dispatch = useAppDispatch();\r\n  const elementRef = useRef<HTMLElement[]>([]);\r\n\r\n  useEffect(() => {\r\n    const elementHeight = (elementRef: HTMLElement): number => {\r\n      return Math.round(elementRef.getBoundingClientRect().height);\r\n    };\r\n\r\n    const plantIO = new PlantIO(dispatch);\r\n    plantIO.fetchAll();\r\n    const titleSectionHeight = elementHeight(elementRef.current[0]);\r\n    dispatch(setTitleSectionHeight(titleSectionHeight));\r\n    const aboutSectionHeight = elementHeight(elementRef.current[1]);\r\n    dispatch(setAboutSectionHeight(aboutSectionHeight));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(setFilteredPlants(plants));\r\n  }, [plants]);\r\n\r\n  return (\r\n    <div>\r\n      <section\r\n        ref={(titleSection) => {\r\n          (elementRef.current[0] as HTMLElement | null) = titleSection;\r\n        }}\r\n        className=\"text-center pt-5 pb-5 title-header has-fixed-background-image\"\r\n      >\r\n        <Title />\r\n      </section>\r\n\r\n      <section\r\n        ref={(aboutSection) => {\r\n          (elementRef.current[1] as HTMLElement | null) = aboutSection;\r\n        }}\r\n      >\r\n        <About />\r\n      </section>\r\n\r\n      <section>\r\n        <AllPlants />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\n\r\ntype ErrorMessageOutputProps = {\r\n  printErrorMessage: Function;\r\n};\r\n\r\nconst ErrorMessageOutput = ({\r\n  printErrorMessage,\r\n}: ErrorMessageOutputProps): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <span className=\"is-danger is-text-bold is-display-block\">\r\n        {printErrorMessage(errorMessage)}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorMessageOutput;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n  signUp,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { User } from \"../typeDefinitions\";\r\nimport ErrorMessageOutput from \"../components/ErrorMessageOutput\";\r\n\r\nconst SignUp = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignUp = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    const setUserVariablesAndReturnToHomePage = (user: User): void => {\r\n      dispatch(setLoggedInUser(user));\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    };\r\n\r\n    event.preventDefault();\r\n    const { username, email, password } = event.target as any;\r\n    const newUser: User = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    dispatch(signUp(newUser))\r\n      .unwrap()\r\n      .then((user) => {\r\n        setUserVariablesAndReturnToHomePage(user);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  const printErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Username missing\":\r\n        return t(\"errors.signUp.form.usernameMissing\");\r\n      case \"Form: Email missing\":\r\n        return t(\"errors.signUp.form.emailMissing\");\r\n      case \"Form: Password missing\":\r\n        return t(\"errors.signUp.form.passwordMissing\");\r\n      case \"Form: Email format invalid\":\r\n        return t(\"errors.signUp.form.emailFormatInvalid\");\r\n      case \"Form: Password invalid\":\r\n        return t(\"errors.signUp.form.passwordInvalid\");\r\n      case \"Form: Username or email already exists\":\r\n        return t(\"errors.signUp.form.userAlreadyExists\");\r\n      default:\r\n        return t(\"errors.general\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">{t(\"signUp.headline\")}</h2>\r\n        <form\r\n          className=\"form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleSignUp(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\">{t(\"signUp.username\")}</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n              placeholder={t(\"signUp.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\">{t(\"signUp.email\")}</label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder={t(\"signUp.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\">{t(\"signUp.password\")}</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder={t(\"signUp.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          {errorMessage && errorMessage.includes(\"Form\") && (\r\n            <ErrorMessageOutput printErrorMessage={printErrorMessage} />\r\n          )}\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className=\"btn btn-sm mt-4 is-width-medium form-control\"\r\n          >\r\n            {t(\"button.signUp\")}\r\n          </button>\r\n          <p className=\"is-padding-top\">\r\n            {\" \"}\r\n            {t(\"signUp.alreadyAccountCreated\")}{\" \"}\r\n          </p>\r\n          <div className=\"text-right\">\r\n            <Link to={\"/auth/sign-in\"} className=\"is-link\">\r\n              <button className=\"btn btn-sm ml-4 is-width-medium form-control mt-0 mb-2\">\r\n                {t(\"button.signIn\")}\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsUserChange,\r\n  setLoggedInUser,\r\n  signIn,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport ErrorMessageOutput from \"../components/ErrorMessageOutput\";\r\n\r\nconst SignIn = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    dispatch(setErrorMessage(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const handleSignIn = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    const setUserVariablesAndReturnToHomePage = (user: User): void => {\r\n      dispatch(setLoggedInUser(user));\r\n      dispatch(setIsUserChange(true));\r\n      const { amountOfRequests, amountOfReplies } = user;\r\n      dispatch(setAmountOfRequests(amountOfRequests as number));\r\n      dispatch(setAmountOfReplies(amountOfReplies as number));\r\n      history.push(\"/\");\r\n    };\r\n\r\n    event.preventDefault();\r\n    const { email, password } = event.target as any;\r\n    const user: User = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    dispatch(signIn(user))\r\n      .unwrap()\r\n      .then((user) => {\r\n        setUserVariablesAndReturnToHomePage(user);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  const printErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Email missing\":\r\n        return t(\"errors.signIn.form.emailMissing\");\r\n      case \"Form: Password missing\":\r\n        return t(\"errors.signIn.form.passwordMissing\");\r\n      case \"Form: Email format invalid\":\r\n        return t(\"errors.signIn.form.emailFormatInvalid\");\r\n      case \"Form: Passwords don't match\":\r\n        return t(\"errors.signIn.form.noMatchPasswords\");\r\n      default:\r\n        return t(\"errors.general\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">{t(\"signIn.headline\")}</h2>\r\n        <form\r\n          className=\"form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>): void => {\r\n            handleSignIn(event);\r\n          }}\r\n        >\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\">{t(\"signIn.email\")}</label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n              placeholder={t(\"signIn.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\">{t(\"signIn.password\")}</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"InputPassword\"\r\n              name=\"password\"\r\n              placeholder={t(\"signIn.enterPlaceholder\")}\r\n              className=\"form-control is-width-full\"\r\n            />\r\n          </div>\r\n          {errorMessage && errorMessage.includes(\"Form\") && (\r\n            <ErrorMessageOutput printErrorMessage={printErrorMessage} />\r\n          )}\r\n          <button\r\n            type=\"submit\"\r\n            formNoValidate\r\n            className=\"btn btn-sm mt-4 is-width-medium form-control\"\r\n          >\r\n            {t(\"button.signIn\")}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setLoggedInUser,\r\n  logOut,\r\n  setIsNewRequest,\r\n  setAmountOfRequests,\r\n  setAmountOfReplies,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { IntervalCounter } from \"../lib/IntervalCounter\";\r\n\r\nconst LogOut = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const intervalId = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.intervalId\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const logOutUser = (\r\n      loggedInUser: User,\r\n      intervalId: NodeJS.Timeout\r\n    ): void => {\r\n      const updateUserRequestsReplies = (loggedInUser: User): User => {\r\n        const clonedUser: User = JSON.parse(JSON.stringify(loggedInUser));\r\n        clonedUser.amountOfRequests = amountOfRequests;\r\n        clonedUser.amountOfReplies = amountOfReplies;\r\n        dispatch(setLoggedInUser(clonedUser));\r\n        return clonedUser;\r\n      };\r\n\r\n      const updateUserData = (loggedInUser: User): void => {\r\n        const resetRequestReplyVariablesAndReturnToHomePage = (\r\n          intervalId: NodeJS.Timeout\r\n        ): void => {\r\n          const resetRequestReplyVariables = (): void => {\r\n            dispatch(setIsNewRequest(false));\r\n            dispatch(setAmountOfRequests(0));\r\n            dispatch(setAmountOfReplies(0));\r\n          };\r\n\r\n          const returnToHomePage = (): void => {\r\n            history.push(\"/\");\r\n            scroll.scrollToTop();\r\n          };\r\n\r\n          dispatch(setLoggedInUser(null));\r\n          const intervalCounter = new IntervalCounter(dispatch);\r\n          intervalCounter.stop(intervalId);\r\n          resetRequestReplyVariables();\r\n          returnToHomePage();\r\n        };\r\n\r\n        dispatch(logOut(loggedInUser))\r\n          .unwrap()\r\n          .then(() => {\r\n            resetRequestReplyVariablesAndReturnToHomePage(intervalId);\r\n          })\r\n          .catch((rejectedValue: any) => {\r\n            dispatch(setErrorMessage(rejectedValue.message));\r\n          });\r\n      };\r\n\r\n      const updatedUser = updateUserRequestsReplies(loggedInUser);\r\n      updateUserData(updatedUser);\r\n    };\r\n\r\n    logOutUser(loggedInUser as User, intervalId as NodeJS.Timeout);\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import {\r\n  checkUserLoggedIn,\r\n  setErrorMessage,\r\n  setLoggedInUser,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User } from \"../typeDefinitions\";\r\n\r\nexport class Routing {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n  protect = (): void => {\r\n    this.dispatch(checkUserLoggedIn())\r\n      .unwrap()\r\n      .then((user: User) => {\r\n        this.dispatch(setLoggedInUser(user));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  addPlant,\r\n  createPlant,\r\n  setErrorMessage,\r\n  uploadPlantImage,\r\n  setIsUploadingPlantImage,\r\n  setIsCreatingPlant,\r\n  setNumberOfVisibleEntries,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant, UploadImageData } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport ErrorMessageOutput from \"../components/ErrorMessageOutput\";\r\n\r\nconst CreatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingPlantImage\r\n  );\r\n  const isCreatingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isCreatingPlant\r\n  );\r\n  const plants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.plants\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      dispatch(setErrorMessage(null));\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handleUploadPlantImage = (\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ): void => {\r\n    const createSinglePlant = (\r\n      { name, description, size, location, price }: any,\r\n      { imageUrl, imagePublicId }: UploadImageData\r\n    ): void => {\r\n      const addPlantAndReturnToHomePage = (plant: Plant): void => {\r\n        dispatch(addPlant(plant));\r\n        history.push(\"/\");\r\n        dispatch(setNumberOfVisibleEntries(plants.length));\r\n        scroll.scrollToBottom();\r\n      };\r\n\r\n      const newPlant: Plant = {\r\n        name: name.value,\r\n        description: description.value,\r\n        size: size.value,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location: location.value,\r\n        price: price.value,\r\n      };\r\n      dispatch(setIsCreatingPlant(true));\r\n      dispatch(createPlant(newPlant))\r\n        .unwrap()\r\n        .then((plant: Plant) => {\r\n          addPlantAndReturnToHomePage(plant);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    };\r\n\r\n    event.preventDefault();\r\n    const { plantImage } = event.target as any;\r\n    const image = plantImage.files[0];\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    dispatch(setIsUploadingPlantImage(true));\r\n    dispatch(uploadPlantImage(uploadForm))\r\n      .unwrap()\r\n      .then(({ imageUrl, imagePublicId }: UploadImageData) => {\r\n        createSinglePlant(event.target, { imageUrl, imagePublicId });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  const printErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Name missing\":\r\n        return t(\"errors.plant.form.nameMissing\");\r\n      case \"Form: Description missing\":\r\n        return t(\"errors.plant.form.descriptionMissing\");\r\n      case \"Form: Size missing\":\r\n        return t(\"errors.plant.form.sizeMissing\");\r\n      case \"Form: Location missing\":\r\n        return t(\"errors.plant.form.locationMissing\");\r\n      case \"Form: Price missing\":\r\n        return t(\"errors.plant.form.priceMissing\");\r\n      case \"Form: Image missing\":\r\n        return t(\"errors.plant.form.imageMissing\");\r\n      default:\r\n        return t(\"errors.general\");\r\n    }\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-12 col-md-6 offset-md-4\">\r\n        <h2 className=\"mb-5 text-left\">{t(\"createPlantForm.headline\")}</h2>\r\n        <form\r\n          className=\"form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\r\n            handleUploadPlantImage(event);\r\n          }}\r\n        >\r\n          <label htmlFor=\"enterName\">{t(\"createPlantForm.name\")}</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterName\"\r\n            name=\"name\"\r\n            placeholder={t(\"createPlantForm.enterPlaceholder\")}\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterDescription\">\r\n            {t(\"createPlantForm.description\")}\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"enterDescription\"\r\n            name=\"description\"\r\n            placeholder={t(\"createPlantForm.enterPlaceholder\")}\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterSize\">{t(\"createPlantForm.size\")}</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterSize\"\r\n            name=\"size\"\r\n            placeholder={t(\"createPlantForm.enterPlaceholder\")}\r\n            min=\"1\"\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterLocation\">{t(\"createPlantForm.location\")}</label>\r\n          <select\r\n            id=\"enterLocation\"\r\n            name=\"location\"\r\n            className=\"mb-4 form-control p-2\"\r\n          >\r\n            <option>{t(\"selectLocation.title\")}</option>\r\n            <option value=\"sun\">{t(\"selectLocation.sun\")}</option>\r\n            <option value=\"shade\">{t(\"selectLocation.shade\")}</option>\r\n            <option value=\"sun and shade\">\r\n              {t(\"selectLocation.sunAndShade\")}\r\n            </option>\r\n          </select>\r\n          <label htmlFor=\"enterPrice\">{t(\"createPlantForm.price\")}</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"enterPrice\"\r\n            name=\"price\"\r\n            placeholder={t(\"createPlantForm.enterPlaceholder\")}\r\n            min=\"1\"\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          <label htmlFor=\"enterImage\">{t(\"createPlantForm.image\")}</label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"enterImage\"\r\n            name=\"plantImage\"\r\n            className=\"mb-4 form-control is-width-full\"\r\n          />\r\n          {errorMessage && errorMessage.includes(\"Form\") && (\r\n            <ErrorMessageOutput printErrorMessage={printErrorMessage} />\r\n          )}\r\n          <div className=\"col-12 text-right pr-0\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isUploadingPlantImage || isCreatingPlant ? true : false}\r\n              className=\"ml-4 mb-2 btn btn-sm form-control is-width-medium\"\r\n            >\r\n              {t(\"button.create\")}\r\n            </button>\r\n            <button\r\n              className=\"ml-4 mb-2 btn btn-sm form-control is-width-medium\"\r\n              onClick={() => {\r\n                history.goBack();\r\n              }}\r\n            >\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePlantForm;\r\n","import {\r\n  deletePlantImage,\r\n  setErrorMessage,\r\n  setIsDeletingPlantImage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { DestroyImageData } from \"../typeDefinitions\";\r\n\r\nexport class PlantImageIO {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n  delete = (destroyImageData: DestroyImageData): void => {\r\n    this.dispatch(setIsDeletingPlantImage(true));\r\n    this.dispatch(deletePlantImage(destroyImageData))\r\n      .unwrap()\r\n      .then(() => {\r\n        return;\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { Link, Redirect, useParams, useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport WaitSpinner from \"../components/WaitSpinner\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsFetchingPlant,\r\n  fetchPlant,\r\n  setPlant,\r\n  setIsDeletingPlant,\r\n  deletePlant,\r\n  removePlant,\r\n  setIsDeletingMessage,\r\n  deleteMessage,\r\n  removeMessage,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, PlantId, Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { PlantImageIO } from \"../lib/plantImageIO\";\r\n\r\nconst PlantDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isFetchingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlant\r\n  );\r\n  const isDeletingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlant\r\n  );\r\n  const isDeletingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlantImage\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n  const isDeletingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingMessage\r\n  );\r\n  const { plantId } = useParams<{ plantId: PlantId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n  const {\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n    creator,\r\n  } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    const fetchPlantData = (plantId: PlantId): void => {\r\n      const setPlantAndScrollToTop = (plant: Plant): void => {\r\n        dispatch(setPlant(plant));\r\n        scroll.scrollToTop();\r\n      };\r\n\r\n      dispatch(setIsFetchingPlant(true));\r\n      dispatch(fetchPlant(plantId))\r\n        .unwrap()\r\n        .then((plant: Plant) => {\r\n          setPlantAndScrollToTop(plant);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    };\r\n\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    loggedInUser && fetchPlantData(plantId);\r\n  }, []);\r\n\r\n  const handleDelete = () => {\r\n    const deleteRemainingMessages = (\r\n      messages: Message[],\r\n      plantId: PlantId\r\n    ): void => {\r\n      messages.forEach((message: Message): void => {\r\n        const { _id, plant } = message;\r\n        if ((plant as Plant)._id === plantId) {\r\n          dispatch(setIsDeletingMessage(true));\r\n          dispatch(deleteMessage(_id as PlantId))\r\n            .unwrap()\r\n            .then(() => {\r\n              dispatch(removeMessage(_id as PlantId));\r\n            })\r\n            .catch((rejectedValue: any) => {\r\n              dispatch(setErrorMessage(rejectedValue.message));\r\n            });\r\n        }\r\n      });\r\n    };\r\n\r\n    const deleteSinglePlant = (plantId: PlantId): void => {\r\n      const removePlantAndReturnToPlantsSection = (plantId: PlantId): void => {\r\n        dispatch(removePlant(plantId));\r\n        history.goBack();\r\n      };\r\n\r\n      dispatch(setIsDeletingPlant(true));\r\n      dispatch(deletePlant(plantId))\r\n        .unwrap()\r\n        .then(() => {\r\n          removePlantAndReturnToPlantsSection(plantId);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    };\r\n\r\n    deleteRemainingMessages(messages, _id as PlantId);\r\n    const handlePlantImageIO = new PlantImageIO(dispatch);\r\n    handlePlantImageIO.delete({ imagePublicId });\r\n    deleteSinglePlant(_id as PlantId);\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/sign-up\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2>{t(\"plantDetails.headline\")}</h2>\r\n      </div>\r\n      {isFetchingPlant || !creator ? (\r\n        <WaitSpinner />\r\n      ) : (\r\n        <div className=\"col\">\r\n          <div className=\"card is-card-width-large\">\r\n            <img\r\n              src={imageUrl}\r\n              alt={name}\r\n              className=\"card-img-top is-image-size-large\"\r\n            />\r\n            <div className=\"ml-2 mt-2\">\r\n              <span className=\"is-text-bold\">{t(\"plantDetails.name\")}</span>{\" \"}\r\n              {name}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span className=\"is-text-bold\">\r\n                {t(\"plantDetails.description\")}\r\n              </span>{\" \"}\r\n              {description}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span className=\"is-text-bold\">{t(\"plantDetails.size\")}</span>{\" \"}\r\n              {size} {t(\"plantDetails.sizeUnit\")}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span>{t(\"plantDetails.likes\")}</span> {location}\r\n            </div>\r\n            <div className=\"ml-2 mt-2\">\r\n              <span className=\"is-text-bold\">{t(\"plantDetails.price\")}</span>{\" \"}\r\n              {price} {t(\"plantDetails.currency\")}\r\n            </div>\r\n            <div className=\"ml-2 mt-2 col justify-content-center\">\r\n              <div className=\"row-2 justify-content-center\">\r\n                <div className=\"card-body text-right pt-0\">\r\n                  {loggedInUser._id === (creator as User)._id ? (\r\n                    <div className=\"p-0\">\r\n                      <Link to={\"/plants/update\"} className=\"is-link\">\r\n                        <button className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\">\r\n                          {t(\"button.update\")}\r\n                        </button>\r\n                      </Link>\r\n                      <button\r\n                        disabled={\r\n                          isDeletingMessage ||\r\n                          isDeletingPlantImage ||\r\n                          isDeletingPlant\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\"\r\n                        onClick={handleDelete}\r\n                      >\r\n                        {t(\"button.delete\")}\r\n                      </button>\r\n                    </div>\r\n                  ) : (\r\n                    <div>\r\n                      <Link to=\"/plants/checkout\" className=\"is-link\">\r\n                        <button className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\">\r\n                          {t(\"button.buy\")}\r\n                        </button>\r\n                      </Link>\r\n                      <Link to=\"/messages/create\" className=\"is-link\">\r\n                        <button className=\"btn btn-sm ml-2 form-control is-width-medium mb-2\">\r\n                          {t(\"button.swap\")}\r\n                        </button>\r\n                      </Link>\r\n                    </div>\r\n                  )}\r\n                  <button\r\n                    className=\"btn btn-sm ml-2 form-control is-width-medium mb-3\"\r\n                    onClick={() => {\r\n                      history.goBack();\r\n                    }}\r\n                  >\r\n                    {t(\"button.goBack\")}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import { useEffect, useRef } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setPlant,\r\n  setIsUpdatingPlant,\r\n  updatePlant,\r\n  setPlantChanges,\r\n  setIsUploadingPlantImage,\r\n  uploadPlantImage,\r\n  setDestroyImageData,\r\n  setErrorMessage,\r\n  setNumberOfVisibleEntries,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant, PlantId, UploadImageData } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { PlantImageIO } from \"../lib/plantImageIO\";\r\nimport WaitSpinner from \"../components/WaitSpinner\";\r\n\r\nconst UpdatePlantForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUploadingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUploadingPlantImage\r\n  );\r\n  const isDeletingPlantImage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingPlantImage\r\n  );\r\n  const destroyImageData = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.destroyImageData\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isUpdatingPlant = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUpdatingPlant\r\n  );\r\n  const plants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.plants\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const selectElementRef = useRef<HTMLSelectElement | null>(null);\r\n  const { t } = useTranslation();\r\n  const { name, description, size, imageUrl, price } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    const setPlantLocation = ({ location }: Plant): void => {\r\n      if (location) {\r\n        (selectElementRef.current as HTMLSelectElement).value = location;\r\n      }\r\n    };\r\n\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      setPlantLocation(plant);\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handlePlantEntryChange = (\r\n    { target }: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\r\n    plant: Plant\r\n  ): void => {\r\n    const clonedPlant: Plant = JSON.parse(JSON.stringify(plant));\r\n    switch (target.name) {\r\n      case \"name\":\r\n        clonedPlant.name = target.value;\r\n        break;\r\n      case \"description\":\r\n        clonedPlant.description = target.value;\r\n        break;\r\n      case \"size\":\r\n        clonedPlant.size = target.value as unknown as number;\r\n        break;\r\n      case \"location\":\r\n        clonedPlant.location = target.value;\r\n        break;\r\n      case \"price\":\r\n        clonedPlant.price = target.value as unknown as number;\r\n    }\r\n    dispatch(setPlant(clonedPlant));\r\n  };\r\n\r\n  const handlePlantImageChange = (\r\n    { target }: React.ChangeEvent<HTMLInputElement>,\r\n    plant: Plant\r\n  ): void => {\r\n    const setImageDataForPlant = (\r\n      plant: Plant,\r\n      { imageUrl, imagePublicId }: UploadImageData\r\n    ) => {\r\n      const clonedPlant = JSON.parse(JSON.stringify(plant));\r\n      clonedPlant.imagePublicId = imagePublicId;\r\n      clonedPlant.imageUrl = imageUrl;\r\n      dispatch(setPlant(clonedPlant));\r\n    };\r\n\r\n    const image = (target.files as any)[0];\r\n    const { imagePublicId } = plant as Plant;\r\n    dispatch(setDestroyImageData({ imagePublicId }));\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    dispatch(setIsUploadingPlantImage(true));\r\n    dispatch(uploadPlantImage(uploadForm))\r\n      .unwrap()\r\n      .then(({ imageUrl, imagePublicId }: UploadImageData) => {\r\n        setImageDataForPlant(plant, { imageUrl, imagePublicId });\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  const handleUpdatePlant = () => {\r\n    const updatePlantData = ({\r\n      _id,\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    }: Plant): void => {\r\n      const setPlantChangesAndReturnToPlantsSection = (\r\n        updatedPlant: Plant\r\n      ): void => {\r\n        dispatch(setPlantChanges(updatedPlant));\r\n        history.goBack();\r\n      };\r\n\r\n      const updatedPlant: Plant = {\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      };\r\n      dispatch(setIsUpdatingPlant(true));\r\n      dispatch(updatePlant({ plantId: _id as PlantId, updatedPlant }))\r\n        .unwrap()\r\n        .then((updatedPlant) => {\r\n          setPlantChangesAndReturnToPlantsSection(updatedPlant);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    };\r\n\r\n    if (destroyImageData) {\r\n      const handlePlantImageIO = new PlantImageIO(dispatch);\r\n      handlePlantImageIO.delete(destroyImageData);\r\n    }\r\n    updatePlantData(plant);\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-12 col-md-6 offset-md-6\">\r\n        <h2 className=\"mt-5 mb-4 text-left\">{t(\"updatePlantForm.headline\")}</h2>\r\n        <div className=\"card is-card-width-large mb-5\">\r\n          {isUploadingPlantImage || isDeletingPlantImage || isUpdatingPlant ? (\r\n            <WaitSpinner />\r\n          ) : (\r\n            <img\r\n              src={imageUrl}\r\n              alt={name}\r\n              className=\"mb-2 is-image-size-medium\"\r\n            />\r\n          )}\r\n          <div className=\"card-body\">\r\n            <label htmlFor=\"updateName\">{t(\"updatePlantForm.name\")}</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateName\"\r\n              name=\"name\"\r\n              value={name}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateDescription\">\r\n              {t(\"updatePlantForm.description\")}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"updateDescription\"\r\n              name=\"description\"\r\n              value={description}\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateSize\">{t(\"updatePlantForm.size\")}</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updateSize\"\r\n              name=\"size\"\r\n              value={size}\r\n              min=\"1\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateLocation\">\r\n              {t(\"updatePlantForm.location\")}\r\n            </label>\r\n            <select\r\n              ref={selectElementRef}\r\n              id=\"updateLocation\"\r\n              name=\"location\"\r\n              className=\"mb-4 form-control px-2\"\r\n              onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            >\r\n              <option value=\"sun\">{t(\"selectLocation.sun\")}</option>\r\n              <option value=\"shade\">{t(\"selectLocation.shade\")}</option>\r\n              <option value=\"sun and shade\">\r\n                {t(\"selectLocation.sunAndShade\")}\r\n              </option>\r\n            </select>\r\n            <label htmlFor=\"updatePrice\">{t(\"updatePlantForm.price\")}</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"updatePrice\"\r\n              name=\"price\"\r\n              value={price}\r\n              min=\"1\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                handlePlantEntryChange(event, plant);\r\n              }}\r\n            />\r\n            <label htmlFor=\"updateImage\">{t(\"updatePlantForm.image\")}</label>\r\n            <input\r\n              type=\"file\"\r\n              id=\"updateImage\"\r\n              name=\"plantImage\"\r\n              className=\"mb-4 form-control\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                handlePlantImageChange(event, plant);\r\n              }}\r\n            />\r\n            <div className=\"col-12 text-right pr-0\">\r\n              <button\r\n                disabled={\r\n                  isUploadingPlantImage ||\r\n                  isDeletingPlantImage ||\r\n                  isUpdatingPlant\r\n                    ? true\r\n                    : false\r\n                }\r\n                className=\"btn btn-sm ml-4 form-control is-width-medium mb-2\"\r\n                onClick={handleUpdatePlant}\r\n              >\r\n                {t(\"button.save\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdatePlantForm;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport {\r\n  setClientSecret,\r\n  createPayment,\r\n  scrollToPlants,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Plant } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Stripe } from \"@stripe/stripe-js\";\r\n\r\ninterface CardStyle {\r\n  style: {\r\n    base: {\r\n      color: string;\r\n      fontFamily: string;\r\n      fontSmoothing: string;\r\n      fontSize: string;\r\n      \"::placeholder\": { color: string };\r\n    };\r\n    invalid: {\r\n      color: string;\r\n      iconColor: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst CheckoutForm = (): JSX.Element => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(\"\");\r\n  const clientSecret = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.clientSecret\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const { t } = useTranslation();\r\n\r\n  const cardStyle: CardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" },\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\",\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initializePayment = (plant: Plant): void => {\r\n      dispatch(createPayment(plant))\r\n        .unwrap()\r\n        .then((payment: any) => {\r\n          dispatch(setClientSecret(payment.clientSecret));\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    };\r\n\r\n    initializePayment(plant);\r\n\r\n    return () => {\r\n      const returnToPlantsSection = (): void => {\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      };\r\n\r\n      returnToPlantsSection();\r\n    };\r\n  }, []);\r\n\r\n  const handleCardElementInputChanges = async (event: any): Promise<void> => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  const handleSubmitPayment = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    // Stripe.js has not yet loaded\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n    setIsProcessing(true);\r\n    const payload = await (stripe as Stripe).confirmCardPayment(clientSecret, {\r\n      payment_method: { card: elements.getElement(CardElement) } as any,\r\n    });\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    } else {\r\n      setPaymentError(\"\");\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n  const { _id, name, price } = plant as Plant;\r\n\r\n  return (\r\n    <div className=\"container col-md-9 col-sm-12\">\r\n      <h2 className=\"mb-4 is-word-break\">{name}</h2>\r\n      <h3 className=\"mb-4\">\r\n        {t(\"checkoutForm.price\")} {price} {t(\"checkoutForm.currency\")}\r\n      </h3>\r\n      <form\r\n        id=\"payment-form\"\r\n        className=\"checkoutForm form-style mt-5\"\r\n        onSubmit={handleSubmitPayment}\r\n      >\r\n        <CardElement\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          className=\"p-2\"\r\n          onChange={handleCardElementInputChanges}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button\r\n            type=\"submit\"\r\n            id=\"submit\"\r\n            disabled={isProcessing || isDisabled || isSucceeded}\r\n            className=\"btn btn-sm mt-5 mb-4 card-button\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isProcessing ? (\r\n                <div id=\"spinner\" className=\"spinner is-text-bold\" />\r\n              ) : (\r\n                t(\"checkoutForm.payNow\")\r\n              )}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {/* Show any error that happens when processing the payment */}\r\n        {paymentError && (\r\n          <div role=\"alert\" className=\"card-error\">\r\n            {paymentError}\r\n          </div>\r\n        )}\r\n        {/* Show success message upon completion */}\r\n        <p\r\n          className={\r\n            isSucceeded\r\n              ? \"result-message text-center\"\r\n              : \"result-message is-hiddentext-center\"\r\n          }\r\n        >\r\n          {t(\"checkoutForm.paymentSuccessful\")}\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {isSucceeded ? (\r\n          <Link\r\n            to={\"/\"}\r\n            onClick={() => {\r\n              dispatch(scrollToPlants());\r\n            }}\r\n            className=\"is-link\"\r\n          >\r\n            <button className=\"btn btn-sm form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        ) : (\r\n          <Link to={`/plants/fetch/${_id}`} className=\"is-link\">\r\n            <button className=\"btn btn-sm form-control pl-3 pr-3\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"../components/CheckoutForm\";\r\n\r\nconst stripePromise = loadStripe(\r\n  \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n);\r\n\r\nconst CheckoutPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    loggedInUser && scroll.scrollToTop();\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5\">\r\n        <Elements stripe={stripePromise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutPage;\r\n","import {\r\n  fetchAllMessages,\r\n  fetchMessage,\r\n  setErrorMessage,\r\n  setIsFetchingMessage,\r\n  setIsFetchingMessages,\r\n  setMessage,\r\n  setMessages,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Message, MessageId } from \"../typeDefinitions\";\r\n\r\nexport class MessageIO {\r\n  dispatch: any;\r\n  constructor(dispatch: any) {\r\n    this.dispatch = dispatch;\r\n  }\r\n  fetch = (messageId: MessageId): void => {\r\n    this.dispatch(setIsFetchingMessage(true));\r\n    this.dispatch(fetchMessage(messageId))\r\n      .unwrap()\r\n      .then((message: Message) => {\r\n        this.dispatch(setMessage(message));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  fetchAll = (): void => {\r\n    this.dispatch(setIsFetchingMessages(true));\r\n    this.dispatch(fetchAllMessages())\r\n      .unwrap()\r\n      .then((messages: Message[]) => {\r\n        this.dispatch(setMessages(messages));\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        this.dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { User, Message, Plant } from \"../typeDefinitions\";\r\n\r\ntype RequestThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst RequestThumbnail = ({ message }: RequestThumbnailProps): JSX.Element => {\r\n  const { _id, buyer, plant } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"card p-3 mt-4\">\r\n      <h4>\r\n        {t(\"requestTile.subheadline\")} {name}\r\n      </h4>\r\n      <h5>{username}</h5>\r\n      <div className=\"text-center\">\r\n        <Link\r\n          to={`/requests/fetch/${_id}`}\r\n          className=\"btn is-width-medium form-control is-link\"\r\n        >\r\n          {t(\"link.details\")}\r\n          \r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestThumbnail;\r\n","import { useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { Message, User } from \"../typeDefinitions\";\r\nimport RequestTile from \"./RequestTile\";\r\n\r\nconst RequestsOverview = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((message: Message): JSX.Element => {\r\n        const { _id, seller, messageState } = message;\r\n        return (seller as User)._id === (loggedInUser as User)._id &&\r\n          messageState === true ? (\r\n          <RequestTile message={message} key={_id} />\r\n        ) : (\r\n          <></>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsOverview;\r\n","import { animateScroll as scroll } from \"react-scroll\";\r\n\r\nexport class MainPageScrolling {\r\n  history: any;\r\n  constructor(history: any) {\r\n    this.history = history;\r\n  }\r\n\r\n  toTop = (): void => {\r\n    this.history.push(\"/\");\r\n    scroll.scrollToTop();\r\n  };\r\n}\r\n","import { useHistory } from \"react-router\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { MainPageScrolling } from \"../lib/MainPageScrolling\";\r\n\r\nconst GoBackButton = () => {\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  const handleGoBack = () => {\r\n    const pageScrolling = new MainPageScrolling(history);\r\n    pageScrolling.toTop();\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-right pr-2\">\r\n      <button\r\n        className=\"btn btn-sm mt-4 is-width-medium form-control\"\r\n        onClick={handleGoBack}\r\n      >\r\n        {t(\"button.goBack\")}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoBackButton;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsNewRequest,\r\n  setStartAmountOfRequests,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { MessageIO } from \"../lib/messageIO\";\r\nimport WaitSpinner from \"../components/WaitSpinner\";\r\nimport RequestsOverview from \"../components/RequestsOverview\";\r\nimport GoBackButton from \"../components/GoBackButton\";\r\n\r\nconst RequestsPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const amountOfRequests = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const resetRequestVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetchAll();\r\n      isUserChange && dispatch(setStartAmountOfRequests());\r\n      resetRequestVariableAndScrollToTop();\r\n    }\r\n\r\n    return () => {\r\n      resetRequestVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2>{t(\"requestsPage.headline\")}</h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <GoBackButton />\r\n        {isFetchingMessages ? <WaitSpinner /> : <RequestsOverview />}\r\n        {amountOfRequests !== 0 ? <GoBackButton /> : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsPage;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { User, Plant, Message } from \"../typeDefinitions\";\r\n\r\ntype ReplyThumbnailProps = {\r\n  message: Message;\r\n};\r\n\r\nconst ReplyThumbnail = ({ message }: ReplyThumbnailProps): JSX.Element => {\r\n  const { _id, seller, plant } = message;\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"card p-3 mt-4 \">\r\n      <h4>\r\n        {t(\"replyTile.headline\")} {name}\r\n      </h4>\r\n      <h5>\r\n        {t(\"replyTile.subheadline\")} {username}\r\n      </h5>\r\n      <div className=\"text-center\">\r\n        <Link\r\n          to={`/replies/fetch/${_id}`}\r\n          className=\"btn is-width-medium form-control is-link\"\r\n        >\r\n          {t(\"link.details\")}\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyThumbnail;\r\n","import { useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { Message, User } from \"../typeDefinitions\";\r\nimport ReplyTile from \"./ReplyTile\";\r\n\r\nconst RepliesOverview = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const messages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.messages\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((message: Message): JSX.Element => {\r\n        const { _id, buyer, reply } = message;\r\n        return (buyer as User)._id === (loggedInUser as User)._id &&\r\n          reply !== \"\" ? (\r\n          <ReplyTile message={message} key={_id} />\r\n        ) : (\r\n          <></>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesOverview;\r\n","import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsNewReply,\r\n  setStartAmountOfReplies,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { MessageIO } from \"../lib/messageIO\";\r\nimport WaitSpinner from \"../components/WaitSpinner\";\r\nimport RepliesOverview from \"../components/RepliesOverview\";\r\nimport GoBackButton from \"../components/GoBackButton\";\r\n\r\nconst RepliesPage = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isUserChange = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUserChange\r\n  );\r\n  const isFetchingMessages = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessages\r\n  );\r\n  const amountOfReplies = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.amountOfReplies\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const resetReplyVariableAndScrollToTop = (): void => {\r\n      dispatch(setIsNewReply(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetchAll();\r\n      isUserChange && dispatch(setStartAmountOfReplies());\r\n      resetReplyVariableAndScrollToTop();\r\n    }\r\n\r\n    return () => {\r\n      resetReplyVariableAndScrollToTop();\r\n    };\r\n  }, []);\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2>{t(\"repliesPage.headline\")}</h2>\r\n        <h3 className=\"mb-4\"> [{amountOfReplies}] </h3>\r\n        <GoBackButton />\r\n        {isFetchingMessages ? <WaitSpinner /> : <RepliesOverview />}\r\n        {amountOfReplies !== 0 ? <GoBackButton /> : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepliesPage;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsCreatingMessage,\r\n  createMessage,\r\n  addMessage,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport ErrorMessageOutput from \"../components/ErrorMessageOutput\";\r\n\r\nconst CreateRequestForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plant = useAppSelector((state: RootState) => state.jungleSwap.plant);\r\n  const isCreatingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isCreatingMessage\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n  const { name } = plant as Plant;\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      dispatch(setErrorMessage(null));\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handleCreateMessageForRequest = (\r\n    event: React.FormEvent<HTMLFormElement>,\r\n    plant: Plant\r\n  ): void => {\r\n    const addMessageAndReturnToPlantDetailsPage = (message: Message): void => {\r\n      dispatch(addMessage(message));\r\n      history.goBack();\r\n    };\r\n\r\n    event.preventDefault();\r\n    const { request } = event.target as any;\r\n    const { _id, creator } = plant;\r\n    const newMessage: Message = {\r\n      seller: (creator as User)._id,\r\n      plant: _id,\r\n      request: request.value,\r\n    };\r\n    dispatch(setIsCreatingMessage(true));\r\n    dispatch(createMessage(newMessage))\r\n      .unwrap()\r\n      .then((message) => {\r\n        addMessageAndReturnToPlantDetailsPage(message);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        console.log(\"Create Plant Error: \", rejectedValue.message);\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  const printErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Request text missing\":\r\n        return t(\"errors.message.form.requestTextMissing\");\r\n      default:\r\n        return t(\"errors.general\");\r\n    }\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\">{t(\"createRequestForm.headline\")}</h2>\r\n        <h3 className=\"mb-4\">\r\n          {t(\"createRequestForm.subheadline\")} {name}\r\n        </h3>\r\n        <form\r\n          className=\"pl-0 form-style\"\r\n          onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\r\n            handleCreateMessageForRequest(event, plant);\r\n          }}\r\n        >\r\n          <div>\r\n            <textarea\r\n              name=\"request\"\r\n              cols={35}\r\n              rows={7}\r\n              className=\"mb-4 form-control is-width-full\"\r\n            />\r\n          </div>\r\n          {errorMessage && errorMessage.includes(\"Form\") && (\r\n            <ErrorMessageOutput printErrorMessage={printErrorMessage} />\r\n          )}\r\n          <div className=\"text-right\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isCreatingMessage ? true : false}\r\n              className=\"btn btn-sm mx-2 form-control is-width-medium\"\r\n            >\r\n              {t(\"button.send\")}\r\n            </button>\r\n            <button\r\n              className=\"btn btn-sm mx-2 form-control is-width-medium\"\r\n              onClick={() => {\r\n                history.goBack();\r\n              }}\r\n            >\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRequestForm;\r\n","import WaitSpinner from \"./WaitSpinner\";\r\n\r\ntype WaitSpinnerTextProps = {\r\n  text: string;\r\n}\r\n\r\nconst WaitSpinnerText = ({ text }: WaitSpinnerTextProps): JSX.Element => {\r\n  return (\r\n    <div className=\"container d-flex align-items-center justify-content-center mt-5\">\r\n      <WaitSpinner />\r\n      <span className=\"is-text-bold\">{text}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitSpinnerText;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setMessage,\r\n  updateMessage,\r\n  setMessageChanges,\r\n  decreaseAmountOfRequests,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { MessageIO } from \"../lib/messageIO\";\r\nimport WaitSpinnerText from \"../components/WaitSpinnerText\";\r\n\r\nconst RequestDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetch(messageId);\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handleChangeMessageState = (message: Message): void => {\r\n    const setBuyerMessageInactive = (message: Message): Message => {\r\n      const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n      clonedMessage.messageState = false;\r\n      dispatch(setMessage(clonedMessage));\r\n      return clonedMessage;\r\n    };\r\n\r\n    const updateBuyerMessage = ({\r\n      _id,\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    }: Message) => {\r\n      const setMessageChangesAndReturnToRequestsPage = (\r\n        message: Message\r\n      ): void => {\r\n        dispatch(setMessageChanges(message));\r\n        dispatch(decreaseAmountOfRequests());\r\n        history.goBack();\r\n      };\r\n\r\n      const updatedMessage: Message = {\r\n        buyer,\r\n        seller,\r\n        plant,\r\n        request,\r\n        reply,\r\n        messageState,\r\n      };\r\n      dispatch(updateMessage({ messageId: _id as MessageId, updatedMessage }))\r\n        .unwrap()\r\n        .then((message) => {\r\n          setMessageChangesAndReturnToRequestsPage(message);\r\n        })\r\n        .catch((rejectedValue: any) => {\r\n          dispatch(setErrorMessage(rejectedValue.message));\r\n        });\r\n    };\r\n\r\n    const updatedMessage = setBuyerMessageInactive(message);\r\n    updateBuyerMessage(updatedMessage);\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, buyer, plant, request, reply } = message as Message;\r\n  if (isFetchingMessage || !buyer || !plant) {\r\n    return <WaitSpinnerText text={\"Loading request\"} />;\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = buyer as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">\r\n          {t(\"requestDetails.headline\")} {name}\r\n        </h2>\r\n        <h5>\r\n          {t(\"requestDetails.subheadline\")} {username}\r\n        </h5>\r\n        <p className=\"text-field p-3 mb-4\">{request}</p>\r\n        {reply ? (\r\n          <div>\r\n            <h5>{t(\"requestDetails.yourReply\")}</h5>\r\n            <p className=\"text-field p-3 mb-4\">{reply}</p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"text-right px-3\">\r\n          {!reply ? (\r\n            <Link to={`/messages/update/${_id}`} className=\"is-link\">\r\n              <button className=\"btn btn-sm ml-2 is-width-medium form-control mb-1\">\r\n                {t(\"button.reply\")}\r\n              </button>\r\n            </Link>\r\n          ) : null}\r\n          <button\r\n            className=\"btn btn-sm ml-2 is-width-medium form-control mb-1\"\r\n            onClick={() => {\r\n              handleChangeMessageState(message);\r\n            }}\r\n          >\r\n            {t(\"button.done\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link\r\n            to={\"/requests/fetch-all\"}\r\n            className=\"is-link\"\r\n            onClick={scroll.scrollToTop}\r\n          >\r\n            <button className=\"btn btn-sm mt-4 is-width-medium form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setIsDeletingMessage,\r\n  deleteMessage,\r\n  removeMessage,\r\n  decreaseAmountOfReplies,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { User, Plant, Message, MessageId } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport { MessageIO } from \"../lib/messageIO\";\r\nimport WaitSpinnerText from \"../components/WaitSpinnerText\";\r\n\r\nconst ReplyDetails = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const isFetchingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingMessage\r\n  );\r\n  const isDeletingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isDeletingMessage\r\n  );\r\n  const { messageId } = useParams<{ messageId: MessageId }>();\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    if (loggedInUser) {\r\n      const messageIO = new MessageIO(dispatch);\r\n      messageIO.fetch(messageId);\r\n      scroll.scrollToTop();\r\n    }\r\n  }, []);\r\n\r\n  const handleDeleteMessage = (messageId: MessageId): void => {\r\n    const removeMessageReplyAndReturnToRepliesPage = (\r\n      messageId: MessageId\r\n    ): void => {\r\n      dispatch(removeMessage(messageId));\r\n      dispatch(decreaseAmountOfReplies());\r\n      history.goBack();\r\n    };\r\n\r\n    dispatch(setIsDeletingMessage(true));\r\n    dispatch(deleteMessage(messageId))\r\n      .unwrap()\r\n      .then(() => {\r\n        removeMessageReplyAndReturnToRepliesPage(messageId);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  const { _id, seller, plant, request, reply } = message as Message;\r\n  if (isFetchingMessage || !seller || !plant) {\r\n    return <WaitSpinnerText text={\"Loading reply\"} />;\r\n  }\r\n  const { name } = plant as Plant;\r\n  const { username } = seller as User;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\">\r\n          {t(\"replyDetails.headline\")} {name}\r\n        </h2>\r\n        <p className=\"text-field p-3 mb-4\">{request}</p>\r\n        {reply ? (\r\n          <div>\r\n            <h5>\r\n              {t(\"replyDetails.replyBy\")} {username}\r\n            </h5>\r\n            <p className=\"text-field p-3 mb-4\">{reply}</p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"text-right px-3\">\r\n          <button\r\n            disabled={isDeletingMessage ? true : false}\r\n            className=\"btn btn-sm ml-2 is-width-medium form-control mb-1\"\r\n            onClick={() => {\r\n              handleDeleteMessage(_id as MessageId);\r\n            }}\r\n          >\r\n            {t(\"button.delete\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"text-right px-3\">\r\n          <Link\r\n            to={\"/replies/fetch-all\"}\r\n            className=\"is-link\"\r\n            onClick={scroll.scrollToTop}\r\n          >\r\n            <button className=\"btn btn-sm mt-4 is-width-medium form-control\">\r\n              {t(\"button.goBack\")}\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReplyDetails;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport {\r\n  setMessage,\r\n  setIsUpdatingMessage,\r\n  updateMessage,\r\n  setMessageChanges,\r\n  setErrorMessage,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport { Message, MessageId } from \"../typeDefinitions\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport ErrorMessageOutput from \"../components/ErrorMessageOutput\";\r\n\r\nconst UpdateRequestForm = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const message = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.message\r\n  );\r\n  const isUpdatingMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isUpdatingMessage\r\n  );\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    loggedInUser && scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const handleCreateReply = (\r\n    { target }: React.ChangeEvent<HTMLTextAreaElement>,\r\n    message: Message\r\n  ): void => {\r\n    const clonedMessage: Message = JSON.parse(JSON.stringify(message));\r\n    clonedMessage.reply = target.value;\r\n    dispatch(setMessage(clonedMessage));\r\n  };\r\n\r\n  const handleUpdateMessage = ({\r\n    _id,\r\n    buyer,\r\n    seller,\r\n    plant,\r\n    request,\r\n    reply,\r\n    messageState,\r\n  }: Message): void => {\r\n    const setMessageChangesAndReturnToRequestPage = (\r\n      message: Message\r\n    ): void => {\r\n      dispatch(setMessageChanges(message));\r\n      history.goBack();\r\n    };\r\n\r\n    const updatedMessage: Message = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      request,\r\n      reply,\r\n      messageState,\r\n    };\r\n    dispatch(setIsUpdatingMessage(true));\r\n    dispatch(updateMessage({ messageId: _id as MessageId, updatedMessage }))\r\n      .unwrap()\r\n      .then((message) => {\r\n        setMessageChangesAndReturnToRequestPage(message);\r\n      })\r\n      .catch((rejectedValue: any) => {\r\n        dispatch(setErrorMessage(rejectedValue.message));\r\n      });\r\n  };\r\n\r\n  const printErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      case \"Form: Reply text missing\":\r\n        return t(\"errors.message.form.replyTextMissing\");\r\n      default:\r\n        return t(\"errors.general\");\r\n    }\r\n  };\r\n\r\n  if (!loggedInUser) {\r\n    return <Redirect to={\"/auth/unauthorized\"} />;\r\n  }\r\n\r\n  const { request } = message as Message;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\">{t(\"updateRequestForm.headline\")}</h2>\r\n        <div className=\"card is-card-width-small mb-5\">\r\n          <div className=\"card-body\">\r\n            <p>{request}</p>\r\n            <textarea\r\n              name=\"reply\"\r\n              placeholder={t(\"updateRequestForm.replyPlaceholder\")}\r\n              cols={31}\r\n              rows={6}\r\n              className=\"mb-4 form-control is-width-full\"\r\n              onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n                handleCreateReply(event, message);\r\n              }}\r\n            />\r\n            {errorMessage && errorMessage.includes(\"Form\") && (\r\n              <ErrorMessageOutput printErrorMessage={printErrorMessage} />\r\n            )}\r\n            <div className=\"row justify-content-end px-3\">\r\n              <button\r\n                disabled={isUpdatingMessage ? true : false}\r\n                className=\"btn btn-sm is-width-medium form-control mr-3 mb-2\"\r\n                onClick={() => {\r\n                  handleUpdateMessage(message);\r\n                }}\r\n              >\r\n                {t(\"button.submit\")}\r\n              </button>\r\n              <button\r\n                className=\"btn btn-sm is-width-medium form-control mb-2\"\r\n                onClick={() => {\r\n                  history.goBack();\r\n                }}\r\n              >\r\n                {t(\"button.goBack\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateRequestForm;\r\n","import { useTranslation } from \"react-i18next\";\r\n\r\nconst Unauthorized = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"unauthorized has-background-image2\">\r\n      <div>\r\n        <h1>{t(\"unauthorized.headline\")}</h1>\r\n        <h2>{t(\"unauthorized.subheadline1\")}</h2>\r\n        <h3>{t(\"unauthorized.subheadline2\")}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Unauthorized;\r\n","import { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst NotFound = (): JSX.Element => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"not-found has-background-image2\">\r\n      <div>\r\n        <h1>{t(\"notFound.headline\")}</h1>\r\n        <h2>{t(\"notFound.subheadline1\")}</h2>\r\n        <h3>{t(\"notFound.subheadline2\")}</h3>\r\n        <Link to={\"/\"} className=\"is-link\">\r\n          <button className=\"ml-2 btn btn-sm is-width-medium form-control\">\r\n            {t(\"button.takeMeHome\")}\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useEffect } from \"react\";\r\n\r\ninterface KommunicateSettings {\r\n  appId: string;\r\n  popupWidget: boolean;\r\n  automaticChatOpenOnNavigation: boolean;\r\n}\r\n\r\nconst KommunicateChat = (): JSX.Element => {\r\n  useEffect(() => {\r\n    const createLauncherIcon = (htmlDocument: Document, method: any): void => {\r\n      const kommunicateSettings: KommunicateSettings = {\r\n        appId: \"10b22c52854a305b79bbdecc356bea5\",\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      const scriptElement = htmlDocument.createElement(\"script\");\r\n      scriptElement.type = \"text/javascript\";\r\n      scriptElement.async = true;\r\n      scriptElement.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      const headElement = htmlDocument.getElementsByTagName(\"head\")[0];\r\n      headElement.appendChild(scriptElement);\r\n      (window as any).kommunicate = method;\r\n      method._globals = kommunicateSettings;\r\n    };\r\n\r\n    createLauncherIcon(document, (window as any).kommunicate || {});\r\n  }, []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default KommunicateChat;\r\n","import { useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { Plant, User } from \"../typeDefinitions\";\r\nimport PlantThumbnail from \"./PlantThumbnail\";\r\n\r\nconst MyPlantsOverview = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const plants = useAppSelector((state: RootState) => state.jungleSwap.plants);\r\n\r\n  return (\r\n    <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-2 row-cols-xl-3 row-cols-xxl-3\">\r\n      {plants.map((plant: Plant): JSX.Element => {\r\n        const { _id, creator } = plant;\r\n        return (creator as User)._id === (loggedInUser as User)._id ? (\r\n          <PlantThumbnail plant={plant} key={_id} />\r\n        ) : (\r\n          <></>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPlantsOverview;\r\n","import { useEffect } from \"react\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { RootState } from \"../store\";\r\nimport { Routing } from \"../lib/routing\";\r\nimport WaitSpinner from \"../components/WaitSpinner\";\r\nimport MyPlantsOverview from \"../components/MyPlantsOverview\";\r\n\r\nconst MyPlants = (): JSX.Element => {\r\n  const loggedInUser = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.loggedInUser\r\n  );\r\n  const isFetchingPlants = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.isFetchingPlants\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const routing = new Routing(dispatch);\r\n    routing.protect();\r\n    loggedInUser && scroll.scrollToTop();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"mt-5 mb-5\">\r\n        <h2>{t(\"myPlants.headline\")}</h2>\r\n      </div>\r\n      {isFetchingPlants ? <WaitSpinner /> : <MyPlantsOverview />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPlants;\r\n","import { useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport { setErrorMessage } from \"../reducer/jungleSwapSlice\";\r\n\r\ntype ErrorModalProps = {\r\n  errorMessage: string;\r\n};\r\n\r\nconst ErrorModal = ({ errorMessage }: ErrorModalProps): JSX.Element => {\r\n  const divElementRef = useRef<HTMLDivElement | null>(null);\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  const handleCloseModal = (): void => {\r\n    dispatch(setErrorMessage(null));\r\n  };\r\n\r\n  const handleClickOutside = (event: any): void => {\r\n    if (divElementRef.current === event.target) {\r\n      handleCloseModal();\r\n    }\r\n  };\r\n\r\n  const printErrorMessage = (errorMessage: string): string => {\r\n    switch (errorMessage) {\r\n      // Authentification\r\n      case \"Error while creating user\":\r\n        return t(\"errors.signUp.errorWhileCreatingUser\");\r\n      case \"User does not exist\":\r\n        return t(\"errors.signIn.userUnknown\");\r\n      case \"Could not update user\":\r\n        return t(\"errors.logOut.noUserUpdate\");\r\n      // Plants\r\n      case \"Create plant failed\":\r\n        return t(\"errors.plant.createPlantFailed\");\r\n      case \"Fetch plant failed\":\r\n        return t(\"errors.plant.fetchPlantFailed\");\r\n      case \"Fetch all plants failed\":\r\n        return t(\"errors.plant.techAllPlantsFailed\");\r\n      case \"Search plant failed\":\r\n        return t(\"errors.plant.searchPlantFailed\");\r\n      case \"Update plant failed\":\r\n        return t(\"errors.plant.updatePlantFailed\");\r\n      case \"Delete plant failed\":\r\n        return t(\"errors.plant.deletePlantFailed\");\r\n      // Messages\r\n      case \"Create message failed\":\r\n        return t(\"errors.message.createMessageFailed\");\r\n      case \"Fetch message failed\":\r\n        return t(\"errors.message.fetchMessageFailed\");\r\n      case \"Fetch all messages failed\":\r\n        return t(\"errors.message.fetchAllMessagesFailed\");\r\n      case \"Update message failed\":\r\n        return t(\"errors.updateMessageFailed\");\r\n      case \"Delete message failed\":\r\n        return t(\"errors.deleteMessageFailed\");\r\n      default:\r\n        return t(\"errors.general\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={divElementRef}\r\n      className=\"error-modal\"\r\n      onClick={(event) => {\r\n        handleClickOutside(event);\r\n      }}\r\n    >\r\n      <div className=\"error-modal-box\">\r\n        <h1>{t(\"errorModal.headline\")}</h1>\r\n        <h2>{t(\"errorModal.subheadline\")}</h2>\r\n        <h3>{printErrorMessage(errorMessage)}</h3>\r\n        <button\r\n          className=\"btn btn-sm form-control is-width-small mt-4 mb-3\"\r\n          onClick={handleCloseModal}\r\n        >\r\n          {t(\"button.proceed\")}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorModal;\r\n","import { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport { useAppSelector } from \"./hooks\";\r\nimport { RootState } from \"./store\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./views/Home\";\r\nimport SignUp from \"./views/SignUp\";\r\nimport SignIn from \"./views/SignIn\";\r\nimport LogOut from \"./components/LogOut\";\r\nimport CreatePlantForm from \"./views/CreatePlantForm\";\r\nimport PlantDetails from \"./views/PlantDetails\";\r\nimport UpdatePlantForm from \"./views/UpdatePlantForm\";\r\nimport CheckoutPage from \"./views/CheckoutPage\";\r\nimport RequestsPage from \"./views/RequestsPage\";\r\nimport RepliesPage from \"./views/RepliesPage\";\r\nimport CreateRequestForm from \"./views/CreateRequestForm\";\r\nimport RequestDetails from \"./views/RequestDetails\";\r\nimport ReplyDetails from \"./views/ReplyDetails\";\r\nimport UpdateRequestForm from \"./views/UpdateRequestForm\";\r\nimport Unauthorized from \"./views/Unauthorized\";\r\nimport NotFound from \"./views/NotFound\";\r\nimport KommunicateChat from \"./components/Chat\";\r\nimport MyPlants from \"./views/MyPlants\";\r\nimport ErrorModal from \"./components/ErrorModal\";\r\n\r\nconst App = (): JSX.Element => {\r\n  const errorMessage = useAppSelector(\r\n    (state: RootState) => state.jungleSwap.errorMessage\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n\r\n        <Route path=\"/auth/sign-up\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/auth/sign-in\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/auth/log-out\">\r\n          <LogOut />\r\n        </Route>\r\n        <Route path=\"/auth/unauthorized\">\r\n          <Unauthorized />\r\n        </Route>\r\n\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/fetch/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n        <Route path=\"/plants/my-own\">\r\n          <MyPlants />\r\n        </Route>\r\n\r\n        <Route path=\"/messages/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/messages/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch-all\">\r\n          <RequestsPage />\r\n        </Route>\r\n        <Route path=\"/requests/fetch/:messageId\">\r\n          <RequestDetails />\r\n        </Route>\r\n\r\n        <Route path=\"/replies/fetch-all\">\r\n          <RepliesPage />\r\n        </Route>\r\n        <Route path=\"/replies/fetch/:messageId\">\r\n          <ReplyDetails />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Footer />\r\n      {errorMessage && !errorMessage.includes(\"Form\") && (\r\n        <ErrorModal errorMessage={errorMessage} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"./reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","const en = {\r\n  translations: {\r\n    /* General */\r\n    link: {\r\n      jungleSwap: \"JungleSwap\",\r\n      allPlants: \"All Plants\",\r\n      myPlants: \"My Plants\",\r\n      createPlant: \"Create Plant\",\r\n      requests: \"Requests\",\r\n      replies: \"Replies\",\r\n      logOut: \"Log out\",\r\n      tryIt: \"Try it!\",\r\n      signIn: \"Sign in\",\r\n      signUp: \"Sign up\",\r\n      details: \"Details\",\r\n    },\r\n    button: {\r\n      signIn: \"Sign in\",\r\n      signUp: \"Sign up\",\r\n      create: \"Create\",\r\n      update: \"Update\",\r\n      save: \"Save\",\r\n      delete: \"Delete\",\r\n      send: \"Send\",\r\n      submit: \"Submit\",\r\n      buy: \"Buy\",\r\n      swap: \"Swap\",\r\n      reply: \"Reply\",\r\n      done: \"Done\",\r\n      goBack: \"Back\",\r\n      more: \"More\",\r\n      proceed: \"Proceed\",\r\n      takeMeHome: \"Take me home\",\r\n    },\r\n    selectLocation: {\r\n      title: \"Select location\",\r\n      sun: \"sun\",\r\n      shade: \"shade\",\r\n      sunAndShade: \"sun and shade\",\r\n    },\r\n    // Error messages\r\n    errors: {\r\n      // Authentification\r\n      signUp: {\r\n        form: {\r\n          usernameMissing: \"Please enter username\",\r\n          emailMissing: \"Please enter email\",\r\n          passwordMissing: \"Please enter password\",\r\n          emailFormatInvalid: \"The email format is invalid\",\r\n          passwordInvalid:\r\n            \"The password needs to have 8 characters, a number, a special character and an uppercase alphabet\",\r\n          userAlreadyExists: \"Username or email already exists\",\r\n        },\r\n        errorWhileCreatingUser: \"Error while creating user\",\r\n      },\r\n      signIn: {\r\n        form: {\r\n          emailMissing: \"Please enter email\",\r\n          passwordMissing: \"Please enter password\",\r\n          emailFormatInvalid: \"The email format is invalid\",\r\n          noMatchPasswords: \"Passwords don't match\",\r\n        },\r\n        userUnknown: \"User does not exist\",\r\n      },\r\n      logOut: {\r\n        noUserUpdate: \"Could not update user\",\r\n      },\r\n      // Plants\r\n      plant: {\r\n        form: {\r\n          nameMissing: \"Please enter name\",\r\n          descriptionMissing: \"Please enter description\",\r\n          sizeMissing: \"Please enter size\",\r\n          locationMissing: \"Please enter location\",\r\n          priceMissing: \"Please enter price\",\r\n          imageMissing: \"Please choose an image\",\r\n          noImageSelected: \"Please choose an image to delete\",\r\n        },\r\n        createPlantFailed: \"Creating the plant failed\",\r\n        fetchPlantFailed: \"Fetching the plant failed\",\r\n        fetchAllPlantsFailed: \"Fetching all plants failed\",\r\n        updatePlantFailed: \"Updating the plant failed\",\r\n        deletePlantFailed: \"Delete plant failed\",\r\n      },\r\n      // Messages\r\n      message: {\r\n        form: {\r\n          requestTextMissing: \"Please enter request text\",\r\n          replyTextMissing: \"Please enter reply text\",\r\n        },\r\n        createMessageFailed: \"Creating message failed\",\r\n        fetchMessageFailed: \"Fetching message failed\",\r\n        fetchAllMessagesFailed: \"Fetching all messages failed\",\r\n        updateMessageFailed: \"Updating the message failed\",\r\n        deleteMessageFailed: \"Delete message failed\",\r\n      },\r\n      general: \"An error occured\",\r\n    },\r\n    /* Home */\r\n    title: {\r\n      headline: \"JungleSwap\",\r\n      subheadline: \"Share your green heart\",\r\n    },\r\n    about: {\r\n      headline: \"Welcome to JungleSwap!\",\r\n      subheadline: \"Add green to your Home\",\r\n      paragraph: {\r\n        line1: \"It's easy-peasy.\",\r\n        line2: \"Share your plant offshoots.\",\r\n        line3: \"Make money!\",\r\n        line4: \"Or swap them for another plant.\",\r\n        line5: \"Don't have any baby plants?\",\r\n        line6: \"You can simply shop and give a plant a new home.\",\r\n      },\r\n    },\r\n    allPlants: {\r\n      headline: \"Plants\",\r\n    },\r\n    searchPlant: {\r\n      headline: \"Search a plant\",\r\n      namePlaceholder: \"Enter name\",\r\n    },\r\n    /* Authentification */\r\n    signIn: {\r\n      headline: \"Sign In\",\r\n      email: \"Email address\",\r\n      password: \"Password\",\r\n      enterPlaceholder: \"Enter\",\r\n    },\r\n    signUp: {\r\n      headline: \"Sign Up\",\r\n      username: \"Username\",\r\n      email: \"Email address\",\r\n      password: \"Password\",\r\n      enterPlaceholder: \"Enter\",\r\n      alreadyAccountCreated: \"Already have an account?\",\r\n    },\r\n    /* Plants */\r\n    myPlants: {\r\n      headline: \"My plants\",\r\n    },\r\n    createPlantForm: {\r\n      headline: \"Create a plant\",\r\n      name: \"Name\",\r\n      description: \"Description\",\r\n      size: \"Size (cm)\",\r\n      location: \"Location\",\r\n      price: \"Price (EUR)\",\r\n      image: \"Image\",\r\n      enterPlaceholder: \"Enter\",\r\n    },\r\n    updatePlantForm: {\r\n      headline: \"Update your plant\",\r\n      name: \"Name\",\r\n      description: \"Description\",\r\n      size: \"Size (cm)\",\r\n      location: \"Location\",\r\n      price: \"Price (EUR)\",\r\n      image: \"Image\",\r\n    },\r\n    plantThumbnail: {\r\n      currency: \"€\",\r\n    },\r\n    plantDetails: {\r\n      headline: \"Plant details\",\r\n      name: \"Name:\",\r\n      description: \"Description:\",\r\n      size: \"Size:\",\r\n      sizeUnit: \"cm\",\r\n      likes: \"Likes:\",\r\n      price: \"Price:\",\r\n      currency: \"€\",\r\n    },\r\n    checkoutForm: {\r\n      price: \" Price:\",\r\n      currency: \"€\",\r\n      payNow: \"Pay now\",\r\n      paymentSuccessful: \"Payment succeeded.\",\r\n    },\r\n    /* Requests */\r\n    createRequestForm: {\r\n      headline: \"Your request\",\r\n      subheadline: \"for\",\r\n    },\r\n    updateRequestForm: {\r\n      headline: \"Reply your request\",\r\n      replyPlaceholder: \"Your reply\",\r\n    },\r\n    requestsPage: {\r\n      headline: \"Requests for your plants\",\r\n    },\r\n    requestDetails: {\r\n      headline: \"Request for\",\r\n      subheadline: \"by\",\r\n      yourReply: \"Your reply\",\r\n    },\r\n    requestTile: {\r\n      headline: \"Request for\",\r\n      subheadline: \"by\",\r\n    },\r\n    /* Replies */\r\n    repliesPage: {\r\n      headline: \"Replies for your requests\",\r\n    },\r\n    replyDetails: {\r\n      headline: \"Your request for\",\r\n      replyBy: \"Reply by\",\r\n    },\r\n    replyTile: {\r\n      headline: \"Reply for\",\r\n      subheadline: \"by\",\r\n    },\r\n    /* Others */\r\n    footer: {\r\n      copyright: \"©\",\r\n      appAuthor1: \"Christian Gerbig\",\r\n      appAuthor2: \"Lisa Montebaur\",\r\n    },\r\n    notFound: {\r\n      headline: \"Oh-oh!\",\r\n      subheadline1: \"We think you got lost in the jungle!\",\r\n      subheadline2: \"404 Not Found\",\r\n    },\r\n    unauthorized: {\r\n      headline: \"Oh-oh!\",\r\n      subheadline1: \"We think you reached the forbidden part of the jungle!\",\r\n      subheadline2: \"401 Unauthorized\",\r\n    },\r\n    errorModal: {\r\n      headline: \"Oh-oh!\",\r\n      subheadline: \"Something went wrong in the jungle!\",\r\n    },\r\n  },\r\n};\r\n\r\nexport default en;\r\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport en from \"./locales/en\";\r\n\r\ni18n.use(initReactI18next).init({\r\n  resources: {\r\n    en: en,\r\n  },\r\n  fallbackLng: \"en\",\r\n  debug: true,\r\n  ns: [\"translations\"],\r\n  defaultNS: \"translations\",\r\n  interpolation: {\r\n    escapeValue: false,\r\n  },\r\n});\r\n\r\nexport default i18n;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\nimport \"./i18n\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}