{"version":3,"sources":["reducer/jungleSwapSlice.js","config.js","components/NavBar.js","components/Footer.js","images/JungleSwap_Home.png","images/JungleSwap_Icon.png","screens/Home.js","screens/SignUp.js","screens/SignIn.js","components/LogOut.js","screens/CreatePlantForm.js","screens/PlantDetails.js","screens/UpdatePlantForm.js","components/CheckoutForm.js","screens/CheckoutPage.js","screens/RequestsPage.js","screens/CreateRequestForm.js","screens/RequestDetails.js","screens/UpdateRequestForm.js","screens/NotFound.js","components/Chat.js","App.js","store.js","index.js"],"names":["apiPath","process","fetchAllPlants","createAsyncThunk","options","a","dispatch","axios","get","response","setPlants","data","console","log","fetchQueryPlants","query","createPlant","uploadForm","plant","history","name","description","size","location","price","post","imageUrl","imagePublicId","newPlant","withCredentials","addPlant","push","scroll","scrollToBottom","setError","error","readPlant","plantId","setPlant","imageChange","destroyImageData","image","FormData","append","clonePlant","JSON","parse","stringify","updatePlant","updatedPlant","patch","setPlantChanges","scrollToPlants","deletePlant","delete","removePlant","createPayment","setClientSecret","clientSecret","payPlant","fetchAllRequests","isUserChange","setRequests","setStartAmountOfRequests","createRequest","newRequest","addRequest","_id","readRequest","requestId","setRequest","updateRequest","updatedRequest","setRequestChanges","deleteRequest","removeRequest","decreaseAmountOfRequests","readUser","setLoggedInUser","setIsFetchingUser","signUp","newUser","setIsUserChange","signIn","user","logOut","intervalId","clearInterval","setIntervalId","setMinutesCounter","setIsNewRequest","scrollToTop","jungleSwapSlice","createSlice","initialState","isFetchingUser","loggedInUser","plants","requests","request","amountOfRequests","isNewRequest","minutesCounter","headerContainerHeight","aboutContainerHeight","reducers","state","action","payload","map","singlePlant","filter","buyer","seller","message","reply","singleRequest","currentRequest","length","setAmountOfRequests","increaseMinutesCounter","setHeaderContainerHeight","setAboutContainerHeight","scrollToAbout","scrollTo","actions","setPaymentPromise","NavBar","useSelector","jungleSwap","useDispatch","useEffect","setInterval","currentAmountOfRequests","Navbar","className","variant","expand","fixed","Brand","to","onClick","Toggle","aria-controls","Collapse","id","Nav","title","username","Footer","href","Home","useState","setQuery","elementRef","useRef","headerElementHeight","Math","round","current","getBoundingClientRect","height","aboutElementHeight","class","role","ref","element","src","alt","icon","type","placeholder","value","onChange","event","target","SignUp","useHistory","onSubmit","preventDefault","email","password","toLowerCase","handleSignUp","htmlFor","formnovalidate","SignIn","handleSignIn","LogOut","CreatePlantForm","plantImage","files","handleCreatePlant","min","PlantDetails","useParams","creator","forEach","handleDeletePlant","UpdatePlantForm","handlePlantEntryChange","itemNumber","handleImageChange","handleUpdatePlant","CheckoutForm","isSucceeded","setIsSucceeded","isProcessing","setIsProcessing","isDisabled","setIsDisabled","paymentError","setPaymentError","stripe","useStripe","elements","useElements","handleChange","empty","handleSubmitPayment","confirmCardPayment","payment_method","card","getElement","CardElement","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","disabled","promise","loadStripe","CheckoutPage","RequestsPage","handleResetAll","CreateRequestForm","handleCreateRequest","cols","rows","RequestDetails","UpdateRequestForm","cloneRequest","handleCreateReply","handleUpdateRequest","NotFound","KommunicateChat","d","m","s","document","createElement","async","getElementsByTagName","appendChild","window","kommunicate","_globals","withRouter","exact","path","component","store","configureStore","reducer","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.701020e1.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport config from \"../config\";\r\nimport axios from \"axios\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\n\r\nconst apiPath = `${config.API_URL}/api`;\r\n\r\nconst initialState = {\r\n  isFetchingUser: true,\r\n  loggedInUser: null,\r\n  isUserChange: false,\r\n  plants: [],\r\n  plant: {},\r\n  requests: [],\r\n  request: {},\r\n  amountOfRequests: 0,\r\n  isNewRequest: false,\r\n  intervalId: null,\r\n  minutesCounter: 0,\r\n  headerContainerHeight: 0,\r\n  aboutContainerHeight: 0,\r\n  clientSecret: \"\",\r\n  error: null,\r\n};\r\n\r\n// --------- Plants ---------\r\n// Fetch all plants\r\nexport const fetchAllPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchAllPlants\",\r\n  async (options, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/fetch`);\r\n      dispatch(setPlants(response.data));\r\n    } catch (err) {\r\n      console.log(\"Fetching plants failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch query plants\r\nexport const fetchQueryPlants = createAsyncThunk(\r\n  \"jungleSwap/fetchQueryPlants\",\r\n  async (query, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/search?q=${query}`);\r\n      dispatch(setPlants(response.data));\r\n    } catch (err) {\r\n      console.log(\"Fetching query plants failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant\r\nexport const createPlant = createAsyncThunk(\r\n  \"jungleSwap/createPlant\",\r\n  async ({ uploadForm, plant, history }, { dispatch }) => {\r\n    const { name, description, size, location, price } = plant;\r\n    try {\r\n      const response = await axios.post(`${apiPath}/upload`, uploadForm);\r\n      const { imageUrl, imagePublicId } = response.data;\r\n      const newPlant = {\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      };\r\n      try {\r\n        const response = await axios.post(\r\n          `${apiPath}/plants/create`,\r\n          newPlant,\r\n          { withCredentials: true }\r\n        );\r\n        dispatch(addPlant(response.data));\r\n        history.push(\"/\");\r\n        scroll.scrollToBottom();\r\n      } catch (err) {\r\n        dispatch(setError(err.response.data.error));\r\n      }\r\n    } catch (err) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Read plant\r\nexport const readPlant = createAsyncThunk(\r\n  \"jungleSwap/readPlant\",\r\n  async (plantId, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/plants/read/${plantId}`, {\r\n        withCredentials: true,\r\n      });\r\n      dispatch(setPlant(response.data));\r\n    } catch {\r\n      console.log(\"Read plant failed\");\r\n    }\r\n  }\r\n);\r\n\r\n// Plant image change\r\nexport const imageChange = createAsyncThunk(\r\n  \"jungleSwap/imageChange\",\r\n  async ({ destroyImageData, image, plant }, { dispatch }) => {\r\n    try {\r\n      await axios.post(`${apiPath}/destroy`, destroyImageData);\r\n      try {\r\n        const uploadForm = new FormData();\r\n        uploadForm.append(\"image\", image);\r\n        const response = await axios.post(`${apiPath}/upload`, uploadForm);\r\n        const { imagePublicId, imageUrl } = response.data;\r\n        const clonePlant = JSON.parse(JSON.stringify(plant));\r\n        clonePlant.imagePublicId = imagePublicId;\r\n        clonePlant.imageUrl = imageUrl;\r\n        dispatch(setPlant(clonePlant));\r\n      } catch (err) {\r\n        console.log(\"Image upload failed\", err);\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Delete old image failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Update plant\r\nexport const updatePlant = createAsyncThunk(\r\n  \"jungleSwap/updatePlant\",\r\n  async ({ plantId, updatedPlant, history }, { dispatch }) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/plants/update/${plantId}`,\r\n        updatedPlant\r\n      );\r\n      dispatch(setPlantChanges(response.data));\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    } catch (err) {\r\n      console.log(\"Update plant failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete Plant\r\nexport const deletePlant = createAsyncThunk(\r\n  \"jungleSwap/deletePlant\",\r\n  async ({ imagePublicId, plantId, history }, { dispatch }) => {\r\n    try {\r\n      const destroyImageData = {\r\n        imagePublicId,\r\n      };\r\n      await axios.post(`${apiPath}/destroy`, destroyImageData);\r\n      try {\r\n        await axios.delete(`${apiPath}/plants/delete/${plantId}`);\r\n        dispatch(removePlant(plantId));\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      } catch (err) {\r\n        console.log(\"Delete plant failed\", err);\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Delete image failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create plant payment\r\nexport const createPayment = createAsyncThunk(\r\n  \"jungleSwap/createPayment\",\r\n  async (plant, { dispatch }) => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/create-payment-intent`, {\r\n        price: plant.price,\r\n      });\r\n      dispatch(setClientSecret(response.data.clientSecret));\r\n    } catch (err) {\r\n      console.log(\"Create payment failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Pay plant\r\nexport const payPlant = createAsyncThunk(\r\n  \"jungleSwap/payPlant\",\r\n  async ({ history }, { dispatch }) => {\r\n    try {\r\n      await axios.post(\r\n        `${apiPath}/create-payment-intent`,\r\n        {},\r\n        { withCredentials: true }\r\n      );\r\n      history.push(\"/\");\r\n      dispatch(scrollToPlants());\r\n    } catch (err) {\r\n      console.log(\"Checkout failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// --------- Requests ----------\r\n// Fetch all requests\r\nexport const fetchAllRequests = createAsyncThunk(\r\n  \"jungleSwap/fetchAllRequests\",\r\n  async (isUserChange, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/requests/fetch`);\r\n      dispatch(setRequests(response.data));\r\n      isUserChange && dispatch(setStartAmountOfRequests());\r\n    } catch (err) {\r\n      console.log(\"Fetching requests failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Create request\r\nexport const createRequest = createAsyncThunk(\r\n  \"jungleSwap/createRequest\",\r\n  async ({ newRequest, history }, { dispatch }) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${apiPath}/requests/create`,\r\n        newRequest,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(addRequest(response.data));\r\n      history.push(`/plants/read/${response.data.plant._id}`);\r\n    } catch (err) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Read request\r\nexport const readRequest = createAsyncThunk(\r\n  \"jungleSwap/readRequest\",\r\n  async (requestId, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${apiPath}/requests/read/${requestId}`,\r\n        { withCredentials: true }\r\n      );\r\n      dispatch(setRequest(response.data));\r\n    } catch {\r\n      console.log(\"Read request failed\");\r\n    }\r\n  }\r\n);\r\n\r\n// Update request\r\nexport const updateRequest = createAsyncThunk(\r\n  \"jungleSwap/updateRequest\",\r\n  async ({ requestId, updatedRequest, history }, { dispatch }) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        `${apiPath}/requests/update/${requestId}`,\r\n        updatedRequest\r\n      );\r\n      dispatch(setRequestChanges(response.data));\r\n      history.push(`/requests/read/${requestId}`);\r\n    } catch (err) {\r\n      console.log(\"Update request failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// Delete request\r\nexport const deleteRequest = createAsyncThunk(\r\n  \"jungleSwap/deleteRequest\",\r\n  async ({ requestId, history }, { dispatch }) => {\r\n    try {\r\n      await axios.delete(`${apiPath}/requests/delete/${requestId}`);\r\n      dispatch(removeRequest(requestId));\r\n      dispatch(decreaseAmountOfRequests());\r\n      history && history.push(\"/requests/fetch\");\r\n    } catch (err) {\r\n      console.log(\"Delete request failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\n// ---------- User authentification ----------\r\n// Read user\r\nexport const readUser = createAsyncThunk(\r\n  \"jungleSwap/readUserData\",\r\n  async (options, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(`${apiPath}/user`, {\r\n        withCredentials: true,\r\n      });\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsFetchingUser(false));\r\n    } catch (err) {\r\n      console.log(\"Initializing fetching failed\", err);\r\n      dispatch(setIsFetchingUser(false));\r\n    }\r\n  }\r\n);\r\n\r\n// Sign up\r\nexport const signUp = createAsyncThunk(\r\n  \"jungleSwap/signUp\",\r\n  async ({ newUser, history }, { dispatch }) => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/signup`, newUser);\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    } catch (err) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// Sign in\r\nexport const signIn = createAsyncThunk(\r\n  \"jungleSwap/signIn\",\r\n  async ({ user, history }, { dispatch }) => {\r\n    try {\r\n      const response = await axios.post(`${apiPath}/signin`, user, {\r\n        withCredentials: true,\r\n      });\r\n      dispatch(setLoggedInUser(response.data));\r\n      dispatch(setIsUserChange(true));\r\n      history.push(\"/\");\r\n    } catch (err) {\r\n      dispatch(setError(err.response.data.error));\r\n    }\r\n  }\r\n);\r\n\r\n// LogOut\r\nexport const logOut = createAsyncThunk(\r\n  \"jungleSwap/logOut\",\r\n  async ({ intervalId, history }, { dispatch }) => {\r\n    try {\r\n      await axios.post(`${apiPath}/logout`, {}, { withCredentials: true });\r\n      dispatch(setLoggedInUser(null));\r\n      clearInterval(intervalId);\r\n      dispatch(setIntervalId(null));\r\n      dispatch(setMinutesCounter(0));\r\n      dispatch(setIsNewRequest(false));\r\n      history.push(\"/\");\r\n      scroll.scrollToTop();\r\n    } catch (err) {\r\n      console.log(\"Logout failed\", err);\r\n    }\r\n  }\r\n);\r\n\r\nexport const jungleSwapSlice = createSlice({\r\n  name: \"jungleSwap\",\r\n  initialState,\r\n  // ---------- Reducers -----------\r\n  reducers: {\r\n    // --------- Plants ----------\r\n    setPlants: (state, action) => {\r\n      state.plants = action.payload;\r\n    },\r\n    setPlant: (state, action) => {\r\n      state.plant = action.payload;\r\n    },\r\n    addPlant: (state, action) => {\r\n      state.plants.push(action.payload);\r\n    },\r\n    setPlantChanges: (state, action) => {\r\n      const {\r\n        _id,\r\n        name,\r\n        description,\r\n        size,\r\n        imageUrl,\r\n        imagePublicId,\r\n        location,\r\n        price,\r\n      } = action.payload;\r\n      state.plants = state.plants.map((singlePlant) => {\r\n        if (singlePlant._id === _id) {\r\n          singlePlant.name = name;\r\n          singlePlant.description = description;\r\n          singlePlant.size = size;\r\n          singlePlant.imageUrl = imageUrl;\r\n          singlePlant.imagePublicId = imagePublicId;\r\n          singlePlant.location = location;\r\n          singlePlant.price = price;\r\n        }\r\n        return singlePlant;\r\n      });\r\n    },\r\n    removePlant: (state, action) => {\r\n      state.plants = state.plants.filter(\r\n        (plant) => plant._id !== action.payload\r\n      );\r\n    },\r\n    setClientSecret: (state, action) => {\r\n      state.clientSecret = action.payload;\r\n    },\r\n\r\n    // ---------- Requests ----------\r\n    setRequests: (state, action) => {\r\n      state.requests = action.payload;\r\n    },\r\n    setRequest: (state, action) => {\r\n      state.request = action.payload;\r\n    },\r\n    addRequest: (state, action) => {\r\n      state.requests.push(action.payload);\r\n    },\r\n    setRequestChanges: (state, action) => {\r\n      const { _id, buyer, seller, plant, message, reply } = action.payload;\r\n      state.requests = state.requests.map((singleRequest) => {\r\n        if (singleRequest._id === _id) {\r\n          singleRequest.buyer = buyer;\r\n          singleRequest.seller = seller;\r\n          singleRequest.plant = plant;\r\n          singleRequest.message = message;\r\n          singleRequest.reply = reply;\r\n        }\r\n        return singleRequest;\r\n      });\r\n    },\r\n    removeRequest: (state, action) => {\r\n      state.requests = state.requests.filter(\r\n        (request) => request._id !== action.payload\r\n      );\r\n    },\r\n    setStartAmountOfRequests: (state, action) => {\r\n      state.amountOfRequests = state.requests.filter(\r\n        (currentRequest) => currentRequest.seller._id === state.loggedInUser._id\r\n      ).length;\r\n    },\r\n    setAmountOfRequests: (state, action) => {\r\n      state.amountOfRequests = action.payload;\r\n    },\r\n    setIsNewRequest: (state, action) => {\r\n      state.isNewRequest = action.payload;\r\n    },\r\n    setIntervalId: (state, action) => {\r\n      state.intervalId = action.payload;\r\n    },\r\n    setMinutesCounter: (state, action) => {\r\n      state.minutesCounter = action.payload;\r\n    },\r\n    increaseMinutesCounter: (state, action) => {\r\n      state.minutesCounter += 1;\r\n    },\r\n    decreaseAmountOfRequests: (state, action) => {\r\n      state.amountOfRequests -= 1;\r\n    },\r\n\r\n    // ---------- User authentification ----------\r\n    setLoggedInUser: (state, action) => {\r\n      state.loggedInUser = action.payload;\r\n    },\r\n    setIsFetchingUser: (state, action) => {\r\n      state.isFetchingUser = action.payload;\r\n    },\r\n    setIsUserChange: (state, action) => {\r\n      state.isUserChange = action.payload;\r\n    },\r\n    setError: (state, action) => {\r\n      state.error = action.payload;\r\n    },\r\n\r\n    // ---------- Pages handling ----------\r\n    setHeaderContainerHeight: (state, action) => {\r\n      state.headerContainerHeight = action.payload;\r\n    },\r\n    setAboutContainerHeight: (state, action) => {\r\n      state.aboutContainerHeight = action.payload;\r\n    },\r\n    scrollToAbout: (state, action) => {\r\n      scroll.scrollTo(state.headerContainerHeight);\r\n    },\r\n    scrollToPlants: (state, action) => {\r\n      scroll.scrollTo(state.headerContainerHeight + state.aboutContainerHeight);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  // ----------- Plants ----------\r\n  setPlants,\r\n  setPlant,\r\n  addPlant,\r\n  setPlantChanges,\r\n  removePlant,\r\n  setPaymentPromise,\r\n  setClientSecret,\r\n\r\n  // ---------- Requests ----------\r\n  setRequests,\r\n  setRequest,\r\n  addRequest,\r\n  setRequestChanges,\r\n  removeRequest,\r\n  setStartAmountOfRequests,\r\n  setAmountOfRequests,\r\n  setIsNewRequest,\r\n  setIntervalId,\r\n  setMinutesCounter,\r\n  increaseMinutesCounter,\r\n  decreaseAmountOfRequests,\r\n\r\n  // ---------- User authentification ----------\r\n  setLoggedInUser,\r\n  setIsFetchingUser,\r\n  setIsUserChange,\r\n  setError,\r\n\r\n  // ---------- Pages handling ----------\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  scrollToAbout,\r\n  scrollToPlants,\r\n} = jungleSwapSlice.actions;\r\n\r\nexport default jungleSwapSlice.reducer;\r\n","export default { API_URL: process.env.REACT_APP_SERVER_URL };\r\n","import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport {\r\n  fetchAllRequests,\r\n  setIsUserChange,\r\n  setIntervalId,\r\n  increaseMinutesCounter,\r\n  setMinutesCounter,\r\n  setAmountOfRequests,\r\n  setIsNewRequest,\r\n  scrollToPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\n\r\nconst NavBar = () => {\r\n  const loggedInUser = useSelector((state) => state.jungleSwap.loggedInUser);\r\n  const isUserChange = useSelector((state) => state.jungleSwap.isUserChange);\r\n  const requests = useSelector((state) => state.jungleSwap.requests);\r\n  const isNewRequest = useSelector((state) => state.jungleSwap.isNewRequest);\r\n  const intervalId = useSelector((state) => state.jungleSwap.intervalId);\r\n  const minutesCounter = useSelector(\r\n    (state) => state.jungleSwap.minutesCounter\r\n  );\r\n  const amountOfRequests = useSelector(\r\n    (state) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  // Stop interval at cleanup\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n        dispatch(setIntervalId(null));\r\n        dispatch(setMinutesCounter(0));\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Start request check if user changes\r\n  useEffect(() => {\r\n    if (isUserChange) {\r\n      dispatch(fetchAllRequests(isUserChange));\r\n      dispatch(setIsUserChange(false));\r\n      dispatch(\r\n        setIntervalId(\r\n          setInterval(\r\n            () => dispatch(increaseMinutesCounter()),\r\n            10000 // every minute\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }, [isUserChange]);\r\n\r\n  // Check new requests for logged in user every minute\r\n  useEffect(() => {\r\n    if (loggedInUser) {\r\n      dispatch(fetchAllRequests(isUserChange));\r\n      const currentAmountOfRequests = requests.filter(\r\n        (currentRequest) => currentRequest.seller._id === loggedInUser._id\r\n      ).length;\r\n      if (amountOfRequests < currentAmountOfRequests) {\r\n        dispatch(setAmountOfRequests(currentAmountOfRequests));\r\n        dispatch(setIsNewRequest(true));\r\n      }\r\n    }\r\n  }, [minutesCounter]);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar className=\"pl-5\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\r\n        <Navbar.Brand>          \r\n          <Link to=\"/\" onClick={scroll.scrollToTop}>            \r\n            JungleSwap\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <div>\r\n              <Link\r\n                to=\"/\"\r\n                className=\"p-2\"\r\n                onClick={() => dispatch(scrollToPlants())}\r\n              >\r\n                All Plants\r\n              </Link>\r\n            </div>\r\n            {loggedInUser && (\r\n              <div>\r\n                <Link className=\"p-2\" to=\"/plants/create\">\r\n                  Create Plant\r\n                </Link>\r\n                <Link\r\n                  className={isNewRequest ? \"p-2 alertColor\" : \"p-2\"}\r\n                  to=\"/requests/fetch\"\r\n                  title={isNewRequest ? \"new message\" : null}\r\n                >\r\n                  Messages\r\n                </Link>\r\n              </div>\r\n            )}\r\n            {loggedInUser ? (\r\n              <div>\r\n                <Link\r\n                  className=\"p-2\"\r\n                  to=\"/logout\"\r\n                  title={loggedInUser.username}\r\n                >\r\n                  Log out\r\n                </Link>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <Link className=\"p-2\" to=\"/signin\">                  \r\n                  Sign in\r\n                </Link>\r\n                <Link className=\"p-2\" to=\"/signup\">                  \r\n                  Sign up\r\n                </Link>\r\n              </div>\r\n            )}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer-row\">\r\n      <footer>\r\n        © 2021\r\n        <Link href=\"https://www.linkedin.com/in/christian-gerbig/\">\r\n          Christian Gerbig\r\n        </Link>\r\n        &\r\n        <Link href=\"https://www.linkedin.com/in/lisa-montebaur/\">\r\n          Lisa Montebaur\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export default __webpack_public_path__ + \"static/media/JungleSwap_Home.c4ed9b4c.png\";","export default __webpack_public_path__ + \"static/media/JungleSwap_Icon.a6c7c44a.png\";","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  fetchAllPlants,\r\n  fetchQueryPlants,\r\n  readUser,\r\n  setHeaderContainerHeight,\r\n  setAboutContainerHeight,\r\n  scrollToAbout,\r\n} from \"../reducer/jungleSwapSlice\";\r\nimport image from \"../images/JungleSwap_Home.png\";\r\nimport icon from \"../images/JungleSwap_Icon.png\";\r\n\r\nconst Home = () => {\r\n  const isFetchingUser = useSelector(\r\n    (state) => state.jungleSwap.isFetchingUser\r\n  );\r\n  const loggedInUser = useSelector((state) => state.jungleSwap.loggedInUser);\r\n  const plants = useSelector((state) => state.jungleSwap.plants);\r\n  const [query, setQuery] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const elementRef = useRef([]);\r\n\r\n  // Load plants and user data as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(fetchAllPlants());\r\n    !loggedInUser && dispatch(readUser());\r\n    const headerElementHeight = Math.round(\r\n      elementRef.current[0].getBoundingClientRect().height\r\n    );\r\n    dispatch(setHeaderContainerHeight(headerElementHeight));\r\n    const aboutElementHeight = Math.round(\r\n      elementRef.current[1].getBoundingClientRect().height\r\n    );\r\n    dispatch(setAboutContainerHeight(aboutElementHeight));\r\n  }, []);\r\n\r\n  // Handle plant search result if user types in query\r\n  useEffect(() => {\r\n    query ? dispatch(fetchQueryPlants(query)) : dispatch(fetchAllPlants());\r\n  }, [query]);\r\n\r\n  return (\r\n    <div>\r\n      {!plants && (\r\n        <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span class=\"visually-hidden\">           \r\n            <br /> <br /> Loading plants...\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      {isFetchingUser && (\r\n        <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n          <span class=\"visually-hidden\">            \r\n            <br /> <br /> Loading user data...\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      <header\r\n        className=\"text-center pt-5 pb-5 headerImg\"\r\n        ref={(element) => (elementRef.current[0] = element)}\r\n      >\r\n        <div className=\"row my-5\">\r\n          <div className=\"col-6 offset-3 my-5 borderAround\">\r\n            <h2 className=\"title mb-2\"> JungleSwap </h2>\r\n            <h5 className=\"mt-3 mb-5\"> Share your green heart </h5>\r\n            <div className=\"mb-5\">\r\n              <Link\r\n                className=\"biggerFontSize\"\r\n                onClick={() => dispatch(scrollToAbout())}\r\n              >               \r\n                Try it!\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <section ref={(element) => (elementRef.current[1] = element)}>\r\n        <div className=\"about centered container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-6 col-md-5 col-lg-6\">\r\n              <img className=\"image\" src={image} alt=\"plants\" />\r\n            </div>\r\n            <br />\r\n            <div className=\"about col-sm-6 col-md-5 col-lg-6 px-5 noOverflow\">\r\n              <h4> Welcome to JungleSwap! </h4>\r\n              <h5> Add green to your Home </h5>\r\n              <p>            \r\n                It\"s easy-peasy. <br />\r\n                Share your plant offshoots. <br />\r\n                Make money! <br />\r\n                Or swap them for another plant. <br />\r\n                Don\"t have any baby plants? <br />\r\n                You can simply shop and give a plant a new home.\r\n              </p>\r\n              <img className=\"icon\" src={icon} alt=\"icon\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section>\r\n        <div className=\"container mt-5\">\r\n          <div className=\"mt-5 mb-3\">\r\n            <h2> Plants </h2>\r\n            <hr />\r\n            <h4> Search a plant </h4>\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <input\r\n              className=\"smallWidth form-control\"\r\n              type=\"text\"\r\n              placeholder=\"Search...\"\r\n              value={query}\r\n              onChange={(event) => setQuery(event.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n            {plants &&\r\n              plants.map((plant) => {\r\n                const { _id, name, imageUrl, price } = plant;\r\n                return (\r\n                  <div className=\"col mb-5\" key={_id}>\r\n                    <div className=\"card card-medium-width text-center h-100\">\r\n                      <img\r\n                        className=\"card-img-top mediumPicSize\"\r\n                        src={imageUrl}\r\n                        alt={name}\r\n                      />\r\n                      <div className=\"card-body mb-5\">\r\n                        <h5> {name} </h5>\r\n                        <p> {price} € </p>\r\n                        <Link\r\n                          className=\"btn btn-outline-dark\"\r\n                          to={`/plants/read/${_id}`}\r\n                        >                        \r\n                          Details\r\n                        </Link>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { setError, setIsNewRequest, signUp } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst SignUp = () => {\r\n  const error = useSelector((state) => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign up\r\n  const handleSignUp = (event, history) => {\r\n    event.preventDefault();\r\n    const { username, email, password } = event.target;\r\n    const newUser = {\r\n      username: username.value,\r\n      email: email.value.toLowerCase(),\r\n      password: password.value,\r\n    };\r\n    dispatch(signUp({ newUser, history }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign Up </h2>\r\n        <form onSubmit={(event) => handleSignUp(event, history)}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputUsername\"> Username </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"InputUsername\"\r\n              name=\"username\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary mt-4 btn-outline-dark\"\r\n            formnovalidate=\"formnovalidate\"\r\n          >\r\n            Sign up\r\n          </button>\r\n          <p className=\"padding\"> Already have an account? </p>\r\n          <Link to={\"/signin\"}> Sign in </Link>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { setError, setIsNewRequest, signIn } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst SignIn = () => {\r\n  const error = useSelector((state) => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Clear variables and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    dispatch(setIsNewRequest(false));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Sign in\r\n  const handleSignIn = (event, history) => {\r\n    event.preventDefault();\r\n    const { email, password } = event.target;\r\n    const user = {\r\n      email: email.value,\r\n      password: password.value,\r\n    };\r\n    dispatch(signIn({ user, history }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container row mt-5 custom fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Sign In </h2>\r\n        <form onSubmit={(event) => handleSignIn(event, history)}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputEmail\"> Email address </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"InputEmail\"\r\n              name=\"email\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"InputPassword\"> Password </label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"InputPassword\"\r\n            />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary mt-4 btn-outline-dark\"\r\n            formnovalidate=\"formnovalidate\"\r\n          > \r\n            Sign in\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { logOut } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst LogOut = () => {\r\n  const intervalId = useSelector((state) => state.jungleSwap.intervalId);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Log out, stop interval, reset variables and scroll to top as soon as page loads\r\n  useEffect(() => dispatch(logOut({ intervalId, history })), []);\r\n\r\n  return <div />;\r\n};\r\n\r\nexport default LogOut;\r\n","import React, { useEffect } from \"react\";\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { createPlant, setError } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst CreatePlantForm = () => {\r\n  const loggedInUser = useSelector((state) => state.jungleSwap.loggedInUser);\r\n  const error = useSelector((state) => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads and scroll to plants section during cleanup\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Create plant\r\n  const handleCreatePlant = (event, history) => {\r\n    event.preventDefault();\r\n    const { name, description, size, plantImage, location, price } = event.target;\r\n    const image = plantImage.files[0];\r\n    const uploadForm = new FormData();\r\n    uploadForm.append(\"image\", image);\r\n    const plant = {\r\n      name: name.value,\r\n      description: description.value,\r\n      size: size.value,\r\n      location: location.value,\r\n      price: price.value,\r\n    };\r\n    dispatch(createPlant({ uploadForm, plant, history }));\r\n  };\r\n\r\n  if (!loggedInUser) return <Redirect to={\"/signup\"} />;\r\n\r\n  return (\r\n    <div className=\"container row mt-5 fullscreen\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-6\">\r\n        <h2 className=\"mb-5\"> Create a plant </h2>\r\n        <form onSubmit={(event) => handleCreatePlant(event, history)}>\r\n          <input\r\n            className=\"mb-4\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            placeholder=\"Enter name\"\r\n          />\r\n          <input\r\n            className=\"mb-4\"\r\n            name=\"description\"\r\n            type=\"text\"\r\n            placeholder=\"Enter description\"\r\n          />\r\n          <input\r\n            className=\"mb-4 smallWidth\"\r\n            name=\"size\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Size\"\r\n          />\r\n          cm <br />\r\n          <select className=\"mb-4 p-1\" name=\"location\" type=\"text\">\r\n            <option> Select location </option>\r\n            <option value=\"sun\"> sun </option>\r\n            <option value=\"shade\"> shade </option>\r\n            <option value=\"sun and shade\"> sun and shade </option>\r\n          </select>\r\n          <br />\r\n          <input\r\n            className=\"mb-4 smallWidth\"\r\n            name=\"price\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            placeholder=\"Price\"\r\n          />\r\n          € <br />\r\n          <input className=\"mb-4\" name=\"plantImage\" type=\"file\" />\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <div className=\"col-12\">\r\n            <button className=\"btn btn-sm btn-outline-dark\" type=\"submit\">\r\n              Create\r\n            </button>\r\n            <Link to={\"/\"}>\r\n              <button className=\"btn btn-sm mx-5\"> Go back </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePlantForm;\r\n","import React, { useEffect } from \"react\";\r\nimport { Link, Redirect, useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport {\r\n  readPlant,\r\n  deletePlant,\r\n  deleteRequest,\r\n  scrollToPlants,\r\n} from \"../reducer/jungleSwapSlice\";\r\n\r\nconst PlantDetails = () => {\r\n  const loggedInUser = useSelector((state) => state.jungleSwap.loggedInUser);\r\n  const requests = useSelector((state) => state.jungleSwap.requests);\r\n  const plant = useSelector((state) => state.jungleSwap.plant);\r\n  const { plantId } = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read plant data and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readPlant(plantId));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Delete plant\r\n  const handleDeletePlant = (imagePublicId, plantId, history, requests) => {\r\n    requests.forEach((request) => {\r\n      if (request.plant._id === plantId) {\r\n        dispatch(deleteRequest({ requestId: request._id, history: null }));\r\n      }\r\n    });\r\n    dispatch(deletePlant({ imagePublicId, plantId, history }));\r\n  };\r\n\r\n  if (!loggedInUser) return <Redirect to={\"/signup\"} />;\r\n\r\n  const {\r\n    _id,\r\n    name,\r\n    description,\r\n    size,\r\n    imageUrl,\r\n    imagePublicId,\r\n    location,\r\n    price,\r\n    creator,\r\n  } = plant;\r\n  if (!creator)\r\n    return (\r\n      <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span class=\"visually-hidden\">       \r\n          <br /> <br /> Loading plant details...\r\n        </span>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"container mt-5 row row-md-10 offset-md-4\">\r\n      <div className=\"mt-4 mb-3 pt-4 container\">\r\n        <h2> Plant details </h2>\r\n      </div>\r\n      <div className=\"col\">\r\n        <div className=\"card cardMediumWidth\">\r\n          {imageUrl && (\r\n            <img\r\n              className=\"card-img-top mediumPicSize\"\r\n              src={imageUrl}\r\n              alt={name}\r\n            />\r\n          )}\r\n          <div className=\"ml-2 mt-2\">     \r\n            <span> Name: </span> {name}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Description: </span> {description}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Size: </span> {size} cm\r\n          </div>\r\n          <div className=\"ml-2 mt-2\">\r\n            <span> Likes: </span> {location}\r\n          </div>\r\n          <div className=\"ml-2 mt-2\"> \r\n            <span> Price: </span> {price} €\r\n          </div>\r\n          <div className=\"ml-2 mt-2 col justify-content-center\">\r\n            <div className=\"row-2 justify-content-center\">\r\n              <div className=\"card-body\">\r\n                {loggedInUser._id === creator._id ? (\r\n                  <div>\r\n                    <Link to={\"/plants/update\"}>\r\n                      <button className=\"btn btn-sm ml-2 btn-outline-dark\">\r\n                        Update\r\n                      </button>\r\n                    </Link>\r\n                    <button\r\n                      className=\"btn btn-sm ml-2 btn-outline-dark\"\r\n                      onClick={() =>\r\n                        handleDeletePlant(imagePublicId, _id, history, requests)\r\n                      }\r\n                    > \r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <Link to=\"/plants/checkout\">\r\n                      <button className=\"btn btn-sm ml-2 btn-outline-dark\">\r\n                        Buy\r\n                      </button>\r\n                    </Link>\r\n                    <Link to=\"/requests/create\">\r\n                      <button className=\"btn btn-sm ml-2 btn-outline-dark\">\r\n                        Swap\r\n                      </button>\r\n                    </Link>\r\n                  </div>\r\n                )}\r\n                <Link to={\"/\"} onClick={() => dispatch(scrollToPlants())}>\r\n                  <button className=\"btn btn-sm ml-2\"> Go back </button>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantDetails;\r\n","import React, { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { imageChange, updatePlant, setPlant } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst UpdatePlantForm = () => {\r\n  const plant = useSelector((state) => state.jungleSwap.plant);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => scroll.scrollToTop(), []);\r\n\r\n  // Check which plant values changed\r\n  const handlePlantEntryChange = ({ target }, plant, itemNumber) => {\r\n    const clonePlant = JSON.parse(JSON.stringify(plant));\r\n    // eslint-disable-next-line default-case\r\n    switch (itemNumber) {\r\n      case 0:\r\n        clonePlant.name = target.value;\r\n        break;\r\n      case 1:\r\n        clonePlant.description = target.value;\r\n        break;\r\n      case 2:\r\n        clonePlant.size = target.value;\r\n        break;\r\n      case 3:\r\n        clonePlant.location = target.value;\r\n        break;\r\n      case 4:\r\n        clonePlant.price = target.value;\r\n    }\r\n    dispatch(setPlant(clonePlant));\r\n  };\r\n\r\n  // Plant image changed\r\n  const handleImageChange = ({ target }, plant) => {\r\n    const image = target.files[0];\r\n    const { imagePublicId } = plant;\r\n    const destroyImageData = {\r\n      imagePublicId,\r\n    };\r\n    dispatch(imageChange({ destroyImageData, image, plant }));\r\n  };\r\n\r\n  const handleUpdatePlant = (\r\n    { _id, name, description, size, imageUrl, imagePublicId, location, price },\r\n    history\r\n  ) => {\r\n    const updatedPlant = {\r\n      name,\r\n      description,\r\n      size,\r\n      imageUrl,\r\n      imagePublicId,\r\n      location,\r\n      price,\r\n    };\r\n    dispatch(updatePlant({ plantId: _id, updatedPlant, history }));\r\n  };\r\n\r\n  const { _id, name, description, size, imageUrl, price } = plant;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> Update your plant </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <img className=\"mb-2 smallPicSize\" src={imageUrl} alt={name} />\r\n          <div className=\"card-body\">\r\n            <input\r\n              className=\"mb-2\"\r\n              onChange={(event) => handleImageChange(event, plant)}\r\n              type=\"file\"\r\n            />\r\n            <input\r\n              className=\"mb-2\"\r\n              type=\"text\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 0)}\r\n              value={name}\r\n            />\r\n            <input\r\n              className=\"mb-2\"\r\n              type=\"text\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 1)}\r\n              value={description}\r\n            />\r\n            <input\r\n              className=\"mb-2 smallWidth\"\r\n              type=\"number\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 2)}\r\n              value={size}\r\n            />\r\n            cm <br />\r\n            <select\r\n              className=\"mb-2\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 3)}\r\n              name=\"location\"\r\n              type=\"text\"\r\n              placeholder=\"Select\"\r\n            >\r\n              <option value=\"sun\"> sun </option>\r\n              <option value=\"shade\"> shade </option>\r\n              <option value=\"sun and shade\"> sun and shade </option>\r\n            </select>\r\n            <br />\r\n            <input\r\n              className=\"mb-4 smallWidth\"\r\n              name=\"price\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              onChange={(event) => handlePlantEntryChange(event, plant, 4)}\r\n              value={price}\r\n            />\r\n            €\r\n            <div className=\"row justify-content-around\">\r\n              <button\r\n                className=\"btn btn-sm btn-outline-dark\"\r\n                onClick={() => handleUpdatePlant(plant, history)}\r\n              >\r\n                Save changes\r\n              </button>\r\n              <Link to={`/plants/read/${_id}`}>\r\n                <button className=\"btn btn-sm mx-2\"> Go back </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdatePlantForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport { payPlant, createPayment, scrollToPlants } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst CheckoutForm = () => {\r\n  const [isSucceeded, setIsSucceeded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [paymentError, setPaymentError] = useState(null);\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const clientSecret = useSelector(state => state.jungleSwap.clientSecret);\r\n  const plant = useSelector(state => state.jungleSwap.plant);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Create payment as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      dispatch(createPayment(plant))\r\n      return () => {\r\n        history.push(\"/\");\r\n        dispatch(scrollToPlants());\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  // Card styling\r\n  const cardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: \"Arial, sans-serif\",\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": { color: \"#32325d\" }\r\n      },\r\n      invalid: {\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\"\r\n      }\r\n    }\r\n  };\r\n\r\n  // Listen for changes in Card element and display any errors as customer types card details\r\n  const handleChange = async event => {\r\n    setIsDisabled(event.empty);\r\n    setPaymentError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  // Submit payment\r\n  const handleSubmitPayment = async event => {\r\n    event.preventDefault();\r\n    setIsProcessing(true);\r\n    const payload = await stripe.confirmCardPayment(\r\n      clientSecret,\r\n      { payment_method: { card: elements.getElement(CardElement) } }\r\n    );\r\n    if (payload.error) {\r\n      setPaymentError(`Payment failed ${payload.error.message}`);\r\n      setIsProcessing(false);\r\n    }\r\n    else {\r\n      setPaymentError(null);\r\n      setIsProcessing(false);\r\n      setIsSucceeded(true);\r\n    }\r\n  };\r\n\r\n  const { _id, name, price } = plant;\r\n  return (\r\n    <div className=\"container col-9\">\r\n      <form className=\"checkoutForm mt-5\" id=\"payment-form\" onSubmit={handleSubmitPayment}>\r\n        <h2 className=\"text-center mb-2 p-2\"> {name} </h2>\r\n        <h3 className=\"text-center mb-4 p-2\"> {price} € </h3>\r\n        <CardElement\r\n          className=\"p-2\"\r\n          id=\"card-element\"\r\n          options={cardStyle}\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <button onClick={() => dispatch(payPlant(history))} className=\"btn btn-sm mt-5 mb-4\" disabled={isProcessing || isDisabled || isSucceeded} id=\"submit\">\r\n            <span id=\"button-text\">\r\n              {isProcessing ? <div className=\"spinner\" id=\"spinner\" /> : \"Pay now\"}\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {/* Show any error that happens when processing the payment */\r\n          paymentError && (<div className=\"card-error\" role=\"alert\"> {paymentError} </div>)\r\n        /* Show success message upon completion */}\r\n        <p className={isSucceeded ? \"result-message text-center\" : \"result-message hidden text-center\"}>\r\n          Payment succeeded.\r\n        </p>\r\n      </form>\r\n      <div className=\"row justify-content-center\">\r\n        {\r\n          isSucceeded ? (\r\n            <Link to={\"/\"} onClick={() => dispatch(scrollToPlants())}> <button className=\"btn btn-sm\"> Go back </button> </Link>\r\n          )\r\n            : (\r\n              <Link to={`/plants/read/${_id}`}> <button className=\"btn btn-sm\"> Go back </button> </Link>\r\n            )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;","import React, { useEffect } from \"react\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport CheckoutForm from \"../components/CheckoutForm\";\r\n\r\nconst promise = loadStripe(\r\n  \"pk_test_51IQBsPA6EAM4YnfDyrjHWnLHzZ5KkI9tsERzYhBGVoctZBrFUb4Sda035HvcQKpp7thFiqW6QmO8ytPbOAMTg33z00cHvcbojv\"\r\n);\r\n\r\nconst CheckoutPage = () => {\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => scroll.scrollToTop(), []);\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-6 offset-1 offset-md-5 App\">\r\n        <Elements stripe={promise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutPage;\r\n","import React, { useEffect } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { fetchAllRequests, setIsNewRequest } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst RequestsPage = () => {\r\n  const loggedInUser = useSelector((state) => state.jungleSwap.loggedInUser);\r\n  const isUserChange = useSelector((state) => state.jungleSwap.isUserChange);\r\n  const requests = useSelector((state) => state.jungleSwap.requests);\r\n  const amountOfRequests = useSelector(\r\n    (state) => state.jungleSwap.amountOfRequests\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  // Fetch all requests and reset values as soon as page loads and reset values during cleanup\r\n  useEffect(() => {\r\n    const handleResetAll = () => {\r\n      dispatch(setIsNewRequest(false));\r\n      scroll.scrollToTop();\r\n    };\r\n\r\n    dispatch(fetchAllRequests(isUserChange));\r\n    handleResetAll();\r\n    return () => handleResetAll();\r\n  }, []);\r\n\r\n  if (!loggedInUser) return <Redirect to={\"/signup\"} />;\r\n\r\n  if (!requests)\r\n    return (\r\n      <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span class=\"visually-hidden\">\r\n          <br /> <br /> Loading requests...\r\n        </span>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2> Your messages </h2>\r\n        <h3 className=\"mb-4\"> [{amountOfRequests}] </h3>\r\n        <Link to={\"/\"}>\r\n          <button className=\"btn btn-sm mt-4\"> Go back </button>\r\n        </Link>\r\n        {requests.map((request) => {\r\n          const { _id, buyer, seller, plant } = request;\r\n          return (\r\n            seller._id === loggedInUser._id && (\r\n              <div className=\"card p-3 mt-4 \" key={_id}>\r\n                <h4> Request for: {plant.name} </h4>\r\n                <h5> by: {buyer.username} </h5>\r\n                <div>\r\n                  <Link\r\n                    className=\"btn btn-outline-dark\"\r\n                    to={`/requests/read/${_id}`}\r\n                  >\r\n                    Details\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            )\r\n          );\r\n        })}\r\n        {amountOfRequests !== 0 && (\r\n          <Link to={\"/\"}>\r\n            <button className=\"btn btn-sm mt-4\"> Go back </button>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestsPage;\r\n","import React, { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { createRequest, setError } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst CreateRequestForm = () => {\r\n  const plant = useSelector((state) => state.jungleSwap.plant);\r\n  const error = useSelector((state) => state.jungleSwap.error);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Set variable and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(setError(null));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  // Create request\r\n  const handleCreateRequest = (event, { _id, creator }, history) => {\r\n    event.preventDefault();\r\n    const { message } = event.target;\r\n    const newRequest = {\r\n      seller: creator._id,\r\n      plant: _id,\r\n      message: message.value,\r\n    };\r\n    dispatch(createRequest({ newRequest, history }));\r\n  };\r\n\r\n  const { _id, name } = plant;\r\n  return (\r\n    <div className=\"container row mt-5\">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-4\"> Your message </h2>\r\n        <h3 className=\"mb-4\"> {name} </h3>\r\n        <form onSubmit={(event) => handleCreateRequest(event, plant, history)}>\r\n          <div>\r\n            <textarea className=\"mb-4\" name=\"message\" cols=\"35\" rows=\"7\" />\r\n          </div>\r\n          {error && <p className=\"warningColor\"> {error} </p>}\r\n          <button className=\"btn btn-sm btn-outline-dark\" type=\"submit\">\r\n            Send\r\n          </button>\r\n          <Link to={`/plants/read/${_id}`}>           \r\n            <button className=\"btn btn-sm mx-2\"> Go back </button>\r\n          </Link>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRequestForm;\r\n","import React, { useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { readRequest, deleteRequest } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst RequestDetails = () => {\r\n  const request = useSelector((state) => state.jungleSwap.request);\r\n  const { requestId } = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Read request and scroll to top as soon as page loads\r\n  useEffect(() => {\r\n    dispatch(readRequest(requestId));\r\n    scroll.scrollToTop();\r\n  }, []);\r\n\r\n  const { _id, buyer, plant, message, reply } = request;\r\n  if (!buyer || !plant)\r\n    return (\r\n      <div class=\"spinner-grow text-success m-5\" role=\"status\">\r\n        <span class=\"visually-hidden\">         \r\n          <br /> <br /> Loading request...\r\n        </span>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-5 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mb-5\"> Your request </h2>\r\n        <h4> for: {plant.name} </h4>\r\n        <h5> by: {buyer.username} </h5>\r\n        <p> {message} </p>\r\n        {reply && (\r\n          <div>\r\n            <h5> Your reply: </h5>\r\n            <p> {reply} </p>\r\n          </div>\r\n        )}\r\n        <div>\r\n          {!reply && (\r\n            <Link to={`/requests/update/${_id}`}>\r\n              <button className=\"btn btn-sm ml-2 btn-outline-dark\">  \r\n                Reply\r\n              </button>\r\n            </Link>\r\n          )}\r\n          <button\r\n            className=\"btn btn-sm ml-2 btn-outline-dark\"\r\n            onClick={() => dispatch(deleteRequest({ requestId, history }))}\r\n          > \r\n            Delete\r\n          </button>\r\n        </div>\r\n        <Link to={\"/requests/fetch\"} onClick={scroll.scrollToTop}>\r\n          <button className=\"btn btn-sm mt-4\"> Go back </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestDetails;\r\n","import React, { useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport { setRequest, updateRequest } from \"../reducer/jungleSwapSlice\";\r\n\r\nconst UpdateRequestForm = () => {\r\n  const request = useSelector((state) => state.jungleSwap.request);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // Scroll to top as soon as page loads\r\n  useEffect(() => scroll.scrollToTop(), []);\r\n\r\n  // Create reply\r\n  const handleCreateReply = ({ target }, request) => {\r\n    const cloneRequest = JSON.parse(JSON.stringify(request));\r\n    cloneRequest.reply = target.value;\r\n    dispatch(setRequest(cloneRequest));\r\n  };\r\n\r\n  // Update request\r\n  const handleUpdateRequest = (\r\n    { _id, buyer, seller, plant, message, reply },\r\n    history\r\n  ) => {\r\n    const updatedRequest = {\r\n      buyer,\r\n      seller,\r\n      plant,\r\n      message,\r\n      reply,\r\n    };\r\n    dispatch(updateRequest({ requestId: _id, updatedRequest, history }));\r\n  };\r\n\r\n  const { _id, message } = request;\r\n  return (\r\n    <div className=\"container row mt-5 \">\r\n      <div className=\"mt-2 col-11 col-md-5 offset-1 offset-md-5\">\r\n        <h2 className=\"mt-5 mb-4\"> Reply your request </h2>\r\n        <div className=\"card cardSmallWidth mb-5\">\r\n          <div className=\"card-body\">\r\n            <p> {message} </p>\r\n            <textarea\r\n              className=\"mb-4\"\r\n              name=\"reply\"\r\n              cols=\"31\"\r\n              rows=\"6\"\r\n              placeholder=\"Your reply\"\r\n              onChange={(event) => handleCreateReply(event, request)}\r\n            />\r\n            <div className=\"row justify-content-around\">\r\n              <button\r\n                className=\"btn btn-sm btn-outline-dark\"\r\n                onClick={() => handleUpdateRequest(request, history)}\r\n              >\r\n                Submit\r\n              </button>\r\n              <Link to={`/requests/read/${_id}`}>   \r\n                <button className=\"btn btn-sm mx-2\"> Go back </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateRequestForm;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <div>\r\n        <h2>\r\n          Oh-oh! <br /> <br />\r\n          We think you got lost in the jungle!\r\n        </h2>\r\n        <h3> 404 Not Found </h3>\r\n        <Link to={\"/\"}>\r\n          <button className=\"btn btn-sm ml-2\"> Take me home </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst KommunicateChat = () => {\r\n  // Create launcher icon as soon as page loads\r\n  useEffect(\r\n    () => {\r\n      (\r\n        (d, m) => {\r\n          const kommunicateSettings = {\r\n            \"appId\": \"10b22c52854a305b79bbdecc356bea5\",\r\n            \"popupWidget\": true,\r\n            \"automaticChatOpenOnNavigation\": true\r\n          };\r\n          const s = document.createElement(\"script\");\r\n          s.type = \"text/javascript\";\r\n          s.async = true;\r\n          s.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n          const h = document.getElementsByTagName(\"head\")[0];\r\n          h.appendChild(s);\r\n          window.kommunicate = m;\r\n          m._globals = kommunicateSettings;\r\n        }\r\n      )\r\n        (\r\n          document,\r\n          window.kommunicate || {}\r\n        );\r\n    },\r\n    []\r\n  );\r\n\r\n  return (<div />);\r\n};\r\n\r\nexport default KommunicateChat;","import React from \"react\";\r\nimport { Route, Switch, withRouter } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.min.css\";\r\n\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./screens/Home\";\r\nimport SignUp from \"./screens/SignUp\";\r\nimport SignIn from \"./screens/SignIn\";\r\nimport LogOut from \"./components/LogOut\";\r\nimport CreatePlantForm from \"./screens/CreatePlantForm\";\r\nimport PlantDetails from \"./screens/PlantDetails\";\r\nimport UpdatePlantForm from \"./screens/UpdatePlantForm\";\r\nimport CheckoutPage from \"./screens/CheckoutPage\";\r\nimport RequestsPage from \"./screens/RequestsPage\";\r\nimport CreateRequestForm from \"./screens/CreateRequestForm\";\r\nimport RequestDetails from \"./screens/RequestDetails\";\r\nimport UpdateRequestForm from \"./screens/UpdateRequestForm\";\r\nimport NotFound from \"./screens/NotFound\";\r\nimport KommunicateChat from \"./components/Chat\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div class=\"main\">\r\n      <NavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"/plants/create\">\r\n          <CreatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/read/:plantId\">\r\n          <PlantDetails />\r\n        </Route>\r\n        <Route path=\"/plants/update\">\r\n          <UpdatePlantForm />\r\n        </Route>\r\n        <Route path=\"/plants/checkout\">\r\n          <CheckoutPage />\r\n        </Route>\r\n\r\n        <Route path=\"/requests/fetch\">\r\n          <RequestsPage />\r\n        </Route>\r\n        <Route path=\"/requests/create\">\r\n          <CreateRequestForm />\r\n        </Route>\r\n        <Route path=\"/requests/read/:requestId\">\r\n          <RequestDetails />\r\n        </Route>\r\n        <Route path=\"/requests/update\">\r\n          <UpdateRequestForm />\r\n        </Route>\r\n\r\n        <Route path=\"/signup\">\r\n          <SignUp />\r\n        </Route>\r\n        <Route path=\"/signin\">\r\n          <SignIn />\r\n        </Route>\r\n        <Route path=\"/logout\">\r\n          <LogOut />\r\n        </Route>\r\n\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n      <KommunicateChat />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport jungleSwapSlice from \"./reducer/jungleSwapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: { jungleSwap: jungleSwapSlice },\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}